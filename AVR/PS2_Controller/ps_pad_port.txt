/*  ATmega168P専用プログラム  */
/*  AVR PlayStationController */
/*  Dualshock2対応            */

/*
   SwitchRecv[]のカッコには0から3まで入る。
   SwitchRecv[]にはプレステのボタンが押されると16進数が
   帰ってくるようになっている。
   
   例えば使いたいボタンが△だとする。
   if(SwitchRecv[1] == 0x01);
   とすることで△ボタンが押したときの命令を書くことが可能。

   他のボタンは下記の表を参照

	SwitchRecv[0] ==
		0x01	SELECT		0x10	方向キー↑
		0x02	L3		0x20	方向キー→
		0x04	R3		0x40	方向キー↓
		0x08	START		0x80	方向キー←

	SwitchRecv[1] == 
		0x01	L2		0x10	△
		0x02	R2		0x20	○
		0x04	L1		0x40	×
		0x08	R1		0x80	□

	SwitchRecv[2]
		アナログスティックLのx軸0〜255（中心127）

	SwitchRecv[3]
		アナログスティックLのy軸0〜255（中心127）
*/


#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/delay.h>
#include <util/delay.h>
#include <stdlib.h>
#define sbi(BYTE,BIT) BYTE|=_BV(BIT) // BYTEの指定BITに1をセット
#define cbi(BYTE,BIT) BYTE&=~_BV(BIT) // BYTEの指定BITをクリア


/* PSコントローラーボタン定義 */
#define up         SwitchRecv[0]==0x10
#define down       SwitchRecv[0]==0x40
#define right      SwitchRecv[0]==0x20
#define left       SwitchRecv[0]==0x80

#define triangle   SwitchRecv[1]==0x10
#define cross      SwitchRecv[1]==0x40
#define circle     SwitchRecv[1]==0x20
#define square     SwitchRecv[1]==0x80

#define l1         SwitchRecv[1]==0x04
#define r1		   SwitchRecv[1]==0x08
#define l2		   SwitchRecv[1]==0x01
#define r2		   SwitchRecv[1]==0x02
#define l3		   SwitchRecv[0]==0x02		//L3, R3はアナログスティックの押しこみボタン
#define r3		   SwitchRecv[0]==0x04

#define start	   SwitchRecv[0]==0x08
#define select     SwitchRecv[0]==0x01

#define analog_x   SwitchRecv[2]   // 左0 < 中心127 < 右255 
#define analog_y   SwitchRecv[3]   // 上0 < 中心127 < 下255


volatile uint16_t SwitchRecv[8]; //SwitchRecv[]をグローバル変数で宣言


/** UART設定 **/	  // 工場出荷時はCKDIV8(1/8MHz)となっているのでFusesからCKDIV8をはずす
#define FOSC 8000000  // 8MHz安定
#define BAUD 38400    // 38400bpsじゃないとATTiny2313から信号を受信できない
#define MYUBRR FOSC/16/BAUD-1 // UART分周率

/* USART設定 */
void usart_init(unsigned int ubrr){
  UBRR0H = (unsigned char)(ubrr>>8); // ボーレート上位8bit
  UBRR0L = (unsigned char)ubrr; // ボーレート下位8bit
  UCSR0A = (0<<U2X0); // 等速
  UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // 送受信許可、受信完了割り込み許可
  UCSR0C = (0<<UMSEL00)|(3<<UCSZ00)|(1<<USBS0)|(0<<UPM00);
  // フレーム設定 非同期通信 8ビット 1ストップビット パリティ無し
}

/* NoOperation */
void nop(int count){
	int i;
	for(i = 0; i < count; i++){
		_delay_ms(100);
	}
}

/* intの桁数を返す */
char getDigit(int n){
  char i;
  i = 0;
  while(n>0){
    n /= 10;
    i++;
  }
  return i;
}

/* int->String変換 */
char *intToStr(int n, char *buf){ // 変換する数、作業領域
  int i, digit;
  digit = getDigit(n); // 桁数
  for(i = digit-1; i >= 0; i--){ // intは最大5桁
    buf[i] = n%10+'0';
    n /= 10;
  }
  buf[digit] = '\0'; // 行末改行
  return buf;
}

/* UARTで文字列送信 */
void usart_sendStr(char *str){
  while(*str != '\0'){
    loop_until_bit_is_set(UCSR0A,UDRE0); // 送信データレジスタ空きまで待機
    UDR0 = *str++; // 1文字送信、1文字進む
  }
}

/* ADコンバータ設定 */
void adc_init(void){
  ADMUX = (0<<REFS0); // 外部基準電圧
  ADCSRA =(1<<ADEN)|(1<<ADSC)|(0<<ADPS0);
  // A/D変換許可、1回目変換開始(調整)、分周率2
}

/* ピンを指定してAD変換 return 0-1023 */
int adc_convert(char pin){
  int ad;
  ADMUX = pin; // AD変換入力ピン
  cbi(ADCSRA,ADIF);
  sbi(ADCSRA,ADSC); // 変換開始
  loop_until_bit_is_set(ADCSRA,ADIF); // 変換完了まで待つ
  ad = ADCL; // 下位8bit取得
  return ad += (ADCH<<8); // 上位2bit取得
}

/* ATTiny2313からPSコントローラーの信号を受信 */
ISR(USART_RX_vect){

    static uint16_t buff;
    uint16_t data,temp;

    data = UDR0;

    if(!(data & 0x08)){
        buff = data;
        return;
    }
    if((data & 0x07)==(buff & 0x07)){
        temp  = buff & 0xF0;
        temp |= data >> 4;
        SwitchRecv[data & 0x07] = temp;
    }
}


int main(void){
	DDRB = 0xff;
	DDRD = 0xff;
	DDRC = 0xff;

	usart_init(MYUBRR);   // USART設定
//  adc_init();           // ADConverter設定

//  int ad,ad2,ad3;
    char buf[6];

	TCCR0A = 0b10100011;  // OCR0A OCR0B の設定
	TCCR0B = 0b00000001;
	TCCR2A = 0b10100011;  // OCR2A OCR2B の設定
	TCCR2B = 0b00000001;

    sei();    //割り込み許可(許可しないとPSコントローラーの信号が受けれない)

    for(;;){
	   switch(SwitchRecv[0]+(SwitchRecv[1]<<8)){ //二つの関数をあわせたもの(同時押しが出来ない)
            case 0x0001:	//SELECT

                break;
            case 0x0002:	//L3

                break;
            case 0x0004:	//R3

                break;
            case 0x0008:	//START

                break;
            case 0x0010:	//UP
				PORTB = 0x01;
                break;
            case 0x0020:	//RIGHT
				PORTB = 0x02;
                break;
            case 0x0040:	//DOWN
				PORTB = 0x04;
                break;
            case 0x0080:	//LEFT
				PORTB = 0x0f;
                break;
            case 0x0100:	//L2

                break;
            case 0x0200:	//R2

                break;
            case 0x0400:	//L1

                break;
            case 0x0800:	//R1

                break;
            case 0x1000:	//TRIANGLE
				PORTB = 0x10;
                break;
            case 0x2000:	//CIRCLE
				PORTB = 0x20;
                break;
            case 0x4000:	//CROSS
				PORTB = 0x40;
                break;
            case 0x8000:	//SQUARE
				PORTB = 0x80; 
                break;
            default:		//そのほか
				PORTB = 0x00;

        }
	}
}

void straight(int c){
	OCR0A = 0xff;
	OCR0B = 0x00;
	OCR2A = 0x00;
	OCR2B = 0xff;
}

void back(int c){
	OCR0A = 0x00;
	OCR0B = 0xff;
	OCR2A = 0xff;
	OCR2B = 0x00;
}

void roll_left(int c){
	OCR0A = 0xff;
	OCR0B = 0x00;
	OCR2A = 0xff;
	OCR2B = 0x00;
}

void roll_right(int c){
	OCR0A = 0x00;
	OCR0B = 0xff;
	OCR2A = 0x00;
	OCR2B = 0xff;
}	

void stop(){   //モーター全出力による電磁ロック
	OCR0A = 0xff;
	OCR0B = 0xff;
	OCR2A = 0xff;
	OCR2B = 0xff;
}
