
自動機とかpart1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001194  00001228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001194  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  0080011c  0080011c  00001244  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002e7  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000107e  00000000  00000000  0000154b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f1  00000000  00000000  000025c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018bf  00000000  00000000  000028ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  0000417c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f6  00000000  00000000  0000441c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000450  00000000  00000000  00004712  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004c8  00000000  00000000  00004b62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d0 e1       	ldi	r29, 0x10	; 16
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e4 e9       	ldi	r30, 0x94	; 148
      90:	f1 e1       	ldi	r31, 0x11	; 17
      92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
      98:	ac 31       	cpi	r26, 0x1C	; 28
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
      9e:	11 e0       	ldi	r17, 0x01	; 1
      a0:	ac e1       	ldi	r26, 0x1C	; 28
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a5 34       	cpi	r26, 0x45	; 69
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 28 07 	call	0xe50	; 0xe50 <main>
      b2:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <up_touch>:
}


/**********タッチセンサー関連**********/
bool up_touch(void){
	return PINB & _BV(0);
      ba:	83 b1       	in	r24, 0x03	; 3
}
      bc:	81 70       	andi	r24, 0x01	; 1
      be:	08 95       	ret

000000c0 <down_touch>:

bool down_touch(void){
	return PINB & _BV(1);
      c0:	83 b1       	in	r24, 0x03	; 3
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	96 95       	lsr	r25
      c6:	87 95       	ror	r24
}
      c8:	81 70       	andi	r24, 0x01	; 1
      ca:	08 95       	ret

000000cc <right_touch>:

bool right_touch(void){
	return PINB & _BV(2);
      cc:	83 b1       	in	r24, 0x03	; 3
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	96 95       	lsr	r25
      d2:	87 95       	ror	r24
      d4:	96 95       	lsr	r25
      d6:	87 95       	ror	r24
}
      d8:	81 70       	andi	r24, 0x01	; 1
      da:	08 95       	ret

000000dc <left_touch>:

bool left_touch(void){
	return PINB & _BV(5);
      dc:	83 b1       	in	r24, 0x03	; 3
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	45 e0       	ldi	r20, 0x05	; 5
      e2:	96 95       	lsr	r25
      e4:	87 95       	ror	r24
      e6:	4a 95       	dec	r20
      e8:	e1 f7       	brne	.-8      	; 0xe2 <left_touch+0x6>
}
      ea:	81 70       	andi	r24, 0x01	; 1
      ec:	08 95       	ret

000000ee <usart_init>:
#define MYUBRR FOSC/16/BAUD-1 // UART分周率


/* USART設定 */
void usart_init(unsigned int ubrr){
  UBRR0H = (unsigned char)(ubrr>>8); // ボーレート上位8bit
      ee:	90 93 c5 00 	sts	0x00C5, r25
  UBRR0L = (unsigned char)ubrr; // ボーレート下位8bit
      f2:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0A = (0<<U2X0); // 等速
      f6:	10 92 c0 00 	sts	0x00C0, r1
  UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // 送受信許可、受信完了割り込み許可
      fa:	88 e9       	ldi	r24, 0x98	; 152
      fc:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (0<<UMSEL00)|(3<<UCSZ00)|(1<<USBS0)|(0<<UPM00);
     100:	8e e0       	ldi	r24, 0x0E	; 14
     102:	80 93 c2 00 	sts	0x00C2, r24
  // フレーム設定 非同期通信 8ビット 1ストップビット パリティ無し
}
     106:	08 95       	ret

00000108 <nop>:

/* NoOperation */
void nop(int count){
     108:	40 e0       	ldi	r20, 0x00	; 0
     10a:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     10c:	68 ec       	ldi	r22, 0xC8	; 200
     10e:	70 e0       	ldi	r23, 0x00	; 0
     110:	0a c0       	rjmp	.+20     	; 0x126 <nop+0x1e>
	int i;
	for(i = 0; i < count; i++){
     112:	28 ee       	ldi	r18, 0xE8	; 232
     114:	33 e0       	ldi	r19, 0x03	; 3
     116:	fb 01       	movw	r30, r22
     118:	31 97       	sbiw	r30, 0x01	; 1
     11a:	f1 f7       	brne	.-4      	; 0x118 <nop+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     11c:	21 50       	subi	r18, 0x01	; 1
     11e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     120:	d1 f7       	brne	.-12     	; 0x116 <nop+0xe>
     122:	4f 5f       	subi	r20, 0xFF	; 255
     124:	5f 4f       	sbci	r21, 0xFF	; 255
     126:	48 17       	cp	r20, r24
     128:	59 07       	cpc	r21, r25
     12a:	9c f3       	brlt	.-26     	; 0x112 <nop+0xa>
		_delay_ms(100);
	}
}
     12c:	08 95       	ret

0000012e <getDigit>:

/* intの桁数を返す */
char getDigit(int n){
     12e:	40 e0       	ldi	r20, 0x00	; 0
     130:	06 c0       	rjmp	.+12     	; 0x13e <getDigit+0x10>
  char i;
  i = 0;
  while(n>0){
    n /= 10;
     132:	6a e0       	ldi	r22, 0x0A	; 10
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	0e 94 a1 08 	call	0x1142	; 0x1142 <__divmodhi4>
     13a:	cb 01       	movw	r24, r22
    i++;
     13c:	4f 5f       	subi	r20, 0xFF	; 255

/* intの桁数を返す */
char getDigit(int n){
  char i;
  i = 0;
  while(n>0){
     13e:	18 16       	cp	r1, r24
     140:	19 06       	cpc	r1, r25
     142:	bc f3       	brlt	.-18     	; 0x132 <getDigit+0x4>
    n /= 10;
    i++;
  }
  return i;
}
     144:	84 2f       	mov	r24, r20
     146:	08 95       	ret

00000148 <intToStr>:

/* int->String変換 */
char *intToStr(int n, char *buf){ // 変換する数、作業領域
     148:	cf 92       	push	r12
     14a:	df 92       	push	r13
     14c:	ef 92       	push	r14
     14e:	ff 92       	push	r15
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	ec 01       	movw	r28, r24
     15a:	8b 01       	movw	r16, r22
  int i, digit;

  if(n == 0){
     15c:	00 97       	sbiw	r24, 0x00	; 0
     15e:	31 f4       	brne	.+12     	; 0x16c <intToStr+0x24>
	buf[0] = '0';
     160:	80 e3       	ldi	r24, 0x30	; 48
     162:	db 01       	movw	r26, r22
     164:	8c 93       	st	X, r24
	buf[1] = '\0';
     166:	11 96       	adiw	r26, 0x01	; 1
     168:	1c 92       	st	X, r1
     16a:	24 c0       	rjmp	.+72     	; 0x1b4 <intToStr+0x6c>
	return buf;
  }

  digit = getDigit(n); // 桁数
     16c:	0e 94 97 00 	call	0x12e	; 0x12e <getDigit>
     170:	e8 2e       	mov	r14, r24
     172:	ff 24       	eor	r15, r15
  for(i = digit-1; i >= 0; i--){ // intは最大5桁
     174:	f7 01       	movw	r30, r14
     176:	31 97       	sbiw	r30, 0x01	; 1
     178:	68 01       	movw	r12, r16
     17a:	ce 0e       	add	r12, r30
     17c:	df 1e       	adc	r13, r31
     17e:	12 c0       	rjmp	.+36     	; 0x1a4 <intToStr+0x5c>
    buf[i] = n%10+'0';
     180:	ce 01       	movw	r24, r28
     182:	6a e0       	ldi	r22, 0x0A	; 10
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	0e 94 a1 08 	call	0x1142	; 0x1142 <__divmodhi4>
     18a:	80 5d       	subi	r24, 0xD0	; 208
     18c:	d6 01       	movw	r26, r12
     18e:	8c 93       	st	X, r24
    n /= 10;
     190:	ce 01       	movw	r24, r28
     192:	6a e0       	ldi	r22, 0x0A	; 10
     194:	70 e0       	ldi	r23, 0x00	; 0
     196:	0e 94 a1 08 	call	0x1142	; 0x1142 <__divmodhi4>
     19a:	eb 01       	movw	r28, r22
	buf[1] = '\0';
	return buf;
  }

  digit = getDigit(n); // 桁数
  for(i = digit-1; i >= 0; i--){ // intは最大5桁
     19c:	31 97       	sbiw	r30, 0x01	; 1
     19e:	08 94       	sec
     1a0:	c1 08       	sbc	r12, r1
     1a2:	d1 08       	sbc	r13, r1
     1a4:	bf ef       	ldi	r27, 0xFF	; 255
     1a6:	ef 3f       	cpi	r30, 0xFF	; 255
     1a8:	fb 07       	cpc	r31, r27
     1aa:	51 f7       	brne	.-44     	; 0x180 <intToStr+0x38>
    buf[i] = n%10+'0';
    n /= 10;
  }
  buf[digit] = '\0'; // 行末改行
     1ac:	e0 0e       	add	r14, r16
     1ae:	f1 1e       	adc	r15, r17
     1b0:	f7 01       	movw	r30, r14
     1b2:	10 82       	st	Z, r1
  return buf;
}
     1b4:	c8 01       	movw	r24, r16
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	ff 90       	pop	r15
     1c0:	ef 90       	pop	r14
     1c2:	df 90       	pop	r13
     1c4:	cf 90       	pop	r12
     1c6:	08 95       	ret

000001c8 <usart_sendStr>:

/* USARTで文字列送信 */
void usart_sendStr(char *str){
     1c8:	fc 01       	movw	r30, r24
     1ca:	07 c0       	rjmp	.+14     	; 0x1da <usart_sendStr+0x12>
  while(*str != '\0'){
    loop_until_bit_is_set(UCSR0A,UDRE0); // 送信データレジスタ空きまで待機
     1cc:	80 91 c0 00 	lds	r24, 0x00C0
     1d0:	85 ff       	sbrs	r24, 5
     1d2:	fc cf       	rjmp	.-8      	; 0x1cc <usart_sendStr+0x4>
    UDR0 = *str++; // 1文字送信、1文字進む
     1d4:	90 93 c6 00 	sts	0x00C6, r25
     1d8:	31 96       	adiw	r30, 0x01	; 1
  return buf;
}

/* USARTで文字列送信 */
void usart_sendStr(char *str){
  while(*str != '\0'){
     1da:	90 81       	ld	r25, Z
     1dc:	99 23       	and	r25, r25
     1de:	b1 f7       	brne	.-20     	; 0x1cc <usart_sendStr+0x4>
    loop_until_bit_is_set(UCSR0A,UDRE0); // 送信データレジスタ空きまで待機
    UDR0 = *str++; // 1文字送信、1文字進む
  }
}
     1e0:	08 95       	ret

000001e2 <__vector_20>:

/* ATTiny2313からPSコントローラーの信号を受信 */
ISR(USART0_RX_vect){
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	2f 93       	push	r18
     1ee:	3f 93       	push	r19
     1f0:	8f 93       	push	r24
     1f2:	9f 93       	push	r25
     1f4:	ef 93       	push	r30
     1f6:	ff 93       	push	r31

    static uint16_t buff;
    uint16_t data,temp;

    data = UDR0;
     1f8:	80 91 c6 00 	lds	r24, 0x00C6
     1fc:	e8 2f       	mov	r30, r24
     1fe:	f0 e0       	ldi	r31, 0x00	; 0

    if(!(data & 0x08)){
     200:	83 fd       	sbrc	r24, 3
     202:	05 c0       	rjmp	.+10     	; 0x20e <__vector_20+0x2c>
        buff = data;
     204:	f0 93 22 01 	sts	0x0122, r31
     208:	e0 93 21 01 	sts	0x0121, r30
     20c:	1e c0       	rjmp	.+60     	; 0x24a <__vector_20+0x68>
        return;
    }
    if((data & 0x07)==(buff & 0x07)){
     20e:	20 91 21 01 	lds	r18, 0x0121
     212:	30 91 22 01 	lds	r19, 0x0122
     216:	cf 01       	movw	r24, r30
     218:	82 27       	eor	r24, r18
     21a:	93 27       	eor	r25, r19
     21c:	87 70       	andi	r24, 0x07	; 7
     21e:	90 70       	andi	r25, 0x00	; 0
     220:	89 2b       	or	r24, r25
     222:	99 f4       	brne	.+38     	; 0x24a <__vector_20+0x68>
        temp  = buff & 0xF0;
     224:	20 7f       	andi	r18, 0xF0	; 240
     226:	30 70       	andi	r19, 0x00	; 0
        temp |= data >> 4;
     228:	cf 01       	movw	r24, r30
     22a:	92 95       	swap	r25
     22c:	82 95       	swap	r24
     22e:	8f 70       	andi	r24, 0x0F	; 15
     230:	89 27       	eor	r24, r25
     232:	9f 70       	andi	r25, 0x0F	; 15
     234:	89 27       	eor	r24, r25
     236:	82 2b       	or	r24, r18
     238:	93 2b       	or	r25, r19
        SwitchRecv[data & 0x07] = temp;
     23a:	e7 70       	andi	r30, 0x07	; 7
     23c:	f0 70       	andi	r31, 0x00	; 0
     23e:	ee 0f       	add	r30, r30
     240:	ff 1f       	adc	r31, r31
     242:	e9 5d       	subi	r30, 0xD9	; 217
     244:	fe 4f       	sbci	r31, 0xFE	; 254
     246:	91 83       	std	Z+1, r25	; 0x01
     248:	80 83       	st	Z, r24
    }
}
     24a:	ff 91       	pop	r31
     24c:	ef 91       	pop	r30
     24e:	9f 91       	pop	r25
     250:	8f 91       	pop	r24
     252:	3f 91       	pop	r19
     254:	2f 91       	pop	r18
     256:	0f 90       	pop	r0
     258:	0f be       	out	0x3f, r0	; 63
     25a:	0f 90       	pop	r0
     25c:	1f 90       	pop	r1
     25e:	18 95       	reti

00000260 <strat0>:

/*----------------------足回りモーター関数---------------------------*/
//0A,0B: 右モーター
//2A,2B: 左モーター

void strat0(int s, int st){
     260:	9c 01       	movw	r18, r24
	int i, a = 0;
	A0_number = s;
     262:	90 93 3c 01 	sts	0x013C, r25
     266:	80 93 3b 01 	sts	0x013B, r24
	B0_number = 0;
     26a:	10 92 44 01 	sts	0x0144, r1
     26e:	10 92 43 01 	sts	0x0143, r1
	A2_number = s;
     272:	90 93 3a 01 	sts	0x013A, r25
     276:	80 93 39 01 	sts	0x0139, r24
	B2_number = 0;
     27a:	10 92 26 01 	sts	0x0126, r1
     27e:	10 92 25 01 	sts	0x0125, r1
     282:	ac 01       	movw	r20, r24
     284:	e0 e0       	ldi	r30, 0x00	; 0
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	a0 ea       	ldi	r26, 0xA0	; 160
     28a:	bf e0       	ldi	r27, 0x0F	; 15
     28c:	18 c0       	rjmp	.+48     	; 0x2be <strat0+0x5e>

/*----------------------足回りモーター関数---------------------------*/
//0A,0B: 右モーター
//2A,2B: 左モーター

void strat0(int s, int st){
     28e:	2f 5f       	subi	r18, 0xFF	; 255
     290:	3f 4f       	sbci	r19, 0xFF	; 255
     292:	4f 5f       	subi	r20, 0xFF	; 255
     294:	5f 4f       	sbci	r21, 0xFF	; 255

			A2_number = A2_number + 1;

		}
*/
		OCR0A = A0_number;
     296:	27 bd       	out	0x27, r18	; 39
		OCR0B = B0_number;
     298:	18 bc       	out	0x28, r1	; 40
		PORTB |=  _BV(1);
     29a:	29 9a       	sbi	0x05, 1	; 5
		PORTB |=  _BV(2);
     29c:	2a 9a       	sbi	0x05, 2	; 5

		OCR2A = A2_number;
     29e:	40 93 b3 00 	sts	0x00B3, r20
		OCR2B = B2_number;
     2a2:	10 92 b4 00 	sts	0x00B4, r1
		PORTD |=  _BV(2);
     2a6:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD |=  _BV(3);
     2a8:	5b 9a       	sbi	0x0b, 3	; 11
     2aa:	cd 01       	movw	r24, r26
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <strat0+0x4c>
#define PS_SQUARE   7


// 上キーが押されているか返す
inline bool ps_top(void){
	return SwitchRecv[0] & _BV(PS_UP);
     2b0:	80 91 27 01 	lds	r24, 0x0127
     2b4:	90 91 28 01 	lds	r25, 0x0128
		OCR2B = B2_number;
		PORTD |=  _BV(2);
		PORTD |=  _BV(3);
		_delay_ms(2);

		if(!ps_top()){
     2b8:	84 ff       	sbrs	r24, 4
     2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <strat0+0x64>
	A0_number = s;
	B0_number = 0;
	A2_number = s;
	B2_number = 0;

	for(i = 0; i < st; i++){
     2bc:	31 96       	adiw	r30, 0x01	; 1
     2be:	e6 17       	cp	r30, r22
     2c0:	f7 07       	cpc	r31, r23
     2c2:	2c f3       	brlt	.-54     	; 0x28e <strat0+0x2e>
     2c4:	50 93 3a 01 	sts	0x013A, r21
     2c8:	40 93 39 01 	sts	0x0139, r20
     2cc:	30 93 3c 01 	sts	0x013C, r19
     2d0:	20 93 3b 01 	sts	0x013B, r18
     2d4:	08 95       	ret

000002d6 <strat1>:
		usart_sendStr("2B:"); 
	 	usart_sendStr(intToStr(B2_number,buf));; 

		usart_sendStr("\r\n"); // 改行
*/
		A0_number = s - 5;
     2d6:	9c 01       	movw	r18, r24
     2d8:	25 50       	subi	r18, 0x05	; 5
     2da:	30 40       	sbci	r19, 0x00	; 0
     2dc:	30 93 3c 01 	sts	0x013C, r19
     2e0:	20 93 3b 01 	sts	0x013B, r18
		B0_number = 0;
     2e4:	10 92 44 01 	sts	0x0144, r1
     2e8:	10 92 43 01 	sts	0x0143, r1
		A2_number = s;
     2ec:	90 93 3a 01 	sts	0x013A, r25
     2f0:	80 93 39 01 	sts	0x0139, r24
		B2_number = 0;
     2f4:	10 92 26 01 	sts	0x0126, r1
     2f8:	10 92 25 01 	sts	0x0125, r1

		OCR0A = A0_number;
     2fc:	27 bd       	out	0x27, r18	; 39
		OCR0B = B0_number;
     2fe:	18 bc       	out	0x28, r1	; 40
		PORTB |=  _BV(1);
     300:	29 9a       	sbi	0x05, 1	; 5
		PORTB |=  _BV(2);
     302:	2a 9a       	sbi	0x05, 2	; 5

		OCR2A = A2_number;
     304:	80 93 b3 00 	sts	0x00B3, r24
		OCR2B = B2_number;
     308:	10 92 b4 00 	sts	0x00B4, r1
		PORTD |=  _BV(2);
     30c:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD |=  _BV(3);
     30e:	5b 9a       	sbi	0x0b, 3	; 11


}
     310:	08 95       	ret

00000312 <strat_stop>:

void strat_stop(){
	int i;

	A0_number = 255;
     312:	8f ef       	ldi	r24, 0xFF	; 255
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	90 93 3c 01 	sts	0x013C, r25
     31a:	80 93 3b 01 	sts	0x013B, r24
	B0_number = 0;
	A2_number = 255;
     31e:	90 93 3a 01 	sts	0x013A, r25
     322:	80 93 39 01 	sts	0x0139, r24
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	40 e0       	ldi	r20, 0x00	; 0
     32c:	50 e0       	ldi	r21, 0x00	; 0


		B0_number = B0_number + 2;
		B2_number = B2_number + 2;

		OCR0A = A0_number;
     32e:	ef ef       	ldi	r30, 0xFF	; 255
     330:	60 ed       	ldi	r22, 0xD0	; 208
     332:	77 e0       	ldi	r23, 0x07	; 7
		PORTD |=  _BV(3);


}

void strat_stop(){
     334:	4e 5f       	subi	r20, 0xFE	; 254
     336:	5f 4f       	sbci	r21, 0xFF	; 255
     338:	2e 5f       	subi	r18, 0xFE	; 254
     33a:	3f 4f       	sbci	r19, 0xFF	; 255


		B0_number = B0_number + 2;
		B2_number = B2_number + 2;

		OCR0A = A0_number;
     33c:	e7 bd       	out	0x27, r30	; 39
		OCR0B = B0_number;
     33e:	48 bd       	out	0x28, r20	; 40
		PORTB &=  ~_BV(1);
     340:	29 98       	cbi	0x05, 1	; 5
		PORTB &=  ~_BV(2);
     342:	2a 98       	cbi	0x05, 2	; 5

		OCR2A = A2_number;
     344:	e0 93 b3 00 	sts	0x00B3, r30
		OCR2B = B2_number;
     348:	20 93 b4 00 	sts	0x00B4, r18
		PORTD &=  ~_BV(2);
     34c:	5a 98       	cbi	0x0b, 2	; 11
		PORTD &=  ~_BV(3);
     34e:	5b 98       	cbi	0x0b, 3	; 11
     350:	cb 01       	movw	r24, r22
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <strat_stop+0x40>
	A0_number = 255;
	B0_number = 0;
	A2_number = 255;
	B2_number = 0;

	for(i = 0; i < 128; i++){
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	20 30       	cpi	r18, 0x00	; 0
     35a:	38 07       	cpc	r19, r24
     35c:	59 f7       	brne	.-42     	; 0x334 <strat_stop+0x22>
     35e:	30 93 26 01 	sts	0x0126, r19
     362:	20 93 25 01 	sts	0x0125, r18
     366:	30 93 44 01 	sts	0x0144, r19
     36a:	20 93 43 01 	sts	0x0143, r18
		PORTD &=  ~_BV(2);
		PORTD &=  ~_BV(3);
		_delay_ms(1);

	}
}
     36e:	08 95       	ret

00000370 <back0>:




void back0(int s, int bt){
     370:	9c 01       	movw	r18, r24
	int i, a = 0;

	A0_number = 0;
     372:	10 92 3c 01 	sts	0x013C, r1
     376:	10 92 3b 01 	sts	0x013B, r1
	B0_number = s;
     37a:	90 93 44 01 	sts	0x0144, r25
     37e:	80 93 43 01 	sts	0x0143, r24
	A2_number = 0;
     382:	10 92 3a 01 	sts	0x013A, r1
     386:	10 92 39 01 	sts	0x0139, r1
	B2_number = s;
     38a:	90 93 26 01 	sts	0x0126, r25
     38e:	80 93 25 01 	sts	0x0125, r24
     392:	ac 01       	movw	r20, r24
     394:	e0 e0       	ldi	r30, 0x00	; 0
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	a0 ea       	ldi	r26, 0xA0	; 160
     39a:	bf e0       	ldi	r27, 0x0F	; 15
     39c:	18 c0       	rjmp	.+48     	; 0x3ce <back0+0x5e>
}




void back0(int s, int bt){
     39e:	2f 5f       	subi	r18, 0xFF	; 255
     3a0:	3f 4f       	sbci	r19, 0xFF	; 255
     3a2:	4f 5f       	subi	r20, 0xFF	; 255
     3a4:	5f 4f       	sbci	r21, 0xFF	; 255


		}
*/

		OCR0A = A0_number;
     3a6:	17 bc       	out	0x27, r1	; 39
		OCR0B = B0_number;
     3a8:	28 bd       	out	0x28, r18	; 40
		PORTB |=  _BV(1);
     3aa:	29 9a       	sbi	0x05, 1	; 5
		PORTB |=  _BV(2);
     3ac:	2a 9a       	sbi	0x05, 2	; 5

		OCR2A = A2_number;
     3ae:	10 92 b3 00 	sts	0x00B3, r1
		OCR2B = B2_number;
     3b2:	40 93 b4 00 	sts	0x00B4, r20
		PORTD |=  _BV(2);
     3b6:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD |=  _BV(3);
     3b8:	5b 9a       	sbi	0x0b, 3	; 11
     3ba:	cd 01       	movw	r24, r26
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <back0+0x4c>
	return SwitchRecv[0] & _BV(PS_RIGHT);
}

// 下キーが押されているか返す
inline bool ps_bottom(void){
	return SwitchRecv[0] & _BV(PS_DOWN);
     3c0:	80 91 27 01 	lds	r24, 0x0127
     3c4:	90 91 28 01 	lds	r25, 0x0128
		OCR2B = B2_number;
		PORTD |=  _BV(2);
		PORTD |=  _BV(3);
		_delay_ms(2);

		if(!ps_bottom()){
     3c8:	86 ff       	sbrs	r24, 6
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <back0+0x64>
	A0_number = 0;
	B0_number = s;
	A2_number = 0;
	B2_number = s;

	for(i = 0; i < bt; i++){
     3cc:	31 96       	adiw	r30, 0x01	; 1
     3ce:	e6 17       	cp	r30, r22
     3d0:	f7 07       	cpc	r31, r23
     3d2:	2c f3       	brlt	.-54     	; 0x39e <back0+0x2e>
     3d4:	50 93 26 01 	sts	0x0126, r21
     3d8:	40 93 25 01 	sts	0x0125, r20
     3dc:	30 93 44 01 	sts	0x0144, r19
     3e0:	20 93 43 01 	sts	0x0143, r18
     3e4:	08 95       	ret

000003e6 <back1>:
	}
}

void back1(int s){

		A0_number = 0;
     3e6:	10 92 3c 01 	sts	0x013C, r1
     3ea:	10 92 3b 01 	sts	0x013B, r1
		B0_number = s;
     3ee:	90 93 44 01 	sts	0x0144, r25
     3f2:	80 93 43 01 	sts	0x0143, r24
		A2_number = 0;
     3f6:	10 92 3a 01 	sts	0x013A, r1
     3fa:	10 92 39 01 	sts	0x0139, r1
		B2_number = s - 5;
     3fe:	9c 01       	movw	r18, r24
     400:	25 50       	subi	r18, 0x05	; 5
     402:	30 40       	sbci	r19, 0x00	; 0
     404:	30 93 26 01 	sts	0x0126, r19
     408:	20 93 25 01 	sts	0x0125, r18

		OCR0A = A0_number;
     40c:	17 bc       	out	0x27, r1	; 39
		OCR0B = B0_number;
     40e:	88 bd       	out	0x28, r24	; 40
		PORTB |=  _BV(1);
     410:	29 9a       	sbi	0x05, 1	; 5
		PORTB |=  _BV(2);
     412:	2a 9a       	sbi	0x05, 2	; 5

		OCR2A = A2_number;
     414:	10 92 b3 00 	sts	0x00B3, r1
		OCR2B = B2_number;
     418:	20 93 b4 00 	sts	0x00B4, r18
		PORTD |=  _BV(2);
     41c:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD |=  _BV(3);
     41e:	5b 9a       	sbi	0x0b, 3	; 11

}
     420:	08 95       	ret

00000422 <back_stop>:

void back_stop(){
	int i;

	A0_number = 0;
	B0_number = 255;
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	90 93 44 01 	sts	0x0144, r25
     42a:	80 93 43 01 	sts	0x0143, r24
	A2_number = 0;
	B2_number = 255;
     42e:	90 93 26 01 	sts	0x0126, r25
     432:	80 93 25 01 	sts	0x0125, r24
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	40 e0       	ldi	r20, 0x00	; 0
     43c:	50 e0       	ldi	r21, 0x00	; 0

		A0_number = A0_number + 2;
		A2_number = A2_number + 2;

		OCR0A = A0_number;
		OCR0B = B0_number;
     43e:	ef ef       	ldi	r30, 0xFF	; 255
     440:	60 ed       	ldi	r22, 0xD0	; 208
     442:	77 e0       	ldi	r23, 0x07	; 7
		PORTD |=  _BV(2);
		PORTD |=  _BV(3);

}

void back_stop(){
     444:	4e 5f       	subi	r20, 0xFE	; 254
     446:	5f 4f       	sbci	r21, 0xFF	; 255
     448:	2e 5f       	subi	r18, 0xFE	; 254
     44a:	3f 4f       	sbci	r19, 0xFF	; 255
	for(i = 0; i < 128; i++){

		A0_number = A0_number + 2;
		A2_number = A2_number + 2;

		OCR0A = A0_number;
     44c:	47 bd       	out	0x27, r20	; 39
		OCR0B = B0_number;
     44e:	e8 bd       	out	0x28, r30	; 40
		PORTB &=  ~_BV(1);
     450:	29 98       	cbi	0x05, 1	; 5
		PORTB &=  ~_BV(2);
     452:	2a 98       	cbi	0x05, 2	; 5

		OCR2A = A2_number;
     454:	20 93 b3 00 	sts	0x00B3, r18
		OCR2B = B2_number;
     458:	e0 93 b4 00 	sts	0x00B4, r30
		PORTD &=  ~_BV(2);
     45c:	5a 98       	cbi	0x0b, 2	; 11
		PORTD &=  ~_BV(3);
     45e:	5b 98       	cbi	0x0b, 3	; 11
     460:	cb 01       	movw	r24, r22
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <back_stop+0x40>
	A0_number = 0;
	B0_number = 255;
	A2_number = 0;
	B2_number = 255;

	for(i = 0; i < 128; i++){
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	20 30       	cpi	r18, 0x00	; 0
     46a:	38 07       	cpc	r19, r24
     46c:	59 f7       	brne	.-42     	; 0x444 <back_stop+0x22>
     46e:	30 93 3a 01 	sts	0x013A, r19
     472:	20 93 39 01 	sts	0x0139, r18
     476:	30 93 3c 01 	sts	0x013C, r19
     47a:	20 93 3b 01 	sts	0x013B, r18
		PORTD &=  ~_BV(2);
		PORTD &=  ~_BV(3);
		_delay_ms(1);

	}
}
     47e:	08 95       	ret

00000480 <left0>:





void left0(int s, int t){
     480:	9c 01       	movw	r18, r24
	int i;

	A0_number = s;
     482:	90 93 3c 01 	sts	0x013C, r25
     486:	80 93 3b 01 	sts	0x013B, r24
	B0_number = 0;
     48a:	10 92 44 01 	sts	0x0144, r1
     48e:	10 92 43 01 	sts	0x0143, r1
	A2_number = 0;
     492:	10 92 3a 01 	sts	0x013A, r1
     496:	10 92 39 01 	sts	0x0139, r1
	B2_number = s;
     49a:	90 93 26 01 	sts	0x0126, r25
     49e:	80 93 25 01 	sts	0x0125, r24
     4a2:	ac 01       	movw	r20, r24
     4a4:	e0 e0       	ldi	r30, 0x00	; 0
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	a0 ea       	ldi	r26, 0xA0	; 160
     4aa:	bf e0       	ldi	r27, 0x0F	; 15
     4ac:	18 c0       	rjmp	.+48     	; 0x4de <left0+0x5e>





void left0(int s, int t){
     4ae:	2f 5f       	subi	r18, 0xFF	; 255
     4b0:	3f 4f       	sbci	r19, 0xFF	; 255
     4b2:	4f 5f       	subi	r20, 0xFF	; 255
     4b4:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i = 0; i < t; i++){

		A0_number = A0_number + 1;
		B2_number = B2_number + 1;

		OCR0A = A0_number;
     4b6:	27 bd       	out	0x27, r18	; 39
		OCR0B = B0_number;
     4b8:	18 bc       	out	0x28, r1	; 40
		PORTB |=  _BV(1);
     4ba:	29 9a       	sbi	0x05, 1	; 5
		PORTB |=  _BV(2);
     4bc:	2a 9a       	sbi	0x05, 2	; 5

		OCR2A = A2_number;
     4be:	10 92 b3 00 	sts	0x00B3, r1
		OCR2B = B2_number;
     4c2:	40 93 b4 00 	sts	0x00B4, r20
		PORTD |=  _BV(2);
     4c6:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD |=  _BV(3);
     4c8:	5b 9a       	sbi	0x0b, 3	; 11
     4ca:	cd 01       	movw	r24, r26
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <left0+0x4c>
	return SwitchRecv[0] & _BV(PS_DOWN);
}

// 左キーが押されているか返す
inline bool ps_left(void){
	return SwitchRecv[0] & _BV(PS_LEFT);
     4d0:	80 91 27 01 	lds	r24, 0x0127
     4d4:	90 91 28 01 	lds	r25, 0x0128
		OCR2B = B2_number;
		PORTD |=  _BV(2);
		PORTD |=  _BV(3);
		_delay_ms(2);

		if(!ps_left()){
     4d8:	87 ff       	sbrs	r24, 7
     4da:	04 c0       	rjmp	.+8      	; 0x4e4 <left0+0x64>
	A0_number = s;
	B0_number = 0;
	A2_number = 0;
	B2_number = s;

	for(i = 0; i < t; i++){
     4dc:	31 96       	adiw	r30, 0x01	; 1
     4de:	e6 17       	cp	r30, r22
     4e0:	f7 07       	cpc	r31, r23
     4e2:	2c f3       	brlt	.-54     	; 0x4ae <left0+0x2e>
     4e4:	50 93 26 01 	sts	0x0126, r21
     4e8:	40 93 25 01 	sts	0x0125, r20
     4ec:	30 93 3c 01 	sts	0x013C, r19
     4f0:	20 93 3b 01 	sts	0x013B, r18
     4f4:	08 95       	ret

000004f6 <left1>:
	}
}

void left1(int s){

		A0_number = s;
     4f6:	80 93 3b 01 	sts	0x013B, r24
     4fa:	90 93 3c 01 	sts	0x013C, r25
		B0_number = 0;
     4fe:	10 92 44 01 	sts	0x0144, r1
     502:	10 92 43 01 	sts	0x0143, r1
		A2_number = 0;
     506:	10 92 3a 01 	sts	0x013A, r1
     50a:	10 92 39 01 	sts	0x0139, r1
		B2_number = s;
     50e:	80 93 25 01 	sts	0x0125, r24
     512:	90 93 26 01 	sts	0x0126, r25

		OCR0A = A0_number;
     516:	87 bd       	out	0x27, r24	; 39
		OCR0B = B0_number;
     518:	18 bc       	out	0x28, r1	; 40
		PORTB |=  _BV(1);
     51a:	29 9a       	sbi	0x05, 1	; 5
		PORTB |=  _BV(2);
     51c:	2a 9a       	sbi	0x05, 2	; 5

		OCR2A = A2_number;
     51e:	10 92 b3 00 	sts	0x00B3, r1
		OCR2B = B2_number;
     522:	80 93 b4 00 	sts	0x00B4, r24
		PORTD |=  _BV(2);
     526:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD |=  _BV(3);
     528:	5b 9a       	sbi	0x0b, 3	; 11

}
     52a:	08 95       	ret

0000052c <left_stop>:

void left_stop(){
	int i;

	A0_number = 255;
     52c:	8f ef       	ldi	r24, 0xFF	; 255
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	90 93 3c 01 	sts	0x013C, r25
     534:	80 93 3b 01 	sts	0x013B, r24
	B0_number = 0;
	A2_number = 0;
	B2_number = 255;
     538:	90 93 26 01 	sts	0x0126, r25
     53c:	80 93 25 01 	sts	0x0125, r24
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	40 e0       	ldi	r20, 0x00	; 0
     546:	50 e0       	ldi	r21, 0x00	; 0
	for(i = 0; i < 128; i++){

		B0_number = B0_number + 2;
		A2_number = A2_number + 2;

		OCR0A = A0_number;
     548:	ef ef       	ldi	r30, 0xFF	; 255
     54a:	60 ed       	ldi	r22, 0xD0	; 208
     54c:	77 e0       	ldi	r23, 0x07	; 7
		PORTD |=  _BV(2);
		PORTD |=  _BV(3);

}

void left_stop(){
     54e:	4e 5f       	subi	r20, 0xFE	; 254
     550:	5f 4f       	sbci	r21, 0xFF	; 255
     552:	2e 5f       	subi	r18, 0xFE	; 254
     554:	3f 4f       	sbci	r19, 0xFF	; 255
	for(i = 0; i < 128; i++){

		B0_number = B0_number + 2;
		A2_number = A2_number + 2;

		OCR0A = A0_number;
     556:	e7 bd       	out	0x27, r30	; 39
		OCR0B = B0_number;
     558:	48 bd       	out	0x28, r20	; 40
		PORTB &=  ~_BV(1);
     55a:	29 98       	cbi	0x05, 1	; 5
		PORTB &=  ~_BV(2);
     55c:	2a 98       	cbi	0x05, 2	; 5

		OCR2A = A2_number;
     55e:	20 93 b3 00 	sts	0x00B3, r18
		OCR2B = B2_number;
     562:	e0 93 b4 00 	sts	0x00B4, r30
		PORTD &=  ~_BV(2);
     566:	5a 98       	cbi	0x0b, 2	; 11
		PORTD &=  ~_BV(3);
     568:	5b 98       	cbi	0x0b, 3	; 11
     56a:	cb 01       	movw	r24, r22
     56c:	01 97       	sbiw	r24, 0x01	; 1
     56e:	f1 f7       	brne	.-4      	; 0x56c <left_stop+0x40>
	A0_number = 255;
	B0_number = 0;
	A2_number = 0;
	B2_number = 255;

	for(i = 0; i < 128; i++){
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	20 30       	cpi	r18, 0x00	; 0
     574:	38 07       	cpc	r19, r24
     576:	59 f7       	brne	.-42     	; 0x54e <left_stop+0x22>
     578:	30 93 3a 01 	sts	0x013A, r19
     57c:	20 93 39 01 	sts	0x0139, r18
     580:	30 93 44 01 	sts	0x0144, r19
     584:	20 93 43 01 	sts	0x0143, r18
		PORTD &=  ~_BV(2);
		PORTD &=  ~_BV(3);
		_delay_ms(1);

	}
}
     588:	08 95       	ret

0000058a <right0>:





void right0(int s, int t){
     58a:	9c 01       	movw	r18, r24
	int i;

	A0_number = 0;
     58c:	10 92 3c 01 	sts	0x013C, r1
     590:	10 92 3b 01 	sts	0x013B, r1
	B0_number = s;
     594:	90 93 44 01 	sts	0x0144, r25
     598:	80 93 43 01 	sts	0x0143, r24
	A2_number = s;
     59c:	90 93 3a 01 	sts	0x013A, r25
     5a0:	80 93 39 01 	sts	0x0139, r24
	B2_number = 0;
     5a4:	10 92 26 01 	sts	0x0126, r1
     5a8:	10 92 25 01 	sts	0x0125, r1
     5ac:	ac 01       	movw	r20, r24
     5ae:	e0 e0       	ldi	r30, 0x00	; 0
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	a0 ea       	ldi	r26, 0xA0	; 160
     5b4:	bf e0       	ldi	r27, 0x0F	; 15
     5b6:	18 c0       	rjmp	.+48     	; 0x5e8 <right0+0x5e>





void right0(int s, int t){
     5b8:	2f 5f       	subi	r18, 0xFF	; 255
     5ba:	3f 4f       	sbci	r19, 0xFF	; 255
     5bc:	4f 5f       	subi	r20, 0xFF	; 255
     5be:	5f 4f       	sbci	r21, 0xFF	; 255
	for(i = 0; i < t; i++){

		B0_number = B0_number + 1;
		A2_number = A2_number + 1;

		OCR0A = A0_number;
     5c0:	17 bc       	out	0x27, r1	; 39
		OCR0B = B0_number;
     5c2:	28 bd       	out	0x28, r18	; 40
		PORTB |=  _BV(1);
     5c4:	29 9a       	sbi	0x05, 1	; 5
		PORTB |=  _BV(2);
     5c6:	2a 9a       	sbi	0x05, 2	; 5

		OCR2A = A2_number;
     5c8:	40 93 b3 00 	sts	0x00B3, r20
		OCR2B = B2_number;
     5cc:	10 92 b4 00 	sts	0x00B4, r1
		PORTD |=  _BV(2);
     5d0:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD |=  _BV(3);
     5d2:	5b 9a       	sbi	0x0b, 3	; 11
     5d4:	cd 01       	movw	r24, r26
     5d6:	01 97       	sbiw	r24, 0x01	; 1
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <right0+0x4c>
	return SwitchRecv[0] & _BV(PS_UP);
}

// 右キーが押されているか返す
inline bool ps_right(void){
	return SwitchRecv[0] & _BV(PS_RIGHT);
     5da:	80 91 27 01 	lds	r24, 0x0127
     5de:	90 91 28 01 	lds	r25, 0x0128
		OCR2B = B2_number;
		PORTD |=  _BV(2);
		PORTD |=  _BV(3);
		_delay_ms(2);

		if(!ps_right()){
     5e2:	85 ff       	sbrs	r24, 5
     5e4:	04 c0       	rjmp	.+8      	; 0x5ee <right0+0x64>
	A0_number = 0;
	B0_number = s;
	A2_number = s;
	B2_number = 0;

	for(i = 0; i < t; i++){
     5e6:	31 96       	adiw	r30, 0x01	; 1
     5e8:	e6 17       	cp	r30, r22
     5ea:	f7 07       	cpc	r31, r23
     5ec:	2c f3       	brlt	.-54     	; 0x5b8 <right0+0x2e>
     5ee:	50 93 3a 01 	sts	0x013A, r21
     5f2:	40 93 39 01 	sts	0x0139, r20
     5f6:	30 93 44 01 	sts	0x0144, r19
     5fa:	20 93 43 01 	sts	0x0143, r18
     5fe:	08 95       	ret

00000600 <right1>:
	}
}

void right1(int s){

		A0_number = 0;
     600:	10 92 3c 01 	sts	0x013C, r1
     604:	10 92 3b 01 	sts	0x013B, r1
		B0_number = s;
     608:	80 93 43 01 	sts	0x0143, r24
     60c:	90 93 44 01 	sts	0x0144, r25
		A2_number = s;
     610:	80 93 39 01 	sts	0x0139, r24
     614:	90 93 3a 01 	sts	0x013A, r25
		B2_number = 0;
     618:	10 92 26 01 	sts	0x0126, r1
     61c:	10 92 25 01 	sts	0x0125, r1

		OCR0A = A0_number;
     620:	17 bc       	out	0x27, r1	; 39
		OCR0B = B0_number;
     622:	88 bd       	out	0x28, r24	; 40
		PORTB |=  _BV(1);
     624:	29 9a       	sbi	0x05, 1	; 5
		PORTB |=  _BV(2);
     626:	2a 9a       	sbi	0x05, 2	; 5

		OCR2A = A2_number;
     628:	80 93 b3 00 	sts	0x00B3, r24
		OCR2B = B2_number;
     62c:	10 92 b4 00 	sts	0x00B4, r1
		PORTD |=  _BV(2);
     630:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD |=  _BV(3);
     632:	5b 9a       	sbi	0x0b, 3	; 11

}
     634:	08 95       	ret

00000636 <right_stop>:

void right_stop(){
	int i;

	A0_number = 0;
	B0_number = 255;
     636:	8f ef       	ldi	r24, 0xFF	; 255
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	90 93 44 01 	sts	0x0144, r25
     63e:	80 93 43 01 	sts	0x0143, r24
	A2_number = 255;
     642:	90 93 3a 01 	sts	0x013A, r25
     646:	80 93 39 01 	sts	0x0139, r24
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	40 e0       	ldi	r20, 0x00	; 0
     650:	50 e0       	ldi	r21, 0x00	; 0

		A0_number = A0_number + 2;
		B2_number = B2_number + 2;

		OCR0A = A0_number;
		OCR0B = B0_number;
     652:	ef ef       	ldi	r30, 0xFF	; 255
     654:	60 ed       	ldi	r22, 0xD0	; 208
     656:	77 e0       	ldi	r23, 0x07	; 7
		PORTD |=  _BV(2);
		PORTD |=  _BV(3);

}

void right_stop(){
     658:	4e 5f       	subi	r20, 0xFE	; 254
     65a:	5f 4f       	sbci	r21, 0xFF	; 255
     65c:	2e 5f       	subi	r18, 0xFE	; 254
     65e:	3f 4f       	sbci	r19, 0xFF	; 255
	for(i = 0; i < 128; i++){

		A0_number = A0_number + 2;
		B2_number = B2_number + 2;

		OCR0A = A0_number;
     660:	47 bd       	out	0x27, r20	; 39
		OCR0B = B0_number;
     662:	e8 bd       	out	0x28, r30	; 40
		PORTB &=  ~_BV(1);
     664:	29 98       	cbi	0x05, 1	; 5
		PORTB &=  ~_BV(2);
     666:	2a 98       	cbi	0x05, 2	; 5

		OCR2A = A2_number;
     668:	e0 93 b3 00 	sts	0x00B3, r30
		OCR2B = B2_number;
     66c:	20 93 b4 00 	sts	0x00B4, r18
		PORTD &=  ~_BV(2);
     670:	5a 98       	cbi	0x0b, 2	; 11
		PORTD &=  ~_BV(3);
     672:	5b 98       	cbi	0x0b, 3	; 11
     674:	cb 01       	movw	r24, r22
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <right_stop+0x40>
	A0_number = 0;
	B0_number = 255;
	A2_number = 255;
	B2_number = 0;

	for(i = 0; i < 128; i++){
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	20 30       	cpi	r18, 0x00	; 0
     67e:	38 07       	cpc	r19, r24
     680:	59 f7       	brne	.-42     	; 0x658 <right_stop+0x22>
     682:	30 93 26 01 	sts	0x0126, r19
     686:	20 93 25 01 	sts	0x0125, r18
     68a:	30 93 3c 01 	sts	0x013C, r19
     68e:	20 93 3b 01 	sts	0x013B, r18
		PORTD &=  ~_BV(2);
		PORTD &=  ~_BV(3);
		_delay_ms(1);

	}
}
     692:	08 95       	ret

00000694 <stop>:



void stop(){

	A0_number = 255;
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	90 93 3c 01 	sts	0x013C, r25
     69c:	80 93 3b 01 	sts	0x013B, r24
	B0_number = 255;
     6a0:	90 93 44 01 	sts	0x0144, r25
     6a4:	80 93 43 01 	sts	0x0143, r24
	A2_number = 255;
     6a8:	90 93 3a 01 	sts	0x013A, r25
     6ac:	80 93 39 01 	sts	0x0139, r24
	B2_number = 255;
     6b0:	90 93 26 01 	sts	0x0126, r25
     6b4:	80 93 25 01 	sts	0x0125, r24

	OCR0A = A0_number;
     6b8:	8f ef       	ldi	r24, 0xFF	; 255
     6ba:	87 bd       	out	0x27, r24	; 39
	OCR0B = B0_number;
     6bc:	88 bd       	out	0x28, r24	; 40
	PORTB &=  ~_BV(1);
     6be:	29 98       	cbi	0x05, 1	; 5
	PORTB &=  ~_BV(2);
     6c0:	2a 98       	cbi	0x05, 2	; 5


	OCR2A = A2_number;
     6c2:	80 93 b3 00 	sts	0x00B3, r24
	OCR2B = B2_number;
     6c6:	80 93 b4 00 	sts	0x00B4, r24
	PORTD &=  ~_BV(1);
     6ca:	59 98       	cbi	0x0b, 1	; 11
	PORTD &=  ~_BV(2);
     6cc:	5a 98       	cbi	0x0b, 2	; 11
}
     6ce:	08 95       	ret

000006d0 <arm_one_strat0>:


void arm_one_strat0(int s, int t){
	int i;

	A1_number = 0;
     6d0:	10 92 38 01 	sts	0x0138, r1
     6d4:	10 92 37 01 	sts	0x0137, r1
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	a0 ea       	ldi	r26, 0xA0	; 160
     6de:	bf e0       	ldi	r27, 0x0F	; 15
     6e0:	0f c0       	rjmp	.+30     	; 0x700 <arm_one_strat0+0x30>

	for(i = 0; i < t; i++){

		B1_number = B1_number + 1;

		OCR1A = A1_number;
     6e2:	10 92 89 00 	sts	0x0089, r1
     6e6:	10 92 88 00 	sts	0x0088, r1
		OCR1B = B1_number;
     6ea:	90 93 8b 00 	sts	0x008B, r25
     6ee:	80 93 8a 00 	sts	0x008A, r24
		PORTB |= _BV(6);
     6f2:	2e 9a       	sbi	0x05, 6	; 5
		PORTB |= _BV(7);
     6f4:	2f 9a       	sbi	0x05, 7	; 5
     6f6:	fd 01       	movw	r30, r26
     6f8:	31 97       	sbiw	r30, 0x01	; 1
     6fa:	f1 f7       	brne	.-4      	; 0x6f8 <arm_one_strat0+0x28>
	int i;

	A1_number = 0;
	B1_number = s;

	for(i = 0; i < t; i++){
     6fc:	2f 5f       	subi	r18, 0xFF	; 255
     6fe:	3f 4f       	sbci	r19, 0xFF	; 255
     700:	ac 01       	movw	r20, r24
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	26 17       	cp	r18, r22
     706:	37 07       	cpc	r19, r23
     708:	64 f3       	brlt	.-40     	; 0x6e2 <arm_one_strat0+0x12>
     70a:	40 93 23 01 	sts	0x0123, r20
     70e:	50 93 24 01 	sts	0x0124, r21
		PORTB |= _BV(6);
		PORTB |= _BV(7);

		_delay_ms(2);
	}
}
     712:	08 95       	ret

00000714 <arm_one_strat1>:

void arm_one_strat1(int s){

	A1_number = 0;
     714:	10 92 38 01 	sts	0x0138, r1
     718:	10 92 37 01 	sts	0x0137, r1
	B1_number = s;
     71c:	80 93 23 01 	sts	0x0123, r24
     720:	90 93 24 01 	sts	0x0124, r25

	OCR1A = A1_number;
     724:	10 92 89 00 	sts	0x0089, r1
     728:	10 92 88 00 	sts	0x0088, r1
	OCR1B = B1_number;
     72c:	90 93 8b 00 	sts	0x008B, r25
     730:	80 93 8a 00 	sts	0x008A, r24
	PORTB |= _BV(6);
     734:	2e 9a       	sbi	0x05, 6	; 5
	PORTB |= _BV(7);
     736:	2f 9a       	sbi	0x05, 7	; 5
}
     738:	08 95       	ret

0000073a <arm_one_strat_stop>:

void arm_one_strat_stop(){
	int i;

	A1_number = 0;
	B1_number = 255;
     73a:	8f ef       	ldi	r24, 0xFF	; 255
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	90 93 24 01 	sts	0x0124, r25
     742:	80 93 23 01 	sts	0x0123, r24
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
	for(i = 0; i < 128; i++){

		A1_number = A1_number + 2;

		OCR1A = A1_number;
		OCR1B = B1_number;
     74a:	6f ef       	ldi	r22, 0xFF	; 255
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	40 ed       	ldi	r20, 0xD0	; 208
     750:	57 e0       	ldi	r21, 0x07	; 7
	OCR1B = B1_number;
	PORTB |= _BV(6);
	PORTB |= _BV(7);
}

void arm_one_strat_stop(){
     752:	2e 5f       	subi	r18, 0xFE	; 254
     754:	3f 4f       	sbci	r19, 0xFF	; 255

	for(i = 0; i < 128; i++){

		A1_number = A1_number + 2;

		OCR1A = A1_number;
     756:	30 93 89 00 	sts	0x0089, r19
     75a:	20 93 88 00 	sts	0x0088, r18
		OCR1B = B1_number;
     75e:	70 93 8b 00 	sts	0x008B, r23
     762:	60 93 8a 00 	sts	0x008A, r22
		PORTB &=  ~_BV(6);
     766:	2e 98       	cbi	0x05, 6	; 5
		PORTB &=  ~_BV(7);
     768:	2f 98       	cbi	0x05, 7	; 5
     76a:	ca 01       	movw	r24, r20
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <arm_one_strat_stop+0x32>
	int i;

	A1_number = 0;
	B1_number = 255;

	for(i = 0; i < 128; i++){
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	20 30       	cpi	r18, 0x00	; 0
     774:	38 07       	cpc	r19, r24
     776:	69 f7       	brne	.-38     	; 0x752 <arm_one_strat_stop+0x18>
     778:	30 93 38 01 	sts	0x0138, r19
     77c:	20 93 37 01 	sts	0x0137, r18
		PORTB &=  ~_BV(7);

		_delay_ms(1);

	}
}
     780:	08 95       	ret

00000782 <arm_one_back0>:

void arm_one_back0(int s, int t){
	int i;

	A1_number = s;
	B1_number = 0;
     782:	10 92 24 01 	sts	0x0124, r1
     786:	10 92 23 01 	sts	0x0123, r1
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	a0 ea       	ldi	r26, 0xA0	; 160
     790:	bf e0       	ldi	r27, 0x0F	; 15
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <arm_one_back0+0x30>

	for(i = 0; i < t; i++){

		A1_number = A1_number + 1;

		OCR1A = A1_number;
     794:	90 93 89 00 	sts	0x0089, r25
     798:	80 93 88 00 	sts	0x0088, r24
		OCR1B = B1_number;
     79c:	10 92 8b 00 	sts	0x008B, r1
     7a0:	10 92 8a 00 	sts	0x008A, r1
		PORTB |= _BV(6);
     7a4:	2e 9a       	sbi	0x05, 6	; 5
		PORTB |= _BV(7);
     7a6:	2f 9a       	sbi	0x05, 7	; 5
     7a8:	fd 01       	movw	r30, r26
     7aa:	31 97       	sbiw	r30, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <arm_one_back0+0x28>
	int i;

	A1_number = s;
	B1_number = 0;

	for(i = 0; i < t; i++){
     7ae:	2f 5f       	subi	r18, 0xFF	; 255
     7b0:	3f 4f       	sbci	r19, 0xFF	; 255
     7b2:	ac 01       	movw	r20, r24
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	26 17       	cp	r18, r22
     7b8:	37 07       	cpc	r19, r23
     7ba:	64 f3       	brlt	.-40     	; 0x794 <arm_one_back0+0x12>
     7bc:	40 93 37 01 	sts	0x0137, r20
     7c0:	50 93 38 01 	sts	0x0138, r21
		PORTB |= _BV(6);
		PORTB |= _BV(7);

		_delay_ms(2);
	}
}
     7c4:	08 95       	ret

000007c6 <arm_one_back1>:

void arm_one_back1(int s){

	A1_number = s;
     7c6:	80 93 37 01 	sts	0x0137, r24
     7ca:	90 93 38 01 	sts	0x0138, r25
	B1_number = 0;
     7ce:	10 92 24 01 	sts	0x0124, r1
     7d2:	10 92 23 01 	sts	0x0123, r1

	OCR1A = A1_number;
     7d6:	90 93 89 00 	sts	0x0089, r25
     7da:	80 93 88 00 	sts	0x0088, r24
	OCR1B = B1_number;
     7de:	10 92 8b 00 	sts	0x008B, r1
     7e2:	10 92 8a 00 	sts	0x008A, r1
	PORTB |= _BV(6);
     7e6:	2e 9a       	sbi	0x05, 6	; 5
	PORTB |= _BV(7);
     7e8:	2f 9a       	sbi	0x05, 7	; 5

}
     7ea:	08 95       	ret

000007ec <arm_one_back_stop>:

void arm_one_back_stop(){
	int i;

	A1_number = 255;
     7ec:	8f ef       	ldi	r24, 0xFF	; 255
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	90 93 38 01 	sts	0x0138, r25
     7f4:	80 93 37 01 	sts	0x0137, r24
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0

	for(i = 0; i < 128; i++){

		B1_number = B1_number + 2;

		OCR1A = A1_number;
     7fc:	6f ef       	ldi	r22, 0xFF	; 255
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	40 ed       	ldi	r20, 0xD0	; 208
     802:	57 e0       	ldi	r21, 0x07	; 7
	PORTB |= _BV(6);
	PORTB |= _BV(7);

}

void arm_one_back_stop(){
     804:	2e 5f       	subi	r18, 0xFE	; 254
     806:	3f 4f       	sbci	r19, 0xFF	; 255

	for(i = 0; i < 128; i++){

		B1_number = B1_number + 2;

		OCR1A = A1_number;
     808:	70 93 89 00 	sts	0x0089, r23
     80c:	60 93 88 00 	sts	0x0088, r22
		OCR1B = B1_number;
     810:	30 93 8b 00 	sts	0x008B, r19
     814:	20 93 8a 00 	sts	0x008A, r18
		PORTB &=  ~_BV(6);
     818:	2e 98       	cbi	0x05, 6	; 5
		PORTB &=  ~_BV(7);
     81a:	2f 98       	cbi	0x05, 7	; 5
     81c:	ca 01       	movw	r24, r20
     81e:	01 97       	sbiw	r24, 0x01	; 1
     820:	f1 f7       	brne	.-4      	; 0x81e <arm_one_back_stop+0x32>
	int i;

	A1_number = 255;
	B1_number = 0;

	for(i = 0; i < 128; i++){
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	20 30       	cpi	r18, 0x00	; 0
     826:	38 07       	cpc	r19, r24
     828:	69 f7       	brne	.-38     	; 0x804 <arm_one_back_stop+0x18>
     82a:	30 93 24 01 	sts	0x0124, r19
     82e:	20 93 23 01 	sts	0x0123, r18
		PORTB &=  ~_BV(7);

		_delay_ms(1);

	}
}
     832:	08 95       	ret

00000834 <arm_twe_strat1>:



void arm_twe_strat1(){

		PORTC &=  ~_BV(0);
     834:	40 98       	cbi	0x08, 0	; 8
		PORTC |=  _BV(1);
     836:	41 9a       	sbi	0x08, 1	; 8

		PORTC |=  _BV(2);
     838:	42 9a       	sbi	0x08, 2	; 8
		PORTC &= ~_BV(3);
     83a:	43 98       	cbi	0x08, 3	; 8

}
     83c:	08 95       	ret

0000083e <arm_twe_back1>:



void arm_twe_back1(){

		PORTC |=  _BV(0);
     83e:	40 9a       	sbi	0x08, 0	; 8
		PORTC &=  ~_BV(1);
     840:	41 98       	cbi	0x08, 1	; 8

		PORTC &= ~_BV(2);
     842:	42 98       	cbi	0x08, 2	; 8
		PORTC |=  _BV(3);
     844:	43 9a       	sbi	0x08, 3	; 8


}
     846:	08 95       	ret

00000848 <stop2>:



void stop2(){

	A1_number = 255;
     848:	8f ef       	ldi	r24, 0xFF	; 255
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	90 93 38 01 	sts	0x0138, r25
     850:	80 93 37 01 	sts	0x0137, r24
	B1_number = 255;
     854:	90 93 24 01 	sts	0x0124, r25
     858:	80 93 23 01 	sts	0x0123, r24

	OCR1A = A1_number;
     85c:	90 93 89 00 	sts	0x0089, r25
     860:	80 93 88 00 	sts	0x0088, r24
	OCR1B = B1_number;
     864:	90 93 8b 00 	sts	0x008B, r25
     868:	80 93 8a 00 	sts	0x008A, r24
	PORTB &=  ~_BV(6);
     86c:	2e 98       	cbi	0x05, 6	; 5
	PORTB &=  ~_BV(7);
     86e:	2f 98       	cbi	0x05, 7	; 5


	PORTC |=  _BV(0);
     870:	40 9a       	sbi	0x08, 0	; 8
	PORTC |=  _BV(1);
     872:	41 9a       	sbi	0x08, 1	; 8
	PORTC &=  ~_BV(2);
     874:	42 98       	cbi	0x08, 2	; 8
	PORTC &=  ~_BV(3);
     876:	43 98       	cbi	0x08, 3	; 8

}
     878:	08 95       	ret

0000087a <strat0_srow>:
}
*/



void strat0_srow(int t){
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29

	int i;

//	A0_number = s;
	B0_number = 0;
     87e:	10 92 44 01 	sts	0x0144, r1
     882:	10 92 43 01 	sts	0x0143, r1
//	A2_number = s;
	B2_number = 0;
     886:	10 92 26 01 	sts	0x0126, r1
     88a:	10 92 25 01 	sts	0x0125, r1
     88e:	40 91 3b 01 	lds	r20, 0x013B
     892:	50 91 3c 01 	lds	r21, 0x013C
     896:	20 91 39 01 	lds	r18, 0x0139
     89a:	30 91 3a 01 	lds	r19, 0x013A
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	c0 e7       	ldi	r28, 0x70	; 112
     8a4:	d7 e1       	ldi	r29, 0x17	; 23
     8a6:	0f c0       	rjmp	.+30     	; 0x8c6 <strat0_srow+0x4c>


		A0_number = A0_number - 1;
		A2_number = A2_number - 1;

		OCR0A = A0_number;
     8a8:	47 bd       	out	0x27, r20	; 39
		OCR0B = B0_number;
     8aa:	18 bc       	out	0x28, r1	; 40
		PORTB |=  _BV(1);
     8ac:	29 9a       	sbi	0x05, 1	; 5
		PORTB |=  _BV(2);
     8ae:	2a 9a       	sbi	0x05, 2	; 5

		OCR2A = A2_number;
     8b0:	20 93 b3 00 	sts	0x00B3, r18
		OCR2B = B2_number;
     8b4:	10 92 b4 00 	sts	0x00B4, r1
		PORTD |=  _BV(2);
     8b8:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD |=  _BV(3);
     8ba:	5b 9a       	sbi	0x0b, 3	; 11
     8bc:	fe 01       	movw	r30, r28
     8be:	31 97       	sbiw	r30, 0x01	; 1
     8c0:	f1 f7       	brne	.-4      	; 0x8be <strat0_srow+0x44>
//	A0_number = s;
	B0_number = 0;
//	A2_number = s;
	B2_number = 0;

	for(i = 0; i < t; i++){
     8c2:	6f 5f       	subi	r22, 0xFF	; 255
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	da 01       	movw	r26, r20
     8c8:	f9 01       	movw	r30, r18
     8ca:	41 50       	subi	r20, 0x01	; 1
     8cc:	50 40       	sbci	r21, 0x00	; 0
     8ce:	21 50       	subi	r18, 0x01	; 1
     8d0:	30 40       	sbci	r19, 0x00	; 0
     8d2:	68 17       	cp	r22, r24
     8d4:	79 07       	cpc	r23, r25
     8d6:	44 f3       	brlt	.-48     	; 0x8a8 <strat0_srow+0x2e>
     8d8:	e0 93 39 01 	sts	0x0139, r30
     8dc:	f0 93 3a 01 	sts	0x013A, r31
     8e0:	a0 93 3b 01 	sts	0x013B, r26
     8e4:	b0 93 3c 01 	sts	0x013C, r27
		PORTD |=  _BV(2);
		PORTD |=  _BV(3);
		_delay_ms(3);

	}
}
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret

000008ee <back0_srow>:

void back0_srow(int t){
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29

	int i;

	A0_number = 0;
     8f2:	10 92 3c 01 	sts	0x013C, r1
     8f6:	10 92 3b 01 	sts	0x013B, r1
//	B0_number = 0;
	A2_number = 0;
     8fa:	10 92 3a 01 	sts	0x013A, r1
     8fe:	10 92 39 01 	sts	0x0139, r1
     902:	40 91 43 01 	lds	r20, 0x0143
     906:	50 91 44 01 	lds	r21, 0x0144
     90a:	20 91 25 01 	lds	r18, 0x0125
     90e:	30 91 26 01 	lds	r19, 0x0126
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	c0 e7       	ldi	r28, 0x70	; 112
     918:	d7 e1       	ldi	r29, 0x17	; 23
     91a:	0f c0       	rjmp	.+30     	; 0x93a <back0_srow+0x4c>
	for(i = 0; i < t; i++){

		B0_number = B0_number - 1;
		B2_number = B2_number - 1;

		OCR0A = A0_number;
     91c:	17 bc       	out	0x27, r1	; 39
		OCR0B = B0_number;
     91e:	48 bd       	out	0x28, r20	; 40
		PORTB |=  _BV(1);
     920:	29 9a       	sbi	0x05, 1	; 5
		PORTB |=  _BV(2);
     922:	2a 9a       	sbi	0x05, 2	; 5

		OCR2A = A2_number;
     924:	10 92 b3 00 	sts	0x00B3, r1
		OCR2B = B2_number;
     928:	20 93 b4 00 	sts	0x00B4, r18
		PORTD |=  _BV(2);
     92c:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD |=  _BV(3);
     92e:	5b 9a       	sbi	0x0b, 3	; 11
     930:	fe 01       	movw	r30, r28
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	f1 f7       	brne	.-4      	; 0x932 <back0_srow+0x44>
	A0_number = 0;
//	B0_number = 0;
	A2_number = 0;
//	B2_number = 0;

	for(i = 0; i < t; i++){
     936:	6f 5f       	subi	r22, 0xFF	; 255
     938:	7f 4f       	sbci	r23, 0xFF	; 255
     93a:	da 01       	movw	r26, r20
     93c:	f9 01       	movw	r30, r18
     93e:	41 50       	subi	r20, 0x01	; 1
     940:	50 40       	sbci	r21, 0x00	; 0
     942:	21 50       	subi	r18, 0x01	; 1
     944:	30 40       	sbci	r19, 0x00	; 0
     946:	68 17       	cp	r22, r24
     948:	79 07       	cpc	r23, r25
     94a:	44 f3       	brlt	.-48     	; 0x91c <back0_srow+0x2e>
     94c:	e0 93 25 01 	sts	0x0125, r30
     950:	f0 93 26 01 	sts	0x0126, r31
     954:	a0 93 43 01 	sts	0x0143, r26
     958:	b0 93 44 01 	sts	0x0144, r27
		OCR2B = B2_number;
		PORTD |=  _BV(2);
		PORTD |=  _BV(3);
		_delay_ms(3);
	}
}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <left0_srow>:

void left0_srow(int t){
     962:	cf 93       	push	r28
     964:	df 93       	push	r29

	int i;

//	A0_number = 0;
	B0_number = 0;
     966:	10 92 44 01 	sts	0x0144, r1
     96a:	10 92 43 01 	sts	0x0143, r1
	A2_number = 0;
     96e:	10 92 3a 01 	sts	0x013A, r1
     972:	10 92 39 01 	sts	0x0139, r1
     976:	40 91 3b 01 	lds	r20, 0x013B
     97a:	50 91 3c 01 	lds	r21, 0x013C
     97e:	20 91 25 01 	lds	r18, 0x0125
     982:	30 91 26 01 	lds	r19, 0x0126
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	c0 e7       	ldi	r28, 0x70	; 112
     98c:	d7 e1       	ldi	r29, 0x17	; 23
     98e:	0f c0       	rjmp	.+30     	; 0x9ae <left0_srow+0x4c>
	for(i = 0; i < t; i++){

		A0_number = A0_number - 1;
		B2_number = B2_number - 1;

		OCR0A = A0_number;
     990:	47 bd       	out	0x27, r20	; 39
		OCR0B = B0_number;
     992:	18 bc       	out	0x28, r1	; 40
		PORTB |=  _BV(1);
     994:	29 9a       	sbi	0x05, 1	; 5
		PORTB |=  _BV(2);
     996:	2a 9a       	sbi	0x05, 2	; 5

		OCR2A = A2_number;
     998:	10 92 b3 00 	sts	0x00B3, r1
		OCR2B = B2_number;
     99c:	20 93 b4 00 	sts	0x00B4, r18
		PORTD |=  _BV(2);
     9a0:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD |=  _BV(3);
     9a2:	5b 9a       	sbi	0x0b, 3	; 11
     9a4:	fe 01       	movw	r30, r28
     9a6:	31 97       	sbiw	r30, 0x01	; 1
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <left0_srow+0x44>
//	A0_number = 0;
	B0_number = 0;
	A2_number = 0;
//	B2_number = 0;

	for(i = 0; i < t; i++){
     9aa:	6f 5f       	subi	r22, 0xFF	; 255
     9ac:	7f 4f       	sbci	r23, 0xFF	; 255
     9ae:	da 01       	movw	r26, r20
     9b0:	f9 01       	movw	r30, r18
     9b2:	41 50       	subi	r20, 0x01	; 1
     9b4:	50 40       	sbci	r21, 0x00	; 0
     9b6:	21 50       	subi	r18, 0x01	; 1
     9b8:	30 40       	sbci	r19, 0x00	; 0
     9ba:	68 17       	cp	r22, r24
     9bc:	79 07       	cpc	r23, r25
     9be:	44 f3       	brlt	.-48     	; 0x990 <left0_srow+0x2e>
     9c0:	e0 93 25 01 	sts	0x0125, r30
     9c4:	f0 93 26 01 	sts	0x0126, r31
     9c8:	a0 93 3b 01 	sts	0x013B, r26
     9cc:	b0 93 3c 01 	sts	0x013C, r27
		OCR2B = B2_number;
		PORTD |=  _BV(2);
		PORTD |=  _BV(3);
		_delay_ms(3);
	}
}
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	08 95       	ret

000009d6 <right0_srow>:

void right0_srow(int t){
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29

	int i;

	A0_number = 0;
     9da:	10 92 3c 01 	sts	0x013C, r1
     9de:	10 92 3b 01 	sts	0x013B, r1
//	B0_number = 0;
//	A2_number = 0;
	B2_number = 0;
     9e2:	10 92 26 01 	sts	0x0126, r1
     9e6:	10 92 25 01 	sts	0x0125, r1
     9ea:	40 91 43 01 	lds	r20, 0x0143
     9ee:	50 91 44 01 	lds	r21, 0x0144
     9f2:	20 91 39 01 	lds	r18, 0x0139
     9f6:	30 91 3a 01 	lds	r19, 0x013A
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	c0 e7       	ldi	r28, 0x70	; 112
     a00:	d7 e1       	ldi	r29, 0x17	; 23
     a02:	0f c0       	rjmp	.+30     	; 0xa22 <right0_srow+0x4c>
	for(i = 0; i < t; i++){

		B0_number = B0_number - 1;
		A2_number = A2_number - 1;

		OCR0A = A0_number;
     a04:	17 bc       	out	0x27, r1	; 39
		OCR0B = B0_number;
     a06:	48 bd       	out	0x28, r20	; 40
		PORTB |=  _BV(1);
     a08:	29 9a       	sbi	0x05, 1	; 5
		PORTB |=  _BV(2);
     a0a:	2a 9a       	sbi	0x05, 2	; 5

		OCR2A = A2_number;
     a0c:	20 93 b3 00 	sts	0x00B3, r18
		OCR2B = B2_number;
     a10:	10 92 b4 00 	sts	0x00B4, r1
		PORTD |=  _BV(2);
     a14:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD |=  _BV(3);
     a16:	5b 9a       	sbi	0x0b, 3	; 11
     a18:	fe 01       	movw	r30, r28
     a1a:	31 97       	sbiw	r30, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <right0_srow+0x44>
	A0_number = 0;
//	B0_number = 0;
//	A2_number = 0;
	B2_number = 0;

	for(i = 0; i < t; i++){
     a1e:	6f 5f       	subi	r22, 0xFF	; 255
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	da 01       	movw	r26, r20
     a24:	f9 01       	movw	r30, r18
     a26:	41 50       	subi	r20, 0x01	; 1
     a28:	50 40       	sbci	r21, 0x00	; 0
     a2a:	21 50       	subi	r18, 0x01	; 1
     a2c:	30 40       	sbci	r19, 0x00	; 0
     a2e:	68 17       	cp	r22, r24
     a30:	79 07       	cpc	r23, r25
     a32:	44 f3       	brlt	.-48     	; 0xa04 <right0_srow+0x2e>
     a34:	e0 93 39 01 	sts	0x0139, r30
     a38:	f0 93 3a 01 	sts	0x013A, r31
     a3c:	a0 93 43 01 	sts	0x0143, r26
     a40:	b0 93 44 01 	sts	0x0144, r27
		OCR2B = B2_number;
		PORTD |=  _BV(2);
		PORTD |=  _BV(3);
		_delay_ms(3);
	}
}
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <leaf_on>:

		}
}

void leaf_on(){
	PORTC |= _BV(7);
     a4a:	47 9a       	sbi	0x08, 7	; 8
     a4c:	80 e7       	ldi	r24, 0x70	; 112
     a4e:	97 e1       	ldi	r25, 0x17	; 23
     a50:	28 ec       	ldi	r18, 0xC8	; 200
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	f9 01       	movw	r30, r18
     a56:	31 97       	sbiw	r30, 0x01	; 1
     a58:	f1 f7       	brne	.-4      	; 0xa56 <leaf_on+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a5a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a5c:	d9 f7       	brne	.-10     	; 0xa54 <leaf_on+0xa>

	_delay_ms(600);

	PORTC &=~_BV(7);
     a5e:	47 98       	cbi	0x08, 7	; 8
}
     a60:	08 95       	ret

00000a62 <leaf_off>:

void leaf_off(){
	PORTC |= _BV(6);
     a62:	46 9a       	sbi	0x08, 6	; 8
     a64:	80 e7       	ldi	r24, 0x70	; 112
     a66:	97 e1       	ldi	r25, 0x17	; 23
     a68:	28 ec       	ldi	r18, 0xC8	; 200
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	f9 01       	movw	r30, r18
     a6e:	31 97       	sbiw	r30, 0x01	; 1
     a70:	f1 f7       	brne	.-4      	; 0xa6e <leaf_off+0xc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a72:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a74:	d9 f7       	brne	.-10     	; 0xa6c <leaf_off+0xa>

	_delay_ms(600);

	PORTC &=~_BV(6);
     a76:	46 98       	cbi	0x08, 6	; 8
}
     a78:	08 95       	ret

00000a7a <leaf>:
	return SwitchRecv[1] & _BV(PS_CROSS);
}

// ○キーが押されているか返す
inline bool ps_circle(void){
	return SwitchRecv[1] & _BV(PS_CIRCLE);
     a7a:	80 91 29 01 	lds	r24, 0x0129
     a7e:	90 91 2a 01 	lds	r25, 0x012A

	bool token = false; // トークンをとっているか
//	bool basket = false; // 籠をとっているか

void leaf(){
		if(ps_circle()){
     a82:	85 ff       	sbrs	r24, 5
     a84:	14 c0       	rjmp	.+40     	; 0xaae <leaf+0x34>
			
			// トークンを掴んでいる場合
			if(token){
     a86:	80 91 20 01 	lds	r24, 0x0120
     a8a:	88 23       	and	r24, r24
     a8c:	29 f0       	breq	.+10     	; 0xa98 <leaf+0x1e>
				leaf_off();
     a8e:	0e 94 31 05 	call	0xa62	; 0xa62 <leaf_off>
				token = false;
     a92:	10 92 20 01 	sts	0x0120, r1
     a96:	05 c0       	rjmp	.+10     	; 0xaa2 <leaf+0x28>
			}
			
			// トークンを掴んでいない場合
			else {
				leaf_on();
     a98:	0e 94 25 05 	call	0xa4a	; 0xa4a <leaf_on>
				token = true;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	80 93 20 01 	sts	0x0120, r24
	return SwitchRecv[1] & _BV(PS_CROSS);
}

// ○キーが押されているか返す
inline bool ps_circle(void){
	return SwitchRecv[1] & _BV(PS_CIRCLE);
     aa2:	80 91 29 01 	lds	r24, 0x0129
     aa6:	90 91 2a 01 	lds	r25, 0x012A
			else {
				leaf_on();
				token = true;
			}

			while(ps_circle());
     aaa:	85 fd       	sbrc	r24, 5
     aac:	fa cf       	rjmp	.-12     	; 0xaa2 <leaf+0x28>
     aae:	08 95       	ret

00000ab0 <slow_move>:

int flag_stop1 = 0;
int flag_stop2 = 0;

/*---------------------スロー足回り-----------------*/
void slow_move(){
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
						break;
					}
				}

			}else {
				flag_stop1 = 1;
     ab4:	c1 e0       	ldi	r28, 0x01	; 1
     ab6:	d0 e0       	ldi	r29, 0x00	; 0
     ab8:	c2 c1       	rjmp	.+900    	; 0xe3e <slow_move+0x38e>
/*---------------------スロー足回り-----------------*/
void slow_move(){
			
		while(ps_l1()){

			leaf();
     aba:	0e 94 3d 05 	call	0xa7a	; 0xa7a <leaf>
#define PS_SQUARE   7


// 上キーが押されているか返す
inline bool ps_top(void){
	return SwitchRecv[0] & _BV(PS_UP);
     abe:	80 91 27 01 	lds	r24, 0x0127
     ac2:	90 91 28 01 	lds	r25, 0x0128
			
		while(ps_l1()){

			leaf();

			if(ps_top()){
     ac6:	84 ff       	sbrs	r24, 4
     ac8:	48 c0       	rjmp	.+144    	; 0xb5a <slow_move+0xaa>
/*
					usart_sendStr("  ");
					usart_sendStr("上キー"); 
					usart_sendStr("\r\n"); // 改行
*/
				if(flag_stop1 == 1){
     aca:	80 91 1c 01 	lds	r24, 0x011C
     ace:	90 91 1d 01 	lds	r25, 0x011D
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	91 f4       	brne	.+36     	; 0xafa <slow_move+0x4a>
					A0_number = 100;
     ad6:	84 e6       	ldi	r24, 0x64	; 100
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	90 93 3c 01 	sts	0x013C, r25
     ade:	80 93 3b 01 	sts	0x013B, r24
					B0_number = 100;
     ae2:	90 93 44 01 	sts	0x0144, r25
     ae6:	80 93 43 01 	sts	0x0143, r24
					A2_number = 100;
     aea:	90 93 3a 01 	sts	0x013A, r25
     aee:	80 93 39 01 	sts	0x0139, r24
					B2_number = 100;
     af2:	90 93 26 01 	sts	0x0126, r25
     af6:	80 93 25 01 	sts	0x0125, r24
//					strat0(0,1);

				}
					flag_stop1 = 0;
     afa:	10 92 1d 01 	sts	0x011D, r1
     afe:	10 92 1c 01 	sts	0x011C, r1
				if(A0_number > 110){
     b02:	80 91 3b 01 	lds	r24, 0x013B
     b06:	90 91 3c 01 	lds	r25, 0x013C
     b0a:	8f 36       	cpi	r24, 0x6F	; 111
     b0c:	91 05       	cpc	r25, r1
     b0e:	2c f0       	brlt	.+10     	; 0xb1a <slow_move+0x6a>

					strat0_srow(A0_number - 100);
     b10:	84 56       	subi	r24, 0x64	; 100
     b12:	90 40       	sbci	r25, 0x00	; 0
     b14:	0e 94 3d 04 	call	0x87a	; 0x87a <strat0_srow>
     b18:	06 c0       	rjmp	.+12     	; 0xb26 <slow_move+0x76>
				}else{
					strat0(0, 100); //(PWM初期値, カウンター)
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	64 e6       	ldi	r22, 0x64	; 100
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	0e 94 30 01 	call	0x260	; 0x260 <strat0>
				}

				while(1){
					strat1(100); //(PWM)
     b26:	84 e6       	ldi	r24, 0x64	; 100
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <strat1>
#define PS_SQUARE   7


// 上キーが押されているか返す
inline bool ps_top(void){
	return SwitchRecv[0] & _BV(PS_UP);
     b2e:	80 91 27 01 	lds	r24, 0x0127
     b32:	90 91 28 01 	lds	r25, 0x0128
				}

				while(1){
					strat1(100); //(PWM)

					if(!ps_top()){
     b36:	84 fd       	sbrc	r24, 4
     b38:	03 c0       	rjmp	.+6      	; 0xb40 <slow_move+0x90>
						strat_stop();
     b3a:	0e 94 89 01 	call	0x312	; 0x312 <strat_stop>
     b3e:	61 c0       	rjmp	.+194    	; 0xc02 <slow_move+0x152>
	return SwitchRecv[1] & _BV(PS_R2);
}

// L1 キーが押されているか返す
inline bool ps_l1(void){
	return SwitchRecv[1] & _BV(PS_L1);
     b40:	80 91 29 01 	lds	r24, 0x0129
     b44:	90 91 2a 01 	lds	r25, 0x012A
					if(!ps_top()){
						strat_stop();
						break;
					}

					if(!ps_l1()){
     b48:	82 fd       	sbrc	r24, 2
     b4a:	ed cf       	rjmp	.-38     	; 0xb26 <slow_move+0x76>
						strat0(100,155);
     b4c:	84 e6       	ldi	r24, 0x64	; 100
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	6b e9       	ldi	r22, 0x9B	; 155
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	0e 94 30 01 	call	0x260	; 0x260 <strat0>
     b58:	54 c0       	rjmp	.+168    	; 0xc02 <slow_move+0x152>
	return SwitchRecv[0] & _BV(PS_RIGHT);
}

// 下キーが押されているか返す
inline bool ps_bottom(void){
	return SwitchRecv[0] & _BV(PS_DOWN);
     b5a:	80 91 27 01 	lds	r24, 0x0127
     b5e:	90 91 28 01 	lds	r25, 0x0128
					if(!ps_l1()){
						strat0(100,155);
						break;
					}
				}
			}else if(ps_bottom()){
     b62:	86 ff       	sbrs	r24, 6
     b64:	48 c0       	rjmp	.+144    	; 0xbf6 <slow_move+0x146>
				if(flag_stop1 == 1){
     b66:	80 91 1c 01 	lds	r24, 0x011C
     b6a:	90 91 1d 01 	lds	r25, 0x011D
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	91 f4       	brne	.+36     	; 0xb96 <slow_move+0xe6>
					A0_number = 100;
     b72:	84 e6       	ldi	r24, 0x64	; 100
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	90 93 3c 01 	sts	0x013C, r25
     b7a:	80 93 3b 01 	sts	0x013B, r24
					B0_number = 100;
     b7e:	90 93 44 01 	sts	0x0144, r25
     b82:	80 93 43 01 	sts	0x0143, r24
					A2_number = 100;
     b86:	90 93 3a 01 	sts	0x013A, r25
     b8a:	80 93 39 01 	sts	0x0139, r24
					B2_number = 100;
     b8e:	90 93 26 01 	sts	0x0126, r25
     b92:	80 93 25 01 	sts	0x0125, r24
//					strat0(0,1);

				}
				
				flag_stop1 = 0;
     b96:	10 92 1d 01 	sts	0x011D, r1
     b9a:	10 92 1c 01 	sts	0x011C, r1

				if(B0_number > 110){
     b9e:	80 91 43 01 	lds	r24, 0x0143
     ba2:	90 91 44 01 	lds	r25, 0x0144
     ba6:	8f 36       	cpi	r24, 0x6F	; 111
     ba8:	91 05       	cpc	r25, r1
     baa:	2c f0       	brlt	.+10     	; 0xbb6 <slow_move+0x106>
					back0_srow(B0_number - 100);
     bac:	84 56       	subi	r24, 0x64	; 100
     bae:	90 40       	sbci	r25, 0x00	; 0
     bb0:	0e 94 77 04 	call	0x8ee	; 0x8ee <back0_srow>
     bb4:	06 c0       	rjmp	.+12     	; 0xbc2 <slow_move+0x112>
				}else{
					back0(0, 100); //(PWM初期値, カウンター)
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	64 e6       	ldi	r22, 0x64	; 100
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	0e 94 b8 01 	call	0x370	; 0x370 <back0>
				}

				while(1){
					back1(100); //(PWM)
     bc2:	84 e6       	ldi	r24, 0x64	; 100
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <back1>
	return SwitchRecv[0] & _BV(PS_RIGHT);
}

// 下キーが押されているか返す
inline bool ps_bottom(void){
	return SwitchRecv[0] & _BV(PS_DOWN);
     bca:	80 91 27 01 	lds	r24, 0x0127
     bce:	90 91 28 01 	lds	r25, 0x0128
				}

				while(1){
					back1(100); //(PWM)

					if(!ps_bottom()){
     bd2:	86 fd       	sbrc	r24, 6
     bd4:	03 c0       	rjmp	.+6      	; 0xbdc <slow_move+0x12c>
						back_stop();
     bd6:	0e 94 11 02 	call	0x422	; 0x422 <back_stop>
     bda:	13 c0       	rjmp	.+38     	; 0xc02 <slow_move+0x152>
	return SwitchRecv[1] & _BV(PS_R2);
}

// L1 キーが押されているか返す
inline bool ps_l1(void){
	return SwitchRecv[1] & _BV(PS_L1);
     bdc:	80 91 29 01 	lds	r24, 0x0129
     be0:	90 91 2a 01 	lds	r25, 0x012A
					if(!ps_bottom()){
						back_stop();
						break;
					}

					if(!ps_l1()){
     be4:	82 fd       	sbrc	r24, 2
     be6:	ed cf       	rjmp	.-38     	; 0xbc2 <slow_move+0x112>
						back0(100,155);
     be8:	84 e6       	ldi	r24, 0x64	; 100
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	6b e9       	ldi	r22, 0x9B	; 155
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	0e 94 b8 01 	call	0x370	; 0x370 <back0>
     bf4:	06 c0       	rjmp	.+12     	; 0xc02 <slow_move+0x152>
						break;
					}
				}

			}else {
				flag_stop1 = 1;
     bf6:	d0 93 1d 01 	sts	0x011D, r29
     bfa:	c0 93 1c 01 	sts	0x011C, r28
				stop();
     bfe:	0e 94 4a 03 	call	0x694	; 0x694 <stop>
	return SwitchRecv[0] & _BV(PS_DOWN);
}

// 左キーが押されているか返す
inline bool ps_left(void){
	return SwitchRecv[0] & _BV(PS_LEFT);
     c02:	80 91 27 01 	lds	r24, 0x0127
     c06:	90 91 28 01 	lds	r25, 0x0128
				stop();
			}



			if(ps_left()){
     c0a:	87 ff       	sbrs	r24, 7
     c0c:	48 c0       	rjmp	.+144    	; 0xc9e <slow_move+0x1ee>

				if(flag_stop2 == 1){
     c0e:	80 91 1e 01 	lds	r24, 0x011E
     c12:	90 91 1f 01 	lds	r25, 0x011F
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	91 f4       	brne	.+36     	; 0xc3e <slow_move+0x18e>
					A0_number = 100;
     c1a:	84 e6       	ldi	r24, 0x64	; 100
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	90 93 3c 01 	sts	0x013C, r25
     c22:	80 93 3b 01 	sts	0x013B, r24
					B0_number = 100;
     c26:	90 93 44 01 	sts	0x0144, r25
     c2a:	80 93 43 01 	sts	0x0143, r24
					A2_number = 100;
     c2e:	90 93 3a 01 	sts	0x013A, r25
     c32:	80 93 39 01 	sts	0x0139, r24
					B2_number = 100;
     c36:	90 93 26 01 	sts	0x0126, r25
     c3a:	80 93 25 01 	sts	0x0125, r24
//					strat0(0,1);

				}

				flag_stop2 = 0;
     c3e:	10 92 1f 01 	sts	0x011F, r1
     c42:	10 92 1e 01 	sts	0x011E, r1

				if(A0_number > 110){
     c46:	80 91 3b 01 	lds	r24, 0x013B
     c4a:	90 91 3c 01 	lds	r25, 0x013C
     c4e:	8f 36       	cpi	r24, 0x6F	; 111
     c50:	91 05       	cpc	r25, r1
     c52:	2c f0       	brlt	.+10     	; 0xc5e <slow_move+0x1ae>
					left0_srow(A0_number - 100);
     c54:	84 56       	subi	r24, 0x64	; 100
     c56:	90 40       	sbci	r25, 0x00	; 0
     c58:	0e 94 b1 04 	call	0x962	; 0x962 <left0_srow>
     c5c:	06 c0       	rjmp	.+12     	; 0xc6a <slow_move+0x1ba>
				}else{
					left0(0, 100); //(PWM初期値, カウンター)
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	64 e6       	ldi	r22, 0x64	; 100
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	0e 94 40 02 	call	0x480	; 0x480 <left0>
				}

				while(1){
					left1(100);
     c6a:	84 e6       	ldi	r24, 0x64	; 100
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <left1>
	return SwitchRecv[0] & _BV(PS_DOWN);
}

// 左キーが押されているか返す
inline bool ps_left(void){
	return SwitchRecv[0] & _BV(PS_LEFT);
     c72:	80 91 27 01 	lds	r24, 0x0127
     c76:	90 91 28 01 	lds	r25, 0x0128
				}

				while(1){
					left1(100);

					if(!ps_left()){
     c7a:	87 fd       	sbrc	r24, 7
     c7c:	03 c0       	rjmp	.+6      	; 0xc84 <slow_move+0x1d4>
						left_stop();
     c7e:	0e 94 96 02 	call	0x52c	; 0x52c <left_stop>
     c82:	61 c0       	rjmp	.+194    	; 0xd46 <slow_move+0x296>
	return SwitchRecv[1] & _BV(PS_R2);
}

// L1 キーが押されているか返す
inline bool ps_l1(void){
	return SwitchRecv[1] & _BV(PS_L1);
     c84:	80 91 29 01 	lds	r24, 0x0129
     c88:	90 91 2a 01 	lds	r25, 0x012A
					if(!ps_left()){
						left_stop();
						break;
					}

					if(!ps_l1()){
     c8c:	82 fd       	sbrc	r24, 2
     c8e:	ed cf       	rjmp	.-38     	; 0xc6a <slow_move+0x1ba>
						left0(100,155);
     c90:	84 e6       	ldi	r24, 0x64	; 100
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	6b e9       	ldi	r22, 0x9B	; 155
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	0e 94 40 02 	call	0x480	; 0x480 <left0>
     c9c:	54 c0       	rjmp	.+168    	; 0xd46 <slow_move+0x296>
	return SwitchRecv[0] & _BV(PS_UP);
}

// 右キーが押されているか返す
inline bool ps_right(void){
	return SwitchRecv[0] & _BV(PS_RIGHT);
     c9e:	80 91 27 01 	lds	r24, 0x0127
     ca2:	90 91 28 01 	lds	r25, 0x0128
					if(!ps_l1()){
						left0(100,155);
						break;
					}
				}
			}else if(ps_right()){
     ca6:	85 ff       	sbrs	r24, 5
     ca8:	48 c0       	rjmp	.+144    	; 0xd3a <slow_move+0x28a>

				if(flag_stop2 == 1){
     caa:	80 91 1e 01 	lds	r24, 0x011E
     cae:	90 91 1f 01 	lds	r25, 0x011F
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	91 f4       	brne	.+36     	; 0xcda <slow_move+0x22a>
					A0_number = 100;
     cb6:	84 e6       	ldi	r24, 0x64	; 100
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	90 93 3c 01 	sts	0x013C, r25
     cbe:	80 93 3b 01 	sts	0x013B, r24
					B0_number = 100;
     cc2:	90 93 44 01 	sts	0x0144, r25
     cc6:	80 93 43 01 	sts	0x0143, r24
					A2_number = 100;
     cca:	90 93 3a 01 	sts	0x013A, r25
     cce:	80 93 39 01 	sts	0x0139, r24
					B2_number = 100;
     cd2:	90 93 26 01 	sts	0x0126, r25
     cd6:	80 93 25 01 	sts	0x0125, r24
//					strat0(0,1);

				}

				flag_stop2 = 0;
     cda:	10 92 1f 01 	sts	0x011F, r1
     cde:	10 92 1e 01 	sts	0x011E, r1

				if(B0_number > 110){
     ce2:	80 91 43 01 	lds	r24, 0x0143
     ce6:	90 91 44 01 	lds	r25, 0x0144
     cea:	8f 36       	cpi	r24, 0x6F	; 111
     cec:	91 05       	cpc	r25, r1
     cee:	2c f0       	brlt	.+10     	; 0xcfa <slow_move+0x24a>
					right0_srow(B0_number - 100);
     cf0:	84 56       	subi	r24, 0x64	; 100
     cf2:	90 40       	sbci	r25, 0x00	; 0
     cf4:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <right0_srow>
     cf8:	06 c0       	rjmp	.+12     	; 0xd06 <slow_move+0x256>
				}else{
					right0(0, 100); //(PWM初期値, カウンター)
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	64 e6       	ldi	r22, 0x64	; 100
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	0e 94 c5 02 	call	0x58a	; 0x58a <right0>
				}

				while(1){
					right1(100);
     d06:	84 e6       	ldi	r24, 0x64	; 100
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 00 03 	call	0x600	; 0x600 <right1>
	return SwitchRecv[0] & _BV(PS_UP);
}

// 右キーが押されているか返す
inline bool ps_right(void){
	return SwitchRecv[0] & _BV(PS_RIGHT);
     d0e:	80 91 27 01 	lds	r24, 0x0127
     d12:	90 91 28 01 	lds	r25, 0x0128
				}

				while(1){
					right1(100);

					if(!ps_right()){
     d16:	85 fd       	sbrc	r24, 5
     d18:	03 c0       	rjmp	.+6      	; 0xd20 <slow_move+0x270>
						right_stop();
     d1a:	0e 94 1b 03 	call	0x636	; 0x636 <right_stop>
     d1e:	13 c0       	rjmp	.+38     	; 0xd46 <slow_move+0x296>
	return SwitchRecv[1] & _BV(PS_R2);
}

// L1 キーが押されているか返す
inline bool ps_l1(void){
	return SwitchRecv[1] & _BV(PS_L1);
     d20:	80 91 29 01 	lds	r24, 0x0129
     d24:	90 91 2a 01 	lds	r25, 0x012A
					if(!ps_right()){
						right_stop();
						break;
					}

					if(!ps_l1()){
     d28:	82 fd       	sbrc	r24, 2
     d2a:	ed cf       	rjmp	.-38     	; 0xd06 <slow_move+0x256>
						right0(100,155);
     d2c:	84 e6       	ldi	r24, 0x64	; 100
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	6b e9       	ldi	r22, 0x9B	; 155
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	0e 94 c5 02 	call	0x58a	; 0x58a <right0>
     d38:	06 c0       	rjmp	.+12     	; 0xd46 <slow_move+0x296>
						break;
					}
				}

			}else {
				flag_stop2 = 1;
     d3a:	d0 93 1f 01 	sts	0x011F, r29
     d3e:	c0 93 1e 01 	sts	0x011E, r28
				stop();
     d42:	0e 94 4a 03 	call	0x694	; 0x694 <stop>
	return SwitchRecv[1] & _BV(PS_R1);
}

// △キーが押されているか返す
inline bool ps_triangle(void){
	return SwitchRecv[1] & _BV(PS_TRIANGLE);
     d46:	80 91 29 01 	lds	r24, 0x0129
     d4a:	90 91 2a 01 	lds	r25, 0x012A





			if(ps_triangle()){
     d4e:	84 ff       	sbrs	r24, 4
     d50:	24 c0       	rjmp	.+72     	; 0xd9a <slow_move+0x2ea>
//				arm_twe_strat1();
				arm_one_strat0(0, 255); //(PWM初期値, カウンター)
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	6f ef       	ldi	r22, 0xFF	; 255
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <arm_one_strat0>


				while(1){
					arm_one_strat1(255); //(PWM)
     d5e:	8f ef       	ldi	r24, 0xFF	; 255
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 8a 03 	call	0x714	; 0x714 <arm_one_strat1>
	return SwitchRecv[1] & _BV(PS_L2);
}

// R2 キーが押されているか返す
inline bool ps_r2(void){
	return SwitchRecv[1] & _BV(PS_R2);
     d66:	80 91 29 01 	lds	r24, 0x0129
     d6a:	90 91 2a 01 	lds	r25, 0x012A

				while(1){
					arm_one_strat1(255); //(PWM)
//					arm_twe_strat1();

					if(ps_r2()){
     d6e:	81 ff       	sbrs	r24, 1
     d70:	03 c0       	rjmp	.+6      	; 0xd78 <slow_move+0x2c8>

						arm_twe_back1();
     d72:	0e 94 1f 04 	call	0x83e	; 0x83e <arm_twe_back1>
     d76:	08 c0       	rjmp	.+16     	; 0xd88 <slow_move+0x2d8>
	return SwitchRecv[1] & _BV(PS_L1);
}

// R1 キーが押されているか返す
inline bool ps_r1(void){
	return SwitchRecv[1] & _BV(PS_R1);
     d78:	80 91 29 01 	lds	r24, 0x0129
     d7c:	90 91 2a 01 	lds	r25, 0x012A
//					arm_twe_strat1();

					if(ps_r2()){

						arm_twe_back1();
					}else if(ps_r1()){
     d80:	83 ff       	sbrs	r24, 3
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <slow_move+0x2d8>

						arm_twe_strat1();
     d84:	0e 94 1a 04 	call	0x834	; 0x834 <arm_twe_strat1>
	return SwitchRecv[1] & _BV(PS_R1);
}

// △キーが押されているか返す
inline bool ps_triangle(void){
	return SwitchRecv[1] & _BV(PS_TRIANGLE);
     d88:	80 91 29 01 	lds	r24, 0x0129
     d8c:	90 91 2a 01 	lds	r25, 0x012A
					}else if(ps_r1()){

						arm_twe_strat1();
					}

					if(!ps_triangle()){
     d90:	84 fd       	sbrc	r24, 4
     d92:	e5 cf       	rjmp	.-54     	; 0xd5e <slow_move+0x2ae>
						arm_one_strat_stop();
     d94:	0e 94 9d 03 	call	0x73a	; 0x73a <arm_one_strat_stop>
     d98:	29 c0       	rjmp	.+82     	; 0xdec <slow_move+0x33c>
	return SwitchRecv[1] & _BV(PS_TRIANGLE);
}

// ×キーが押されているか返す
inline bool ps_cross(void){
	return SwitchRecv[1] & _BV(PS_CROSS);
     d9a:	80 91 29 01 	lds	r24, 0x0129
     d9e:	90 91 2a 01 	lds	r25, 0x012A
					if(!ps_triangle()){
						arm_one_strat_stop();
						break;
					}
				}
			}else if(ps_cross()){
     da2:	86 ff       	sbrs	r24, 6
     da4:	23 c0       	rjmp	.+70     	; 0xdec <slow_move+0x33c>
				arm_one_back0(0, 255);
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	6f ef       	ldi	r22, 0xFF	; 255
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	0e 94 c1 03 	call	0x782	; 0x782 <arm_one_back0>
//				arm_twe_back1();	
				while(1){
					arm_one_back1(255);
     db2:	8f ef       	ldi	r24, 0xFF	; 255
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <arm_one_back1>
	return SwitchRecv[1] & _BV(PS_L2);
}

// R2 キーが押されているか返す
inline bool ps_r2(void){
	return SwitchRecv[1] & _BV(PS_R2);
     dba:	80 91 29 01 	lds	r24, 0x0129
     dbe:	90 91 2a 01 	lds	r25, 0x012A
//				arm_twe_back1();	
				while(1){
					arm_one_back1(255);
//					arm_twe_back1();

					if(ps_r2()){
     dc2:	81 ff       	sbrs	r24, 1
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <slow_move+0x31c>

						arm_twe_back1();
     dc6:	0e 94 1f 04 	call	0x83e	; 0x83e <arm_twe_back1>
     dca:	08 c0       	rjmp	.+16     	; 0xddc <slow_move+0x32c>
	return SwitchRecv[1] & _BV(PS_L1);
}

// R1 キーが押されているか返す
inline bool ps_r1(void){
	return SwitchRecv[1] & _BV(PS_R1);
     dcc:	80 91 29 01 	lds	r24, 0x0129
     dd0:	90 91 2a 01 	lds	r25, 0x012A
//					arm_twe_back1();

					if(ps_r2()){

						arm_twe_back1();
					}else if(ps_r1()){
     dd4:	83 ff       	sbrs	r24, 3
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <slow_move+0x32c>

						arm_twe_strat1();
     dd8:	0e 94 1a 04 	call	0x834	; 0x834 <arm_twe_strat1>
	return SwitchRecv[1] & _BV(PS_TRIANGLE);
}

// ×キーが押されているか返す
inline bool ps_cross(void){
	return SwitchRecv[1] & _BV(PS_CROSS);
     ddc:	80 91 29 01 	lds	r24, 0x0129
     de0:	90 91 2a 01 	lds	r25, 0x012A

					}



					if(!ps_cross()){
     de4:	86 fd       	sbrc	r24, 6
     de6:	e5 cf       	rjmp	.-54     	; 0xdb2 <slow_move+0x302>
						arm_one_back_stop();
     de8:	0e 94 f6 03 	call	0x7ec	; 0x7ec <arm_one_back_stop>
	return SwitchRecv[1] & _BV(PS_R1);
}

// △キーが押されているか返す
inline bool ps_triangle(void){
	return SwitchRecv[1] & _BV(PS_TRIANGLE);
     dec:	80 91 29 01 	lds	r24, 0x0129
     df0:	90 91 2a 01 	lds	r25, 0x012A
//				stop2();

			}


			if(ps_triangle()){
     df4:	84 ff       	sbrs	r24, 4
     df6:	05 c0       	rjmp	.+10     	; 0xe02 <slow_move+0x352>
					arm_one_strat1(255); //(PWM)
     df8:	8f ef       	ldi	r24, 0xFF	; 255
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 8a 03 	call	0x714	; 0x714 <arm_one_strat1>
     e00:	0a c0       	rjmp	.+20     	; 0xe16 <slow_move+0x366>
	return SwitchRecv[1] & _BV(PS_TRIANGLE);
}

// ×キーが押されているか返す
inline bool ps_cross(void){
	return SwitchRecv[1] & _BV(PS_CROSS);
     e02:	80 91 29 01 	lds	r24, 0x0129
     e06:	90 91 2a 01 	lds	r25, 0x012A

			if(ps_triangle()){
					arm_one_strat1(255); //(PWM)


			}else if(ps_cross()){
     e0a:	86 ff       	sbrs	r24, 6
     e0c:	04 c0       	rjmp	.+8      	; 0xe16 <slow_move+0x366>
					arm_one_back1(255);
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <arm_one_back1>
	return SwitchRecv[1] & _BV(PS_L2);
}

// R2 キーが押されているか返す
inline bool ps_r2(void){
	return SwitchRecv[1] & _BV(PS_R2);
     e16:	80 91 29 01 	lds	r24, 0x0129
     e1a:	90 91 2a 01 	lds	r25, 0x012A


			}

			
			if(ps_r2()){
     e1e:	81 ff       	sbrs	r24, 1
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <slow_move+0x378>

				arm_twe_back1();
     e22:	0e 94 1f 04 	call	0x83e	; 0x83e <arm_twe_back1>
     e26:	0b c0       	rjmp	.+22     	; 0xe3e <slow_move+0x38e>
	return SwitchRecv[1] & _BV(PS_L1);
}

// R1 キーが押されているか返す
inline bool ps_r1(void){
	return SwitchRecv[1] & _BV(PS_R1);
     e28:	80 91 29 01 	lds	r24, 0x0129
     e2c:	90 91 2a 01 	lds	r25, 0x012A

			
			if(ps_r2()){

				arm_twe_back1();
			}else if(ps_r1()){
     e30:	83 ff       	sbrs	r24, 3
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <slow_move+0x38a>

				arm_twe_strat1();
     e34:	0e 94 1a 04 	call	0x834	; 0x834 <arm_twe_strat1>
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <slow_move+0x38e>


			}else {
				stop2();
     e3a:	0e 94 24 04 	call	0x848	; 0x848 <stop2>
	return SwitchRecv[1] & _BV(PS_R2);
}

// L1 キーが押されているか返す
inline bool ps_l1(void){
	return SwitchRecv[1] & _BV(PS_L1);
     e3e:	80 91 29 01 	lds	r24, 0x0129
     e42:	90 91 2a 01 	lds	r25, 0x012A
int flag_stop2 = 0;

/*---------------------スロー足回り-----------------*/
void slow_move(){
			
		while(ps_l1()){
     e46:	82 fd       	sbrc	r24, 2
     e48:	38 ce       	rjmp	.-912    	; 0xaba <slow_move+0xa>
			}



		}
}
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	08 95       	ret

00000e50 <main>:
// PD6: BLS (左モーター)
// PD7: ALS (左モーター)


/**********メイン関数**********/
int main(){
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29

	token = false; // トークンをとっているか
     e58:	10 92 20 01 	sts	0x0120, r1


	DDRA = 0b11111111;
     e5c:	8f ef       	ldi	r24, 0xFF	; 255
     e5e:	81 b9       	out	0x01, r24	; 1
	DDRB = 0b11111111;
     e60:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11111111;
     e62:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b11111111;
     e64:	87 b9       	out	0x07, r24	; 7
#define MYUBRR FOSC/16/BAUD-1 // UART分周率


/* USART設定 */
void usart_init(unsigned int ubrr){
  UBRR0H = (unsigned char)(ubrr>>8); // ボーレート上位8bit
     e66:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = (unsigned char)ubrr; // ボーレート下位8bit
     e6a:	8c e0       	ldi	r24, 0x0C	; 12
     e6c:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0A = (0<<U2X0); // 等速
     e70:	10 92 c0 00 	sts	0x00C0, r1
  UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // 送受信許可、受信完了割り込み許可
     e74:	88 e9       	ldi	r24, 0x98	; 152
     e76:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (0<<UMSEL00)|(3<<UCSZ00)|(1<<USBS0)|(0<<UPM00);
     e7a:	8e e0       	ldi	r24, 0x0E	; 14
     e7c:	80 93 c2 00 	sts	0x00C2, r24
	int center_l_x = 118;   //127 //125 //118 //131 //184    //コントローラーによって差がでるので微調整必要
	int center_l_y = 132;   //127 //127 //122 //132 //138　　//コントローラーによって差がでるので微調整必要
	int analog_l_up, analog_l_down, analog_l_right, analog_l_left;
	int analog_r_up, analog_r_down, analog_r_right, analog_r_left;
*/
	TCCR0A = 0b10100011;  // OCR0A OCR0B の設定
     e80:	23 ea       	ldi	r18, 0xA3	; 163
     e82:	24 bd       	out	0x24, r18	; 36
	TCCR0B = 0b00000001;	
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	95 bd       	out	0x25, r25	; 37
	TCCR1A = 0b10100001;  // OCR1A OCR1B の設定
     e88:	81 ea       	ldi	r24, 0xA1	; 161
     e8a:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 0b00000011;
     e8e:	83 e0       	ldi	r24, 0x03	; 3
     e90:	80 93 81 00 	sts	0x0081, r24
	TCCR2A = 0b10100011;  // OCR2A OCR2B の設定
     e94:	20 93 b0 00 	sts	0x00B0, r18
	TCCR2B = 0b00000001;
     e98:	90 93 b1 00 	sts	0x00B1, r25

   	sei();    //割り込み許可(許可しないとPSコントローラーの信号が受けれない)
     e9c:	78 94       	sei
     e9e:	04 c0       	rjmp	.+8      	; 0xea8 <main+0x58>

    //ANALOGが押されてないとノイズが乗るのでANALOGを押しスタートを押すまでは待機.
	while(analog_r_x == 0 || analog_r_y == 0)usart_sendStr("PUSH ANALOG\r\n");
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usart_sendStr>
     ea8:	80 91 2b 01 	lds	r24, 0x012B
     eac:	90 91 2c 01 	lds	r25, 0x012C
     eb0:	89 2b       	or	r24, r25
     eb2:	b1 f3       	breq	.-20     	; 0xea0 <main+0x50>
     eb4:	80 91 2d 01 	lds	r24, 0x012D
     eb8:	90 91 2e 01 	lds	r25, 0x012E
     ebc:	89 2b       	or	r24, r25
     ebe:	81 f3       	breq	.-32     	; 0xea0 <main+0x50>
     ec0:	04 c0       	rjmp	.+8      	; 0xeca <main+0x7a>
 	while(start == 0){
		usart_sendStr("PUSH START\r\n");
     ec2:	8e e0       	ldi	r24, 0x0E	; 14
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usart_sendStr>

   	sei();    //割り込み許可(許可しないとPSコントローラーの信号が受けれない)

    //ANALOGが押されてないとノイズが乗るのでANALOGを押しスタートを押すまでは待機.
	while(analog_r_x == 0 || analog_r_y == 0)usart_sendStr("PUSH ANALOG\r\n");
 	while(start == 0){
     eca:	80 91 27 01 	lds	r24, 0x0127
     ece:	90 91 28 01 	lds	r25, 0x0128
     ed2:	08 97       	sbiw	r24, 0x08	; 8
     ed4:	b1 f7       	brne	.-20     	; 0xec2 <main+0x72>
			
			


		if(!(SwitchRecv[0] == 0xff)){
			flag_stop1 = 1;
     ed6:	01 e0       	ldi	r16, 0x01	; 1
     ed8:	10 e0       	ldi	r17, 0x00	; 0
	int sum;
	int flag_sro = 0;

	while(1){

		leaf(); //アーム開閉
     eda:	0e 94 3d 05 	call	0xa7a	; 0xa7a <leaf>
	return SwitchRecv[1] & _BV(PS_TRIANGLE);
}

// ×キーが押されているか返す
inline bool ps_cross(void){
	return SwitchRecv[1] & _BV(PS_CROSS);
     ede:	80 91 29 01 	lds	r24, 0x0129
     ee2:	90 91 2a 01 	lds	r25, 0x012A
		leaf(); //アーム開閉


/*-------------------アーム制御-------------------*/

			if(ps_cross()){
     ee6:	86 ff       	sbrs	r24, 6
     ee8:	24 c0       	rjmp	.+72     	; 0xf32 <main+0xe2>
//				arm_twe_strat1();
				arm_one_strat0(0, 255); //(PWM初期値, カウンター)
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	6f ef       	ldi	r22, 0xFF	; 255
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	0e 94 68 03 	call	0x6d0	; 0x6d0 <arm_one_strat0>


				while(1){
					arm_one_strat1(255); //(PWM)
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 8a 03 	call	0x714	; 0x714 <arm_one_strat1>
	return SwitchRecv[1] & _BV(PS_L2);
}

// R2 キーが押されているか返す
inline bool ps_r2(void){
	return SwitchRecv[1] & _BV(PS_R2);
     efe:	80 91 29 01 	lds	r24, 0x0129
     f02:	90 91 2a 01 	lds	r25, 0x012A

				while(1){
					arm_one_strat1(255); //(PWM)
//					arm_twe_strat1();

					if(ps_r2()){
     f06:	81 ff       	sbrs	r24, 1
     f08:	03 c0       	rjmp	.+6      	; 0xf10 <main+0xc0>

						arm_twe_back1();
     f0a:	0e 94 1f 04 	call	0x83e	; 0x83e <arm_twe_back1>
     f0e:	08 c0       	rjmp	.+16     	; 0xf20 <main+0xd0>
	return SwitchRecv[1] & _BV(PS_L1);
}

// R1 キーが押されているか返す
inline bool ps_r1(void){
	return SwitchRecv[1] & _BV(PS_R1);
     f10:	80 91 29 01 	lds	r24, 0x0129
     f14:	90 91 2a 01 	lds	r25, 0x012A
//					arm_twe_strat1();

					if(ps_r2()){

						arm_twe_back1();
					}else if(ps_r1()){
     f18:	83 ff       	sbrs	r24, 3
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <main+0xd0>

						arm_twe_strat1();
     f1c:	0e 94 1a 04 	call	0x834	; 0x834 <arm_twe_strat1>
	return SwitchRecv[1] & _BV(PS_TRIANGLE);
}

// ×キーが押されているか返す
inline bool ps_cross(void){
	return SwitchRecv[1] & _BV(PS_CROSS);
     f20:	80 91 29 01 	lds	r24, 0x0129
     f24:	90 91 2a 01 	lds	r25, 0x012A
					}else if(ps_r1()){

						arm_twe_strat1();
					}

					if(!ps_cross()){
     f28:	86 fd       	sbrc	r24, 6
     f2a:	e5 cf       	rjmp	.-54     	; 0xef6 <main+0xa6>
						arm_one_strat_stop();
     f2c:	0e 94 9d 03 	call	0x73a	; 0x73a <arm_one_strat_stop>
     f30:	29 c0       	rjmp	.+82     	; 0xf84 <main+0x134>
	return SwitchRecv[1] & _BV(PS_R1);
}

// △キーが押されているか返す
inline bool ps_triangle(void){
	return SwitchRecv[1] & _BV(PS_TRIANGLE);
     f32:	80 91 29 01 	lds	r24, 0x0129
     f36:	90 91 2a 01 	lds	r25, 0x012A
					if(!ps_cross()){
						arm_one_strat_stop();
						break;
					}
				}
			}else if(ps_triangle()){
     f3a:	84 ff       	sbrs	r24, 4
     f3c:	23 c0       	rjmp	.+70     	; 0xf84 <main+0x134>
				arm_one_back0(0, 255);
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	6f ef       	ldi	r22, 0xFF	; 255
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	0e 94 c1 03 	call	0x782	; 0x782 <arm_one_back0>
//				arm_twe_back1();	
				while(1){
					arm_one_back1(255);
     f4a:	8f ef       	ldi	r24, 0xFF	; 255
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <arm_one_back1>
	return SwitchRecv[1] & _BV(PS_L2);
}

// R2 キーが押されているか返す
inline bool ps_r2(void){
	return SwitchRecv[1] & _BV(PS_R2);
     f52:	80 91 29 01 	lds	r24, 0x0129
     f56:	90 91 2a 01 	lds	r25, 0x012A
//				arm_twe_back1();	
				while(1){
					arm_one_back1(255);
//					arm_twe_back1();

					if(ps_r2()){
     f5a:	81 ff       	sbrs	r24, 1
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <main+0x114>

						arm_twe_back1();
     f5e:	0e 94 1f 04 	call	0x83e	; 0x83e <arm_twe_back1>
     f62:	08 c0       	rjmp	.+16     	; 0xf74 <main+0x124>
	return SwitchRecv[1] & _BV(PS_L1);
}

// R1 キーが押されているか返す
inline bool ps_r1(void){
	return SwitchRecv[1] & _BV(PS_R1);
     f64:	80 91 29 01 	lds	r24, 0x0129
     f68:	90 91 2a 01 	lds	r25, 0x012A
//					arm_twe_back1();

					if(ps_r2()){

						arm_twe_back1();
					}else if(ps_r1()){
     f6c:	83 ff       	sbrs	r24, 3
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <main+0x124>

						arm_twe_strat1();
     f70:	0e 94 1a 04 	call	0x834	; 0x834 <arm_twe_strat1>
	return SwitchRecv[1] & _BV(PS_R1);
}

// △キーが押されているか返す
inline bool ps_triangle(void){
	return SwitchRecv[1] & _BV(PS_TRIANGLE);
     f74:	80 91 29 01 	lds	r24, 0x0129
     f78:	90 91 2a 01 	lds	r25, 0x012A

					}



					if(!ps_triangle()){
     f7c:	84 fd       	sbrc	r24, 4
     f7e:	e5 cf       	rjmp	.-54     	; 0xf4a <main+0xfa>
						arm_one_back_stop();
     f80:	0e 94 f6 03 	call	0x7ec	; 0x7ec <arm_one_back_stop>
	return SwitchRecv[1] & _BV(PS_L2);
}

// R2 キーが押されているか返す
inline bool ps_r2(void){
	return SwitchRecv[1] & _BV(PS_R2);
     f84:	80 91 29 01 	lds	r24, 0x0129
     f88:	90 91 2a 01 	lds	r25, 0x012A


			}
*/
			
			if(ps_r2()){
     f8c:	81 ff       	sbrs	r24, 1
     f8e:	03 c0       	rjmp	.+6      	; 0xf96 <main+0x146>

				arm_twe_back1();
     f90:	0e 94 1f 04 	call	0x83e	; 0x83e <arm_twe_back1>
     f94:	0b c0       	rjmp	.+22     	; 0xfac <main+0x15c>
	return SwitchRecv[1] & _BV(PS_L1);
}

// R1 キーが押されているか返す
inline bool ps_r1(void){
	return SwitchRecv[1] & _BV(PS_R1);
     f96:	80 91 29 01 	lds	r24, 0x0129
     f9a:	90 91 2a 01 	lds	r25, 0x012A
*/
			
			if(ps_r2()){

				arm_twe_back1();
			}else if(ps_r1()){
     f9e:	83 ff       	sbrs	r24, 3
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <main+0x158>

				arm_twe_strat1();
     fa2:	0e 94 1a 04 	call	0x834	; 0x834 <arm_twe_strat1>
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <main+0x15c>


			}else {
				stop2();
     fa8:	0e 94 24 04 	call	0x848	; 0x848 <stop2>
			
			
			


		if(!(SwitchRecv[0] == 0xff)){
     fac:	80 91 27 01 	lds	r24, 0x0127
     fb0:	90 91 28 01 	lds	r25, 0x0128
     fb4:	8f 3f       	cpi	r24, 0xFF	; 255
     fb6:	91 05       	cpc	r25, r1
     fb8:	51 f0       	breq	.+20     	; 0xfce <main+0x17e>
			flag_stop1 = 1;
     fba:	10 93 1d 01 	sts	0x011D, r17
     fbe:	00 93 1c 01 	sts	0x011C, r16
			flag_stop2 = 1;
     fc2:	10 93 1f 01 	sts	0x011F, r17
     fc6:	00 93 1e 01 	sts	0x011E, r16
			stop();
     fca:	0e 94 4a 03 	call	0x694	; 0x694 <stop>
	return SwitchRecv[1] & _BV(PS_R2);
}

// L1 キーが押されているか返す
inline bool ps_l1(void){
	return SwitchRecv[1] & _BV(PS_L1);
     fce:	80 91 29 01 	lds	r24, 0x0129
     fd2:	90 91 2a 01 	lds	r25, 0x012A



		flag_sro = 0;

		if(ps_l1()){
     fd6:	82 fd       	sbrc	r24, 2
     fd8:	03 c0       	rjmp	.+6      	; 0xfe0 <main+0x190>
     fda:	c0 e0       	ldi	r28, 0x00	; 0
     fdc:	d0 e0       	ldi	r29, 0x00	; 0
     fde:	04 c0       	rjmp	.+8      	; 0xfe8 <main+0x198>

			slow_move();// スロー
     fe0:	0e 94 58 05 	call	0xab0	; 0xab0 <slow_move>
     fe4:	c1 e0       	ldi	r28, 0x01	; 1
     fe6:	d0 e0       	ldi	r29, 0x00	; 0
#define PS_SQUARE   7


// 上キーが押されているか返す
inline bool ps_top(void){
	return SwitchRecv[0] & _BV(PS_UP);
     fe8:	80 91 27 01 	lds	r24, 0x0127
     fec:	90 91 28 01 	lds	r25, 0x0128
			flag_sro = 1;
		}

/*-------------------MAX足回り------------------*/

		if(ps_top()){
     ff0:	84 ff       	sbrs	r24, 4
     ff2:	22 c0       	rjmp	.+68     	; 0x1038 <main+0x1e8>
/*			usart_sendStr("  ");
			usart_sendStr("上キー"); 
			usart_sendStr("\r\n"); // 改行
*/
			flag_stop1 = 0;		
     ff4:	10 92 1d 01 	sts	0x011D, r1
     ff8:	10 92 1c 01 	sts	0x011C, r1

			if(flag_sro == 0){
     ffc:	20 97       	sbiw	r28, 0x00	; 0
     ffe:	31 f4       	brne	.+12     	; 0x100c <main+0x1bc>
				strat0(0,255); //(PWM初期値, カウンター)
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	6f ef       	ldi	r22, 0xFF	; 255
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	0e 94 30 01 	call	0x260	; 0x260 <strat0>
			}

			while(1){
				strat1(255); //(PWM数値)
    100c:	8f ef       	ldi	r24, 0xFF	; 255
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <strat1>
#define PS_SQUARE   7


// 上キーが押されているか返す
inline bool ps_top(void){
	return SwitchRecv[0] & _BV(PS_UP);
    1014:	80 91 27 01 	lds	r24, 0x0127
    1018:	90 91 28 01 	lds	r25, 0x0128
			}

			while(1){
				strat1(255); //(PWM数値)

				if(!ps_top()){
    101c:	84 fd       	sbrc	r24, 4
    101e:	03 c0       	rjmp	.+6      	; 0x1026 <main+0x1d6>
					strat_stop();
    1020:	0e 94 89 01 	call	0x312	; 0x312 <strat_stop>
    1024:	37 c0       	rjmp	.+110    	; 0x1094 <main+0x244>
	return SwitchRecv[1] & _BV(PS_R2);
}

// L1 キーが押されているか返す
inline bool ps_l1(void){
	return SwitchRecv[1] & _BV(PS_L1);
    1026:	80 91 29 01 	lds	r24, 0x0129
    102a:	90 91 2a 01 	lds	r25, 0x012A
				if(!ps_top()){
					strat_stop();
					break;
				}

				if(ps_l1()){
    102e:	82 ff       	sbrs	r24, 2
    1030:	ed cf       	rjmp	.-38     	; 0x100c <main+0x1bc>
					slow_move();
    1032:	0e 94 58 05 	call	0xab0	; 0xab0 <slow_move>
    1036:	ea cf       	rjmp	.-44     	; 0x100c <main+0x1bc>
	return SwitchRecv[0] & _BV(PS_RIGHT);
}

// 下キーが押されているか返す
inline bool ps_bottom(void){
	return SwitchRecv[0] & _BV(PS_DOWN);
    1038:	80 91 27 01 	lds	r24, 0x0127
    103c:	90 91 28 01 	lds	r25, 0x0128
					slow_move();
				}
			
			}
			
		}else if(ps_bottom()){	
    1040:	86 ff       	sbrs	r24, 6
    1042:	22 c0       	rjmp	.+68     	; 0x1088 <main+0x238>
			flag_stop1 = 0;	
    1044:	10 92 1d 01 	sts	0x011D, r1
    1048:	10 92 1c 01 	sts	0x011C, r1
					
			if(flag_sro == 0){
    104c:	20 97       	sbiw	r28, 0x00	; 0
    104e:	31 f4       	brne	.+12     	; 0x105c <main+0x20c>
				back0(0,255); //(PWM初期値, カウンター)
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	6f ef       	ldi	r22, 0xFF	; 255
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	0e 94 b8 01 	call	0x370	; 0x370 <back0>
			}

			while(1){
				back1(255);
    105c:	8f ef       	ldi	r24, 0xFF	; 255
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <back1>
	return SwitchRecv[0] & _BV(PS_RIGHT);
}

// 下キーが押されているか返す
inline bool ps_bottom(void){
	return SwitchRecv[0] & _BV(PS_DOWN);
    1064:	80 91 27 01 	lds	r24, 0x0127
    1068:	90 91 28 01 	lds	r25, 0x0128
			}

			while(1){
				back1(255);

				if(!ps_bottom()){
    106c:	86 fd       	sbrc	r24, 6
    106e:	03 c0       	rjmp	.+6      	; 0x1076 <main+0x226>
					back_stop();
    1070:	0e 94 11 02 	call	0x422	; 0x422 <back_stop>
    1074:	0f c0       	rjmp	.+30     	; 0x1094 <main+0x244>
	return SwitchRecv[1] & _BV(PS_R2);
}

// L1 キーが押されているか返す
inline bool ps_l1(void){
	return SwitchRecv[1] & _BV(PS_L1);
    1076:	80 91 29 01 	lds	r24, 0x0129
    107a:	90 91 2a 01 	lds	r25, 0x012A
				if(!ps_bottom()){
					back_stop();
					break;
				}

				if(ps_l1()){
    107e:	82 ff       	sbrs	r24, 2
    1080:	ed cf       	rjmp	.-38     	; 0x105c <main+0x20c>
					slow_move();
    1082:	0e 94 58 05 	call	0xab0	; 0xab0 <slow_move>
    1086:	ea cf       	rjmp	.-44     	; 0x105c <main+0x20c>
				}

			}
		
		}else {
			flag_stop1 = 1;
    1088:	10 93 1d 01 	sts	0x011D, r17
    108c:	00 93 1c 01 	sts	0x011C, r16
			stop();
    1090:	0e 94 4a 03 	call	0x694	; 0x694 <stop>
	return SwitchRecv[0] & _BV(PS_DOWN);
}

// 左キーが押されているか返す
inline bool ps_left(void){
	return SwitchRecv[0] & _BV(PS_LEFT);
    1094:	80 91 27 01 	lds	r24, 0x0127
    1098:	90 91 28 01 	lds	r25, 0x0128
			stop();
		}



		if(ps_left()){
    109c:	87 ff       	sbrs	r24, 7
    109e:	22 c0       	rjmp	.+68     	; 0x10e4 <main+0x294>

			flag_stop2 = 0;
    10a0:	10 92 1f 01 	sts	0x011F, r1
    10a4:	10 92 1e 01 	sts	0x011E, r1

			if(flag_sro == 0){
    10a8:	cd 2b       	or	r28, r29
    10aa:	31 f4       	brne	.+12     	; 0x10b8 <main+0x268>
				left0(0, 255);
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	6f ef       	ldi	r22, 0xFF	; 255
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	0e 94 40 02 	call	0x480	; 0x480 <left0>
			}
			while(1){
				left1(255);
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <left1>
	return SwitchRecv[0] & _BV(PS_DOWN);
}

// 左キーが押されているか返す
inline bool ps_left(void){
	return SwitchRecv[0] & _BV(PS_LEFT);
    10c0:	80 91 27 01 	lds	r24, 0x0127
    10c4:	90 91 28 01 	lds	r25, 0x0128
				left0(0, 255);
			}
			while(1){
				left1(255);

				if(!ps_left()){
    10c8:	87 fd       	sbrc	r24, 7
    10ca:	03 c0       	rjmp	.+6      	; 0x10d2 <main+0x282>
					left_stop();
    10cc:	0e 94 96 02 	call	0x52c	; 0x52c <left_stop>
    10d0:	04 cf       	rjmp	.-504    	; 0xeda <main+0x8a>
	return SwitchRecv[1] & _BV(PS_R2);
}

// L1 キーが押されているか返す
inline bool ps_l1(void){
	return SwitchRecv[1] & _BV(PS_L1);
    10d2:	80 91 29 01 	lds	r24, 0x0129
    10d6:	90 91 2a 01 	lds	r25, 0x012A
				if(!ps_left()){
					left_stop();
					break;
				}

				if(ps_l1()){
    10da:	82 ff       	sbrs	r24, 2
    10dc:	ed cf       	rjmp	.-38     	; 0x10b8 <main+0x268>
					slow_move();
    10de:	0e 94 58 05 	call	0xab0	; 0xab0 <slow_move>
    10e2:	ea cf       	rjmp	.-44     	; 0x10b8 <main+0x268>
	return SwitchRecv[0] & _BV(PS_UP);
}

// 右キーが押されているか返す
inline bool ps_right(void){
	return SwitchRecv[0] & _BV(PS_RIGHT);
    10e4:	80 91 27 01 	lds	r24, 0x0127
    10e8:	90 91 28 01 	lds	r25, 0x0128
				if(ps_l1()){
					slow_move();
				}
			}

		}else if(ps_right()){
    10ec:	85 ff       	sbrs	r24, 5
    10ee:	22 c0       	rjmp	.+68     	; 0x1134 <__stack+0x35>

			flag_stop2 = 0;
    10f0:	10 92 1f 01 	sts	0x011F, r1
    10f4:	10 92 1e 01 	sts	0x011E, r1

			if(flag_sro == 0){
    10f8:	cd 2b       	or	r28, r29
    10fa:	31 f4       	brne	.+12     	; 0x1108 <__stack+0x9>
				right0(0, 255);
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	6f ef       	ldi	r22, 0xFF	; 255
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	0e 94 c5 02 	call	0x58a	; 0x58a <right0>
			}
			while(1){
				right1(255);
    1108:	8f ef       	ldi	r24, 0xFF	; 255
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 00 03 	call	0x600	; 0x600 <right1>
	return SwitchRecv[0] & _BV(PS_UP);
}

// 右キーが押されているか返す
inline bool ps_right(void){
	return SwitchRecv[0] & _BV(PS_RIGHT);
    1110:	80 91 27 01 	lds	r24, 0x0127
    1114:	90 91 28 01 	lds	r25, 0x0128
				right0(0, 255);
			}
			while(1){
				right1(255);

				if(!ps_right()){
    1118:	85 fd       	sbrc	r24, 5
    111a:	03 c0       	rjmp	.+6      	; 0x1122 <__stack+0x23>
					right_stop();
    111c:	0e 94 1b 03 	call	0x636	; 0x636 <right_stop>
    1120:	dc ce       	rjmp	.-584    	; 0xeda <main+0x8a>
	return SwitchRecv[1] & _BV(PS_R2);
}

// L1 キーが押されているか返す
inline bool ps_l1(void){
	return SwitchRecv[1] & _BV(PS_L1);
    1122:	80 91 29 01 	lds	r24, 0x0129
    1126:	90 91 2a 01 	lds	r25, 0x012A
				if(!ps_right()){
					right_stop();
					break;
				}

				if(ps_l1()){
    112a:	82 ff       	sbrs	r24, 2
    112c:	ed cf       	rjmp	.-38     	; 0x1108 <__stack+0x9>
					slow_move();
    112e:	0e 94 58 05 	call	0xab0	; 0xab0 <slow_move>
    1132:	ea cf       	rjmp	.-44     	; 0x1108 <__stack+0x9>
				}

			}

		}else {
			flag_stop2 = 1;
    1134:	10 93 1f 01 	sts	0x011F, r17
    1138:	00 93 1e 01 	sts	0x011E, r16
			stop();
    113c:	0e 94 4a 03 	call	0x694	; 0x694 <stop>
    1140:	cc ce       	rjmp	.-616    	; 0xeda <main+0x8a>

00001142 <__divmodhi4>:
    1142:	97 fb       	bst	r25, 7
    1144:	09 2e       	mov	r0, r25
    1146:	07 26       	eor	r0, r23
    1148:	0a d0       	rcall	.+20     	; 0x115e <__divmodhi4_neg1>
    114a:	77 fd       	sbrc	r23, 7
    114c:	04 d0       	rcall	.+8      	; 0x1156 <__divmodhi4_neg2>
    114e:	0c d0       	rcall	.+24     	; 0x1168 <__udivmodhi4>
    1150:	06 d0       	rcall	.+12     	; 0x115e <__divmodhi4_neg1>
    1152:	00 20       	and	r0, r0
    1154:	1a f4       	brpl	.+6      	; 0x115c <__divmodhi4_exit>

00001156 <__divmodhi4_neg2>:
    1156:	70 95       	com	r23
    1158:	61 95       	neg	r22
    115a:	7f 4f       	sbci	r23, 0xFF	; 255

0000115c <__divmodhi4_exit>:
    115c:	08 95       	ret

0000115e <__divmodhi4_neg1>:
    115e:	f6 f7       	brtc	.-4      	; 0x115c <__divmodhi4_exit>
    1160:	90 95       	com	r25
    1162:	81 95       	neg	r24
    1164:	9f 4f       	sbci	r25, 0xFF	; 255
    1166:	08 95       	ret

00001168 <__udivmodhi4>:
    1168:	aa 1b       	sub	r26, r26
    116a:	bb 1b       	sub	r27, r27
    116c:	51 e1       	ldi	r21, 0x11	; 17
    116e:	07 c0       	rjmp	.+14     	; 0x117e <__udivmodhi4_ep>

00001170 <__udivmodhi4_loop>:
    1170:	aa 1f       	adc	r26, r26
    1172:	bb 1f       	adc	r27, r27
    1174:	a6 17       	cp	r26, r22
    1176:	b7 07       	cpc	r27, r23
    1178:	10 f0       	brcs	.+4      	; 0x117e <__udivmodhi4_ep>
    117a:	a6 1b       	sub	r26, r22
    117c:	b7 0b       	sbc	r27, r23

0000117e <__udivmodhi4_ep>:
    117e:	88 1f       	adc	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	5a 95       	dec	r21
    1184:	a9 f7       	brne	.-22     	; 0x1170 <__udivmodhi4_loop>
    1186:	80 95       	com	r24
    1188:	90 95       	com	r25
    118a:	bc 01       	movw	r22, r24
    118c:	cd 01       	movw	r24, r26
    118e:	08 95       	ret

00001190 <_exit>:
    1190:	f8 94       	cli

00001192 <__stop_program>:
    1192:	ff cf       	rjmp	.-2      	; 0x1192 <__stop_program>
