
iraira_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000680  00000714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000680  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  0080012c  0080012c  00000740  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000111  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b84  00000000  00000000  00000871  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f5  00000000  00000000  000013f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000955  00000000  00000000  000016ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00002040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000218  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008b0  00000000  00000000  00002388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00002c38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_20>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 e8       	ldi	r30, 0x80	; 128
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
  98:	ac 32       	cpi	r26, 0x2C	; 44
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	ac e2       	ldi	r26, 0x2C	; 44
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a2 34       	cpi	r26, 0x42	; 66
  aa:	b1 07       	cpc	r27, r17
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 8c 01 	call	0x318	; 0x318 <main>
  b2:	0c 94 3e 03 	jmp	0x67c	; 0x67c <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <up_touch>:
	return SwitchRecv[1] & _BV(PS_SQUARE);
}

/**********タッチセンサー関連**********/
bool up_touch(void){
	return PINB & _BV(0);
  ba:	83 b1       	in	r24, 0x03	; 3
}
  bc:	81 70       	andi	r24, 0x01	; 1
  be:	08 95       	ret

000000c0 <down_touch>:

bool down_touch(void){
	return PINB & _BV(1);
  c0:	83 b1       	in	r24, 0x03	; 3
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	96 95       	lsr	r25
  c6:	87 95       	ror	r24
}
  c8:	81 70       	andi	r24, 0x01	; 1
  ca:	08 95       	ret

000000cc <right_touch>:

bool right_touch(void){
	return PINB & _BV(2);
  cc:	83 b1       	in	r24, 0x03	; 3
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	96 95       	lsr	r25
  d2:	87 95       	ror	r24
  d4:	96 95       	lsr	r25
  d6:	87 95       	ror	r24
}
  d8:	81 70       	andi	r24, 0x01	; 1
  da:	08 95       	ret

000000dc <left_touch>:

bool left_touch(void){
	return PINB & _BV(5);
  dc:	83 b1       	in	r24, 0x03	; 3
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	96 95       	lsr	r25
  e4:	87 95       	ror	r24
  e6:	4a 95       	dec	r20
  e8:	e1 f7       	brne	.-8      	; 0xe2 <left_touch+0x6>
}
  ea:	81 70       	andi	r24, 0x01	; 1
  ec:	08 95       	ret

000000ee <usart_init>:
#define MYUBRR FOSC/16/BAUD-1 // UART分周率


/* USART設定 */
void usart_init(unsigned int ubrr){
  UBRR0H = (unsigned char)(ubrr>>8); // ボーレート上位8bit
  ee:	90 93 c5 00 	sts	0x00C5, r25
  UBRR0L = (unsigned char)ubrr; // ボーレート下位8bit
  f2:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0A = (0<<U2X0); // 等速
  f6:	10 92 c0 00 	sts	0x00C0, r1
  UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // 送受信許可、受信完了割り込み許可
  fa:	88 e9       	ldi	r24, 0x98	; 152
  fc:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (0<<UMSEL00)|(3<<UCSZ00)|(1<<USBS0)|(0<<UPM00);
 100:	8e e0       	ldi	r24, 0x0E	; 14
 102:	80 93 c2 00 	sts	0x00C2, r24
  // フレーム設定 非同期通信 8ビット 1ストップビット パリティ無し
}
 106:	08 95       	ret

00000108 <nop>:

/* NoOperation */
void nop(int count){
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 10c:	68 ec       	ldi	r22, 0xC8	; 200
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	0a c0       	rjmp	.+20     	; 0x126 <nop+0x1e>
	int i;
	for(i = 0; i < count; i++){
 112:	28 ee       	ldi	r18, 0xE8	; 232
 114:	33 e0       	ldi	r19, 0x03	; 3
 116:	fb 01       	movw	r30, r22
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <nop+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 120:	d1 f7       	brne	.-12     	; 0x116 <nop+0xe>
 122:	4f 5f       	subi	r20, 0xFF	; 255
 124:	5f 4f       	sbci	r21, 0xFF	; 255
 126:	48 17       	cp	r20, r24
 128:	59 07       	cpc	r21, r25
 12a:	9c f3       	brlt	.-26     	; 0x112 <nop+0xa>
		_delay_ms(100);
	}
}
 12c:	08 95       	ret

0000012e <getDigit>:

/* intの桁数を返す */
char getDigit(int n){
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	06 c0       	rjmp	.+12     	; 0x13e <getDigit+0x10>
  char i;
  i = 0;
  while(n>0){
    n /= 10;
 132:	6a e0       	ldi	r22, 0x0A	; 10
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 17 03 	call	0x62e	; 0x62e <__divmodhi4>
 13a:	cb 01       	movw	r24, r22
    i++;
 13c:	4f 5f       	subi	r20, 0xFF	; 255

/* intの桁数を返す */
char getDigit(int n){
  char i;
  i = 0;
  while(n>0){
 13e:	18 16       	cp	r1, r24
 140:	19 06       	cpc	r1, r25
 142:	bc f3       	brlt	.-18     	; 0x132 <getDigit+0x4>
    n /= 10;
    i++;
  }
  return i;
}
 144:	84 2f       	mov	r24, r20
 146:	08 95       	ret

00000148 <intToStr>:

/* int->String変換 */
char *intToStr(int n, char *buf){ // 変換する数、作業領域
 148:	cf 92       	push	r12
 14a:	df 92       	push	r13
 14c:	ef 92       	push	r14
 14e:	ff 92       	push	r15
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24
 15a:	8b 01       	movw	r16, r22
  int i, digit;

  if(n == 0){
 15c:	00 97       	sbiw	r24, 0x00	; 0
 15e:	31 f4       	brne	.+12     	; 0x16c <intToStr+0x24>
	buf[0] = '0';
 160:	80 e3       	ldi	r24, 0x30	; 48
 162:	db 01       	movw	r26, r22
 164:	8c 93       	st	X, r24
	buf[1] = '\0';
 166:	11 96       	adiw	r26, 0x01	; 1
 168:	1c 92       	st	X, r1
 16a:	24 c0       	rjmp	.+72     	; 0x1b4 <intToStr+0x6c>
	return buf;
  }

  digit = getDigit(n); // 桁数
 16c:	0e 94 97 00 	call	0x12e	; 0x12e <getDigit>
 170:	e8 2e       	mov	r14, r24
 172:	ff 24       	eor	r15, r15
  for(i = digit-1; i >= 0; i--){ // intは最大5桁
 174:	f7 01       	movw	r30, r14
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	68 01       	movw	r12, r16
 17a:	ce 0e       	add	r12, r30
 17c:	df 1e       	adc	r13, r31
 17e:	12 c0       	rjmp	.+36     	; 0x1a4 <intToStr+0x5c>
    buf[i] = n%10+'0';
 180:	ce 01       	movw	r24, r28
 182:	6a e0       	ldi	r22, 0x0A	; 10
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	0e 94 17 03 	call	0x62e	; 0x62e <__divmodhi4>
 18a:	80 5d       	subi	r24, 0xD0	; 208
 18c:	d6 01       	movw	r26, r12
 18e:	8c 93       	st	X, r24
    n /= 10;
 190:	ce 01       	movw	r24, r28
 192:	6a e0       	ldi	r22, 0x0A	; 10
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	0e 94 17 03 	call	0x62e	; 0x62e <__divmodhi4>
 19a:	eb 01       	movw	r28, r22
	buf[1] = '\0';
	return buf;
  }

  digit = getDigit(n); // 桁数
  for(i = digit-1; i >= 0; i--){ // intは最大5桁
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	08 94       	sec
 1a0:	c1 08       	sbc	r12, r1
 1a2:	d1 08       	sbc	r13, r1
 1a4:	bf ef       	ldi	r27, 0xFF	; 255
 1a6:	ef 3f       	cpi	r30, 0xFF	; 255
 1a8:	fb 07       	cpc	r31, r27
 1aa:	51 f7       	brne	.-44     	; 0x180 <intToStr+0x38>
    buf[i] = n%10+'0';
    n /= 10;
  }
  buf[digit] = '\0'; // 行末改行
 1ac:	e0 0e       	add	r14, r16
 1ae:	f1 1e       	adc	r15, r17
 1b0:	f7 01       	movw	r30, r14
 1b2:	10 82       	st	Z, r1
  return buf;
}
 1b4:	c8 01       	movw	r24, r16
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	ff 90       	pop	r15
 1c0:	ef 90       	pop	r14
 1c2:	df 90       	pop	r13
 1c4:	cf 90       	pop	r12
 1c6:	08 95       	ret

000001c8 <usart_sendStr>:

/* USARTで文字列送信 */
void usart_sendStr(char *str){
 1c8:	fc 01       	movw	r30, r24
 1ca:	07 c0       	rjmp	.+14     	; 0x1da <usart_sendStr+0x12>
  while(*str != '\0'){
    loop_until_bit_is_set(UCSR0A,UDRE0); // 送信データレジスタ空きまで待機
 1cc:	80 91 c0 00 	lds	r24, 0x00C0
 1d0:	85 ff       	sbrs	r24, 5
 1d2:	fc cf       	rjmp	.-8      	; 0x1cc <usart_sendStr+0x4>
    UDR0 = *str++; // 1文字送信、1文字進む
 1d4:	90 93 c6 00 	sts	0x00C6, r25
 1d8:	31 96       	adiw	r30, 0x01	; 1
  return buf;
}

/* USARTで文字列送信 */
void usart_sendStr(char *str){
  while(*str != '\0'){
 1da:	90 81       	ld	r25, Z
 1dc:	99 23       	and	r25, r25
 1de:	b1 f7       	brne	.-20     	; 0x1cc <usart_sendStr+0x4>
    loop_until_bit_is_set(UCSR0A,UDRE0); // 送信データレジスタ空きまで待機
    UDR0 = *str++; // 1文字送信、1文字進む
  }
}
 1e0:	08 95       	ret

000001e2 <__vector_20>:

/* ATTiny2313からPSコントローラーの信号を受信 */
ISR(USART0_RX_vect){
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31

    static uint16_t buff;
    uint16_t data,temp;

    data = UDR0;
 1f8:	80 91 c6 00 	lds	r24, 0x00C6
 1fc:	e8 2f       	mov	r30, r24
 1fe:	f0 e0       	ldi	r31, 0x00	; 0

    if(!(data & 0x08)){
 200:	83 fd       	sbrc	r24, 3
 202:	05 c0       	rjmp	.+10     	; 0x20e <__vector_20+0x2c>
        buff = data;
 204:	f0 93 2d 01 	sts	0x012D, r31
 208:	e0 93 2c 01 	sts	0x012C, r30
 20c:	1e c0       	rjmp	.+60     	; 0x24a <__vector_20+0x68>
        return;
    }
    if((data & 0x07)==(buff & 0x07)){
 20e:	20 91 2c 01 	lds	r18, 0x012C
 212:	30 91 2d 01 	lds	r19, 0x012D
 216:	cf 01       	movw	r24, r30
 218:	82 27       	eor	r24, r18
 21a:	93 27       	eor	r25, r19
 21c:	87 70       	andi	r24, 0x07	; 7
 21e:	90 70       	andi	r25, 0x00	; 0
 220:	89 2b       	or	r24, r25
 222:	99 f4       	brne	.+38     	; 0x24a <__vector_20+0x68>
        temp  = buff & 0xF0;
 224:	20 7f       	andi	r18, 0xF0	; 240
 226:	30 70       	andi	r19, 0x00	; 0
        temp |= data >> 4;
 228:	cf 01       	movw	r24, r30
 22a:	92 95       	swap	r25
 22c:	82 95       	swap	r24
 22e:	8f 70       	andi	r24, 0x0F	; 15
 230:	89 27       	eor	r24, r25
 232:	9f 70       	andi	r25, 0x0F	; 15
 234:	89 27       	eor	r24, r25
 236:	82 2b       	or	r24, r18
 238:	93 2b       	or	r25, r19
        SwitchRecv[data & 0x07] = temp;
 23a:	e7 70       	andi	r30, 0x07	; 7
 23c:	f0 70       	andi	r31, 0x00	; 0
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	e0 5d       	subi	r30, 0xD0	; 208
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	91 83       	std	Z+1, r25	; 0x01
 248:	80 83       	st	Z, r24
    }
}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	3f 91       	pop	r19
 254:	2f 91       	pop	r18
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <top>:

/**********モーター関数**********/
void top(int s){
	OCR0A = s;
 260:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0x00;
 262:	18 bc       	out	0x28, r1	; 40
}
 264:	08 95       	ret

00000266 <down>:

void down(int s){
	OCR0A = 0x00;
 266:	17 bc       	out	0x27, r1	; 39
	OCR0B = s;
 268:	88 bd       	out	0x28, r24	; 40
}
 26a:	08 95       	ret

0000026c <right>:

void right(int s){
	OCR2A = s;
 26c:	80 93 b3 00 	sts	0x00B3, r24
	OCR2B = 0x00;
 270:	10 92 b4 00 	sts	0x00B4, r1
}
 274:	08 95       	ret

00000276 <left>:

void left(int s){
	OCR2A = 0x00;
 276:	10 92 b3 00 	sts	0x00B3, r1
	OCR2B = s;
 27a:	80 93 b4 00 	sts	0x00B4, r24
}
 27e:	08 95       	ret

00000280 <stop_up>:

void stop_up(){
	OCR0A = 0xff;
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0xff;
 284:	88 bd       	out	0x28, r24	; 40
}
 286:	08 95       	ret

00000288 <stop_side>:

void stop_side(){
	OCR2A = 0xff;
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	80 93 b3 00 	sts	0x00B3, r24
	OCR2B = 0xff;
 28e:	80 93 b4 00 	sts	0x00B4, r24
}
 292:	08 95       	ret

00000294 <wwww>:

/**********初期位置へ**********/
int var1, var2;

void wwww(int s){
 294:	20 e0       	ldi	r18, 0x00	; 0
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	50 e0       	ldi	r21, 0x00	; 0
	OCR0A = 0xff;
	OCR0B = 0xff;
}

void stop_side(){
	OCR2A = 0xff;
 29c:	9f ef       	ldi	r25, 0xFF	; 255

	var1 = 0;
	var2 = 0;

	while(1){
		if(!var1 && right_touch()){
 29e:	41 15       	cp	r20, r1
 2a0:	51 05       	cpc	r21, r1
 2a2:	49 f4       	brne	.+18     	; 0x2b6 <wwww+0x22>
 2a4:	1a 9b       	sbis	0x03, 2	; 3
 2a6:	07 c0       	rjmp	.+14     	; 0x2b6 <wwww+0x22>
	OCR0A = 0xff;
	OCR0B = 0xff;
}

void stop_side(){
	OCR2A = 0xff;
 2a8:	90 93 b3 00 	sts	0x00B3, r25
	OCR2B = 0xff;
 2ac:	90 93 b4 00 	sts	0x00B4, r25
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	50 e0       	ldi	r21, 0x00	; 0
 2b4:	0e c0       	rjmp	.+28     	; 0x2d2 <wwww+0x3e>
		if(!var1 && right_touch()){
			var1 = 1;
			stop_side();
		}
		else{
			if(var1 == 1){
 2b6:	41 30       	cpi	r20, 0x01	; 1
 2b8:	51 05       	cpc	r21, r1
 2ba:	29 f4       	brne	.+10     	; 0x2c6 <wwww+0x32>
	OCR0A = 0xff;
	OCR0B = 0xff;
}

void stop_side(){
	OCR2A = 0xff;
 2bc:	90 93 b3 00 	sts	0x00B3, r25
	OCR2B = 0xff;
 2c0:	90 93 b4 00 	sts	0x00B4, r25
 2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <wwww+0x3e>
	OCR2A = s;
	OCR2B = 0x00;
}

void left(int s){
	OCR2A = 0x00;
 2c6:	10 92 b3 00 	sts	0x00B3, r1
	OCR2B = s;
 2ca:	80 93 b4 00 	sts	0x00B4, r24
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	50 e0       	ldi	r21, 0x00	; 0
				left(s);
				var1 = 0;
			}
		}

		if(!var2 && down_touch()){
 2d2:	21 15       	cp	r18, r1
 2d4:	31 05       	cpc	r19, r1
 2d6:	39 f4       	brne	.+14     	; 0x2e6 <wwww+0x52>
 2d8:	19 9b       	sbis	0x03, 1	; 3
 2da:	05 c0       	rjmp	.+10     	; 0x2e6 <wwww+0x52>
	OCR2A = 0x00;
	OCR2B = s;
}

void stop_up(){
	OCR0A = 0xff;
 2dc:	97 bd       	out	0x27, r25	; 39
	OCR0B = 0xff;
 2de:	98 bd       	out	0x28, r25	; 40
 2e0:	21 e0       	ldi	r18, 0x01	; 1
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	0a c0       	rjmp	.+20     	; 0x2fa <wwww+0x66>
		if(!var2 && down_touch()){
			var2 = 1;
			stop_up();
		}
		else{
			if(var2 == 1){
 2e6:	21 30       	cpi	r18, 0x01	; 1
 2e8:	31 05       	cpc	r19, r1
 2ea:	19 f4       	brne	.+6      	; 0x2f2 <wwww+0x5e>
	OCR2A = 0x00;
	OCR2B = s;
}

void stop_up(){
	OCR0A = 0xff;
 2ec:	97 bd       	out	0x27, r25	; 39
	OCR0B = 0xff;
 2ee:	98 bd       	out	0x28, r25	; 40
 2f0:	04 c0       	rjmp	.+8      	; 0x2fa <wwww+0x66>
	OCR0A = s;
	OCR0B = 0x00;
}

void down(int s){
	OCR0A = 0x00;
 2f2:	17 bc       	out	0x27, r1	; 39
	OCR0B = s;
 2f4:	88 bd       	out	0x28, r24	; 40
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
				down(s);
				var2 = 0;
			}
		}

		if(var1 == 1 && var2 == 1){
 2fa:	41 30       	cpi	r20, 0x01	; 1
 2fc:	51 05       	cpc	r21, r1
 2fe:	79 f6       	brne	.-98     	; 0x29e <wwww+0xa>
 300:	21 30       	cpi	r18, 0x01	; 1
 302:	31 05       	cpc	r19, r1
 304:	c1 f6       	brne	.-80     	; 0x2b6 <wwww+0x22>
 306:	30 93 41 01 	sts	0x0141, r19
 30a:	20 93 40 01 	sts	0x0140, r18
 30e:	30 93 2f 01 	sts	0x012F, r19
 312:	20 93 2e 01 	sts	0x012E, r18
			break;
		}
	}
}
 316:	08 95       	ret

00000318 <main>:
// PD7: モーター(右)



/**********メイン関数**********/
int main(){
 318:	cf 92       	push	r12
 31a:	df 92       	push	r13
 31c:	ef 92       	push	r14
 31e:	ff 92       	push	r15
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29

	DDRA = 0b00000000;
 328:	11 b8       	out	0x01, r1	; 1
	DDRB = 0b00011000;
 32a:	88 e1       	ldi	r24, 0x18	; 24
 32c:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11111111;
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b00000000;
 332:	17 b8       	out	0x07, r1	; 7
#define MYUBRR FOSC/16/BAUD-1 // UART分周率


/* USART設定 */
void usart_init(unsigned int ubrr){
  UBRR0H = (unsigned char)(ubrr>>8); // ボーレート上位8bit
 334:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = (unsigned char)ubrr; // ボーレート下位8bit
 338:	8c e0       	ldi	r24, 0x0C	; 12
 33a:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0A = (0<<U2X0); // 等速
 33e:	10 92 c0 00 	sts	0x00C0, r1
  UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); // 送受信許可、受信完了割り込み許可
 342:	88 e9       	ldi	r24, 0x98	; 152
 344:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (0<<UMSEL00)|(3<<UCSZ00)|(1<<USBS0)|(0<<UPM00);
 348:	8e e0       	ldi	r24, 0x0E	; 14
 34a:	80 93 c2 00 	sts	0x00C2, r24
	int center_l_x = 118;   //127 //125 //118 //131 //184    //コントローラーによって差がでるので微調整必要
	int center_l_y = 132;   //127 //127 //122 //132 //138　　//コントローラーによって差がでるので微調整必要
	int analog_l_up, analog_l_down, analog_l_right, analog_l_left;
	int analog_r_up, analog_r_down, analog_r_right, analog_r_left;

	TCCR0A = 0b10100011;  // OCR0A OCR0B の設定
 34e:	93 ea       	ldi	r25, 0xA3	; 163
 350:	94 bd       	out	0x24, r25	; 36
	TCCR0B = 0b00000001;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	85 bd       	out	0x25, r24	; 37
	TCCR2A = 0b10100011;  // OCR2A OCR2B の設定
 356:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = 0b00000001;
 35a:	80 93 b1 00 	sts	0x00B1, r24

   	sei();    //割り込み許可(許可しないとPSコントローラーの信号が受けれない)
 35e:	78 94       	sei
 360:	04 c0       	rjmp	.+8      	; 0x36a <main+0x52>

    //ANALOGが押されてないとノイズが乗るのでANALOGを押しスタートを押すまでは待機.
	while(analog_r_x == 0 || analog_r_y == 0)usart_sendStr("PUSH ANALOG\r\n");
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usart_sendStr>
 36a:	80 91 34 01 	lds	r24, 0x0134
 36e:	90 91 35 01 	lds	r25, 0x0135
 372:	89 2b       	or	r24, r25
 374:	b1 f3       	breq	.-20     	; 0x362 <main+0x4a>
 376:	80 91 36 01 	lds	r24, 0x0136
 37a:	90 91 37 01 	lds	r25, 0x0137
 37e:	89 2b       	or	r24, r25
 380:	81 f3       	breq	.-32     	; 0x362 <main+0x4a>
 382:	04 c0       	rjmp	.+8      	; 0x38c <main+0x74>
 	while(start == 0){
		usart_sendStr("PUSH START\r\n");
 384:	8e e0       	ldi	r24, 0x0E	; 14
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usart_sendStr>

   	sei();    //割り込み許可(許可しないとPSコントローラーの信号が受けれない)

    //ANALOGが押されてないとノイズが乗るのでANALOGを押しスタートを押すまでは待機.
	while(analog_r_x == 0 || analog_r_y == 0)usart_sendStr("PUSH ANALOG\r\n");
 	while(start == 0){
 38c:	80 91 30 01 	lds	r24, 0x0130
 390:	90 91 31 01 	lds	r25, 0x0131
 394:	08 97       	sbiw	r24, 0x08	; 8
 396:	b1 f7       	brne	.-20     	; 0x384 <main+0x6c>
 398:	ee 24       	eor	r14, r14
 39a:	ff 24       	eor	r15, r15
 39c:	00 e0       	ldi	r16, 0x00	; 0
 39e:	10 e0       	ldi	r17, 0x00	; 0
 3a0:	c8 ec       	ldi	r28, 0xC8	; 200
 3a2:	d0 e0       	ldi	r29, 0x00	; 0
	OCR2A = 0x00;
	OCR2B = s;
}

void stop_up(){
	OCR0A = 0xff;
 3a4:	dd 24       	eor	r13, r13
 3a6:	da 94       	dec	r13
    }
}

/**********モーター関数**********/
void top(int s){
	OCR0A = s;
 3a8:	e8 ec       	ldi	r30, 0xC8	; 200
 3aa:	ce 2e       	mov	r12, r30


	while(1){

/*----初期位置へ----*/
		if(select){
 3ac:	80 91 30 01 	lds	r24, 0x0130
 3b0:	90 91 31 01 	lds	r25, 0x0131
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	21 f4       	brne	.+8      	; 0x3c0 <main+0xa8>
			wwww(s);
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 4a 01 	call	0x294	; 0x294 <wwww>
	return SwitchRecv[1] & _BV(PS_CROSS);
}

// ○キーが押されているか返す
inline bool ps_circle(void){
	return SwitchRecv[1] & _BV(PS_CIRCLE);
 3c0:	80 91 32 01 	lds	r24, 0x0132
 3c4:	90 91 33 01 	lds	r25, 0x0133
		if(select){
			wwww(s);
		}

/*----レーザー----*/
		if(ps_circle() && sig_up == 0 && sig_side == 0){
 3c8:	85 ff       	sbrs	r24, 5
 3ca:	56 c0       	rjmp	.+172    	; 0x478 <main+0x160>
 3cc:	ef 28       	or	r14, r15
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <main+0xba>
 3d0:	53 c0       	rjmp	.+166    	; 0x478 <main+0x160>
 3d2:	01 2b       	or	r16, r17
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <main+0xc0>
 3d6:	50 c0       	rjmp	.+160    	; 0x478 <main+0x160>
			PORTD |= _BV(5);
 3d8:	5d 9a       	sbi	0x0b, 5	; 11


	/*----当たり判定----*/
			if(PINC &_BV(1)){
 3da:	31 9b       	sbis	0x06, 1	; 6
 3dc:	0b c0       	rjmp	.+22     	; 0x3f4 <main+0xdc>

				PORTD |= _BV(2)|_BV(4);
 3de:	8b b1       	in	r24, 0x0b	; 11
 3e0:	84 61       	ori	r24, 0x14	; 20
 3e2:	8b b9       	out	0x0b, r24	; 11
 3e4:	88 e8       	ldi	r24, 0x88	; 136
 3e6:	93 e1       	ldi	r25, 0x13	; 19
 3e8:	fe 01       	movw	r30, r28
 3ea:	31 97       	sbiw	r30, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <main+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3f0:	d9 f7       	brne	.-10     	; 0x3e8 <main+0xd0>
 3f2:	33 c0       	rjmp	.+102    	; 0x45a <main+0x142>
				_delay_ms(500);
				PORTD &= ~_BV(2) & ~_BV(4);

			}
			else if(PINC &_BV(2)){
 3f4:	32 9b       	sbis	0x06, 2	; 6
 3f6:	0b c0       	rjmp	.+22     	; 0x40e <main+0xf6>
				PORTD |= _BV(2)|_BV(4);
 3f8:	8b b1       	in	r24, 0x0b	; 11
 3fa:	84 61       	ori	r24, 0x14	; 20
 3fc:	8b b9       	out	0x0b, r24	; 11
 3fe:	88 e8       	ldi	r24, 0x88	; 136
 400:	93 e1       	ldi	r25, 0x13	; 19
 402:	fe 01       	movw	r30, r28
 404:	31 97       	sbiw	r30, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <main+0xec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 408:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 40a:	d9 f7       	brne	.-10     	; 0x402 <main+0xea>
 40c:	26 c0       	rjmp	.+76     	; 0x45a <main+0x142>
				_delay_ms(500);
				PORTD &= ~_BV(2) & ~_BV(4);


			}
			else if(PINC &_BV(3)){
 40e:	33 9b       	sbis	0x06, 3	; 6
 410:	0b c0       	rjmp	.+22     	; 0x428 <main+0x110>
				PORTD |= _BV(2)|_BV(4);
 412:	8b b1       	in	r24, 0x0b	; 11
 414:	84 61       	ori	r24, 0x14	; 20
 416:	8b b9       	out	0x0b, r24	; 11
 418:	88 e8       	ldi	r24, 0x88	; 136
 41a:	93 e1       	ldi	r25, 0x13	; 19
 41c:	fe 01       	movw	r30, r28
 41e:	31 97       	sbiw	r30, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <main+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 422:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 424:	d9 f7       	brne	.-10     	; 0x41c <main+0x104>
 426:	19 c0       	rjmp	.+50     	; 0x45a <main+0x142>
				_delay_ms(500);
				PORTD &= ~_BV(2) & ~_BV(4);


			}
			else if(PINC &_BV(4)){
 428:	34 9b       	sbis	0x06, 4	; 6
 42a:	0b c0       	rjmp	.+22     	; 0x442 <main+0x12a>
				PORTD |= _BV(2)|_BV(4);
 42c:	8b b1       	in	r24, 0x0b	; 11
 42e:	84 61       	ori	r24, 0x14	; 20
 430:	8b b9       	out	0x0b, r24	; 11
 432:	88 e8       	ldi	r24, 0x88	; 136
 434:	93 e1       	ldi	r25, 0x13	; 19
 436:	fe 01       	movw	r30, r28
 438:	31 97       	sbiw	r30, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <main+0x120>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 43c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 43e:	d9 f7       	brne	.-10     	; 0x436 <main+0x11e>
 440:	0c c0       	rjmp	.+24     	; 0x45a <main+0x142>
				_delay_ms(500);
				PORTD &= ~_BV(2) & ~_BV(4);


			}
			else if(PINC &_BV(5)){
 442:	35 9b       	sbis	0x06, 5	; 6
 444:	0e c0       	rjmp	.+28     	; 0x462 <main+0x14a>
				PORTD |= _BV(2)|_BV(4);
 446:	8b b1       	in	r24, 0x0b	; 11
 448:	84 61       	ori	r24, 0x14	; 20
 44a:	8b b9       	out	0x0b, r24	; 11
 44c:	88 e8       	ldi	r24, 0x88	; 136
 44e:	93 e1       	ldi	r25, 0x13	; 19
 450:	fe 01       	movw	r30, r28
 452:	31 97       	sbiw	r30, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <main+0x13a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 456:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 458:	d9 f7       	brne	.-10     	; 0x450 <main+0x138>
				_delay_ms(500);
				PORTD &= ~_BV(2) & ~_BV(4);
 45a:	8b b1       	in	r24, 0x0b	; 11
 45c:	8b 7e       	andi	r24, 0xEB	; 235
 45e:	8b b9       	out	0x0b, r24	; 11
 460:	13 c0       	rjmp	.+38     	; 0x488 <main+0x170>

			}
			else if(!(PINC & 0xd3)){
 462:	86 b1       	in	r24, 0x06	; 6
 464:	83 7d       	andi	r24, 0xD3	; 211
 466:	81 f4       	brne	.+32     	; 0x488 <main+0x170>
 468:	88 e8       	ldi	r24, 0x88	; 136
 46a:	93 e1       	ldi	r25, 0x13	; 19
 46c:	fe 01       	movw	r30, r28
 46e:	31 97       	sbiw	r30, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <main+0x156>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 472:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 474:	d9 f7       	brne	.-10     	; 0x46c <main+0x154>
 476:	08 c0       	rjmp	.+16     	; 0x488 <main+0x170>
				_delay_ms(500);

			}
		}
		else {
			PORTD &= ~_BV(5);
 478:	5d 98       	cbi	0x0b, 5	; 11
 47a:	84 ef       	ldi	r24, 0xF4	; 244
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	fe 01       	movw	r30, r28
 480:	31 97       	sbiw	r30, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <main+0x168>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 484:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 486:	d9 f7       	brne	.-10     	; 0x47e <main+0x166>
			center_l_x = analog_l_x;
			center_l_y = analog_l_y;
		}
*/
		// ここより下がプレステコントローラー制御命令
		if(analog_l_y <= center_l_y - 60)//center_yから80引いているのはｱﾅﾛｸﾞｽﾃｨｯｸを約45°ずつで分けるため
 488:	80 91 3a 01 	lds	r24, 0x013A
 48c:	90 91 3b 01 	lds	r25, 0x013B
 490:	89 34       	cpi	r24, 0x49	; 73
 492:	91 05       	cpc	r25, r1
 494:	78 f4       	brcc	.+30     	; 0x4b4 <main+0x19c>
		{
			sig_up  = 1;

			analog_l_up = 0xff - (analog_l_y * 2);
 496:	20 91 3a 01 	lds	r18, 0x013A
 49a:	30 91 3b 01 	lds	r19, 0x013B
    }
}

/**********モーター関数**********/
void top(int s){
	OCR0A = s;
 49e:	22 0f       	add	r18, r18
 4a0:	33 1f       	adc	r19, r19
 4a2:	8f ef       	ldi	r24, 0xFF	; 255
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	82 1b       	sub	r24, r18
 4a8:	93 0b       	sbc	r25, r19
 4aa:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0x00;
 4ac:	18 bc       	out	0x28, r1	; 40
			sig_up  = 1;

			analog_l_up = 0xff - (analog_l_y * 2);

			top(analog_l_up);
			usart_sendStr("UP ");
 4ae:	8b e1       	ldi	r24, 0x1B	; 27
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	13 c0       	rjmp	.+38     	; 0x4da <main+0x1c2>
		}
		else if(analog_l_y >= center_l_y + 60)
 4b4:	80 91 3a 01 	lds	r24, 0x013A
 4b8:	90 91 3b 01 	lds	r25, 0x013B
 4bc:	80 3c       	cpi	r24, 0xC0	; 192
 4be:	91 05       	cpc	r25, r1
 4c0:	90 f0       	brcs	.+36     	; 0x4e6 <main+0x1ce>
		{
			sig_up = 1;

			analog_l_down = (analog_l_y * 2) - 0xff;
 4c2:	80 91 3a 01 	lds	r24, 0x013A
 4c6:	90 91 3b 01 	lds	r25, 0x013B
	OCR0A = s;
	OCR0B = 0x00;
}

void down(int s){
	OCR0A = 0x00;
 4ca:	17 bc       	out	0x27, r1	; 39
	OCR0B = s;
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	8f 5f       	subi	r24, 0xFF	; 255
 4d2:	90 40       	sbci	r25, 0x00	; 0
 4d4:	88 bd       	out	0x28, r24	; 40
			sig_up = 1;

			analog_l_down = (analog_l_y * 2) - 0xff;

			down(analog_l_down);
			usart_sendStr("DOWN ");
 4d6:	8f e1       	ldi	r24, 0x1F	; 31
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usart_sendStr>
 4de:	51 e0       	ldi	r21, 0x01	; 1
 4e0:	e5 2e       	mov	r14, r21
 4e2:	f1 2c       	mov	r15, r1
 4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <main+0x1de>
	OCR2A = 0x00;
	OCR2B = s;
}

void stop_up(){
	OCR0A = 0xff;
 4e6:	d7 bc       	out	0x27, r13	; 39
	OCR0B = 0xff;
 4e8:	d8 bc       	out	0x28, r13	; 40
		else
		{
			sig_up = 0;

			stop_up();
			usart_sendStr("STOP ");
 4ea:	85 e2       	ldi	r24, 0x25	; 37
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usart_sendStr>
 4f2:	ee 24       	eor	r14, r14
 4f4:	ff 24       	eor	r15, r15
		}
		
		if(analog_l_x <= center_l_x - 60)//center_yから80引いているのはｱﾅﾛｸﾞｽﾃｨｯｸを約45°ずつで分けるため
 4f6:	80 91 38 01 	lds	r24, 0x0138
 4fa:	90 91 39 01 	lds	r25, 0x0139
 4fe:	cb 97       	sbiw	r24, 0x3b	; 59
 500:	88 f4       	brcc	.+34     	; 0x524 <main+0x20c>
		{
			sig_side = 1;

			analog_l_left = 0xff - (analog_l_x * 2);
 502:	20 91 38 01 	lds	r18, 0x0138
 506:	30 91 39 01 	lds	r19, 0x0139
	OCR2A = s;
	OCR2B = 0x00;
}

void left(int s){
	OCR2A = 0x00;
 50a:	10 92 b3 00 	sts	0x00B3, r1
	OCR2B = s;
 50e:	22 0f       	add	r18, r18
 510:	33 1f       	adc	r19, r19
 512:	8f ef       	ldi	r24, 0xFF	; 255
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	82 1b       	sub	r24, r18
 518:	93 0b       	sbc	r25, r19
 51a:	80 93 b4 00 	sts	0x00B4, r24

			analog_l_left = 0xff - (analog_l_x * 2);

			left(analog_l_left);

			usart_sendStr("UP ");
 51e:	8b e1       	ldi	r24, 0x1B	; 27
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	15 c0       	rjmp	.+42     	; 0x54e <main+0x236>
		}
		else if(analog_l_x >= center_l_x + 60)
 524:	80 91 38 01 	lds	r24, 0x0138
 528:	90 91 39 01 	lds	r25, 0x0139
 52c:	82 3b       	cpi	r24, 0xB2	; 178
 52e:	91 05       	cpc	r25, r1
 530:	98 f0       	brcs	.+38     	; 0x558 <main+0x240>
		{
			sig_side = 1;

			analog_l_right = (analog_l_x * 2) - 0xff;
 532:	80 91 38 01 	lds	r24, 0x0138
 536:	90 91 39 01 	lds	r25, 0x0139
	OCR0A = 0x00;
	OCR0B = s;
}

void right(int s){
	OCR2A = s;
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	8f 5f       	subi	r24, 0xFF	; 255
 540:	90 40       	sbci	r25, 0x00	; 0
 542:	80 93 b3 00 	sts	0x00B3, r24
	OCR2B = 0x00;
 546:	10 92 b4 00 	sts	0x00B4, r1

			analog_l_right = (analog_l_x * 2) - 0xff;

			right(analog_l_right);

			usart_sendStr("DOWN ");
 54a:	8f e1       	ldi	r24, 0x1F	; 31
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usart_sendStr>
 552:	01 e0       	ldi	r16, 0x01	; 1
 554:	10 e0       	ldi	r17, 0x00	; 0
 556:	0a c0       	rjmp	.+20     	; 0x56c <main+0x254>
	OCR0A = 0xff;
	OCR0B = 0xff;
}

void stop_side(){
	OCR2A = 0xff;
 558:	d0 92 b3 00 	sts	0x00B3, r13
	OCR2B = 0xff;
 55c:	d0 92 b4 00 	sts	0x00B4, r13
		else
		{
			sig_side = 0;

			stop_side();
			usart_sendStr("STOP ");
 560:	85 e2       	ldi	r24, 0x25	; 37
 562:	91 e0       	ldi	r25, 0x01	; 1
 564:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <usart_sendStr>
 568:	00 e0       	ldi	r16, 0x00	; 0
 56a:	10 e0       	ldi	r17, 0x00	; 0
			stop_side();
		}
*/

/*----タッチセンサーでとまる----*/
		if(up_touch()){
 56c:	18 9b       	sbis	0x03, 0	; 3
 56e:	14 c0       	rjmp	.+40     	; 0x598 <main+0x280>
	OCR2A = 0x00;
	OCR2B = s;
}

void stop_up(){
	OCR0A = 0xff;
 570:	d7 bc       	out	0x27, r13	; 39
	OCR0B = 0xff;
 572:	d8 bc       	out	0x28, r13	; 40
 574:	80 ed       	ldi	r24, 0xD0	; 208
 576:	97 e0       	ldi	r25, 0x07	; 7
 578:	fe 01       	movw	r30, r28
 57a:	31 97       	sbiw	r30, 0x01	; 1
 57c:	f1 f7       	brne	.-4      	; 0x57a <main+0x262>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 57e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 580:	d9 f7       	brne	.-10     	; 0x578 <main+0x260>
	OCR0A = s;
	OCR0B = 0x00;
}

void down(int s){
	OCR0A = 0x00;
 582:	17 bc       	out	0x27, r1	; 39
	OCR0B = s;
 584:	d8 bc       	out	0x28, r13	; 40
/*----タッチセンサーでとまる----*/
		if(up_touch()){
			stop_up();
			_delay_ms(200);
			down(s);
			while(up_touch());
 586:	18 99       	sbic	0x03, 0	; 3
 588:	fe cf       	rjmp	.-4      	; 0x586 <main+0x26e>
 58a:	88 ee       	ldi	r24, 0xE8	; 232
 58c:	93 e0       	ldi	r25, 0x03	; 3
 58e:	fe 01       	movw	r30, r28
 590:	31 97       	sbiw	r30, 0x01	; 1
 592:	f1 f7       	brne	.-4      	; 0x590 <main+0x278>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 594:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 596:	d9 f7       	brne	.-10     	; 0x58e <main+0x276>
			_delay_ms(100);
		}

		if(down_touch()){
 598:	19 9b       	sbis	0x03, 1	; 3
 59a:	14 c0       	rjmp	.+40     	; 0x5c4 <main+0x2ac>
	OCR2A = 0x00;
	OCR2B = s;
}

void stop_up(){
	OCR0A = 0xff;
 59c:	d7 bc       	out	0x27, r13	; 39
	OCR0B = 0xff;
 59e:	d8 bc       	out	0x28, r13	; 40
 5a0:	80 ed       	ldi	r24, 0xD0	; 208
 5a2:	97 e0       	ldi	r25, 0x07	; 7
 5a4:	fe 01       	movw	r30, r28
 5a6:	31 97       	sbiw	r30, 0x01	; 1
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <main+0x28e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5ac:	d9 f7       	brne	.-10     	; 0x5a4 <main+0x28c>
    }
}

/**********モーター関数**********/
void top(int s){
	OCR0A = s;
 5ae:	c7 bc       	out	0x27, r12	; 39
	OCR0B = 0x00;
 5b0:	18 bc       	out	0x28, r1	; 40

		if(down_touch()){
			stop_up();
			_delay_ms(200);
			top(200);
			while(down_touch());
 5b2:	19 99       	sbic	0x03, 1	; 3
 5b4:	fe cf       	rjmp	.-4      	; 0x5b2 <main+0x29a>
 5b6:	88 ee       	ldi	r24, 0xE8	; 232
 5b8:	93 e0       	ldi	r25, 0x03	; 3
 5ba:	fe 01       	movw	r30, r28
 5bc:	31 97       	sbiw	r30, 0x01	; 1
 5be:	f1 f7       	brne	.-4      	; 0x5bc <main+0x2a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5c2:	d9 f7       	brne	.-10     	; 0x5ba <main+0x2a2>
			_delay_ms(100);
		}

		if(left_touch()){
 5c4:	1d 9b       	sbis	0x03, 5	; 3
 5c6:	18 c0       	rjmp	.+48     	; 0x5f8 <main+0x2e0>
	OCR0A = 0xff;
	OCR0B = 0xff;
}

void stop_side(){
	OCR2A = 0xff;
 5c8:	d0 92 b3 00 	sts	0x00B3, r13
	OCR2B = 0xff;
 5cc:	d0 92 b4 00 	sts	0x00B4, r13
 5d0:	80 ed       	ldi	r24, 0xD0	; 208
 5d2:	97 e0       	ldi	r25, 0x07	; 7
 5d4:	fe 01       	movw	r30, r28
 5d6:	31 97       	sbiw	r30, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <main+0x2be>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5dc:	d9 f7       	brne	.-10     	; 0x5d4 <main+0x2bc>
	OCR2A = s;
	OCR2B = 0x00;
}

void left(int s){
	OCR2A = 0x00;
 5de:	10 92 b3 00 	sts	0x00B3, r1
	OCR2B = s;
 5e2:	d0 92 b4 00 	sts	0x00B4, r13

		if(left_touch()){
			stop_side();
			_delay_ms(200);
			left(s);
			while(left_touch());
 5e6:	1d 99       	sbic	0x03, 5	; 3
 5e8:	fe cf       	rjmp	.-4      	; 0x5e6 <main+0x2ce>
 5ea:	88 ee       	ldi	r24, 0xE8	; 232
 5ec:	93 e0       	ldi	r25, 0x03	; 3
 5ee:	fe 01       	movw	r30, r28
 5f0:	31 97       	sbiw	r30, 0x01	; 1
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <main+0x2d8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5f6:	d9 f7       	brne	.-10     	; 0x5ee <main+0x2d6>
			_delay_ms(100);
		}

		if(right_touch()){
 5f8:	1a 9b       	sbis	0x03, 2	; 3
 5fa:	d8 ce       	rjmp	.-592    	; 0x3ac <main+0x94>
	OCR0A = 0xff;
	OCR0B = 0xff;
}

void stop_side(){
	OCR2A = 0xff;
 5fc:	d0 92 b3 00 	sts	0x00B3, r13
	OCR2B = 0xff;
 600:	d0 92 b4 00 	sts	0x00B4, r13
 604:	80 ed       	ldi	r24, 0xD0	; 208
 606:	97 e0       	ldi	r25, 0x07	; 7
 608:	fe 01       	movw	r30, r28
 60a:	31 97       	sbiw	r30, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <main+0x2f2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 60e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 610:	d9 f7       	brne	.-10     	; 0x608 <main+0x2f0>
	OCR0A = 0x00;
	OCR0B = s;
}

void right(int s){
	OCR2A = s;
 612:	d0 92 b3 00 	sts	0x00B3, r13
	OCR2B = 0x00;
 616:	10 92 b4 00 	sts	0x00B4, r1

		if(right_touch()){
			stop_side();
			_delay_ms(200);
			right(s);
			while(right_touch());
 61a:	1a 99       	sbic	0x03, 2	; 3
 61c:	fe cf       	rjmp	.-4      	; 0x61a <main+0x302>
 61e:	88 ee       	ldi	r24, 0xE8	; 232
 620:	93 e0       	ldi	r25, 0x03	; 3
 622:	fe 01       	movw	r30, r28
 624:	31 97       	sbiw	r30, 0x01	; 1
 626:	f1 f7       	brne	.-4      	; 0x624 <main+0x30c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 628:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 62a:	d9 f7       	brne	.-10     	; 0x622 <main+0x30a>
 62c:	bf ce       	rjmp	.-642    	; 0x3ac <main+0x94>

0000062e <__divmodhi4>:
 62e:	97 fb       	bst	r25, 7
 630:	09 2e       	mov	r0, r25
 632:	07 26       	eor	r0, r23
 634:	0a d0       	rcall	.+20     	; 0x64a <__divmodhi4_neg1>
 636:	77 fd       	sbrc	r23, 7
 638:	04 d0       	rcall	.+8      	; 0x642 <__divmodhi4_neg2>
 63a:	0c d0       	rcall	.+24     	; 0x654 <__udivmodhi4>
 63c:	06 d0       	rcall	.+12     	; 0x64a <__divmodhi4_neg1>
 63e:	00 20       	and	r0, r0
 640:	1a f4       	brpl	.+6      	; 0x648 <__divmodhi4_exit>

00000642 <__divmodhi4_neg2>:
 642:	70 95       	com	r23
 644:	61 95       	neg	r22
 646:	7f 4f       	sbci	r23, 0xFF	; 255

00000648 <__divmodhi4_exit>:
 648:	08 95       	ret

0000064a <__divmodhi4_neg1>:
 64a:	f6 f7       	brtc	.-4      	; 0x648 <__divmodhi4_exit>
 64c:	90 95       	com	r25
 64e:	81 95       	neg	r24
 650:	9f 4f       	sbci	r25, 0xFF	; 255
 652:	08 95       	ret

00000654 <__udivmodhi4>:
 654:	aa 1b       	sub	r26, r26
 656:	bb 1b       	sub	r27, r27
 658:	51 e1       	ldi	r21, 0x11	; 17
 65a:	07 c0       	rjmp	.+14     	; 0x66a <__udivmodhi4_ep>

0000065c <__udivmodhi4_loop>:
 65c:	aa 1f       	adc	r26, r26
 65e:	bb 1f       	adc	r27, r27
 660:	a6 17       	cp	r26, r22
 662:	b7 07       	cpc	r27, r23
 664:	10 f0       	brcs	.+4      	; 0x66a <__udivmodhi4_ep>
 666:	a6 1b       	sub	r26, r22
 668:	b7 0b       	sbc	r27, r23

0000066a <__udivmodhi4_ep>:
 66a:	88 1f       	adc	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	5a 95       	dec	r21
 670:	a9 f7       	brne	.-22     	; 0x65c <__udivmodhi4_loop>
 672:	80 95       	com	r24
 674:	90 95       	com	r25
 676:	bc 01       	movw	r22, r24
 678:	cd 01       	movw	r24, r26
 67a:	08 95       	ret

0000067c <_exit>:
 67c:	f8 94       	cli

0000067e <__stop_program>:
 67e:	ff cf       	rjmp	.-2      	; 0x67e <__stop_program>
