
servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005b  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002a6  00000000  00000000  000002fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000015b  00000000  00000000  000005a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000022e  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  0000092c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000114  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000ec  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 80 00 	call	0x100	; 0x100 <main>
  78:	0c 94 14 01 	jmp	0x228	; 0x228 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <servo_init>:
//	servo2x_init();
}
void servo1x_init(void)
{
	//OCR1A,OCR1B (16bit)の設定
	TCCR1A = 0b10100010;	//高速PWM(TOP値 = ICR1)
  80:	82 ea       	ldi	r24, 0xA2	; 162
  82:	80 93 80 00 	sts	0x0080, r24
							//比較一致でLow、BOTTOM(TCNT = 0)でHigh
	TCCR1B = 0b00011010;	//8分周
  86:	8a e1       	ldi	r24, 0x1A	; 26
  88:	80 93 81 00 	sts	0x0081, r24
	ICR1 = 20000;			//TCNT = 20000でTCNT = 0
  8c:	80 e2       	ldi	r24, 0x20	; 32
  8e:	9e e4       	ldi	r25, 0x4E	; 78
  90:	90 93 87 00 	sts	0x0087, r25
  94:	80 93 86 00 	sts	0x0086, r24
void servo_init(void)
{
//	servo0x_init();
	servo1x_init();
//	servo2x_init();
}
  98:	08 95       	ret

0000009a <servo1x_init>:
void servo1x_init(void)
{
	//OCR1A,OCR1B (16bit)の設定
	TCCR1A = 0b10100010;	//高速PWM(TOP値 = ICR1)
  9a:	82 ea       	ldi	r24, 0xA2	; 162
  9c:	80 93 80 00 	sts	0x0080, r24
							//比較一致でLow、BOTTOM(TCNT = 0)でHigh
	TCCR1B = 0b00011010;	//8分周
  a0:	8a e1       	ldi	r24, 0x1A	; 26
  a2:	80 93 81 00 	sts	0x0081, r24
	ICR1 = 20000;			//TCNT = 20000でTCNT = 0
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	9e e4       	ldi	r25, 0x4E	; 78
  aa:	90 93 87 00 	sts	0x0087, r25
  ae:	80 93 86 00 	sts	0x0086, r24
}
  b2:	08 95       	ret

000000b4 <servo1b_set>:
void servo1b_set(int32_t angle_deg)
{
	OCR1B = 25*angle_deg/3+1000;
  b4:	29 e1       	ldi	r18, 0x19	; 25
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	50 e0       	ldi	r21, 0x00	; 0
  bc:	0e 94 b8 00 	call	0x170	; 0x170 <__mulsi3>
  c0:	23 e0       	ldi	r18, 0x03	; 3
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <__divmodsi4>
  cc:	28 51       	subi	r18, 0x18	; 24
  ce:	3c 4f       	sbci	r19, 0xFC	; 252
  d0:	30 93 8b 00 	sts	0x008B, r19
  d4:	20 93 8a 00 	sts	0x008A, r18
}
  d8:	08 95       	ret

000000da <servo1a_set>:
void servo1a_set(int32_t angle_deg)
{
	OCR1A = 25*angle_deg/3+1000;
  da:	29 e1       	ldi	r18, 0x19	; 25
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	0e 94 b8 00 	call	0x170	; 0x170 <__mulsi3>
  e6:	23 e0       	ldi	r18, 0x03	; 3
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	0e 94 d7 00 	call	0x1ae	; 0x1ae <__divmodsi4>
  f2:	28 51       	subi	r18, 0x18	; 24
  f4:	3c 4f       	sbci	r19, 0xFC	; 252
  f6:	30 93 89 00 	sts	0x0089, r19
  fa:	20 93 88 00 	sts	0x0088, r18
}
  fe:	08 95       	ret

00000100 <main>:
//ラジコンサーボの角度
//左　15
//中央60
//右  85
int main(void)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
	long t = 0;
	int d = 0;
	long deg = 0;

	//ポートの入出力の設定
	DDRB = 0xff;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;
 108:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xff;
 10a:	8a b9       	out	0x0a, r24	; 10
	
	//servo初期化
	//OCR1A,OCR1B (16bit)の設定
	TCCR1A = 0b10100010;	//高速PWM(TOP値 = ICR1)
 10c:	82 ea       	ldi	r24, 0xA2	; 162
 10e:	80 93 80 00 	sts	0x0080, r24
							//比較一致でLow、BOTTOM(TCNT = 0)でHigh
	TCCR1B = 0b00011010;	//8分周
 112:	8a e1       	ldi	r24, 0x1A	; 26
 114:	80 93 81 00 	sts	0x0081, r24
	ICR1 = 20000;			//TCNT = 20000でTCNT = 0
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	9e e4       	ldi	r25, 0x4E	; 78
 11c:	90 93 87 00 	sts	0x0087, r25
 120:	80 93 86 00 	sts	0x0086, r24
 124:	88 e8       	ldi	r24, 0x88	; 136
 126:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 128:	28 ec       	ldi	r18, 0xC8	; 200
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 132:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 134:	d9 f7       	brne	.-10     	; 0x12c <main+0x2c>
 136:	c8 ec       	ldi	r28, 0xC8	; 200
 138:	d0 e0       	ldi	r29, 0x00	; 0
	
	_delay_ms(500);
	while(1)
	{
		servo1b_set(-25);
 13a:	67 ee       	ldi	r22, 0xE7	; 231
 13c:	7f ef       	ldi	r23, 0xFF	; 255
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	9f ef       	ldi	r25, 0xFF	; 255
 142:	0e 94 5a 00 	call	0xb4	; 0xb4 <servo1b_set>
 146:	80 e1       	ldi	r24, 0x10	; 16
 148:	97 e2       	ldi	r25, 0x27	; 39
 14a:	fe 01       	movw	r30, r28
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 150:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 152:	d9 f7       	brne	.-10     	; 0x14a <main+0x4a>
		_delay_ms(1000);
		
		servo1b_set(135);
 154:	67 e8       	ldi	r22, 0x87	; 135
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 5a 00 	call	0xb4	; 0xb4 <servo1b_set>
 160:	80 e1       	ldi	r24, 0x10	; 16
 162:	97 e2       	ldi	r25, 0x27	; 39
 164:	fe 01       	movw	r30, r28
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16c:	d9 f7       	brne	.-10     	; 0x164 <main+0x64>
 16e:	e5 cf       	rjmp	.-54     	; 0x13a <main+0x3a>

00000170 <__mulsi3>:
 170:	62 9f       	mul	r22, r18
 172:	d0 01       	movw	r26, r0
 174:	73 9f       	mul	r23, r19
 176:	f0 01       	movw	r30, r0
 178:	82 9f       	mul	r24, r18
 17a:	e0 0d       	add	r30, r0
 17c:	f1 1d       	adc	r31, r1
 17e:	64 9f       	mul	r22, r20
 180:	e0 0d       	add	r30, r0
 182:	f1 1d       	adc	r31, r1
 184:	92 9f       	mul	r25, r18
 186:	f0 0d       	add	r31, r0
 188:	83 9f       	mul	r24, r19
 18a:	f0 0d       	add	r31, r0
 18c:	74 9f       	mul	r23, r20
 18e:	f0 0d       	add	r31, r0
 190:	65 9f       	mul	r22, r21
 192:	f0 0d       	add	r31, r0
 194:	99 27       	eor	r25, r25
 196:	72 9f       	mul	r23, r18
 198:	b0 0d       	add	r27, r0
 19a:	e1 1d       	adc	r30, r1
 19c:	f9 1f       	adc	r31, r25
 19e:	63 9f       	mul	r22, r19
 1a0:	b0 0d       	add	r27, r0
 1a2:	e1 1d       	adc	r30, r1
 1a4:	f9 1f       	adc	r31, r25
 1a6:	bd 01       	movw	r22, r26
 1a8:	cf 01       	movw	r24, r30
 1aa:	11 24       	eor	r1, r1
 1ac:	08 95       	ret

000001ae <__divmodsi4>:
 1ae:	97 fb       	bst	r25, 7
 1b0:	09 2e       	mov	r0, r25
 1b2:	05 26       	eor	r0, r21
 1b4:	0e d0       	rcall	.+28     	; 0x1d2 <__divmodsi4_neg1>
 1b6:	57 fd       	sbrc	r21, 7
 1b8:	04 d0       	rcall	.+8      	; 0x1c2 <__divmodsi4_neg2>
 1ba:	14 d0       	rcall	.+40     	; 0x1e4 <__udivmodsi4>
 1bc:	0a d0       	rcall	.+20     	; 0x1d2 <__divmodsi4_neg1>
 1be:	00 1c       	adc	r0, r0
 1c0:	38 f4       	brcc	.+14     	; 0x1d0 <__divmodsi4_exit>

000001c2 <__divmodsi4_neg2>:
 1c2:	50 95       	com	r21
 1c4:	40 95       	com	r20
 1c6:	30 95       	com	r19
 1c8:	21 95       	neg	r18
 1ca:	3f 4f       	sbci	r19, 0xFF	; 255
 1cc:	4f 4f       	sbci	r20, 0xFF	; 255
 1ce:	5f 4f       	sbci	r21, 0xFF	; 255

000001d0 <__divmodsi4_exit>:
 1d0:	08 95       	ret

000001d2 <__divmodsi4_neg1>:
 1d2:	f6 f7       	brtc	.-4      	; 0x1d0 <__divmodsi4_exit>
 1d4:	90 95       	com	r25
 1d6:	80 95       	com	r24
 1d8:	70 95       	com	r23
 1da:	61 95       	neg	r22
 1dc:	7f 4f       	sbci	r23, 0xFF	; 255
 1de:	8f 4f       	sbci	r24, 0xFF	; 255
 1e0:	9f 4f       	sbci	r25, 0xFF	; 255
 1e2:	08 95       	ret

000001e4 <__udivmodsi4>:
 1e4:	a1 e2       	ldi	r26, 0x21	; 33
 1e6:	1a 2e       	mov	r1, r26
 1e8:	aa 1b       	sub	r26, r26
 1ea:	bb 1b       	sub	r27, r27
 1ec:	fd 01       	movw	r30, r26
 1ee:	0d c0       	rjmp	.+26     	; 0x20a <__udivmodsi4_ep>

000001f0 <__udivmodsi4_loop>:
 1f0:	aa 1f       	adc	r26, r26
 1f2:	bb 1f       	adc	r27, r27
 1f4:	ee 1f       	adc	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	a2 17       	cp	r26, r18
 1fa:	b3 07       	cpc	r27, r19
 1fc:	e4 07       	cpc	r30, r20
 1fe:	f5 07       	cpc	r31, r21
 200:	20 f0       	brcs	.+8      	; 0x20a <__udivmodsi4_ep>
 202:	a2 1b       	sub	r26, r18
 204:	b3 0b       	sbc	r27, r19
 206:	e4 0b       	sbc	r30, r20
 208:	f5 0b       	sbc	r31, r21

0000020a <__udivmodsi4_ep>:
 20a:	66 1f       	adc	r22, r22
 20c:	77 1f       	adc	r23, r23
 20e:	88 1f       	adc	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	1a 94       	dec	r1
 214:	69 f7       	brne	.-38     	; 0x1f0 <__udivmodsi4_loop>
 216:	60 95       	com	r22
 218:	70 95       	com	r23
 21a:	80 95       	com	r24
 21c:	90 95       	com	r25
 21e:	9b 01       	movw	r18, r22
 220:	ac 01       	movw	r20, r24
 222:	bd 01       	movw	r22, r26
 224:	cf 01       	movw	r24, r30
 226:	08 95       	ret

00000228 <_exit>:
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>
