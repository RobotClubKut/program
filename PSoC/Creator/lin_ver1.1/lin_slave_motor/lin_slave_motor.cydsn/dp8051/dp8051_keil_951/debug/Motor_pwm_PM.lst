C51 COMPILER V9.51   MOTOR_PWM_PM                                                          12/15/2013 02:07:45 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MOTOR_PWM_PM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\Motor_pwm_PM.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\Motor_pwm_PM.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\Motor_pwm_PM.lst) CD DB
                    - NOIP OT(2,SIZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\Motor_pwm_PM.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: Motor_pwm_PM.c
   3          * Version 3.0
   4          *
   5          * Description:
   6          *  This file provides the power management source code to API for the
   7          *  PWM.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          #include "cytypes.h"
  18          #include "Motor_pwm.h"
  19          
  20          static Motor_pwm_backupStruct Motor_pwm_backup;
  21          
  22          
  23          /*******************************************************************************
  24          * Function Name: Motor_pwm_SaveConfig
  25          ********************************************************************************
  26          *
  27          * Summary:
  28          *  Saves the current user configuration of the component.
  29          *  
  30          * Parameters:  
  31          *  None
  32          *
  33          * Return: 
  34          *  None
  35          *
  36          * Global variables:
  37          *  Motor_pwm_backup:  Variables of this global structure are modified to 
  38          *  store the values of non retention configuration registers when Sleep() API is 
  39          *  called.
  40          *
  41          *******************************************************************************/
  42          void Motor_pwm_SaveConfig(void) 
  43          {
  44   1          
  45   1          #if(!Motor_pwm_UsingFixedFunction)
  46   1              #if(!Motor_pwm_PWMModeIsCenterAligned)
  47   1                  Motor_pwm_backup.PWMPeriod = Motor_pwm_ReadPeriod();
  48   1              #endif /* (!Motor_pwm_PWMModeIsCenterAligned) */
  49   1              Motor_pwm_backup.PWMUdb = Motor_pwm_ReadCounter();
  50   1              #if (Motor_pwm_UseStatus)
  51   1                  Motor_pwm_backup.InterruptMaskValue = Motor_pwm_STATUS_MASK;
  52   1              #endif /* (Motor_pwm_UseStatus) */
  53   1              
C51 COMPILER V9.51   MOTOR_PWM_PM                                                          12/15/2013 02:07:45 PAGE 2   

  54   1              #if(Motor_pwm_DeadBandMode == Motor_pwm__B_PWM__DBM_256_CLOCKS || \
  55   1                  Motor_pwm_DeadBandMode == Motor_pwm__B_PWM__DBM_2_4_CLOCKS)
                          Motor_pwm_backup.PWMdeadBandValue = Motor_pwm_ReadDeadTime();
                      #endif /*  deadband count is either 2-4 clocks or 256 clocks */
  58   1              
  59   1              #if(Motor_pwm_KillModeMinTime)
                           Motor_pwm_backup.PWMKillCounterPeriod = Motor_pwm_ReadKillTime();
                      #endif /* (Motor_pwm_KillModeMinTime) */
  62   1              
  63   1              #if(Motor_pwm_UseControl)
  64   1                  Motor_pwm_backup.PWMControlRegister = Motor_pwm_ReadControlRegister();
  65   1              #endif /* (Motor_pwm_UseControl) */
  66   1          #endif  /* (!Motor_pwm_UsingFixedFunction) */
  67   1      }
  68          
  69          
  70          /*******************************************************************************
  71          * Function Name: Motor_pwm_RestoreConfig
  72          ********************************************************************************
  73          * 
  74          * Summary:
  75          *  Restores the current user configuration of the component.
  76          *
  77          * Parameters:  
  78          *  None
  79          *
  80          * Return: 
  81          *  None
  82          *
  83          * Global variables:
  84          *  Motor_pwm_backup:  Variables of this global structure are used to  
  85          *  restore the values of non retention registers on wakeup from sleep mode.
  86          *
  87          *******************************************************************************/
  88          void Motor_pwm_RestoreConfig(void) 
  89          {
  90   1              #if(!Motor_pwm_UsingFixedFunction)
  91   1                  #if(!Motor_pwm_PWMModeIsCenterAligned)
  92   1                      Motor_pwm_WritePeriod(Motor_pwm_backup.PWMPeriod);
  93   1                  #endif /* (!Motor_pwm_PWMModeIsCenterAligned) */
  94   1                  Motor_pwm_WriteCounter(Motor_pwm_backup.PWMUdb);
  95   1                  #if (Motor_pwm_UseStatus)
  96   1                      Motor_pwm_STATUS_MASK = Motor_pwm_backup.InterruptMaskValue;
  97   1                  #endif /* (Motor_pwm_UseStatus) */
  98   1                  
  99   1                  #if(Motor_pwm_DeadBandMode == Motor_pwm__B_PWM__DBM_256_CLOCKS || \
 100   1                      Motor_pwm_DeadBandMode == Motor_pwm__B_PWM__DBM_2_4_CLOCKS)
                              Motor_pwm_WriteDeadTime(Motor_pwm_backup.PWMdeadBandValue);
                          #endif /* deadband count is either 2-4 clocks or 256 clocks */
 103   1                  
 104   1                  #if(Motor_pwm_KillModeMinTime)
                              Motor_pwm_WriteKillTime(Motor_pwm_backup.PWMKillCounterPeriod);
                          #endif /* (Motor_pwm_KillModeMinTime) */
 107   1                  
 108   1                  #if(Motor_pwm_UseControl)
 109   1                      Motor_pwm_WriteControlRegister(Motor_pwm_backup.PWMControlRegister); 
 110   1                  #endif /* (Motor_pwm_UseControl) */
 111   1              #endif  /* (!Motor_pwm_UsingFixedFunction) */
 112   1          }
 113          
 114          
 115          /*******************************************************************************
C51 COMPILER V9.51   MOTOR_PWM_PM                                                          12/15/2013 02:07:45 PAGE 3   

 116          * Function Name: Motor_pwm_Sleep
 117          ********************************************************************************
 118          * 
 119          * Summary:
 120          *  Disables block's operation and saves the user configuration. Should be called 
 121          *  just prior to entering sleep.
 122          *  
 123          * Parameters:  
 124          *  None
 125          *
 126          * Return: 
 127          *  None
 128          *
 129          * Global variables:
 130          *  Motor_pwm_backup.PWMEnableState:  Is modified depending on the enable 
 131          *  state of the block before entering sleep mode.
 132          *
 133          *******************************************************************************/
 134          void Motor_pwm_Sleep(void) 
 135          {
 136   1          #if(Motor_pwm_UseControl)
 137   1              if(Motor_pwm_CTRL_ENABLE == (Motor_pwm_CONTROL & Motor_pwm_CTRL_ENABLE))
 138   1              {
 139   2                  /*Component is enabled */
 140   2                  Motor_pwm_backup.PWMEnableState = 1u;
 141   2              }
 142   1              else
 143   1              {
 144   2                  /* Component is disabled */
 145   2                  Motor_pwm_backup.PWMEnableState = 0u;
 146   2              }
 147   1          #endif /* (Motor_pwm_UseControl) */
 148   1      
 149   1          /* Stop component */
 150   1          Motor_pwm_Stop();
 151   1          
 152   1          /* Save registers configuration */
 153   1          Motor_pwm_SaveConfig();
 154   1      }
 155          
 156          
 157          /*******************************************************************************
 158          * Function Name: Motor_pwm_Wakeup
 159          ********************************************************************************
 160          * 
 161          * Summary:
 162          *  Restores and enables the user configuration. Should be called just after 
 163          *  awaking from sleep.
 164          *  
 165          * Parameters:  
 166          *  None
 167          *
 168          * Return: 
 169          *  None
 170          *
 171          * Global variables:
 172          *  Motor_pwm_backup.pwmEnable:  Is used to restore the enable state of 
 173          *  block on wakeup from sleep mode.
 174          *
 175          *******************************************************************************/
 176          void Motor_pwm_Wakeup(void) 
 177          {
C51 COMPILER V9.51   MOTOR_PWM_PM                                                          12/15/2013 02:07:45 PAGE 4   

 178   1           /* Restore registers values */
 179   1          Motor_pwm_RestoreConfig();
 180   1          
 181   1          if(Motor_pwm_backup.PWMEnableState != 0u)
 182   1          {
 183   2              /* Enable component's operation */
 184   2              Motor_pwm_Enable();
 185   2          } /* Do nothing if component's block was disabled before */
 186   1          
 187   1      }
 188          
 189          
 190          /* [] END OF FILE */
C51 COMPILER V9.51   MOTOR_PWM_PM                                                          12/15/2013 02:07:45 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Motor_pwm_SaveConfig (BEGIN)
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 47
0000 120000      E     LCALL   Motor_pwm_ReadPeriod
0003 900000      R     MOV     DPTR,#Motor_pwm_backup+03H
0006 EE                MOV     A,R6
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 49
000B 120000      E     LCALL   Motor_pwm_ReadCounter
000E 900000      R     MOV     DPTR,#Motor_pwm_backup+01H
0011 EE                MOV     A,R6
0012 F0                MOVX    @DPTR,A
0013 A3                INC     DPTR
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 51
0016 906586            MOV     DPTR,#06586H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B 900000      R     MOV     DPTR,#Motor_pwm_backup+05H
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 64
0020 120000      E     LCALL   Motor_pwm_ReadControlRegister
0023 900000      R     MOV     DPTR,#Motor_pwm_backup+06H
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 67
0028 22                RET     
             ; FUNCTION Motor_pwm_SaveConfig (END)

             ; FUNCTION Motor_pwm_RestoreConfig (BEGIN)
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 92
0000 900000      R     MOV     DPTR,#Motor_pwm_backup+03H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 120000      E     LCALL   _Motor_pwm_WritePeriod
                                           ; SOURCE LINE # 94
000B 900000      R     MOV     DPTR,#Motor_pwm_backup+01H
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 A3                INC     DPTR
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 120000      E     LCALL   _Motor_pwm_WriteCounter
                                           ; SOURCE LINE # 96
0016 900000      R     MOV     DPTR,#Motor_pwm_backup+05H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B 906586            MOV     DPTR,#06586H
C51 COMPILER V9.51   MOTOR_PWM_PM                                                          12/15/2013 02:07:45 PAGE 6   

001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
0020 900000      R     MOV     DPTR,#Motor_pwm_backup+06H
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 120000      E     LCALL   _Motor_pwm_WriteControlRegister
                                           ; SOURCE LINE # 112
0028 22                RET     
             ; FUNCTION Motor_pwm_RestoreConfig (END)

             ; FUNCTION Motor_pwm_Sleep (BEGIN)
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 137
0000 906576            MOV     DPTR,#06576H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E708            JNB     ACC.7,?C0003
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 140
0009 900000      R     MOV     DPTR,#Motor_pwm_backup
000C 7401              MOV     A,#01H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
000F 8005              SJMP    ?C0004
0011         ?C0003:
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 145
0011 900000      R     MOV     DPTR,#Motor_pwm_backup
0014 E4                CLR     A
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
0016         ?C0004:
                                           ; SOURCE LINE # 150
0016 120000      E     LCALL   Motor_pwm_Stop
                                           ; SOURCE LINE # 153
0019 120000      R     LCALL   Motor_pwm_SaveConfig
                                           ; SOURCE LINE # 154
001C 22                RET     
             ; FUNCTION Motor_pwm_Sleep (END)

             ; FUNCTION Motor_pwm_Wakeup (BEGIN)
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 179
0000 120000      R     LCALL   Motor_pwm_RestoreConfig
                                           ; SOURCE LINE # 181
0003 900000      R     MOV     DPTR,#Motor_pwm_backup
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 EF                MOV     A,R7
0009 6003              JZ      ?C0007
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 184
000B 120000      E     LCALL   Motor_pwm_Enable
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 187
000E         ?C0007:
000E 22                RET     
             ; FUNCTION Motor_pwm_Wakeup (END)
C51 COMPILER V9.51   MOTOR_PWM_PM                                                          12/15/2013 02:07:45 PAGE 7   




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    126    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      7    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
