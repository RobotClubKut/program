C51 COMPILER V9.51   LIN_TIMER_PM                                                          01/27/2014 21:32:12 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE LIN_TIMER_PM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\LIN_Timer_PM.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\LIN_Timer_PM.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\LIN_Timer_PM.lst)
                    - CD DB NOIP OT(2,SIZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\LIN_Timer_PM.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: LIN_Timer_PM.c
   3          * Version 2.50
   4          *
   5          *  Description:
   6          *     This file provides the power management source code to API for the
   7          *     Timer.
   8          *
   9          *   Note:
  10          *     None
  11          *
  12          *******************************************************************************
  13          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          ********************************************************************************/
  18          
  19          #include "LIN_Timer.h"
  20          static LIN_Timer_backupStruct LIN_Timer_backup;
  21          
  22          
  23          /*******************************************************************************
  24          * Function Name: LIN_Timer_SaveConfig
  25          ********************************************************************************
  26          *
  27          * Summary:
  28          *     Save the current user configuration
  29          *
  30          * Parameters:
  31          *  void
  32          *
  33          * Return:
  34          *  void
  35          *
  36          * Global variables:
  37          *  LIN_Timer_backup:  Variables of this global structure are modified to
  38          *  store the values of non retention configuration registers when Sleep() API is
  39          *  called.
  40          *
  41          *******************************************************************************/
  42          void LIN_Timer_SaveConfig(void) 
  43          {
  44   1          #if (!LIN_Timer_UsingFixedFunction)
  45   1              /* Backup the UDB non-rentention registers for CY_UDB_V0 */
  46   1              #if (CY_UDB_V0)
                          LIN_Timer_backup.TimerUdb = LIN_Timer_ReadCounter();
                          LIN_Timer_backup.TimerPeriod = LIN_Timer_ReadPeriod();
                          LIN_Timer_backup.InterruptMaskValue = LIN_Timer_STATUS_MASK;
                          #if (LIN_Timer_UsingHWCaptureCounter)
                              LIN_Timer_backup.TimerCaptureCounter = LIN_Timer_ReadCaptureCount();
                          #endif /* Backup the UDB non-rentention register capture counter for CY_UDB_V0 */
                      #endif /* Backup the UDB non-rentention registers for CY_UDB_V0 */
C51 COMPILER V9.51   LIN_TIMER_PM                                                          01/27/2014 21:32:12 PAGE 2   

  54   1      
  55   1              #if (CY_UDB_V1)
  56   1                  LIN_Timer_backup.TimerUdb = LIN_Timer_ReadCounter();
  57   1                  LIN_Timer_backup.InterruptMaskValue = LIN_Timer_STATUS_MASK;
  58   1                  #if (LIN_Timer_UsingHWCaptureCounter)
                              LIN_Timer_backup.TimerCaptureCounter = LIN_Timer_ReadCaptureCount();
                          #endif /* Back Up capture counter register  */
  61   1              #endif /* Backup non retention registers, interrupt mask and capture counter for CY_UDB_V1 */
  62   1      
  63   1              #if(!LIN_Timer_ControlRegRemoved)
  64   1                  LIN_Timer_backup.TimerControlRegister = LIN_Timer_ReadControlRegister();
  65   1              #endif /* Backup the enable state of the Timer component */
  66   1          #endif /* Backup non retention registers in UDB implementation. All fixed function registers are reten
             -tion */
  67   1      }
  68          
  69          
  70          /*******************************************************************************
  71          * Function Name: LIN_Timer_RestoreConfig
  72          ********************************************************************************
  73          *
  74          * Summary:
  75          *  Restores the current user configuration.
  76          *
  77          * Parameters:
  78          *  void
  79          *
  80          * Return:
  81          *  void
  82          *
  83          * Global variables:
  84          *  LIN_Timer_backup:  Variables of this global structure are used to
  85          *  restore the values of non retention registers on wakeup from sleep mode.
  86          *
  87          *******************************************************************************/
  88          void LIN_Timer_RestoreConfig(void) 
  89          {   
  90   1          #if (!LIN_Timer_UsingFixedFunction)
  91   1              /* Restore the UDB non-rentention registers for CY_UDB_V0 */
  92   1              #if (CY_UDB_V0)
                          /* Interrupt State Backup for Critical Region*/
                          uint8 LIN_Timer_interruptState;
              
                          LIN_Timer_WriteCounter(LIN_Timer_backup.TimerUdb);
                          LIN_Timer_WritePeriod(LIN_Timer_backup.TimerPeriod);
                          /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critical*/
                          /* Enter Critical Region*/
                          LIN_Timer_interruptState = CyEnterCriticalSection();
                          /* Use the interrupt output of the status register for IRQ output */
                          LIN_Timer_STATUS_AUX_CTRL |= LIN_Timer_STATUS_ACTL_INT_EN_MASK;
                          /* Exit Critical Region*/
                          CyExitCriticalSection(LIN_Timer_interruptState);
                          LIN_Timer_STATUS_MASK =LIN_Timer_backup.InterruptMaskValue;
                          #if (LIN_Timer_UsingHWCaptureCounter)
                              LIN_Timer_SetCaptureCount(LIN_Timer_backup.TimerCaptureCounter);
                          #endif /* Restore the UDB non-rentention register capture counter for CY_UDB_V0 */
                      #endif /* Restore the UDB non-rentention registers for CY_UDB_V0 */
 110   1      
 111   1              #if (CY_UDB_V1)
 112   1                  LIN_Timer_WriteCounter(LIN_Timer_backup.TimerUdb);
 113   1                  LIN_Timer_STATUS_MASK =LIN_Timer_backup.InterruptMaskValue;
 114   1                  #if (LIN_Timer_UsingHWCaptureCounter)
C51 COMPILER V9.51   LIN_TIMER_PM                                                          01/27/2014 21:32:12 PAGE 3   

                              LIN_Timer_SetCaptureCount(LIN_Timer_backup.TimerCaptureCounter);
                          #endif /* Restore Capture counter register*/
 117   1              #endif /* Restore up non retention registers, interrupt mask and capture counter for CY_UDB_V1 */
 118   1      
 119   1              #if(!LIN_Timer_ControlRegRemoved)
 120   1                  LIN_Timer_WriteControlRegister(LIN_Timer_backup.TimerControlRegister);
 121   1              #endif /* Restore the enable state of the Timer component */
 122   1          #endif /* Restore non retention registers in the UDB implementation only */
 123   1      }
 124          
 125          
 126          /*******************************************************************************
 127          * Function Name: LIN_Timer_Sleep
 128          ********************************************************************************
 129          *
 130          * Summary:
 131          *     Stop and Save the user configuration
 132          *
 133          * Parameters:
 134          *  void
 135          *
 136          * Return:
 137          *  void
 138          *
 139          * Global variables:
 140          *  LIN_Timer_backup.TimerEnableState:  Is modified depending on the
 141          *  enable state of the block before entering sleep mode.
 142          *
 143          *******************************************************************************/
 144          void LIN_Timer_Sleep(void) 
 145          {
 146   1          #if(!LIN_Timer_ControlRegRemoved)
 147   1              /* Save Counter's enable state */
 148   1              if(LIN_Timer_CTRL_ENABLE == (LIN_Timer_CONTROL & LIN_Timer_CTRL_ENABLE))
 149   1              {
 150   2                  /* Timer is enabled */
 151   2                  LIN_Timer_backup.TimerEnableState = 1u;
 152   2              }
 153   1              else
 154   1              {
 155   2                  /* Timer is disabled */
 156   2                  LIN_Timer_backup.TimerEnableState = 0u;
 157   2              }
 158   1          #endif /* Back up enable state from the Timer control register */
 159   1          LIN_Timer_Stop();
 160   1          LIN_Timer_SaveConfig();
 161   1      }
 162          
 163          
 164          /*******************************************************************************
 165          * Function Name: LIN_Timer_Wakeup
 166          ********************************************************************************
 167          *
 168          * Summary:
 169          *  Restores and enables the user configuration
 170          *
 171          * Parameters:
 172          *  void
 173          *
 174          * Return:
 175          *  void
 176          *
C51 COMPILER V9.51   LIN_TIMER_PM                                                          01/27/2014 21:32:12 PAGE 4   

 177          * Global variables:
 178          *  LIN_Timer_backup.enableState:  Is used to restore the enable state of
 179          *  block on wakeup from sleep mode.
 180          *
 181          *******************************************************************************/
 182          void LIN_Timer_Wakeup(void) 
 183          {
 184   1          LIN_Timer_RestoreConfig();
 185   1          #if(!LIN_Timer_ControlRegRemoved)
 186   1              if(LIN_Timer_backup.TimerEnableState == 1u)
 187   1              {     /* Enable Timer's operation */
 188   2                      LIN_Timer_Enable();
 189   2              } /* Do nothing if Timer was disabled before */
 190   1          #endif /* Remove this code section if Control register is removed */
 191   1      }
 192          
 193          
 194          /* [] END OF FILE */
C51 COMPILER V9.51   LIN_TIMER_PM                                                          01/27/2014 21:32:12 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION LIN_Timer_SaveConfig (BEGIN)
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 56
0000 120000      E     LCALL   LIN_Timer_ReadCounter
0003 900000      R     MOV     DPTR,#LIN_Timer_backup+01H
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
0008 90648F            MOV     DPTR,#0648FH
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D 900000      R     MOV     DPTR,#LIN_Timer_backup+02H
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 64
0012 120000      E     LCALL   LIN_Timer_ReadControlRegister
0015 900000      R     MOV     DPTR,#LIN_Timer_backup+03H
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 67
001A 22                RET     
             ; FUNCTION LIN_Timer_SaveConfig (END)

             ; FUNCTION LIN_Timer_RestoreConfig (BEGIN)
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 112
0000 900000      R     MOV     DPTR,#LIN_Timer_backup+01H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 120000      E     LCALL   _LIN_Timer_WriteCounter
                                           ; SOURCE LINE # 113
0008 900000      R     MOV     DPTR,#LIN_Timer_backup+02H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D 90648F            MOV     DPTR,#0648FH
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
0012 900000      R     MOV     DPTR,#LIN_Timer_backup+03H
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 120000      E     LCALL   _LIN_Timer_WriteControlRegister
                                           ; SOURCE LINE # 123
001A 22                RET     
             ; FUNCTION LIN_Timer_RestoreConfig (END)

             ; FUNCTION LIN_Timer_Sleep (BEGIN)
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 148
0000 90647F            MOV     DPTR,#0647FH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E708            JNB     ACC.7,?C0003
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 151
C51 COMPILER V9.51   LIN_TIMER_PM                                                          01/27/2014 21:32:12 PAGE 6   

0009 900000      R     MOV     DPTR,#LIN_Timer_backup
000C 7401              MOV     A,#01H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
000F 8005              SJMP    ?C0004
0011         ?C0003:
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 156
0011 900000      R     MOV     DPTR,#LIN_Timer_backup
0014 E4                CLR     A
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
0016         ?C0004:
                                           ; SOURCE LINE # 159
0016 120000      E     LCALL   LIN_Timer_Stop
                                           ; SOURCE LINE # 160
0019 120000      R     LCALL   LIN_Timer_SaveConfig
                                           ; SOURCE LINE # 161
001C 22                RET     
             ; FUNCTION LIN_Timer_Sleep (END)

             ; FUNCTION LIN_Timer_Wakeup (BEGIN)
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 184
0000 120000      R     LCALL   LIN_Timer_RestoreConfig
                                           ; SOURCE LINE # 186
0003 900000      R     MOV     DPTR,#LIN_Timer_backup
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 EF                MOV     A,R7
0009 B40103            CJNE    A,#01H,?C0007
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
000C 120000      E     LCALL   LIN_Timer_Enable
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 191
000F         ?C0007:
000F 22                RET     
             ; FUNCTION LIN_Timer_Wakeup (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     99    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
