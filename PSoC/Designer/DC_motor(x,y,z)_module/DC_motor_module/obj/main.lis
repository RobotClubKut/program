 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\MATSUD~1\DOCUME~1\PSOCDE~1.4PR\DC_MOT~1\DC_MOT~1\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 29
 0000           ; //----------------------------------------------------------------------------
 0000           ; // C main line
 0000           ; //----------------------------------------------------------------------------
 0000           ; //PSoC1の29446用です。
 0000           ; //配線はxのhighがP1[2],P1[3]
 0000           ; //        lowが　P0[0],P1[1]
 0000           ; //     yのhighがP2[5],P2[7]
 0000           ; //              lowが　P0[2],P0[3] 
 0000           ; //     zのhighがP1[6],P2[0]
 0000           ; //              lowが P0[4],P0[5]
 0000           ; //EZI2Cs_1  slave　address 11
 0000           ; //          I2C clock 400k First
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; 
 0000           ; 
 0000           ; struct I2C_Motor
 0000           ; {
 0000           ;       BYTE x_1;
 0000           ;       BYTE x_2;
 0000           ;       BYTE y_1;
 0000           ;       BYTE y_2;
 0000           ;       BYTE z_1;
 0000           ;       BYTE z_2;
 0000           ;       
 0000           ; } MyI2C_Motor;
 0000           ; 
 0000           ; void main(void)
 0000           ; {
 0000                   .dbline 40
 0000           ;       
 0000           ;       // M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
 0000           ;       // Insert your main routine code here.
 0000           ;       
 0000           ;       /*ポートの初期化いらない*/
 0000           ; //    PRT2DR = 0x00;
 0000           ; //    PRT1DR = 0x00;
 0000           ; //    PRT0DR = 0x00;
 0000           ;       
 0000           ;       /*PWM8の1~6をスタート*/
 0000           ;       PWM8_1_Start();
 0000 10                push X
 0001 7C0000            xcall _PWM8_1_Start
 0004                   .dbline 41
 0004           ;       PWM8_2_Start();
 0004 7C0000            xcall _PWM8_2_Start
 0007                   .dbline 42
 0007           ;       PWM8_3_Start();
 0007 7C0000            xcall _PWM8_3_Start
 000A                   .dbline 43
 000A           ;       PWM8_4_Start();
 000A 7C0000            xcall _PWM8_4_Start
 000D                   .dbline 44
 000D           ;       PWM8_5_Start();
 000D 7C0000            xcall _PWM8_5_Start
 0010                   .dbline 45
 0010           ;       PWM8_6_Start();
 0010 7C0000            xcall _PWM8_6_Start
 0013                   .dbline 47
 0013           ;       /*EzI2Cs_1の設定*/
 0013           ;       EzI2Cs_1_SetRamBuffer(sizeof(MyI2C_Motor), 6, (BYTE *)&MyI2C_Motor);
 0013 5000              mov A,>_MyI2C_Motor
 0015 08                push A
 0016 5000              mov A,<_MyI2C_Motor
 0018 08                push A
 0019 5006              mov A,6
 001B 08                push A
 001C 08                push A
 001D 7C0000            xcall _EzI2Cs_1_SetRamBuffer
 0020 38FC              add SP,-4
 0022                   .dbline 48
 0022           ;       EzI2Cs_1_Start();
 0022 7C0000            xcall _EzI2Cs_1_Start
 0025                   .dbline 49
 0025           ;       EzI2Cs_1_EnableInt();
 0025 7C0000            xcall _EzI2Cs_1_EnableInt
 0028 20                pop X
 0029 80AC              xjmp L3
 002B           L2:
 002B                   .dbline 51
 002B           ;       /*メイン処理*/
 002B           ;       while (1){
 002B                   .dbline 53
 002B           ;               /*xが入力されてなかったらブレーキ*/
 002B           ;               if ((MyI2C_Motor.x_1 == 0)&&(MyI2C_Motor.x_2 == 0)){
 002B 62D000            mov REG[0xd0],>_MyI2C_Motor
 002E 3C0000            cmp [_MyI2C_Motor],0
 0031 B01A              jnz L5
 0033 3C0100            cmp [_MyI2C_Motor+1],0
 0036 B015              jnz L5
 0038                   .dbline 55
 0038           ;                       
 0038           ;                       PRT1DR = PRT1DR & ~(1 << 2);
 0038                   .dbline 55
 0038 4104FB            and REG[0x4],-5
 003B                   .dbline 56
 003B           ;                       PRT1DR = PRT1DR & ~(1 << 3);
 003B 4104F7            and REG[0x4],-9
 003E                   .dbline 58
 003E           ;                       
 003E           ;                       PWM8_1_WritePulseWidth(255);
 003E 10                push X
 003F 50FF              mov A,-1
 0041 7C0000            xcall _PWM8_1_WritePulseWidth
 0044                   .dbline 59
 0044           ;                       PWM8_2_WritePulseWidth(255);
 0044 50FF              mov A,-1
 0046 7C0000            xcall _PWM8_2_WritePulseWidth
 0049 20                pop X
 004A                   .dbline 60
 004A           ;               }
 004A 8019              xjmp L6
 004C           L5:
 004C                   .dbline 62
 004C           ;               
 004C           ;               else{
 004C                   .dbline 64
 004C           ;                       
 004C           ;                       PRT1DR = PRT1DR | (1 << 2);
 004C 430404            or REG[0x4],4
 004F                   .dbline 65
 004F           ;                       PRT1DR = PRT1DR | (1 << 3);
 004F 430408            or REG[0x4],8
 0052                   .dbline 67
 0052           ;                       
 0052           ;                       PWM8_1_WritePulseWidth(MyI2C_Motor.x_1);
 0052 10                push X
 0053 62D000            mov REG[0xd0],>_MyI2C_Motor
 0056 5100              mov A,[_MyI2C_Motor]
 0058 7C0000            xcall _PWM8_1_WritePulseWidth
 005B                   .dbline 68
 005B           ;                       PWM8_2_WritePulseWidth(MyI2C_Motor.x_2);
 005B 62D000            mov REG[0xd0],>_MyI2C_Motor
 005E 5101              mov A,[_MyI2C_Motor+1]
 0060 7C0000            xcall _PWM8_2_WritePulseWidth
 0063 20                pop X
 0064                   .dbline 69
 0064           ;               }
 0064           L6:
 0064                   .dbline 71
 0064           ;               /*yが入力されてなかったらブレーキ*/      
 0064           ;               if ((MyI2C_Motor.y_1 == 0)&&(MyI2C_Motor.y_2 == 0)){
 0064 62D000            mov REG[0xd0],>_MyI2C_Motor
 0067 3C0200            cmp [_MyI2C_Motor+2],0
 006A B01A              jnz L9
 006C 3C0300            cmp [_MyI2C_Motor+3],0
 006F B015              jnz L9
 0071                   .dbline 73
 0071           ;                       
 0071           ;                       PRT2DR = PRT2DR & ~(1 << 5);
 0071                   .dbline 73
 0071 4108DF            and REG[0x8],-33
 0074                   .dbline 74
 0074           ;                       PRT2DR = PRT2DR & ~(1 << 7);
 0074 41087F            and REG[0x8],127
 0077                   .dbline 76
 0077           ;                       
 0077           ;                       PWM8_3_WritePulseWidth(255);
 0077 10                push X
 0078 50FF              mov A,-1
 007A 7C0000            xcall _PWM8_3_WritePulseWidth
 007D                   .dbline 77
 007D           ;                       PWM8_4_WritePulseWidth(255);            
 007D 50FF              mov A,-1
 007F 7C0000            xcall _PWM8_4_WritePulseWidth
 0082 20                pop X
 0083                   .dbline 78
 0083           ;               }
 0083 8019              xjmp L10
 0085           L9:
 0085                   .dbline 80
 0085           ;               
 0085           ;               else{
 0085                   .dbline 82
 0085           ;                       
 0085           ;                       PRT2DR = PRT2DR | (1 << 5);
 0085 430820            or REG[0x8],32
 0088                   .dbline 83
 0088           ;                       PRT2DR = PRT2DR | (1 << 7);
 0088 430880            or REG[0x8],-128
 008B                   .dbline 85
 008B           ;                       
 008B           ;                       PWM8_3_WritePulseWidth(MyI2C_Motor.y_1);
 008B 10                push X
 008C 62D000            mov REG[0xd0],>_MyI2C_Motor
 008F 5102              mov A,[_MyI2C_Motor+2]
 0091 7C0000            xcall _PWM8_3_WritePulseWidth
 0094                   .dbline 86
 0094           ;                       PWM8_4_WritePulseWidth(MyI2C_Motor.y_2);
 0094 62D000            mov REG[0xd0],>_MyI2C_Motor
 0097 5103              mov A,[_MyI2C_Motor+3]
 0099 7C0000            xcall _PWM8_4_WritePulseWidth
 009C 20                pop X
 009D                   .dbline 87
 009D           ;               }
 009D           L10:
 009D                   .dbline 89
 009D           ;               /*zが入力されてなかったらブレーキ*/
 009D           ;               if ((MyI2C_Motor.z_1 == 0)&&(MyI2C_Motor.z_2 == 0)){
 009D 62D000            mov REG[0xd0],>_MyI2C_Motor
 00A0 3C0400            cmp [_MyI2C_Motor+4],0
 00A3 B01A              jnz L15
 00A5 3C0500            cmp [_MyI2C_Motor+5],0
 00A8 B015              jnz L15
 00AA                   .dbline 91
 00AA           ;                       
 00AA           ;                       PRT2DR = PRT2DR & ~(1 << 0);
 00AA                   .dbline 91
 00AA 4108FE            and REG[0x8],-2
 00AD                   .dbline 92
 00AD           ;                       PRT1DR = PRT1DR & ~(1 << 6);
 00AD 4104BF            and REG[0x4],-65
 00B0                   .dbline 94
 00B0           ;                       
 00B0           ;                       PWM8_5_WritePulseWidth(255);
 00B0 10                push X
 00B1 50FF              mov A,-1
 00B3 7C0000            xcall _PWM8_5_WritePulseWidth
 00B6                   .dbline 95
 00B6           ;                       PWM8_6_WritePulseWidth(255);
 00B6 50FF              mov A,-1
 00B8 7C0000            xcall _PWM8_6_WritePulseWidth
 00BB 20                pop X
 00BC                   .dbline 96
 00BC           ;               }
 00BC 8019              xjmp L16
 00BE           L15:
 00BE                   .dbline 98
 00BE           ;               
 00BE           ;               else{
 00BE                   .dbline 100
 00BE           ;                       
 00BE           ;                       PRT2DR = PRT2DR | (1 << 0);
 00BE 430801            or REG[0x8],1
 00C1                   .dbline 101
 00C1           ;                       PRT1DR = PRT1DR | (1 << 6);
 00C1 430440            or REG[0x4],64
 00C4                   .dbline 103
 00C4           ;                       
 00C4           ;                       PWM8_5_WritePulseWidth(MyI2C_Motor.z_1);
 00C4 10                push X
 00C5 62D000            mov REG[0xd0],>_MyI2C_Motor
 00C8 5104              mov A,[_MyI2C_Motor+4]
 00CA 7C0000            xcall _PWM8_5_WritePulseWidth
 00CD                   .dbline 104
 00CD           ;                       PWM8_6_WritePulseWidth(MyI2C_Motor.z_2);
 00CD 62D000            mov REG[0xd0],>_MyI2C_Motor
 00D0 5105              mov A,[_MyI2C_Motor+5]
 00D2 7C0000            xcall _PWM8_6_WritePulseWidth
 00D5 20                pop X
 00D6                   .dbline 105
 00D6           ;               }
 00D6           L16:
 00D6                   .dbline 106
 00D6           ;       }
 00D6           L3:
 00D6                   .dbline 51
 00D6 8F54              xjmp L2
 00D8           X0:
 00D8                   .dbline -2
 00D8           L1:
 00D8                   .dbline 0 ; func end
 00D8 8FFF              jmp .
 00DA                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\MATSUD~1\DOCUME~1\PSOCDE~1.4PR\DC_MOT~1\DC_MOT~1\main.c
 0000           _MyI2C_Motor::
 0000 000000000000      .byte 0,0,0,0,0,0
 0006                   .dbstruct 0 6 I2C_Motor
 0006                   .dbfield 0 x_1 c
 0006                   .dbfield 1 x_2 c
 0006                   .dbfield 2 y_1 c
 0006                   .dbfield 3 y_2 c
 0006                   .dbfield 4 z_1 c
 0006                   .dbfield 5 z_2 c
 0006                   .dbend
 0006                   .dbsym e MyI2C_Motor _MyI2C_Motor S[I2C_Motor]
