FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 03 ED LJMP  _bPWM8_2_ReadCounter|_PWM8_2_bReadCounter|_PWM8_1_ISR|bPWM8_2_ReadPulseWidth|bPWM8_2_ReadCounter|_PWM8_2_bReadPulseWidth|_bPWM8_2_ReadPulseWidth(0149)     ljmp	_PWM8_1_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 03 E5 LJMP  _bPWM8_3_ReadCounter|_PWM8_2_ISR|_bPWM8_3_ReadPulseWidth|bPWM8_3_ReadPulseWidth|_PWM8_3_bReadCounter|_PWM8_3_bReadPulseWidth(0153)     ljmp	_PWM8_2_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 03 DD LJMP  bPWM8_4_ReadPulseWidth|bPWM8_4_ReadCounter|_PWM8_4_bReadPulseWidth|_bPWM8_4_ReadPulseWidth|_PWM8_3_ISR|_bPWM8_4_ReadCounter|_PWM8_4_bReadCounter(0157)     ljmp	_PWM8_3_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 03 D5 LJMP  _PWM8_4_ISR|bPWM8_5_ReadCounter|_PWM8_5_bReadPulseWidth|_bPWM8_5_ReadCounter|_PWM8_5_bReadCounter|bPWM8_5_ReadPulseWidth|_bPWM8_5_ReadPulseWidth(0161)     ljmp	_PWM8_4_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 03 CD LJMP  _PWM8_6_bReadCounter|bPWM8_6_ReadPulseWidth|_bPWM8_6_ReadCounter|bPWM8_6_ReadCounter|_bPWM8_6_ReadPulseWidth|_PWM8_6_bReadPulseWidth|_PWM8_5_ISR(0165)     ljmp	_PWM8_5_ISR
0033: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 03 C5 LJMP  _PWM8_6_ISR        (0169)     ljmp	_PWM8_6_ISR
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
0060: 7D 03 F5 LJMP  _bPWM8_1_ReadPulseWidth|_PWM8_1_bReadCounter|_bPWM8_1_ReadCounter|_PWM8_1_bReadPulseWidth|_EzI2Cs_1_ISR|bPWM8_1_ReadPulseWidth|bPWM8_1_ReadCounter(0213)     ljmp	_EzI2Cs_1_ISR
0063: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
0087: 5D D0    MOV   A,REG[0xD0]        
0089: 08       PUSH  A                  
008A: 62 D0 00 MOV   REG[0xD0],0x0      
008D: 55 FA 01 MOV   [port1data+233],0x1
0090: 4F       MOV   X,SP               
0091: 5B       MOV   A,X                
0092: 01 03    ADD   A,0x3              
0094: 53 F9    MOV   [port1data+232],A  
0096: 55 F8 3A MOV   [port1data+231],0x3A
0099: 50 06    MOV   A,0x6              
009B: 00       SWI                      
009C: 71 10    OR    F,0x10             
009E: 51 FC    MOV   A,[port1data+235]  
00A0: 29 40    OR    A,0x40             
00A2: 60 EA    MOV   REG[0xEA],A        
00A4: 70 EF    AND   F,0xEF             
00A6: 18       POP   A                  
00A7: 60 D0    MOV   REG[0xD0],A        
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
00A9: 55 F8 00 MOV   [port1data+231],0x0(0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
00AC: 55 F9 00 MOV   [port1data+232],0x0(0308)     mov  [bSSC_KEYSP], 0
00AF: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
00B1: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
00B4: 70 EF    AND   F,0xEF             
00B6: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
00B9: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
00BC: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
00BF: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00C2: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00C5: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00C8: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00CA: 4E       SWAP  SP,A               (0410)     swap  A, SP
00CB: 62 D3 07 MOV   REG[0xD3],0x7      
00CE: 62 D0 00 MOV   REG[0xD0],0x0      
00D1: 62 D5 00 MOV   REG[0xD5],0x0      
00D4: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00D7: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00D9: 7C 03 63 LCALL 0x0363             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00DC: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00DF: 50 02    MOV   A,0x2              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00E1: 57 5C    MOV   X,0x5C             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00E3: 08       PUSH  A                  (0486)     push  A
00E4: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00E5: 53 0F    MOV   [__r0],A           (0488)     mov   [__r0], A
00E7: 18       POP   A                  (0489)     pop   A
00E8: 75       INC   X                  (0490)     inc   X
00E9: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00EB: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00EC: 4B       SWAP  A,X                (0493)     swap  A, X
00ED: 51 0F    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00EF: 80 04    JMP   0x00F4             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00F1: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00F2: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00F4: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00F7: 08       PUSH  A                  (0521)     push  A
00F8: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00F9: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00FB: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00FC: A0 4B    JZ    0x0148             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00FE: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00FF: 75       INC   X                  (0527)     inc   X                            ; pXIData++
0100: 09 00    ADC   A,0x0              (0528)     adc   A, 0
0102: 08       PUSH  A                  (0529)     push  A
0103: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
0104: 53 0F    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
0106: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
0107: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
0108: 09 00    ADC   A,0x0              (0534)     adc   A, 0
010A: 08       PUSH  A                  (0535)     push  A
010B: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
010C: A0 1C    JZ    0x0129             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
010E: 53 0E    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
0110: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
0111: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
0112: 09 00    ADC   A,0x0              (0548)     adc   A, 0
0114: 08       PUSH  A                  (0549)     push  A
0115: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
0116: 3F 0F    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
0118: 47 0F FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
011B: B0 06    JNZ   0x0122             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
011D: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011F: 74       INC   A                  (0555)     inc   A
0120: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0122: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0123: 7A 0E    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0125: BF EB    JNZ   0x0111             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0127: 8F C9    JMP   0x00F1             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0129: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
012A: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
012B: 09 00    ADC   A,0x0              (0566)     adc   A, 0
012D: 08       PUSH  A                  (0567)     push  A
012E: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
012F: 53 0E    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
0131: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0133: 3F 0F    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0135: 47 0F FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0138: B0 08    JNZ   0x0141             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
013A: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
013C: 74       INC   A                  (0580)     inc   A
013D: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
013F: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
0141: 7A 0E    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0143: BF EF    JNZ   0x0133             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0145: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0146: 8F AA    JMP   0x00F1             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0148: 18       POP   A                  (0590)     pop   A                            ; balance stack
0149: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
014B: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
014E: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
0150: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0153: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0155: 62 E0 03 MOV   REG[0xE0],0x3      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0158: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
015B: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
015D: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
0160: 7C 05 2D LCALL __UserModules_end|__text_start|_main|_main(0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0163: 8F FF    JMP   0x0163             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0165: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0167: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
025E: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_dc_motor_module2_Bank1
                                        (0019) export LoadConfigTBL_dc_motor_module2_Bank0
                                        (0020) export LoadConfigTBL_dc_motor_module2_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_dc_motor_module2_Bank0:
                                        (0023) ;  Instance name EzI2Cs_1, User Module EzI2Cs
                                        (0024) ;  Instance name PWM8_1, User Module PWM8
                                        (0025) ;       Instance name PWM8_1, Block Name PWM8(DBB00)
                                        (0026) 	db		23h, 00h		;PWM8_1_CONTROL_REG(DBB00CR0)
                                        (0027) 	db		21h, ffh		;PWM8_1_PERIOD_REG(DBB00DR1)
                                        (0028) 	db		22h, 00h		;PWM8_1_COMPARE_REG(DBB00DR2)
                                        (0029) ;  Instance name PWM8_2, User Module PWM8
                                        (0030) ;       Instance name PWM8_2, Block Name PWM8(DBB01)
                                        (0031) 	db		27h, 00h		;PWM8_2_CONTROL_REG(DBB01CR0)
                                        (0032) 	db		25h, ffh		;PWM8_2_PERIOD_REG(DBB01DR1)
                                        (0033) 	db		26h, 00h		;PWM8_2_COMPARE_REG(DBB01DR2)
                                        (0034) ;  Instance name PWM8_3, User Module PWM8
                                        (0035) ;       Instance name PWM8_3, Block Name PWM8(DCB02)
                                        (0036) 	db		2bh, 00h		;PWM8_3_CONTROL_REG(DCB02CR0)
                                        (0037) 	db		29h, ffh		;PWM8_3_PERIOD_REG(DCB02DR1)
                                        (0038) 	db		2ah, 00h		;PWM8_3_COMPARE_REG(DCB02DR2)
                                        (0039) ;  Instance name PWM8_4, User Module PWM8
                                        (0040) ;       Instance name PWM8_4, Block Name PWM8(DCB03)
                                        (0041) 	db		2fh, 00h		;PWM8_4_CONTROL_REG(DCB03CR0)
                                        (0042) 	db		2dh, ffh		;PWM8_4_PERIOD_REG(DCB03DR1)
                                        (0043) 	db		2eh, 00h		;PWM8_4_COMPARE_REG(DCB03DR2)
                                        (0044) ;  Instance name PWM8_5, User Module PWM8
                                        (0045) ;       Instance name PWM8_5, Block Name PWM8(DBB10)
                                        (0046) 	db		33h, 00h		;PWM8_5_CONTROL_REG(DBB10CR0)
                                        (0047) 	db		31h, ffh		;PWM8_5_PERIOD_REG(DBB10DR1)
                                        (0048) 	db		32h, 00h		;PWM8_5_COMPARE_REG(DBB10DR2)
                                        (0049) ;  Instance name PWM8_6, User Module PWM8
                                        (0050) ;       Instance name PWM8_6, Block Name PWM8(DBB11)
                                        (0051) 	db		37h, 00h		;PWM8_6_CONTROL_REG(DBB11CR0)
                                        (0052) 	db		35h, ffh		;PWM8_6_PERIOD_REG(DBB11DR1)
                                        (0053) 	db		36h, 00h		;PWM8_6_COMPARE_REG(DBB11DR2)
                                        (0054) ;  Global Register values Bank 0
                                        (0055) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0056) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0057) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0058) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0059) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0060) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0061) 	db		d6h, 04h		; I2CConfig register (I2C_CFG)
                                        (0062) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0063) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0064) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0065) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0066) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0067) 	db		b5h, 11h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0068) 	db		b6h, 11h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0069) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0070) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0071) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0072) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0073) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0074) 	db		bdh, 22h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0075) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0076) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0077) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0078) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0079) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0080) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0081) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0082) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0083) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0084) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0085) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0086) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0087) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0088) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0089) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0090) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0091) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0092) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0093) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0094) 	db		ffh
                                        (0095) LoadConfigTBL_dc_motor_module2_Bank1:
                                        (0096) ;  Instance name EzI2Cs_1, User Module EzI2Cs
                                        (0097) ;  Instance name PWM8_1, User Module PWM8
                                        (0098) ;       Instance name PWM8_1, Block Name PWM8(DBB00)
                                        (0099) 	db		20h, 29h		;PWM8_1_FUNC_REG(DBB00FN)
                                        (0100) 	db		21h, 15h		;PWM8_1_INPUT_REG(DBB00IN)
                                        (0101) 	db		22h, 44h		;PWM8_1_OUTPUT_REG(DBB00OU)
                                        (0102) ;  Instance name PWM8_2, User Module PWM8
                                        (0103) ;       Instance name PWM8_2, Block Name PWM8(DBB01)
                                        (0104) 	db		24h, 29h		;PWM8_2_FUNC_REG(DBB01FN)
                                        (0105) 	db		25h, 15h		;PWM8_2_INPUT_REG(DBB01IN)
                                        (0106) 	db		26h, 45h		;PWM8_2_OUTPUT_REG(DBB01OU)
                                        (0107) ;  Instance name PWM8_3, User Module PWM8
                                        (0108) ;       Instance name PWM8_3, Block Name PWM8(DCB02)
                                        (0109) 	db		28h, 29h		;PWM8_3_FUNC_REG(DCB02FN)
                                        (0110) 	db		29h, 15h		;PWM8_3_INPUT_REG(DCB02IN)
                                        (0111) 	db		2ah, 46h		;PWM8_3_OUTPUT_REG(DCB02OU)
                                        (0112) ;  Instance name PWM8_4, User Module PWM8
                                        (0113) ;       Instance name PWM8_4, Block Name PWM8(DCB03)
                                        (0114) 	db		2ch, 29h		;PWM8_4_FUNC_REG(DCB03FN)
                                        (0115) 	db		2dh, 15h		;PWM8_4_INPUT_REG(DCB03IN)
                                        (0116) 	db		2eh, 47h		;PWM8_4_OUTPUT_REG(DCB03OU)
                                        (0117) ;  Instance name PWM8_5, User Module PWM8
                                        (0118) ;       Instance name PWM8_5, Block Name PWM8(DBB10)
                                        (0119) 	db		30h, 29h		;PWM8_5_FUNC_REG(DBB10FN)
                                        (0120) 	db		31h, 15h		;PWM8_5_INPUT_REG(DBB10IN)
                                        (0121) 	db		32h, 44h		;PWM8_5_OUTPUT_REG(DBB10OU)
                                        (0122) ;  Instance name PWM8_6, User Module PWM8
                                        (0123) ;       Instance name PWM8_6, Block Name PWM8(DBB11)
                                        (0124) 	db		34h, 29h		;PWM8_6_FUNC_REG(DBB11FN)
                                        (0125) 	db		35h, 15h		;PWM8_6_INPUT_REG(DBB11IN)
                                        (0126) 	db		36h, 45h		;PWM8_6_OUTPUT_REG(DBB11OU)
                                        (0127) ;  Global Register values Bank 1
                                        (0128) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0129) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0130) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0131) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0132) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0133) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0134) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0135) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0136) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0137) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0138) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0139) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0140) 	db		e1h, b3h		; OscillatorControl_1 register (OSC_CR1)
                                        (0141) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0142) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0143) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0144) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0145) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0146) 	db		ffh
                                        (0147) AREA psoc_config(rom, rel)
                                        (0148) LoadConfigTBL_dc_motor_module2_Ordered:
                                        (0149) ;  Ordered Global Register values
                                        (0150) 	M8C_SetBank0
0260: 62 00 00 MOV   REG[0x0],0x0       (0151) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0263: 71 10    OR    F,0x10             
                                        (0152) 	M8C_SetBank1
0265: 62 00 3F MOV   REG[0x0],0x3F      (0153) 	mov	reg[00h], 3fh		; Port_0_DriveMode_0 register (PRT0DM0)
0268: 62 01 C0 MOV   REG[0x1],0xC0      (0154) 	mov	reg[01h], c0h		; Port_0_DriveMode_1 register (PRT0DM1)
026B: 70 EF    AND   F,0xEF             
                                        (0155) 	M8C_SetBank0
026D: 62 03 C0 MOV   REG[0x3],0xC0      (0156) 	mov	reg[03h], c0h		; Port_0_DriveMode_2 register (PRT0DM2)
0270: 62 02 3F MOV   REG[0x2],0x3F      (0157) 	mov	reg[02h], 3fh		; Port_0_GlobalSelect register (PRT0GS)
0273: 71 10    OR    F,0x10             
                                        (0158) 	M8C_SetBank1
0275: 62 02 00 MOV   REG[0x2],0x0       (0159) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0278: 62 03 00 MOV   REG[0x3],0x0       (0160) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
027B: 70 EF    AND   F,0xEF             
                                        (0161) 	M8C_SetBank0
027D: 62 01 00 MOV   REG[0x1],0x0       (0162) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0280: 62 04 A0 MOV   REG[0x4],0xA0      (0163) 	mov	reg[04h], a0h		; Port_1_Data register (PRT1DR)
0283: 71 10    OR    F,0x10             
                                        (0164) 	M8C_SetBank1
0285: 62 04 E8 MOV   REG[0x4],0xE8      (0165) 	mov	reg[04h], e8h		; Port_1_DriveMode_0 register (PRT1DM0)
0288: 62 05 B7 MOV   REG[0x5],0xB7      (0166) 	mov	reg[05h], b7h		; Port_1_DriveMode_1 register (PRT1DM1)
028B: 70 EF    AND   F,0xEF             
                                        (0167) 	M8C_SetBank0
028D: 62 07 B7 MOV   REG[0x7],0xB7      (0168) 	mov	reg[07h], b7h		; Port_1_DriveMode_2 register (PRT1DM2)
0290: 62 06 00 MOV   REG[0x6],0x0       (0169) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0293: 71 10    OR    F,0x10             
                                        (0170) 	M8C_SetBank1
0295: 62 06 00 MOV   REG[0x6],0x0       (0171) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0298: 62 07 00 MOV   REG[0x7],0x0       (0172) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
029B: 70 EF    AND   F,0xEF             
                                        (0173) 	M8C_SetBank0
029D: 62 05 00 MOV   REG[0x5],0x0       (0174) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
02A0: 62 08 00 MOV   REG[0x8],0x0       (0175) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
02A3: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
02A5: 62 08 A3 MOV   REG[0x8],0xA3      (0177) 	mov	reg[08h], a3h		; Port_2_DriveMode_0 register (PRT2DM0)
02A8: 62 09 5C MOV   REG[0x9],0x5C      (0178) 	mov	reg[09h], 5ch		; Port_2_DriveMode_1 register (PRT2DM1)
02AB: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
02AD: 62 0B 5C MOV   REG[0xB],0x5C      (0180) 	mov	reg[0bh], 5ch		; Port_2_DriveMode_2 register (PRT2DM2)
02B0: 62 0A 00 MOV   REG[0xA],0x0       (0181) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
02B3: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
02B5: 62 0A 00 MOV   REG[0xA],0x0       (0183) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
02B8: 62 0B 00 MOV   REG[0xB],0x0       (0184) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
02BB: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
02BD: 62 09 00 MOV   REG[0x9],0x0       (0186) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
02C0: 62 0C 00 MOV   REG[0xC],0x0       (0187) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
02C3: 71 10    OR    F,0x10             
                                        (0188) 	M8C_SetBank1
02C5: 62 0C 00 MOV   REG[0xC],0x0       (0189) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
02C8: 62 0D 00 MOV   REG[0xD],0x0       (0190) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
02CB: 70 EF    AND   F,0xEF             
                                        (0191) 	M8C_SetBank0
02CD: 62 0F 00 MOV   REG[0xF],0x0       (0192) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02D0: 62 0E 00 MOV   REG[0xE],0x0       (0193) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02D3: 71 10    OR    F,0x10             
                                        (0194) 	M8C_SetBank1
02D5: 62 0E 00 MOV   REG[0xE],0x0       (0195) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02D8: 62 0F 00 MOV   REG[0xF],0x0       (0196) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02DB: 70 EF    AND   F,0xEF             
                                        (0197) 	M8C_SetBank0
02DD: 62 0D 00 MOV   REG[0xD],0x0       (0198) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02E0: 62 10 00 MOV   REG[0x10],0x0      (0199) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02E3: 71 10    OR    F,0x10             
                                        (0200) 	M8C_SetBank1
02E5: 62 10 00 MOV   REG[0x10],0x0      (0201) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02E8: 62 11 00 MOV   REG[0x11],0x0      (0202) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02EB: 70 EF    AND   F,0xEF             
                                        (0203) 	M8C_SetBank0
02ED: 62 13 00 MOV   REG[0x13],0x0      (0204) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02F0: 62 12 00 MOV   REG[0x12],0x0      (0205) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02F3: 71 10    OR    F,0x10             
                                        (0206) 	M8C_SetBank1
02F5: 62 12 00 MOV   REG[0x12],0x0      (0207) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02F8: 62 13 00 MOV   REG[0x13],0x0      (0208) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02FB: 70 EF    AND   F,0xEF             
                                        (0209) 	M8C_SetBank0
02FD: 62 11 00 MOV   REG[0x11],0x0      (0210) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0300: 62 14 00 MOV   REG[0x14],0x0      (0211) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0303: 71 10    OR    F,0x10             
                                        (0212) 	M8C_SetBank1
0305: 62 14 00 MOV   REG[0x14],0x0      (0213) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0308: 62 15 00 MOV   REG[0x15],0x0      (0214) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
030B: 70 EF    AND   F,0xEF             
                                        (0215) 	M8C_SetBank0
030D: 62 17 00 MOV   REG[0x17],0x0      (0216) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0310: 62 16 00 MOV   REG[0x16],0x0      (0217) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0313: 71 10    OR    F,0x10             
                                        (0218) 	M8C_SetBank1
0315: 62 16 00 MOV   REG[0x16],0x0      (0219) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0318: 62 17 00 MOV   REG[0x17],0x0      (0220) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
031B: 70 EF    AND   F,0xEF             
                                        (0221) 	M8C_SetBank0
031D: 62 15 00 MOV   REG[0x15],0x0      (0222) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0320: 62 18 00 MOV   REG[0x18],0x0      (0223) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
0323: 71 10    OR    F,0x10             
                                        (0224) 	M8C_SetBank1
0325: 62 18 00 MOV   REG[0x18],0x0      (0225) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0328: 62 19 00 MOV   REG[0x19],0x0      (0226) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
032B: 70 EF    AND   F,0xEF             
                                        (0227) 	M8C_SetBank0
032D: 62 1B 00 MOV   REG[0x1B],0x0      (0228) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0330: 62 1A 00 MOV   REG[0x1A],0x0      (0229) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0333: 71 10    OR    F,0x10             
                                        (0230) 	M8C_SetBank1
0335: 62 1A 00 MOV   REG[0x1A],0x0      (0231) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0338: 62 1B 00 MOV   REG[0x1B],0x0      (0232) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
033B: 70 EF    AND   F,0xEF             
                                        (0233) 	M8C_SetBank0
033D: 62 19 00 MOV   REG[0x19],0x0      (0234) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0340: 62 1C 00 MOV   REG[0x1C],0x0      (0235) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0343: 71 10    OR    F,0x10             
                                        (0236) 	M8C_SetBank1
0345: 62 1C 00 MOV   REG[0x1C],0x0      (0237) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0348: 62 1D 00 MOV   REG[0x1D],0x0      (0238) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
034B: 70 EF    AND   F,0xEF             
                                        (0239) 	M8C_SetBank0
034D: 62 1F 00 MOV   REG[0x1F],0x0      (0240) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0350: 62 1E 00 MOV   REG[0x1E],0x0      (0241) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0353: 71 10    OR    F,0x10             
                                        (0242) 	M8C_SetBank1
0355: 62 1E 00 MOV   REG[0x1E],0x0      (0243) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0358: 62 1F 00 MOV   REG[0x1F],0x0      (0244) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
035B: 70 EF    AND   F,0xEF             
                                        (0245) 	M8C_SetBank0
035D: 62 1D 00 MOV   REG[0x1D],0x0      (0246) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0360: 70 EF    AND   F,0xEF             
                                        (0247) 	M8C_SetBank0
0362: 7F       RET                      (0248) 	ret
                                        (0249) 
                                        (0250) 
                                        (0251) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_dc_motor_module2
                                        (0026) export _LoadConfig_dc_motor_module2
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
0363: 7C 03 6A LCALL 0x036A             (0058) 	lcall	LoadConfig_dc_motor_module2
0366: 7C 02 5E LCALL 0x025E             (0059) 	lcall	LoadConfigTBL_dc_motor_module2_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
0369: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration dc_motor_module2
                                        (0067) ;
                                        (0068) ;    Load configuration registers for dc_motor_module2.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_dc_motor_module2:
                                        (0085)  LoadConfig_dc_motor_module2:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
036A: 10       PUSH  X                  (0088) 	push	x
036B: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
036D: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
036F: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
0370: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_dc_motor_module2_Bank0
0372: 57 A0    MOV   X,0xA0             (0094)     mov     X, <LoadConfigTBL_dc_motor_module2_Bank0
0374: 7C 03 85 LCALL 0x0385             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
0377: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
0379: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
037A: 50 02    MOV   A,0x2              (0100)     mov     A, >LoadConfigTBL_dc_motor_module2_Bank1
037C: 57 13    MOV   X,0x13             (0101)     mov     X, <LoadConfigTBL_dc_motor_module2_Bank1
037E: 7C 03 85 LCALL 0x0385             (0102)     lcall   LoadConfig              ; Load the bank 1 values
0381: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
0383: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
0384: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
0385: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
0387: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
0388: 08       PUSH  A                  (0132)     push    A
0389: 4F       MOV   X,SP               (0133)     mov     X, SP
038A: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
038D: D0 04    JNC   0x0392             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
038F: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
0392: 18       POP   A                  (0138)     pop     A
0393: 20       POP   X                  (0139)     pop     X
0394: 70 EF    AND   F,0xEF             
0396: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0399: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
039A: 08       PUSH  A                  (0145)     push    A
039B: 28       ROMX                     (0146)     romx                            ; Load register address from table
039C: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
039E: A0 1F    JZ    0x03BE             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
03A0: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
03A1: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
03A4: A0 03    JZ    0x03A8             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03A6: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
03A8: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
03AA: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
03AB: 20       POP   X                  (0156)     pop     X
03AC: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
03AD: 09 00    ADC   A,0x0              (0158)     adc     A, 0
03AF: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
03B0: 08       PUSH  A                  (0160)     push    A
03B1: 28       ROMX                     (0161)     romx                            ; load config data from the table
03B2: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
03B3: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
03B5: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
03B7: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
03B8: 20       POP   X                  (0166)     pop     X
03B9: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
03BA: 09 00    ADC   A,0x0              (0168)     adc     A, 0
03BC: 8F D7    JMP   0x0394             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
03BE: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
03C0: 70 3F    AND   F,0x3F             
03C2: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
03C4: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\pwm8_6int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_6INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_6.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_6_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_6_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_6_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
03C5: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_6INT.asm
FILE: lib\pwm8_6.asm                    (0001) ;;*****************************************************************************
03C6: 43 37 01 OR    REG[0x37],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_6.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_6.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_6_EnableInt
                                        (0030) export _PWM8_6_EnableInt
                                        (0031) export  PWM8_6_DisableInt
                                        (0032) export _PWM8_6_DisableInt
                                        (0033) export  PWM8_6_Start
                                        (0034) export _PWM8_6_Start
                                        (0035) export  PWM8_6_Stop
                                        (0036) export _PWM8_6_Stop
                                        (0037) export  PWM8_6_WritePeriod
                                        (0038) export _PWM8_6_WritePeriod
                                        (0039) export  PWM8_6_WritePulseWidth
                                        (0040) export _PWM8_6_WritePulseWidth
                                        (0041) export  PWM8_6_bReadPulseWidth
                                        (0042) export _PWM8_6_bReadPulseWidth
                                        (0043) export  PWM8_6_bReadCounter
                                        (0044) export _PWM8_6_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_6_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_6_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_6_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_6_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA dc_motor_module2_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_6_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_6_EnableInt:
                                        (0091) _PWM8_6_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_6_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0095)    ret
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_6_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_6_DisableInt:
                                        (0119) _PWM8_6_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_6_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0123)    ret
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_6_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_6_Start:
                                        (0148) _PWM8_6_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_6_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
03C9: 7F       RET                      (0152)    ret
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_6_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_6_Stop:
                                        (0176) _PWM8_6_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_6_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_6_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_6_WritePeriod:
                                        (0206) _PWM8_6_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0208)    mov   reg[PWM8_6_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_6_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_6_WritePulseWidth:
                                        (0233) _PWM8_6_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
03CA: 60 36    MOV   REG[0x36],A        (0235)    mov   reg[PWM8_6_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
03CC: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_6_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_6_bReadPulseWidth:
                                        (0260) _PWM8_6_bReadPulseWidth:
                                        (0261)  bPWM8_6_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_6_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0264)    mov   A, reg[PWM8_6_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_6_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_6_bReadCounter:
                                        (0293) _PWM8_6_bReadCounter:
                                        (0294)  bPWM8_6_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_6_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0303)    mov   X, SP                                   ; X <- stack frame pointer
                                        (0304)    mov   A, reg[PWM8_6_COMPARE_REG]              ; Save the Compare register on the stack
                                        (0305)    push  A                                       ;
                                        (0306)    PWM8_6_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
                                        (0308)    mov   A, reg[PWM8_6_INPUT_REG]                ; save the clock input setting
                                        (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
                                        (0311)    mov   reg[PWM8_6_INPUT_REG], INPUT_REG_NULL
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
                                        (0314)    mov   A, reg[PWM8_6_COUNTER_REG]              ; DR2 <- DR0
                                        (0315)    mov   A, reg[PWM8_6_COMPARE_REG]              ; Stash the Count on the stack
                                        (0316)    push  A                                       ;  -stack frame is now 3 bytes
                                        (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
                                        (0318)    mov   reg[PWM8_6_COMPARE_REG], A
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
                                        (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
                                        (0321)    mov   reg[PWM8_6_INPUT_REG], A                ;
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_6_Start_M                                ;   then re-enable the PWM.
                                        (0324)    pop   A                                       ; Setup the return value
                                        (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_6.asm
FILE: lib\pwm8_5int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_5INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_5.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_5_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_5_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_5_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
03CD: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_5INT.asm
FILE: lib\pwm8_5.asm                    (0001) ;;*****************************************************************************
03CE: 43 33 01 OR    REG[0x33],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_5.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_5.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_5_EnableInt
                                        (0030) export _PWM8_5_EnableInt
                                        (0031) export  PWM8_5_DisableInt
                                        (0032) export _PWM8_5_DisableInt
                                        (0033) export  PWM8_5_Start
                                        (0034) export _PWM8_5_Start
                                        (0035) export  PWM8_5_Stop
                                        (0036) export _PWM8_5_Stop
                                        (0037) export  PWM8_5_WritePeriod
                                        (0038) export _PWM8_5_WritePeriod
                                        (0039) export  PWM8_5_WritePulseWidth
                                        (0040) export _PWM8_5_WritePulseWidth
                                        (0041) export  PWM8_5_bReadPulseWidth
                                        (0042) export _PWM8_5_bReadPulseWidth
                                        (0043) export  PWM8_5_bReadCounter
                                        (0044) export _PWM8_5_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_5_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_5_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_5_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_5_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA dc_motor_module2_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_5_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_5_EnableInt:
                                        (0091) _PWM8_5_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_5_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0095)    ret
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_5_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_5_DisableInt:
                                        (0119) _PWM8_5_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_5_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0123)    ret
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_5_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_5_Start:
                                        (0148) _PWM8_5_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_5_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
03D1: 7F       RET                      (0152)    ret
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_5_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_5_Stop:
                                        (0176) _PWM8_5_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_5_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_5_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_5_WritePeriod:
                                        (0206) _PWM8_5_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0208)    mov   reg[PWM8_5_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_5_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_5_WritePulseWidth:
                                        (0233) _PWM8_5_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
03D2: 60 32    MOV   REG[0x32],A        (0235)    mov   reg[PWM8_5_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
03D4: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_5_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_5_bReadPulseWidth:
                                        (0260) _PWM8_5_bReadPulseWidth:
                                        (0261)  bPWM8_5_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_5_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0264)    mov   A, reg[PWM8_5_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_5_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_5_bReadCounter:
                                        (0293) _PWM8_5_bReadCounter:
                                        (0294)  bPWM8_5_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_5_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0303)    mov   X, SP                                   ; X <- stack frame pointer
                                        (0304)    mov   A, reg[PWM8_5_COMPARE_REG]              ; Save the Compare register on the stack
                                        (0305)    push  A                                       ;
                                        (0306)    PWM8_5_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
                                        (0308)    mov   A, reg[PWM8_5_INPUT_REG]                ; save the clock input setting
                                        (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
                                        (0311)    mov   reg[PWM8_5_INPUT_REG], INPUT_REG_NULL
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
                                        (0314)    mov   A, reg[PWM8_5_COUNTER_REG]              ; DR2 <- DR0
                                        (0315)    mov   A, reg[PWM8_5_COMPARE_REG]              ; Stash the Count on the stack
                                        (0316)    push  A                                       ;  -stack frame is now 3 bytes
                                        (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
                                        (0318)    mov   reg[PWM8_5_COMPARE_REG], A
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
                                        (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
                                        (0321)    mov   reg[PWM8_5_INPUT_REG], A                ;
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_5_Start_M                                ;   then re-enable the PWM.
                                        (0324)    pop   A                                       ; Setup the return value
                                        (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_5.asm
FILE: lib\pwm8_4int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_4INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_4.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_4_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_4_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_4_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
03D5: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_4INT.asm
FILE: lib\pwm8_4.asm                    (0001) ;;*****************************************************************************
03D6: 43 2F 01 OR    REG[0x2F],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_4.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_4.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_4_EnableInt
                                        (0030) export _PWM8_4_EnableInt
                                        (0031) export  PWM8_4_DisableInt
                                        (0032) export _PWM8_4_DisableInt
                                        (0033) export  PWM8_4_Start
                                        (0034) export _PWM8_4_Start
                                        (0035) export  PWM8_4_Stop
                                        (0036) export _PWM8_4_Stop
                                        (0037) export  PWM8_4_WritePeriod
                                        (0038) export _PWM8_4_WritePeriod
                                        (0039) export  PWM8_4_WritePulseWidth
                                        (0040) export _PWM8_4_WritePulseWidth
                                        (0041) export  PWM8_4_bReadPulseWidth
                                        (0042) export _PWM8_4_bReadPulseWidth
                                        (0043) export  PWM8_4_bReadCounter
                                        (0044) export _PWM8_4_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_4_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_4_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_4_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_4_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA dc_motor_module2_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_4_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_4_EnableInt:
                                        (0091) _PWM8_4_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_4_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0095)    ret
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_4_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_4_DisableInt:
                                        (0119) _PWM8_4_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_4_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0123)    ret
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_4_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_4_Start:
                                        (0148) _PWM8_4_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_4_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
03D9: 7F       RET                      (0152)    ret
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_4_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_4_Stop:
                                        (0176) _PWM8_4_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_4_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_4_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_4_WritePeriod:
                                        (0206) _PWM8_4_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0208)    mov   reg[PWM8_4_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_4_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_4_WritePulseWidth:
                                        (0233) _PWM8_4_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
03DA: 60 2E    MOV   REG[0x2E],A        (0235)    mov   reg[PWM8_4_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
03DC: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_4_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_4_bReadPulseWidth:
                                        (0260) _PWM8_4_bReadPulseWidth:
                                        (0261)  bPWM8_4_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_4_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0264)    mov   A, reg[PWM8_4_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_4_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_4_bReadCounter:
                                        (0293) _PWM8_4_bReadCounter:
                                        (0294)  bPWM8_4_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_4_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0303)    mov   X, SP                                   ; X <- stack frame pointer
                                        (0304)    mov   A, reg[PWM8_4_COMPARE_REG]              ; Save the Compare register on the stack
                                        (0305)    push  A                                       ;
                                        (0306)    PWM8_4_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
                                        (0308)    mov   A, reg[PWM8_4_INPUT_REG]                ; save the clock input setting
                                        (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
                                        (0311)    mov   reg[PWM8_4_INPUT_REG], INPUT_REG_NULL
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
                                        (0314)    mov   A, reg[PWM8_4_COUNTER_REG]              ; DR2 <- DR0
                                        (0315)    mov   A, reg[PWM8_4_COMPARE_REG]              ; Stash the Count on the stack
                                        (0316)    push  A                                       ;  -stack frame is now 3 bytes
                                        (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
                                        (0318)    mov   reg[PWM8_4_COMPARE_REG], A
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
                                        (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
                                        (0321)    mov   reg[PWM8_4_INPUT_REG], A                ;
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_4_Start_M                                ;   then re-enable the PWM.
                                        (0324)    pop   A                                       ; Setup the return value
                                        (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_4.asm
FILE: lib\pwm8_3int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_3INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_3.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_3_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_3_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_3_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
03DD: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_3INT.asm
FILE: lib\pwm8_3.asm                    (0001) ;;*****************************************************************************
03DE: 43 2B 01 OR    REG[0x2B],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_3.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_3.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_3_EnableInt
                                        (0030) export _PWM8_3_EnableInt
                                        (0031) export  PWM8_3_DisableInt
                                        (0032) export _PWM8_3_DisableInt
                                        (0033) export  PWM8_3_Start
                                        (0034) export _PWM8_3_Start
                                        (0035) export  PWM8_3_Stop
                                        (0036) export _PWM8_3_Stop
                                        (0037) export  PWM8_3_WritePeriod
                                        (0038) export _PWM8_3_WritePeriod
                                        (0039) export  PWM8_3_WritePulseWidth
                                        (0040) export _PWM8_3_WritePulseWidth
                                        (0041) export  PWM8_3_bReadPulseWidth
                                        (0042) export _PWM8_3_bReadPulseWidth
                                        (0043) export  PWM8_3_bReadCounter
                                        (0044) export _PWM8_3_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_3_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_3_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_3_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_3_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA dc_motor_module2_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_3_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_3_EnableInt:
                                        (0091) _PWM8_3_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_3_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0095)    ret
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_3_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_3_DisableInt:
                                        (0119) _PWM8_3_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_3_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0123)    ret
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_3_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_3_Start:
                                        (0148) _PWM8_3_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_3_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
03E1: 7F       RET                      (0152)    ret
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_3_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_3_Stop:
                                        (0176) _PWM8_3_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_3_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_3_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_3_WritePeriod:
                                        (0206) _PWM8_3_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0208)    mov   reg[PWM8_3_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_3_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_3_WritePulseWidth:
                                        (0233) _PWM8_3_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
03E2: 60 2A    MOV   REG[0x2A],A        (0235)    mov   reg[PWM8_3_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
03E4: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_3_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_3_bReadPulseWidth:
                                        (0260) _PWM8_3_bReadPulseWidth:
                                        (0261)  bPWM8_3_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_3_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0264)    mov   A, reg[PWM8_3_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_3_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_3_bReadCounter:
                                        (0293) _PWM8_3_bReadCounter:
                                        (0294)  bPWM8_3_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_3_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0303)    mov   X, SP                                   ; X <- stack frame pointer
                                        (0304)    mov   A, reg[PWM8_3_COMPARE_REG]              ; Save the Compare register on the stack
                                        (0305)    push  A                                       ;
                                        (0306)    PWM8_3_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
                                        (0308)    mov   A, reg[PWM8_3_INPUT_REG]                ; save the clock input setting
                                        (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
                                        (0311)    mov   reg[PWM8_3_INPUT_REG], INPUT_REG_NULL
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
                                        (0314)    mov   A, reg[PWM8_3_COUNTER_REG]              ; DR2 <- DR0
                                        (0315)    mov   A, reg[PWM8_3_COMPARE_REG]              ; Stash the Count on the stack
                                        (0316)    push  A                                       ;  -stack frame is now 3 bytes
                                        (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
                                        (0318)    mov   reg[PWM8_3_COMPARE_REG], A
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
                                        (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
                                        (0321)    mov   reg[PWM8_3_INPUT_REG], A                ;
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_3_Start_M                                ;   then re-enable the PWM.
                                        (0324)    pop   A                                       ; Setup the return value
                                        (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_3.asm
FILE: lib\pwm8_2int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_2INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_2.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_2_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_2_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_2_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
03E5: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_2INT.asm
FILE: lib\pwm8_2.asm                    (0001) ;;*****************************************************************************
03E6: 43 27 01 OR    REG[0x27],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_2.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_2.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_2_EnableInt
                                        (0030) export _PWM8_2_EnableInt
                                        (0031) export  PWM8_2_DisableInt
                                        (0032) export _PWM8_2_DisableInt
                                        (0033) export  PWM8_2_Start
                                        (0034) export _PWM8_2_Start
                                        (0035) export  PWM8_2_Stop
                                        (0036) export _PWM8_2_Stop
                                        (0037) export  PWM8_2_WritePeriod
                                        (0038) export _PWM8_2_WritePeriod
                                        (0039) export  PWM8_2_WritePulseWidth
                                        (0040) export _PWM8_2_WritePulseWidth
                                        (0041) export  PWM8_2_bReadPulseWidth
                                        (0042) export _PWM8_2_bReadPulseWidth
                                        (0043) export  PWM8_2_bReadCounter
                                        (0044) export _PWM8_2_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_2_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_2_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_2_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_2_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA dc_motor_module2_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_2_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_2_EnableInt:
                                        (0091) _PWM8_2_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_2_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0095)    ret
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_2_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_2_DisableInt:
                                        (0119) _PWM8_2_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_2_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0123)    ret
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_2_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_2_Start:
                                        (0148) _PWM8_2_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_2_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
03E9: 7F       RET                      (0152)    ret
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_2_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_2_Stop:
                                        (0176) _PWM8_2_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_2_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_2_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_2_WritePeriod:
                                        (0206) _PWM8_2_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0208)    mov   reg[PWM8_2_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_2_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_2_WritePulseWidth:
                                        (0233) _PWM8_2_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
03EA: 60 26    MOV   REG[0x26],A        (0235)    mov   reg[PWM8_2_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
03EC: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_2_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_2_bReadPulseWidth:
                                        (0260) _PWM8_2_bReadPulseWidth:
                                        (0261)  bPWM8_2_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_2_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0264)    mov   A, reg[PWM8_2_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_2_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_2_bReadCounter:
                                        (0293) _PWM8_2_bReadCounter:
                                        (0294)  bPWM8_2_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_2_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0303)    mov   X, SP                                   ; X <- stack frame pointer
                                        (0304)    mov   A, reg[PWM8_2_COMPARE_REG]              ; Save the Compare register on the stack
                                        (0305)    push  A                                       ;
                                        (0306)    PWM8_2_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
                                        (0308)    mov   A, reg[PWM8_2_INPUT_REG]                ; save the clock input setting
                                        (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
                                        (0311)    mov   reg[PWM8_2_INPUT_REG], INPUT_REG_NULL
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
                                        (0314)    mov   A, reg[PWM8_2_COUNTER_REG]              ; DR2 <- DR0
                                        (0315)    mov   A, reg[PWM8_2_COMPARE_REG]              ; Stash the Count on the stack
                                        (0316)    push  A                                       ;  -stack frame is now 3 bytes
                                        (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
                                        (0318)    mov   reg[PWM8_2_COMPARE_REG], A
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
                                        (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
                                        (0321)    mov   reg[PWM8_2_INPUT_REG], A                ;
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_2_Start_M                                ;   then re-enable the PWM.
                                        (0324)    pop   A                                       ; Setup the return value
                                        (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_2.asm
FILE: lib\pwm8_1int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_1INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_1.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
03ED: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_1INT.asm
FILE: lib\pwm8_1.asm                    (0001) ;;*****************************************************************************
03EE: 43 23 01 OR    REG[0x23],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_1.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_1_EnableInt
                                        (0030) export _PWM8_1_EnableInt
                                        (0031) export  PWM8_1_DisableInt
                                        (0032) export _PWM8_1_DisableInt
                                        (0033) export  PWM8_1_Start
                                        (0034) export _PWM8_1_Start
                                        (0035) export  PWM8_1_Stop
                                        (0036) export _PWM8_1_Stop
                                        (0037) export  PWM8_1_WritePeriod
                                        (0038) export _PWM8_1_WritePeriod
                                        (0039) export  PWM8_1_WritePulseWidth
                                        (0040) export _PWM8_1_WritePulseWidth
                                        (0041) export  PWM8_1_bReadPulseWidth
                                        (0042) export _PWM8_1_bReadPulseWidth
                                        (0043) export  PWM8_1_bReadCounter
                                        (0044) export _PWM8_1_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_1_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_1_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_1_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA dc_motor_module2_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_1_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_1_EnableInt:
                                        (0091) _PWM8_1_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_1_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0095)    ret
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_1_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_1_DisableInt:
                                        (0119) _PWM8_1_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_1_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0123)    ret
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_1_Start:
                                        (0148) _PWM8_1_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_1_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
03F1: 7F       RET                      (0152)    ret
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_1_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_1_Stop:
                                        (0176) _PWM8_1_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_1_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_1_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_1_WritePeriod:
                                        (0206) _PWM8_1_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0208)    mov   reg[PWM8_1_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_1_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_1_WritePulseWidth:
                                        (0233) _PWM8_1_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
03F2: 60 22    MOV   REG[0x22],A        (0235)    mov   reg[PWM8_1_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
03F4: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_1_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_1_bReadPulseWidth:
                                        (0260) _PWM8_1_bReadPulseWidth:
                                        (0261)  bPWM8_1_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_1_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0264)    mov   A, reg[PWM8_1_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_1_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_1_bReadCounter:
                                        (0293) _PWM8_1_bReadCounter:
                                        (0294)  bPWM8_1_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_1_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0303)    mov   X, SP                                   ; X <- stack frame pointer
                                        (0304)    mov   A, reg[PWM8_1_COMPARE_REG]              ; Save the Compare register on the stack
                                        (0305)    push  A                                       ;
                                        (0306)    PWM8_1_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
                                        (0308)    mov   A, reg[PWM8_1_INPUT_REG]                ; save the clock input setting
                                        (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
                                        (0311)    mov   reg[PWM8_1_INPUT_REG], INPUT_REG_NULL
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
                                        (0314)    mov   A, reg[PWM8_1_COUNTER_REG]              ; DR2 <- DR0
                                        (0315)    mov   A, reg[PWM8_1_COMPARE_REG]              ; Stash the Count on the stack
                                        (0316)    push  A                                       ;  -stack frame is now 3 bytes
                                        (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
                                        (0318)    mov   reg[PWM8_1_COMPARE_REG], A
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
                                        (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
                                        (0321)    mov   reg[PWM8_1_INPUT_REG], A                ;
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_1_Start_M                                ;   then re-enable the PWM.
                                        (0324)    pop   A                                       ; Setup the return value
                                        (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_1.asm
FILE: lib\ezi2cs_1int.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: EzI2Cs_1INT.asm
                                        (0004) ;;  Version: 2.00, Updated on 2013/5/19 at 10:43:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2CFXM (Slave) Interrupt Service Routine
                                        (0008) ;;  
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) include "EzI2Cs_1.inc"
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) 
                                        (0019) 
                                        (0020) ;-----------------------------------------------
                                        (0021) ;  Global Symbols
                                        (0022) ;-----------------------------------------------
                                        (0023) 
                                        (0024) export    EzI2Cs_1_varPage      
                                        (0025) export   _EzI2Cs_1_varPage      
                                        (0026) 
                                        (0027) export    EzI2Cs_1_bState  
                                        (0028) export   _EzI2Cs_1_bState
                                        (0029) 
                                        (0030) export    EzI2Cs_1_bRAM_RWoffset
                                        (0031) export   _EzI2Cs_1_bRAM_RWoffset
                                        (0032) 
                                        (0033) export    EzI2Cs_1_bRAM_RWcntr
                                        (0034) export   _EzI2Cs_1_bRAM_RWcntr
                                        (0035) 
                                        (0036) export   _EzI2Cs_1_pRAM_Buf_Addr_LSB
                                        (0037) export    EzI2Cs_1_pRAM_Buf_Addr_LSB
                                        (0038) 
                                        (0039) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0040) export   _EzI2Cs_1_pRAM_Buf_Addr_MSB
                                        (0041) export    EzI2Cs_1_pRAM_Buf_Addr_MSB
                                        (0042) ENDIF
                                        (0043) 
                                        (0044) export   _EzI2Cs_1_bRAM_Buf_Size                                
                                        (0045) export    EzI2Cs_1_bRAM_Buf_Size    
                                        (0046) 
                                        (0047) export   _EzI2Cs_1_bRAM_Buf_WSize               
                                        (0048) export    EzI2Cs_1_bRAM_Buf_WSize  
                                        (0049) 
                                        (0050) IF (EzI2Cs_1_ROM_ENABLE)
                                        (0051) export    EzI2Cs_1_bROM_RWoffset
                                        (0052) export   _EzI2Cs_1_bROM_RWoffset
                                        (0053) 
                                        (0054) export    EzI2Cs_1_bROM_RWcntr   
                                        (0055) export   _EzI2Cs_1_bROM_RWcntr   
                                        (0056) 
                                        (0057) export   _EzI2Cs_1_pROM_Buf_Addr_LSB
                                        (0058) export    EzI2Cs_1_pROM_Buf_Addr_LSB
                                        (0059) export   _EzI2Cs_1_pROM_Buf_Addr_MSB
                                        (0060) export    EzI2Cs_1_pROM_Buf_Addr_MSB
                                        (0061) 
                                        (0062) export   _EzI2Cs_1_bROM_Buf_Size                           
                                        (0063) export    EzI2Cs_1_bROM_Buf_Size
                                        (0064) 
                                        (0065) ENDIF
                                        (0066) 
                                        (0067) export    EzI2Cs_1_bBusy_Flag  
                                        (0068) export   _EzI2Cs_1_bBusy_Flag
                                        (0069) 
                                        (0070) AREA InterruptRAM (RAM, REL, CON)
                                        (0071) 
                                        (0072) ;-----------------------------------------------
                                        (0073) ; Variable Allocation
                                        (0074) ;-----------------------------------------------
                                        (0075) 
                                        (0076) 
                                        (0077) ;; Exported variables
                                        (0078)  _EzI2Cs_1_varPage:                                ; This points to the variable page
                                        (0079)   EzI2Cs_1_varPage:          
                                        (0080) 
                                        (0081)  _EzI2Cs_1_bState:
                                        (0082)   EzI2Cs_1_bState:                           blk 1
                                        (0083) 
                                        (0084) ;; RAM space variables
                                        (0085)  _EzI2Cs_1_bRAM_RWoffset:                          ; RAM address counter.  This is reset each time
                                        (0086)   EzI2Cs_1_bRAM_RWoffset:                    blk 1 ; a read or write is initiated.
                                        (0087) 
                                        (0088)  _EzI2Cs_1_bRAM_RWcntr:                            ; RAM Read/Write counter.  Keeps track of offset 
                                        (0089)   EzI2Cs_1_bRAM_RWcntr:                      blk 1 ; during a read or write operation.  Reset to
                                        (0090)                                                       ; _bRAM_RWoffset at start of R/W command.
                                        (0091) 
                                        (0092) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0093)  _EzI2Cs_1_pRAM_Buf_Addr_MSB:                      ; Base address (MSB) to RAM buffer.  
                                        (0094)   EzI2Cs_1_pRAM_Buf_Addr_MSB:                blk 1 ; 
                                        (0095) ENDIF
                                        (0096) 
                                        (0097)  _EzI2Cs_1_pRAM_Buf_Addr_LSB:                      ; Base address (LSB) to RAM buffer.  
                                        (0098)   EzI2Cs_1_pRAM_Buf_Addr_LSB:                blk 1 ; 
                                        (0099) 
                                        (0100)  _EzI2Cs_1_bRAM_Buf_Size:                          ; Size of RAM buffer.   
                                        (0101)   EzI2Cs_1_bRAM_Buf_Size:                    blk 1 ; 
                                        (0102) 
                                        (0103)  _EzI2Cs_1_bRAM_Buf_WSize:                         ; Portion of the RAM buffer size that is writable.
                                        (0104)   EzI2Cs_1_bRAM_Buf_WSize:                   blk 1 ; 
                                        (0105) 
                                        (0106) ;; ROM space variables
                                        (0107) IF (EzI2Cs_1_ROM_ENABLE)
                                        (0108)  _EzI2Cs_1_bROM_RWoffset:                          ; ROM address counter.  This is reset each time
                                        (0109)   EzI2Cs_1_bROM_RWoffset:                    blk 1 ; a read is initiated
                                        (0110) 
                                        (0111)  _EzI2Cs_1_bROM_RWcntr:                            ; ROM read counter. Keeps track of offset 
                                        (0112)   EzI2Cs_1_bROM_RWcntr:                      blk 1 ; during a read operation.  Reset to
                                        (0113)                                                       ; _bRAM_RWoffset at start of command.
                                        (0114) 
                                        (0115)  _EzI2Cs_1_pROM_Buf_Addr_MSB:                      ; ROM address (MSB) counter. (Relative to buffer)  This
                                        (0116)   EzI2Cs_1_pROM_Buf_Addr_MSB:                blk 1 ; counter is reset each time a read is initiated.
                                        (0117) 
                                        (0118)  _EzI2Cs_1_pROM_Buf_Addr_LSB:                      ; ROM address (MSB) counter. (Relative to buffer)  This
                                        (0119)   EzI2Cs_1_pROM_Buf_Addr_LSB:                blk 1 ; counter is reset each time a read is initiated.
                                        (0120) 
                                        (0121)  _EzI2Cs_1_bROM_Buf_Size:                          ; Size of RAM buffer.                            
                                        (0122)   EzI2Cs_1_bROM_Buf_Size:                    blk 1 ; 
                                        (0123) 
                                        (0124) ENDIF
                                        (0125) 
                                        (0126) IF (EzI2Cs_1_AUTO_ADDR_CHECK^1)
                                        (0127) IF (EzI2Cs_1_DYNAMIC_ADDR) 
                                        (0128) 
                                        (0129) export    EzI2Cs_1_bAddr
                                        (0130) export   _EzI2Cs_1_bAddr 
                                        (0131) 
                                        (0132)  _EzI2Cs_1_bAddr:
                                        (0133)   EzI2Cs_1_bAddr:                            blk 1
                                        (0134) ENDIF
                                        (0135) ENDIF
                                        (0136) 
                                        (0137)  _EzI2Cs_1_bBusy_Flag:
                                        (0138)   EzI2Cs_1_bBusy_Flag:                       blk 1
                                        (0139) 
                                        (0140) ;-----------------------------------------------
                                        (0141) ;  EQUATES and TABLES
                                        (0142) ;-----------------------------------------------
                                        (0143) 
                                        (0144) ;; Bit definitions for EzI2Cs_1_bState
                                        (0145) STATE_IDLE:         equ  0x00      ; Wait for Correct Address
                                        (0146) STATE_WR_RAM_ADDR:  equ  0x02      ; Wait for Secondary address on write
                                        (0147) STATE_WR_RAM:       equ  0x04      ; Write RAM Data
                                        (0148) STATE_RD_RAM:       equ  0x06      ; Read RAM Data
                                        (0149) 
                                        (0150) STATE_WR_ROM_ADDR:  equ  0x08      ; Wait for Secondary address on write
                                        (0151) STATE_RD_ROM:       equ  0x0A      ; Read ROM Data
                                        (0152) 
                                        (0153) STATE_WR_ROM:       equ  0x0C      ; Write ROM (Not supported at this time)
                                        (0154) STATE_RESET:        equ  0x0E      ; Reset state machine
                                        (0155) 
                                        (0156) STATE_MASK:         equ  0x0E
                                        (0157) STATE_MASK2:        equ  0x0F      ; State Mask
                                        (0158) 
                                        (0159) ALT_MODE_FLAG:      equ  0x40      ; Reserved
                                        (0160) 
                                        (0161) 
                                        (0162) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0163) ;---------------------------------------------------
                                        (0164) ; Insert your custom declarations below this banner
                                        (0165) ;---------------------------------------------------
                                        (0166) 
                                        (0167) ;------------------------
                                        (0168) ;  Constant Definitions
                                        (0169) ;------------------------
                                        (0170) 
                                        (0171) 
                                        (0172) ;------------------------
                                        (0173) ; Variable Allocation
                                        (0174) ;------------------------
                                        (0175) 
                                        (0176) 
                                        (0177) ;---------------------------------------------------
                                        (0178) ; Insert your custom declarations above this banner
                                        (0179) ;---------------------------------------------------
                                        (0180) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0181) 
                                        (0182) 
                                        (0183) 
                                        (0184) 
                                        (0185) AREA UserModules (ROM, REL, CON)
                                        (0186) 
                                        (0187) export _EzI2Cs_1_ISR
                                        (0188) ;;****************************************************
                                        (0189) ;; I2C_ISR  main entry point from vector 60h
                                        (0190) ;;
                                        (0191) ;;****************************************************
                                        (0192) 
                                        (0193)  EzI2Cs_1_ISR:
                                        (0194) _EzI2Cs_1_ISR:
                                        (0195) 
03F5: 08       PUSH  A                  (0196)     push A
03F6: 10       PUSH  X                  (0197)     push X
03F7: 70 3F    AND   F,0x3F             
03F9: 71 80    OR    F,0x80             
03FB: 5D D3    MOV   A,REG[0xD3]        
03FD: 08       PUSH  A                  
03FE: 5D D0    MOV   A,REG[0xD0]        
0400: 08       PUSH  A                  
0401: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0198)     
                                        (0199)     ;@PSoC_UserCode_ISR_START@ (Do not change this line.)
                                        (0200)     ;---------------------------------------------------
                                        (0201)     ; Insert your custom code below this banner
                                        (0202)     ;---------------------------------------------------
                                        (0203) 
                                        (0204)     ;---------------------------------------------------
                                        (0205)     ; Insert your custom code above this banner
                                        (0206)     ;---------------------------------------------------
                                        (0207)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0208) 
                                        (0209) ;; The folling conditional code is only valid when using the
                                        (0210) ;; large memory model.
                                        (0211) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0212)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_2              ; Set Page Mode
                                        (0213)    REG_PRESERVE IDX_PP                             ; Save Index Page Pointer
                                        (0214)    REG_PRESERVE CUR_PP                             ; Save Current Page Pointer
                                        (0215)    RAM_SETPAGE_CUR  >EzI2Cs_1_varPage      ; Set the current page mode Pointer
0404: 51 03    MOV   A,[0x3]            (0216)    mov   A, [EzI2Cs_1_pRAM_Buf_Addr_MSB]   ; Set Index page mode pointer
0406: 60 D3    MOV   REG[0xD3],A        
                                        (0217)    RAM_SETPAGE_IDX A
                                        (0218) ENDIF
                                        (0219) 
0408: 2E 00 80 OR    [0x0],0x80         (0220)     or   [EzI2Cs_1_bState],EzI2Cs_1_ANY_ACTIVITY                     ; Set Activity flag
040B: 49 D7 08 TST   REG[0xD7],0x8      (0221)     tst  reg[EzI2Cs_1_SCR_REG],EzI2Cs_1_SCR_ADDRESS                  ; Check for address
040E: A0 09    JZ    0x0418             (0222)     jz   .I2C_CHECK_STOP                                             ; Go to check for Stop condition if no Address
0410: 26 00 F0 AND   [0x0],0xF0         (0223)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bits.                       
0413: 2E 00 00 OR    [0x0],0x0          (0224)     or   [EzI2Cs_1_bState],STATE_IDLE                                ; Address flag set, change to IDLE state
0416: 80 08    JMP   0x041F             (0225)     jmp  .I2C_DO_STATE_MACHINE
                                        (0226) .I2C_CHECK_STOP:
                                        (0227)     ; Check for Stop condition here.  If a stop condition
                                        (0228)     ; exists, reset state machine to idle.
0418: 49 D7 20 TST   REG[0xD7],0x20     (0229)     tst reg[EzI2Cs_1_SCR_REG],EzI2Cs_1_SCR_STOP_STATUS               ; Check for Stop condition
041B: A0 03    JZ    0x041F             (0230)     jz .I2C_DO_STATE_MACHINE                                            ; No Stop condition - do I2C state mashine
                                        (0231)     ; Following line was commented due to CDT#60202.
                                        (0232)     ; The stop bit is cleared by SetEzI2Cs_1_SCR macro, so the functionality related to EzI2Cs_1_bBusy_Flag is preserved.
                                        (0233)     ; and reg[EzI2Cs_1_SCR_REG],~EzI2Cs_1_SCR_STOP_STATUS            ; Clear Stop bit
041D: 80 A8    JMP   0x04C6             (0234)     jmp  I2C_STATE_RESET
                                        (0235) .I2C_DO_STATE_MACHINE:
041F: 51 00    MOV   A,[0x0]            (0236)     mov  A,[EzI2Cs_1_bState]    ; Get State
0421: 21 0E    AND   A,0xE              (0237)     and  A,STATE_MASK                   ; Mask off invalid states
0423: E0 01    JACC  0x0425             (0238)     jacc I2C_STATE_JUMP_TABLE
                                        (0239) 
                                        (0240) I2C_STATE_JUMP_TABLE:
0425: 80 11    JMP   0x0437             (0241)     jmp  I2C_STATE_IDLE                 ; Idle state
0427: 80 67    JMP   0x048F             (0242)     jmp  I2C_STATE_WR_RAM_ADDR              ; Wait for Address write state
0429: 80 79    JMP   0x04A3             (0243)     jmp  I2C_STATE_WR_RAM               ; 
042B: 80 47    JMP   0x0473             (0244)     jmp  I2C_STATE_RD_RAM
                                        (0245) IF (EzI2Cs_1_ROM_ENABLE)        ; Only valid if ROM enabled
                                        (0246)     jmp  I2C_STATE_WR_ROM_ADDR
                                        (0247)     jmp  I2C_STATE_RD_ROM
                                        (0248)     jmp  I2C_STATE_WR_ROM
                                        (0249) ELSE
042D: 80 98    JMP   0x04C6             (0250)     jmp  I2C_STATE_RESET
042F: 80 96    JMP   0x04C6             (0251)     jmp  I2C_STATE_RESET
0431: 80 94    JMP   0x04C6             (0252)     jmp  I2C_STATE_RESET
                                        (0253) ENDIF
0433: 80 92    JMP   0x04C6             (0254)     jmp  I2C_STATE_RESET
                                        (0255) 
0435: 80 99    JMP   0x04CF             (0256)     jmp  EzI2Cs_1_ISR_END
                                        (0257) 
                                        (0258) 
                                        (0259)     ;            *** I2C Idle state ***
                                        (0260)     ;
                                        (0261)     ;   Sit idle until a start with address is issued.
                                        (0262)     ;   Check to see if there is an address match
                                        (0263)     ;     If address match, ACK the bus and determine next state
                                        (0264)     ;     Else NAK the transfer and return to idle state.
                                        (0265)     ;   Also check stop for condition.IF (EzI2Cs_1_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0266)     ;
                                        (0267) I2C_STATE_IDLE:                 ; Idle state
                                        (0268) 
                                        (0269) IF (EzI2Cs_1_AUTO_ADDR_CHECK^1)   ;; for CY8C28X45 chip: skip address comparison and NACK sending stage-hardware will do this for us  if AutoAddressCompare feature is enabled.
                                        (0270)                                           ;; The code in this pre-compiler directive will be executed for all chips except CY8C28X45.
                                        (0271)  IF (EzI2Cs_1_CY8C22x45)
                                        (0272)    M8C_SetBank1
                                        (0273)    tst   reg[EzI2Cs_1_ADDR_REG], EzI2Cs_1_HW_ADDR_EN
                                        (0274)    jnz   .HwAddrRecEnabled
                                        (0275)    M8C_SetBank0
                                        (0276)  ENDIF										  
                                        (0277) IF (EzI2Cs_1_DYNAMIC_ADDR)  ;; DYNAMIC ADDRESS
                                        (0278)     mov  A,reg[EzI2Cs_1_DR_REG]                                      ; Get transmitted address
                                        (0279)     and  A,EzI2Cs_1_ADDR_MASK                                        ; Mask off alt address bit and R/W bit
                                        (0280)     cmp  A,[EzI2Cs_1_bAddr]                                          ; Check for proper Address
                                        (0281)     jz   .CHK_ADDR_MODE 
                                        (0282)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_NAK )                             ; NAK Address 
                                        (0283)     jmp  EzI2Cs_1_ISR_END                                            ; Not valid Address, leave
                                        (0284) 
                                        (0285) ELSE    ;; STATIC ADDRESS
0437: 5D D8    MOV   A,REG[0xD8]        (0286)     mov  A,reg[EzI2Cs_1_DR_REG]                                      ; Get transmitted address
0439: 21 FE    AND   A,0xFE             (0287)     and  A,EzI2Cs_1_ADDR_MASK                                        ; Mask off alt address bit and R/W bit
043B: 39 16    CMP   A,0x16             (0288)     cmp  A,EzI2Cs_1_SLAVE_ADDR                                       ; Check for proper Address
043D: A0 06    JZ    0x0444             (0289)     jz   .CHK_ADDR_MODE 
043F: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0290)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_NAK )                             ; NAK Address 
0442: 80 8C    JMP   0x04CF             (0291)     jmp  EzI2Cs_1_ISR_END                                            ; Not valid Address, leave
                                        (0292) ENDIF
                                        (0293)  IF (EzI2Cs_1_CY8C22x45)
                                        (0294) .HwAddrRecEnabled:
                                        (0295)    M8C_SetBank0
                                        (0296)  ENDIF
                                        (0297) ENDIF
                                        (0298) 
                                        (0299) .CHK_ADDR_MODE:   ; A proper address has been detected, now determine what mode, R/W alt_addr?? 
                                        (0300) IF (EzI2Cs_1_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0301)     tst  reg[EzI2Cs_1_DR_REG],EzI2Cs_1_ALT_ADDR_BIT                  ; Check for Alt address
                                        (0302)     jnz  SERVICE_ROM_ADDR
                                        (0303) ENDIF
                                        (0304) 
                                        (0305) .STANDARD_ADDR:
0444: 49 D8 01 TST   REG[0xD8],0x1      (0306)     tst  reg[EzI2Cs_1_DR_REG],EzI2Cs_1_RD_FLAG                       ; Check for a Read operation
0447: B0 0F    JNZ   0x0457             (0307)     jnz  .PREPARE_FOR_RAM_READ
                                        (0308) 
0449: 55 07 02 MOV   [0x7],0x2          (0309)     mov [EzI2Cs_1_bBusy_Flag], EzI2Cs_1_I2C_BUSY_RAM_WRITE           ; Write transaction in process - set Busy flag to WRITE
                                        (0310) 
                                        (0311)     ; Prepare for RAM Write Address operation
044C: 26 00 F0 AND   [0x0],0xF0         (0312)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
044F: 2E 00 02 OR    [0x0],0x2          (0313)     or   [EzI2Cs_1_bState],STATE_WR_RAM_ADDR                         ; Set state machine to do RAM Write
0452: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0314)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_ACK )                             ; ACK Address 
0455: 80 79    JMP   0x04CF             (0315)     jmp  EzI2Cs_1_ISR_END                                     ; Base address to RAM buffer.  
                                        (0316) 
                                        (0317) .PREPARE_FOR_RAM_READ:
0457: 55 07 01 MOV   [0x7],0x1          (0318)     mov [EzI2Cs_1_bBusy_Flag], EzI2Cs_1_I2C_BUSY_RAM_READ            ; Possible read transaction in process - set Busy flag to READ
                                        (0319) 
045A: 26 00 F0 AND   [0x0],0xF0         (0320)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
045D: 2E 00 06 OR    [0x0],0x6          (0321)     or   [EzI2Cs_1_bState],STATE_RD_RAM                              ; Set state machine to do RAM Read 
0460: 5F 02 01 MOV   [0x2],[0x1]        (0322)     mov  [EzI2Cs_1_bRAM_RWcntr],[EzI2Cs_1_bRAM_RWoffset]             ; Reset address counter to start of Offset
0463: 51 04    MOV   A,[0x4]            (0323)     mov  A,[EzI2Cs_1_pRAM_Buf_Addr_LSB]                              ; Get base address
0465: 02 02    ADD   A,[0x2]            (0324)     add  A,[EzI2Cs_1_bRAM_RWcntr]                                    ; Set Offset and add to base address      
0467: 5C       MOV   X,A                (0325)     mov  X,A                                                         ; Put offset in X
0468: 52 00    MOV   A,[X+0]            (0326)     mov  A,[X]                                                       ; Get first byte to transmit
046A: 60 D8    MOV   REG[0xD8],A        (0327)     mov  reg[EzI2Cs_1_DR_REG],A                               ; Base address to RAM buffer.  
046C: 76 02    INC   [0x2]              (0328)     inc  [EzI2Cs_1_bRAM_RWcntr]                                      ; Increment RAM buffer counter to next location.
046E: 62 D7 14 MOV   REG[0xD7],0x14     
                                        (0329) 
                                        (0330)                                                                      ; ACK command and transmit first byte.
                                        (0331)     SetEzI2Cs_1_SCR (EzI2Cs_1_SCR_ACK|EzI2Cs_1_SCR_TRANSMIT)   
0471: 80 5D    JMP   0x04CF             (0332)     jmp  EzI2Cs_1_ISR_END
                                        (0333) 
                                        (0334)     ;            *** I2C Read RAM state ***
                                        (0335)     ;
                                        (0336) I2C_STATE_RD_RAM:
                                        (0337)     ;@PSoC_UserCode_RAM_RD@ (Do not change this line.)
                                        (0338)     ;---------------------------------------------------
                                        (0339)     ; Insert your custom code below this banner
                                        (0340)     ;---------------------------------------------------
                                        (0341)     
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ; Insert your custom code above this banner
                                        (0344)     ;---------------------------------------------------
                                        (0345)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0346)     
0473: 51 05    MOV   A,[0x5]            (0347)     mov  A,[EzI2Cs_1_bRAM_Buf_Size]
0475: 78       DEC   A                  (0348)     dec  A
0476: 3A 02    CMP   A,[0x2]            (0349)     cmp  A,[EzI2Cs_1_bRAM_RWcntr]                                    ; Check to see if out of range.
0478: C0 0F    JC    0x0488             (0350)     jc   .I2C_TRANSMIT_DATA  ; WARNING!! Bogas data will be transmitted if out of range.   
                                        (0351) 
047A: 51 04    MOV   A,[0x4]            (0352)     mov  A,[EzI2Cs_1_pRAM_Buf_Addr_LSB]                              ; Get base address
047C: 02 02    ADD   A,[0x2]            (0353)     add  A,[EzI2Cs_1_bRAM_RWcntr]                                    ; Set Offset and add to base address      
047E: 5C       MOV   X,A                (0354)     mov  X,A                                                         ; Put offset in X
047F: 52 00    MOV   A,[X+0]            (0355)     mov  A,[X]                                                       ; Get first byte to transmit
0481: 60 D8    MOV   REG[0xD8],A        (0356)     mov  reg[EzI2Cs_1_DR_REG],A                                      ; Write data to transmit register
0483: 76 02    INC   [0x2]              (0357)     inc  [EzI2Cs_1_bRAM_RWcntr]                                      ; Increment RAM buffer counter to next location.
0485: 2E 00 20 OR    [0x0],0x20         (0358)     or   [EzI2Cs_1_bState],EzI2Cs_1_READ_ACTIVITY                    ; Set Read Activity flag
                                        (0359) 
                                        (0360) 
                                        (0361) .I2C_TRANSMIT_DATA:     
0488: 60 D8    MOV   REG[0xD8],A        (0362)     mov  reg[EzI2Cs_1_DR_REG],A                                      ; Write data to transmit register
048A: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0363)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_TRANSMIT )                        ; ACK command and transmit first byte. 
048D: 80 41    JMP   0x04CF             (0364)     jmp  EzI2Cs_1_ISR_END
                                        (0365) 
                                        (0366) 
                                        (0367)     ;            *** I2C Write RAM Address state ***
                                        (0368)     ;
                                        (0369)     ;  During this state, the RAM address offset is set.
                                        (0370) I2C_STATE_WR_RAM_ADDR:              ; Wait for Address write state
048F: 5D D8    MOV   A,REG[0xD8]        (0371)     mov  A,reg[EzI2Cs_1_DR_REG]                                      ; Get transmitted Address offset
0491: 3A 05    CMP   A,[0x5]            (0372)     cmp  A,[EzI2Cs_1_bRAM_Buf_Size]                                  ; Check if out of range.
0493: D0 2D    JNC   0x04C1             (0373)     jnc  I2C_NAK_DATA                                                ; If out of range NAK address
0495: A0 2B    JZ    0x04C1             (0374)     jz   I2C_NAK_DATA
                                        (0375) 
                                        (0376)     ; Address in range
0497: 53 02    MOV   [0x2],A            (0377)     mov  [EzI2Cs_1_bRAM_RWcntr],A                                    ; Reset address counter with new value
0499: 53 01    MOV   [0x1],A            (0378)     mov  [EzI2Cs_1_bRAM_RWoffset],A                                  ; Set offset with new value.
049B: 26 00 F0 AND   [0x0],0xF0         (0379)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
049E: 2E 00 04 OR    [0x0],0x4          (0380)     or   [EzI2Cs_1_bState],STATE_WR_RAM                              ; Set state machine to do RAM Write
04A1: 80 1A    JMP   0x04BC             (0381)     jmp  I2C_ACK_DATA                         ; ACK the data
                                        (0382) 
                                        (0383) 
                                        (0384)     ;            *** I2C Write RAM state
                                        (0385) I2C_STATE_WR_RAM:  
                                        (0386)     ;@PSoC_UserCode_RAM_WR@ (Do not change this line.)
                                        (0387)     ;---------------------------------------------------
                                        (0388)     ; Insert your custom code below this banner
                                        (0389)     ;---------------------------------------------------
                                        (0390)     
                                        (0391)     ;---------------------------------------------------
                                        (0392)     ; Insert your custom code above this banner
                                        (0393)     ;---------------------------------------------------
                                        (0394)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0395)     
04A3: 51 06    MOV   A,[0x6]            (0396)     mov  A,[EzI2Cs_1_bRAM_Buf_WSize]                                 ; Get buffer size to make sure we
04A5: A0 1B    JZ    0x04C1             (0397)     jz   I2C_NAK_DATA                                                ; If RAM WSize is zero, do not allow write.
04A7: 78       DEC   A                  (0398)     dec  A                                                           ; are in a valid area.
04A8: 3A 02    CMP   A,[0x2]            (0399)     cmp  A,[EzI2Cs_1_bRAM_RWcntr]                                    ; Check to see if out of range.
04AA: C0 16    JC    0x04C1             (0400)     jc   I2C_NAK_DATA                                                ; If out of range NAK address
                                        (0401) 
04AC: 51 04    MOV   A,[0x4]            (0402)     mov  A,[EzI2Cs_1_pRAM_Buf_Addr_LSB]                              ; Get base address
04AE: 02 02    ADD   A,[0x2]            (0403)     add  A,[EzI2Cs_1_bRAM_RWcntr]                                    ; Set Offset and add to base address      
04B0: 5C       MOV   X,A                (0404)     mov  X,A                                                         ; Put offset in X
                                        (0405) 
04B1: 5D D8    MOV   A,REG[0xD8]        (0406)     mov  A,reg[EzI2Cs_1_DR_REG]                                      ; Read data to be written
04B3: 54 00    MOV   [X+0],A            (0407)     mov  [X],A                                                       ; Store data in Buffer
04B5: 2E 00 10 OR    [0x0],0x10         (0408)     or   [EzI2Cs_1_bState],EzI2Cs_1_WRITE_ACTIVITY                   ; Set Write Activity flag
04B8: 76 02    INC   [0x2]              (0409)     inc  [EzI2Cs_1_bRAM_RWcntr]                                      ; Advance pointer to next location
04BA: 80 01    JMP   0x04BC             (0410)     jmp  I2C_ACK_DATA                         ; ACK the data
04BC: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0411) 
                                        (0412)     
                                        (0413)     
                                        (0414) IF (EzI2Cs_1_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0415) 
                                        (0416) SERVICE_ROM_ADDR:  ; At this time only ROM Read is supported.  
                                        (0417)     tst  reg[EzI2Cs_1_DR_REG],EzI2Cs_1_RD_FLAG                       ; Check for a Read operation
                                        (0418)     jnz  PREPARE_FOR_ROM_READ
                                        (0419) 
                                        (0420)     mov [EzI2Cs_1_bBusy_Flag], EzI2Cs_1_I2C_BUSY_ROM_WRITE           ; Write transaction in process - set Busy flag to WRITE
                                        (0421)     
                                        (0422)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
                                        (0423)     or   [EzI2Cs_1_bState],STATE_WR_ROM_ADDR                         ; Set state machine to do ROM ADDR Write
                                        (0424)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_ACK )                             ; ACK Address 
                                        (0425)     jmp  EzI2Cs_1_ISR_END                                    ; Base address to RAM buffer.  
                                        (0426) 
                                        (0427)     ; Prepare for Write ROM Address.              
                                        (0428) I2C_STATE_WR_ROM_ADDR:
                                        (0429)     mov  A,reg[EzI2Cs_1_DR_REG]                                      ; Get transmitted Address offset
                                        (0430)     cmp  A,[EzI2Cs_1_bROM_Buf_Size]                                  ; Check if out of range.
                                        (0431)     jnc  I2C_NAK_DATA                                                ; If out of range NAK address
                                        (0432)     jz   I2C_NAK_DATA
                                        (0433) 
                                        (0434)     mov  [EzI2Cs_1_bROM_RWcntr],A                                    ; Reset address counter with new value
                                        (0435)     mov  [EzI2Cs_1_bROM_RWoffset],A                                  ; Set offset with new value.
                                        (0436)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
                                        (0437)     or   [EzI2Cs_1_bState],STATE_WR_ROM                              ; Set state machine to do ROM Write
                                        (0438)     jmp  I2C_ACK_DATA
                                        (0439) 
                                        (0440) I2C_STATE_WR_ROM:  // Flash command interpreter
                                        (0441)    ;@PSoC_UserCode_ROM_WR@ (Do not change this line.)
                                        (0442)    ;---------------------------------------------------
                                        (0443)    ; Insert your custom code below this banner
                                        (0444)    ;---------------------------------------------------
                                        (0445) 
                                        (0446)    ;---------------------------------------------------
                                        (0447)    ; Insert your custom code above this banner
                                        (0448)    ;---------------------------------------------------
                                        (0449)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0450) 
                                        (0451)     jnc  I2C_NAK_DATA                                                ; Write to ROM not supported.
                                        (0452) 
                                        (0453) PREPARE_FOR_ROM_READ:
                                        (0454)     mov [EzI2Cs_1_bBusy_Flag], EzI2Cs_1_I2C_BUSY_ROM_READ            ; Possible read transaction in process - set Busy flag to READ
                                        (0455)     
                                        (0456)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
                                        (0457)     or   [EzI2Cs_1_bState],STATE_RD_ROM                              ; Set state machine to do ROM Read 
                                        (0458)     mov  [EzI2Cs_1_bROM_RWcntr],[EzI2Cs_1_bROM_RWoffset]             ; Reset address counter to start of Offset
                                        (0459)     mov  X,[EzI2Cs_1_pROM_Buf_Addr_MSB]                              ; Get MSB of ROM address in X
                                        (0460)     mov  A,[EzI2Cs_1_pROM_Buf_Addr_LSB]                              ; Get LSB of ROM base address
                                        (0461)     add  A,[EzI2Cs_1_bROM_RWcntr]                                    ; Set Offset and add to base address      
                                        (0462)     jnc  .GET_ROM_VALUE
                                        (0463)     inc  X    ; Inc the MSB
                                        (0464) .GET_ROM_VALUE:
                                        (0465)     swap A,X  ; Place MSB of ROM address in A, and LSB in X for ROMX
                                        (0466)     romx      ; Get Rom value in A
                                        (0467) 
                                        (0468)     mov  reg[EzI2Cs_1_DR_REG],A                              ; Base address to RAM buffer.  
                                        (0469)     inc  [EzI2Cs_1_bROM_RWcntr]                                      ; Increment RAM buffer counter to next location.
                                        (0470) 
                                        (0471)                                                                      ; ACK command and transmit first byte.
                                        (0472)     SetEzI2Cs_1_SCR  (EzI2Cs_1_SCR_ACK|EzI2Cs_1_SCR_TRANSMIT)   
                                        (0473)     jmp  EzI2Cs_1_ISR_END
                                        (0474) 
                                        (0475) 
                                        (0476) I2C_STATE_RD_ROM:
                                        (0477)     ;@PSoC_UserCode_ROM_RD@ (Do not change this line.)
                                        (0478)     ;---------------------------------------------------
                                        (0479)     ; Insert your custom code below this banner
                                        (0480)     ;---------------------------------------------------
                                        (0481) 
                                        (0482)     ;---------------------------------------------------
                                        (0483)     ; Insert your custom code above this banner
                                        (0484)     ;---------------------------------------------------
                                        (0485)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0486) 
                                        (0487)     mov  A,[EzI2Cs_1_bROM_Buf_Size]
                                        (0488)     dec  A
                                        (0489)     cmp  A,[EzI2Cs_1_bROM_RWcntr]                                    ; Check to see if out of range.
                                        (0490)     jc   .I2C_TRANSMIT_ROM_DATA  ; WARNING!! Bogas data will be transmitted if out of range.   
                                        (0491) 
                                        (0492)     mov  X,[EzI2Cs_1_pROM_Buf_Addr_MSB]                              ; Get MSB of ROM address in X
                                        (0493)     mov  A,[EzI2Cs_1_pROM_Buf_Addr_LSB]                              ; Get LSB of ROM base address
                                        (0494)     add  A,[EzI2Cs_1_bROM_RWcntr]                                    ; Set Offset and add to base address      
                                        (0495)     jnc  .GET_ROM_VALUE
                                        (0496)     inc  X    ; Inc the MSB
                                        (0497) .GET_ROM_VALUE:
                                        (0498)     swap A,X  ; Place MSB of ROM address in A, and LSB in X for ROMX
                                        (0499)     romx      ; Get Rom value in A
                                        (0500)     mov  reg[EzI2Cs_1_DR_REG],A                              ; Base address to RAM buffer.  
                                        (0501)     inc  [EzI2Cs_1_bROM_RWcntr]                                      ; Increment RAM buffer counter to next location.
                                        (0502) 
                                        (0503) .I2C_TRANSMIT_ROM_DATA:     
                                        (0504)     mov  reg[EzI2Cs_1_DR_REG],A                                      ; Write data to transmit register
                                        (0505)     SetEzI2Cs_1_SCR  (EzI2Cs_1_SCR_TRANSMIT)                         ; ACK command and transmit first byte. 
                                        (0506)     jmp  EzI2Cs_1_ISR_END
                                        (0507) 
                                        (0508) ENDIF
                                        (0509) 
                                        (0510) ;; Generic handlers
                                        (0511) 
                                        (0512) I2C_ACK_DATA:
                                        (0513)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_ACK )                             ; ACK Data
04BF: 80 0F    JMP   0x04CF             (0514)     jmp  EzI2Cs_1_ISR_END
04C1: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0515) 
                                        (0516) I2C_NAK_DATA:   ;; NAK data and return  !!WARNING, NOT SURE IF THIS WILL WORK
                                        (0517)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_NAK )                             ;  NAK Data
04C4: 80 0A    JMP   0x04CF             (0518)     jmp  EzI2Cs_1_ISR_END
                                        (0519) 
                                        (0520) I2C_STATE_RESET:
                                        (0521)     ;@PSoC_UserCode_I2C_RST_Start@ (Do not change this line.)
                                        (0522)     ;---------------------------------------------------
                                        (0523)     ; Insert your custom code below this banner
                                        (0524)     ;---------------------------------------------------
                                        (0525) 
                                        (0526)     ;---------------------------------------------------
                                        (0527)     ; Insert your custom code above this banner
                                        (0528)     ;---------------------------------------------------
                                        (0529)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0530) 
04C6: 26 00 F0 AND   [0x0],0xF0         (0531)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
04C9: 2E 00 00 OR    [0x0],0x0          (0532)     or   [EzI2Cs_1_bState], STATE_IDLE    ; Reset State
04CC: 55 07 00 MOV   [0x7],0x0          (0533)     mov [EzI2Cs_1_bBusy_Flag],EzI2Cs_1_I2C_FREE                      ; Clear Busy flag
04CF: 18       POP   A                  
04D0: 60 D0    MOV   REG[0xD0],A        
04D2: 18       POP   A                  
04D3: 60 D3    MOV   REG[0xD3],A        
                                        (0534)     ; Reset pointer buffers as well
                                        (0535)     ;@PSoC_UserCode_I2C_RST_End@ (Do not change this line.)
                                        (0536)     ;---------------------------------------------------
                                        (0537)     ; Insert your custom code below this banner
                                        (0538)     ;---------------------------------------------------
                                        (0539) 
                                        (0540)     ;---------------------------------------------------
                                        (0541)     ; Insert your custom code above this banner
                                        (0542)     ;---------------------------------------------------
                                        (0543)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0544) 
                                        (0545) EzI2Cs_1_ISR_END:
                                        (0546) 
                                        (0547) ; This conditional code is only used when using the large memory model.
                                        (0548) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0549)    REG_RESTORE CUR_PP           ; Restore Current Page Pointer
                                        (0550)    REG_RESTORE IDX_PP           ; Restore Index Page Pointer
                                        (0551) ENDIF
04D5: 20       POP   X                  (0552)     pop  X
04D6: 18       POP   A                  (0553)     pop  A
                                        (0554) 
04D7: 7E       RETI                     (0555)     reti
FILE: lib\ezi2cs_1.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
04D8: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: EzI2Cs_1.asm
04DB: 71 10    OR    F,0x10             
                                        (0004) ;;  Version: 2.00, Updated on 2013/5/19 at 10:43:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: EzI2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "EzI2Cs_1.inc"
                                        (0025) include "PSoCGPIOINT.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ; include instance specific register definitions
                                        (0029) ;-----------------------------------------------
                                        (0030) 
                                        (0031) ;-----------------------------------------------
                                        (0032) ;  Global Symbols
                                        (0033) ;-----------------------------------------------
                                        (0034) ;-------------------------------------------------------------------
                                        (0035) ;  Declare the functions global for both assembler and C compiler.
                                        (0036) ;
                                        (0037) ;  Note that there are two names for each API. First name is
                                        (0038) ;  assembler reference. Name with underscore is name refence for
                                        (0039) ;  C compiler.  Calling function in C source code does not require
                                        (0040) ;  the underscore.
                                        (0041) ;-------------------------------------------------------------------
                                        (0042) 
                                        (0043) export    EzI2Cs_1_EnableInt
                                        (0044) export   _EzI2Cs_1_EnableInt
                                        (0045) export    EzI2Cs_1_ResumeInt
                                        (0046) export   _EzI2Cs_1_ResumeInt
                                        (0047) export    EzI2Cs_1_Start
                                        (0048) export   _EzI2Cs_1_Start
                                        (0049) 
                                        (0050) export    EzI2Cs_1_DisableInt
                                        (0051) export   _EzI2Cs_1_DisableInt
                                        (0052) export    EzI2Cs_1_Stop
                                        (0053) export   _EzI2Cs_1_Stop
                                        (0054) export    EzI2Cs_1_DisableSlave
                                        (0055) export   _EzI2Cs_1_DisableSlave
                                        (0056) export    EzI2Cs_1_SetRamBuffer
                                        (0057) export   _EzI2Cs_1_SetRamBuffer
                                        (0058) export    EzI2Cs_1_GetAddr
                                        (0059) export   _EzI2Cs_1_GetAddr
                                        (0060) export    EzI2Cs_1_GetActivity
                                        (0061) export   _EzI2Cs_1_GetActivity
                                        (0062) 
                                        (0063) 
                                        (0064) IF (EzI2Cs_1_DYNAMIC_ADDR | EzI2Cs_1_AUTO_ADDR_CHECK) ;; Enable this function if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0065) export    EzI2Cs_1_SetAddr
                                        (0066) export   _EzI2Cs_1_SetAddr
                                        (0067) ENDIF
                                        (0068) 
                                        (0069) IF (EzI2Cs_1_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0070) export    EzI2Cs_1_SetRomBuffer
                                        (0071) export   _EzI2Cs_1_SetRomBuffer
                                        (0072) ENDIF
                                        (0073) 
                                        (0074) IF (EzI2Cs_1_CY8C22x45)
                                        (0075) export    EzI2Cs_1_EnableHWAddrCheck
                                        (0076) export   _EzI2Cs_1_EnableHWAddrCheck
                                        (0077) export    EzI2Cs_1_DisableHWAddrCheck
                                        (0078) export   _EzI2Cs_1_DisableHWAddrCheck
                                        (0079) ENDIF
                                        (0080) 
                                        (0081) 
                                        (0082) AREA UserModules (ROM, REL, CON)
                                        (0083) 
                                        (0084) .SECTION
                                        (0085) 
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;  FUNCTION NAME: EzI2Cs_1_Start
                                        (0088) ;
                                        (0089) ;  DESCRIPTION:
                                        (0090) ;   Initialize the EzI2Cs_1 I2C bus interface.
                                        (0091) ;
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;
                                        (0094) ;  ARGUMENTS:
                                        (0095) ;
                                        (0096) ;  RETURNS: none
                                        (0097) ;
                                        (0098) ;  SIDE EFFECTS:
                                        (0099) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0100) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0101) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0102) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0103) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0104) ;          
                                        (0105) ;    Page Pointer Registers Modified: 
                                        (0106) ;          CUR_PP
                                        (0107) ;
                                        (0108) ;  THEORY of OPERATION or PROCEDURE:
                                        (0109) ;
                                        (0110) 
                                        (0111)  EzI2Cs_1_Start:
                                        (0112) _EzI2Cs_1_Start:
                                        (0113) 
                                        (0114)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0115)    RAM_SETPAGE_CUR >EzI2Cs_1_varPage
                                        (0116)    
                                        (0117) IF (EzI2Cs_1_DYNAMIC_ADDR)  ;; DYNAMIC ADDRESS
                                        (0118) IF (EzI2Cs_1_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the EzI2Cs_1_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0119)    mov  [EzI2Cs_1_bAddr],EzI2Cs_1_SLAVE_ADDR
                                        (0120) ENDIF   
                                        (0121) ENDIF
                                        (0122) IF (EzI2Cs_1_CY8C22x45)
                                        (0123)    M8C_SetBank1
                                        (0124)    mov   reg[EzI2Cs_1_ADDR_REG], (EzI2Cs_1_SLAVE_ADDR>>1)
                                        (0125)    M8C_SetBank0
                                        (0126) ENDIF
                                        (0127) 
                                        (0128)    M8C_SetBank1 ;The SDA and SCL pins are setting to Hi-z drive mode
04DD: 41 04 5F AND   REG[0x4],0x5F      (0129)    and reg[EzI2Cs_1SDA_DriveMode_0_ADDR],~(EzI2Cs_1SDA_MASK|EzI2Cs_1SCL_MASK)
04E0: 43 05 A0 OR    REG[0x5],0xA0      (0130)    or  reg[EzI2Cs_1SDA_DriveMode_1_ADDR], (EzI2Cs_1SDA_MASK|EzI2Cs_1SCL_MASK)
04E3: 70 EF    AND   F,0xEF             
                                        (0131)    M8C_SetBank0
04E5: 43 07 A0 OR    REG[0x7],0xA0      (0132)    or  reg[EzI2Cs_1SDA_DriveMode_2_ADDR], (EzI2Cs_1SDA_MASK|EzI2Cs_1SCL_MASK)
                                        (0133) 
04E8: 55 00 00 MOV   [0x0],0x0          (0134)    mov  [EzI2Cs_1_bState],0x00    ;; Make sure state machine is initialized
04EB: 55 07 00 MOV   [0x7],0x0          (0135)    mov [EzI2Cs_1_bBusy_Flag],EzI2Cs_1_I2C_FREE ;; Clear Busy flag
                                        (0136) 
04EE: 90 19    CALL  _EzI2Cs_1_GetActivity|_EzI2Cs_1_ResumeInt|EzI2Cs_1_EnableInt|_EzI2Cs_1_GetAddr|_EzI2Cs_1_EnableInt(0137)    call EzI2Cs_1_EnableInt
04F0: 90 1E    CALL  0x0510             (0138)    call EzI2Cs_1_EnableSlave
                                        (0139) 
04F2: 40       NOP                      (0140)    nop
04F3: 40       NOP                      (0141)    nop
04F4: 40       NOP                      (0142)    nop
04F5: 40       NOP                      (0143)    nop
04F6: 40       NOP                      (0144)    nop
                                        (0145)    
04F7: 50 00    MOV   A,0x0              (0146)    mov A, 0
04F9: 53 01    MOV   [0x1],A            (0147)    mov [EzI2Cs_1_bRAM_RWoffset], A
04FB: 71 10    OR    F,0x10             
                                        (0148) IF (EzI2Cs_1_ROM_ENABLE)
                                        (0149)    mov [EzI2Cs_1_bROM_RWoffset], A
                                        (0150) ENDIF
                                        (0151)    
                                        (0152)    M8C_SetBank1 ;The SDA and SCL pins are restored to Open Drain Low drive mode
04FD: 43 04 A0 OR    REG[0x4],0xA0      (0153)    or reg[EzI2Cs_1SDA_DriveMode_0_ADDR], (EzI2Cs_1SDA_MASK|EzI2Cs_1SCL_MASK)
0500: 43 05 A0 OR    REG[0x5],0xA0      (0154)    or reg[EzI2Cs_1SDA_DriveMode_1_ADDR], (EzI2Cs_1SDA_MASK|EzI2Cs_1SCL_MASK)
0503: 70 EF    AND   F,0xEF             
                                        (0155)    M8C_SetBank0
0505: 43 07 A0 OR    REG[0x7],0xA0      (0156)    or reg[EzI2Cs_1SDA_DriveMode_2_ADDR], (EzI2Cs_1SDA_MASK|EzI2Cs_1SCL_MASK)
                                        (0157) 
                                        (0158)    RAM_EPILOGUE RAM_USE_CLASS_4
0508: 7F       RET                      (0159)    ret
0509: 62 DD FE MOV   REG[0xDD],0xFE     
050C: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0160) 
                                        (0161) .ENDSECTION
                                        (0162) 
                                        (0163) IF (EzI2Cs_1_DYNAMIC_ADDR | EzI2Cs_1_AUTO_ADDR_CHECK) ;; Enable this function if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0164) .SECTION
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;  FUNCTION NAME: EzI2Cs_1_SetAddr(BYTE bAddr)
                                        (0167) ;
                                        (0168) ;  DESCRIPTION:
                                        (0169) ;   Set the I2C slave address for the EzI2Cs_1 I2C bus interface.
                                        (0170) ;
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;
                                        (0173) ;  ARGUMENTS:
                                        (0174) ;      A =>  Slave address
                                        (0175) ;
                                        (0176) ;  RETURNS: none
                                        (0177) ;
                                        (0178) ;  SIDE EFFECTS;    
                                        (0179) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0180) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0181) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0182) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0183) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0184) ;          
                                        (0185) ;    Page Pointer Registers Modified: 
                                        (0186) ;          CUR_PP
                                        (0187) ;
                                        (0188) ;  THEORY of OPERATION or PROCEDURE:
                                        (0189) ;
                                        (0190) 
                                        (0191)  EzI2Cs_1_SetAddr:
                                        (0192) _EzI2Cs_1_SetAddr:
                                        (0193)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0194) IF (EzI2Cs_1_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the EzI2Cs_1_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0195)    RAM_SETPAGE_CUR >EzI2Cs_1_bAddr
                                        (0196)  IF (EzI2Cs_1_CY8C22x45)
                                        (0197)    and   A, ~EzI2Cs_1_HW_ADDR_EN
                                        (0198)    M8C_SetBank1
                                        (0199)    mov   reg[EzI2Cs_1_ADDR_REG], A
                                        (0200)    M8C_SetBank0
                                        (0201)  ENDIF
                                        (0202)    asl   A
                                        (0203)    mov   [EzI2Cs_1_bAddr],A
                                        (0204) ELSE                          ;; write to the ADDR register instead
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0206)    and  A, ~EzI2Cs_1_HW_ADDR_MASK	; verify address value
                                        (0207)    mov  X, SP
                                        (0208)    push A                                   ; store address value
                                        (0209)    M8C_SetBank1               ;; Set Bank 1
                                        (0210)    mov  A, reg[EzI2Cs_1_ADDR_REG]   ; get value from address register
                                        (0211)    and  A, EzI2Cs_1_HW_ADDR_MASK    ; define highest bit
                                        (0212)    or   A, [X]                              ; form address value 	
                                        (0213)    mov  reg[EzI2Cs_1_ADDR_REG], A   ; set new address value to register
                                        (0214)    M8C_SetBank0               ;; Set Bank 0
                                        (0215)    pop  A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0217) ENDIF
                                        (0218)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0219)    ret
                                        (0220) 
                                        (0221) .ENDSECTION
                                        (0222) ENDIF
                                        (0223) 
                                        (0224) .SECTION
                                        (0225) ;-----------------------------------------------------------------------------
                                        (0226) ;  FUNCTION NAME:BYTE EzI2Cs_1_GetActivity(void)
                                        (0227) ;
                                        (0228) ;  DESCRIPTION:
                                        (0229) ;    Return a non-zero value if the I2C hardware has seen activity on the bus.
                                        (0230) ;    The activity flag will be cleared if set when calling this function.
                                        (0231) ;
                                        (0232) ;-----------------------------------------------------------------------------
                                        (0233) ;
                                        (0234) ;  ARGUMENTS:  none
                                        (0235) ;
                                        (0236) ;  RETURNS: 
                                        (0237) ;    BYTE  non-zero = Activity
                                        (0238) ;          zero     = No Activity
                                        (0239) ;
                                        (0240) ;  SIDE EFFECTS;    
                                        (0241) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0242) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0243) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0244) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0245) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0246) ;          
                                        (0247) ;    Page Pointer Registers Modified: 
                                        (0248) ;          CUR_PP
                                        (0249) ;
                                        (0250) ;  THEORY of OPERATION or PROCEDURE:
                                        (0251) ;
                                        (0252) 
                                        (0253)  EzI2Cs_1_GetActivity:
                                        (0254) _EzI2Cs_1_GetActivity:
                                        (0255)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0256)    RAM_SETPAGE_CUR >EzI2Cs_1_bState
                                        (0257)    mov   A,[EzI2Cs_1_bState]
                                        (0258)    and   A,EzI2Cs_1_ACTIVITY_MASK         ; Mask off activity bits
                                        (0259)    and   [EzI2Cs_1_bState],~EzI2Cs_1_ACTIVITY_MASK ; Clear system activity bits
                                        (0260) 
                                        (0261) EzI2Cs_1_GetActivity_End:
                                        (0262)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0263)    ret
                                        (0264) 
                                        (0265) .ENDSECTION
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME: BYTE EzI2Cs_1_GetAddr(Void)
                                        (0270) ;
                                        (0271) ;  DESCRIPTION:
                                        (0272) ;   Get the I2C slave address for the EzI2Cs_1 I2C bus interface.
                                        (0273) ;
                                        (0274) ;-----------------------------------------------------------------------------
                                        (0275) ;
                                        (0276) ;  ARGUMENTS: none
                                        (0277) ;
                                        (0278) ;  RETURNS: none
                                        (0279) ;
                                        (0280) ;  SIDE EFFECTS;    
                                        (0281) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0282) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0283) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0284) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0285) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0286) ;          
                                        (0287) ;    Page Pointer Registers Modified: 
                                        (0288) ;          CUR_PP
                                        (0289) ;
                                        (0290) ;
                                        (0291) ;  THEORY of OPERATION or PROCEDURE:
                                        (0292) ;
                                        (0293) 
                                        (0294)  EzI2Cs_1_GetAddr:
                                        (0295) _EzI2Cs_1_GetAddr:
                                        (0296) 
                                        (0297) IF (EzI2Cs_1_DYNAMIC_ADDR | EzI2Cs_1_AUTO_ADDR_CHECK) ;; if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0298)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0299) IF (EzI2Cs_1_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the EzI2Cs_1_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0300)    RAM_SETPAGE_CUR >EzI2Cs_1_bAddr
                                        (0301)    mov   A,[EzI2Cs_1_bAddr]
                                        (0302)    asr   A                          ; Shift Addr to right to drop RW bit.
                                        (0303) ELSE                          ;; read the address from ADDR register instead
                                        (0304)    M8C_SetBank1               ;; Set Bank 1 
                                        (0305)    mov A, reg[EzI2Cs_1_ADDR_REG]
                                        (0306)    M8C_SetBank0               ;; Set Bank 0
                                        (0307) ENDIF
                                        (0308)    and   A, 0x7f              ; Mask off bogus MSb
                                        (0309)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0310) ELSE
                                        (0311)    mov   A,0xb            
                                        (0312) ENDIF
                                        (0313)    ret
                                        (0314) 
                                        (0315) .ENDSECTION
                                        (0316) 
                                        (0317) 
                                        (0318) 
                                        (0319) .SECTION
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;  FUNCTION NAME: EzI2Cs_1_EnableInt
                                        (0322) ;  FUNCTION NAME: EzI2Cs_1_ResumeInt
                                        (0323) ;  DESCRIPTION:
                                        (0324) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0325) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0326) ;	  EzI2Cs_1_ResumeInt performs the enable int function without fist clearing
                                        (0327) ;     pending interrupts.
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;
                                        (0330) ;  ARGUMENTS: none
                                        (0331) ;
                                        (0332) ;  RETURNS: none
                                        (0333) ;
                                        (0334) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0335) ;
                                        (0336) ;  THEORY of OPERATION or PROCEDURE:
                                        (0337) ;
                                        (0338)  EzI2Cs_1_ResumeInt:
                                        (0339) _EzI2Cs_1_ResumeInt:
                                        (0340)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0341)    jmp   ResumeEntry
                                        (0342) 
                                        (0343)  EzI2Cs_1_EnableInt:
                                        (0344) _EzI2Cs_1_EnableInt:
                                        (0345)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0346)    ;first clear any pending interrupts
                                        (0347)    M8C_ClearIntFlag INT_CLR3, EzI2Cs_1_INT_MASK   
                                        (0348) ResumeEntry:
                                        (0349)    M8C_EnableIntMask EzI2Cs_1_INT_REG, EzI2Cs_1_INT_MASK
                                        (0350)    RAM_EPILOGUE RAM_USE_CLASS_1
050F: 7F       RET                      (0351)    ret
                                        (0352) 
                                        (0353) .ENDSECTION
                                        (0354) 
                                        (0355) .SECTION
                                        (0356) ;-----------------------------------------------------------------------------
                                        (0357) ;  FUNCTION NAME: EzI2Cs_1_EnableSlave
                                        (0358) ;
                                        (0359) ;  DESCRIPTION:
                                        (0360) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0361) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0362) ;
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS: none
                                        (0366) ;
                                        (0367) ;  RETURNS: none
                                        (0368) ;
                                        (0369) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0370) ;
                                        (0371) ;  THEORY of OPERATION or PROCEDURE:
                                        (0372) ;
                                        (0373) 
                                        (0374)  EzI2Cs_1_EnableSlave:
                                        (0375) _EzI2Cs_1_EnableSlave:
                                        (0376) 
                                        (0377)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0378)     
                                        (0379)     IF (EzI2Cs_1_CY8C27XXXA_ID) ;; Enable this code if we have CY8C27XXXA chip ID
                                        (0380)     ; Save original CPU clock speed
                                        (0381)     M8C_SetBank1          ; Set Bank 1 
                                        (0382)     mov  A,reg[OSC_CR0]   ; Get current configuration of OSC_CR0 (Bank 1)
                                        (0383)     push A                ; Save OSC_CR0 configuration
                                        (0384)     and  A,0xF8           ; Mask off CPU speed
                                        (0385)     or   A,0x05           ; Set clock to 750KHz
                                        (0386)     mov  reg[OSC_CR0],A   ; Write new value to OSC_CR0 (Bank 1)
                                        (0387)     M8C_SetBank0          ; Back to Bank 0
                                        (0388)     ENDIF 
                                        (0389)     ; Enable I2C Slave
                                        (0390)     IF(EzI2Cs_1_USED_I2C_BLOCK)
                                        (0391)     M8C_SetBank1
                                        (0392)     or   reg[EzI2Cs_1_CFG_REG],(EzI2Cs_1_CFG_Slave_EN | EzI2Cs_1_CFG_BUS_ERROR_IE | EzI2Cs_1_CFG_STOP_IE)
                                        (0393)     M8C_SetBank0
                                        (0394)     ELSE
0510: 43 D6 31 OR    REG[0xD6],0x31     (0395)     or   reg[EzI2Cs_1_CFG_REG],(EzI2Cs_1_CFG_Slave_EN | EzI2Cs_1_CFG_BUS_ERROR_IE | EzI2Cs_1_CFG_STOP_IE)
                                        (0396)     ENDIF
                                        (0397)     IF (EzI2Cs_1_CY8C27XXXA_ID) ;; Enable this code if we have CY8C27XXXA chip ID    
                                        (0398)     ; Restore original CPU clock speed
                                        (0399)     pop  A
                                        (0400)     M8C_SetBank1          ; Set Bank 1
                                        (0401)     mov  reg[OSC_CR0],A   ; Restore
                                        (0402)     M8C_SetBank0          ; Back to Bank 0
                                        (0403)     ENDIF    
                                        (0404)     RAM_EPILOGUE RAM_USE_CLASS_1
0513: 7F       RET                      (0405)     ret
0514: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0406) 
                                        (0407) .ENDSECTION
                                        (0408) 
                                        (0409) .SECTION
                                        (0410) ;-----------------------------------------------------------------------------
                                        (0411) ;  FUNCTION NAME: EzI2Cs_1_DisableInt
                                        (0412) ;  FUNCTION NAME: EzI2Cs_1_Stop
                                        (0413) ;
                                        (0414) ;  DESCRIPTION:
                                        (0415) ;     Disables EzI2Cs_1 slave by disabling SDA interrupt
                                        (0416) ;
                                        (0417) ;-----------------------------------------------------------------------------
                                        (0418) ;
                                        (0419) ;  ARGUMENTS: none
                                        (0420) ;
                                        (0421) ;  RETURNS: none
                                        (0422) ;
                                        (0423) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0424) ;
                                        (0425) ;  THEORY of OPERATION or PROCEDURE:
                                        (0426) ;
                                        (0427) 
                                        (0428)  EzI2Cs_1_Stop:
                                        (0429) _EzI2Cs_1_Stop:
                                        (0430)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0431) 
                                        (0432)    M8C_DisableIntMask EzI2Cs_1_INT_REG, EzI2Cs_1_INT_MASK
                                        (0433)    IF(EzI2Cs_1_USED_I2C_BLOCK)
                                        (0434)    M8C_SetBank1
                                        (0435)    and  reg[EzI2Cs_1_CFG_REG],~EzI2Cs_1_CFG_Slave_EN
                                        (0436)    M8C_SetBank0
                                        (0437)    ELSE
                                        (0438)    and  reg[EzI2Cs_1_CFG_REG],~EzI2Cs_1_CFG_Slave_EN
                                        (0439)    ENDIF
                                        (0440)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0441)    ret
                                        (0442) 
                                        (0443) .ENDSECTION
                                        (0444) 
                                        (0445) 
                                        (0446) 
                                        (0447) .SECTION
                                        (0448) ;-----------------------------------------------------------------------------
                                        (0449) ;  FUNCTION NAME: EzI2Cs_1_DisableInt
                                        (0450) ;  FUNCTION NAME: EzI2Cs_1_Stop
                                        (0451) ;
                                        (0452) ;  DESCRIPTION:
                                        (0453) ;     Disables EzI2Cs_1 slave by disabling SDA interrupt
                                        (0454) ;
                                        (0455) ;-----------------------------------------------------------------------------
                                        (0456) ;
                                        (0457) ;  ARGUMENTS: none
                                        (0458) ;
                                        (0459) ;  RETURNS: none
                                        (0460) ;
                                        (0461) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0462) ;
                                        (0463) ;  THEORY of OPERATION or PROCEDURE:
                                        (0464) ;
                                        (0465) 
                                        (0466)  EzI2Cs_1_DisableInt:
                                        (0467) _EzI2Cs_1_DisableInt:
                                        (0468)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0469)    M8C_DisableIntMask EzI2Cs_1_INT_REG, EzI2Cs_1_INT_MASK
                                        (0470)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0471)    ret
                                        (0472) 
                                        (0473) .ENDSECTION
                                        (0474) 
                                        (0475) .SECTION
                                        (0476) ;-----------------------------------------------------------------------------
                                        (0477) ;  FUNCTION NAME: EzI2Cs_1_DisableSlave
                                        (0478) ;
                                        (0479) ;  DESCRIPTION:
                                        (0480) ;     Disables EzI2Cs_1 slave by disabling SDA interrupt
                                        (0481) ;
                                        (0482) ;-----------------------------------------------------------------------------
                                        (0483) ;
                                        (0484) ;  ARGUMENTS: none
                                        (0485) ;
                                        (0486) ;  RETURNS: none
                                        (0487) ;
                                        (0488) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0489) ;
                                        (0490) ;  THEORY of OPERATION or PROCEDURE:
                                        (0491) ;
                                        (0492) 
                                        (0493)  EzI2Cs_1_DisableSlave:
                                        (0494) _EzI2Cs_1_DisableSlave:
                                        (0495)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0496)    IF(EzI2Cs_1_USED_I2C_BLOCK)
                                        (0497)    M8C_SetBank1
                                        (0498)    and  reg[EzI2Cs_1_CFG_REG],~EzI2Cs_1_CFG_Slave_EN
                                        (0499)    M8C_SetBank0
                                        (0500)    ELSE
                                        (0501)    and  reg[EzI2Cs_1_CFG_REG],~EzI2Cs_1_CFG_Slave_EN
                                        (0502)    ENDIF
                                        (0503)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0504)    ret
                                        (0505) 
                                        (0506) .ENDSECTION
                                        (0507) 
                                        (0508) .SECTION
                                        (0509) ;-----------------------------------------------------------------------------
                                        (0510) ;  FUNCTION NAME: 
                                        (0511) ;          void EzI2Cs_1_SetRamBuffer(BYTE bSize, BYTE bRWboundry, BYTE * pAddr)
                                        (0512) ;
                                        (0513) ;  DESCRIPTION:
                                        (0514) ;     Sets the location and size of the I2C RAM buffer.          
                                        (0515) ;
                                        (0516) ;-----------------------------------------------------------------------------
                                        (0517) ;
                                        (0518) ;  ARGUMENTS: 
                                        (0519) ;     [SP-3] =>  Size of data structure
                                        (0520) ;     [SP-4] =>  R/W boundary of (Must be less than or equal to size.)
                                        (0521) ;     [SP-5] =>  LSB of data pointer
                                        (0522) ;     [SP-6] =>  MSB of data pointer (Only used for large memory model)
                                        (0523) ;
                                        (0524) ;  RETURNS: none
                                        (0525) ;
                                        (0526) ;  SIDE EFFECTS;    
                                        (0527) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0528) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0529) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0530) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0531) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0532) ;          
                                        (0533) ;    Page Pointer Registers Modified: 
                                        (0534) ;          CUR_PP
                                        (0535) ;
                                        (0536) ;  THEORY of OPERATION or PROCEDURE:
                                        (0537) ;
                                        (0538) 
                                        (0539) ; Stack offset constants
                                        (0540) RAMBUF_SIZE:   equ  -3   ; Stack position for data structure size.
                                        (0541) RW_SIZE:       equ  -4   ; Stack position for R/W area size.       
                                        (0542) RAMPTR_LSB:    equ  -5   ; Stack position for RAM pointer LSB.   
                                        (0543) RAMPTR_MSB:    equ  -6   ; Stack position for RAM pointer MSB.   
                                        (0544) 
                                        (0545)  EzI2Cs_1_SetRamBuffer:
                                        (0546) _EzI2Cs_1_SetRamBuffer:
                                        (0547) 
                                        (0548)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0549)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0550)     RAM_SETPAGE_CUR >EzI2Cs_1_bRAM_Buf_Size     ; Set page to global var page.
                                        (0551)                                                         ; All these globals should be
                                        (0552)                                                         ; on the same page.          
0517: 4F       MOV   X,SP               (0553)     mov   X,SP
0518: 52 FD    MOV   A,[X-3]            (0554)     mov   A,[X+RAMBUF_SIZE]
051A: 53 05    MOV   [0x5],A            (0555)     mov   [EzI2Cs_1_bRAM_Buf_Size],A         ; Store the buffer size
                                        (0556) 
051C: 52 FC    MOV   A,[X-4]            (0557)     mov   A,[X+RW_SIZE]                            ; Store R/W boundary             
051E: 53 06    MOV   [0x6],A            (0558)     mov   [EzI2Cs_1_bRAM_Buf_WSize],A        ; 
                                        (0559)     
0520: 52 FB    MOV   A,[X-5]            (0560)     mov   A,[X+RAMPTR_LSB]                         ; Store only LSB of data pointer
0522: 53 04    MOV   [0x4],A            (0561)     mov   [EzI2Cs_1_pRAM_Buf_Addr_LSB],A     ; 
                                        (0562) 
                                        (0563) IF (SYSTEM_LARGE_MEMORY_MODEL)                             ; Only worry about the address MSB
                                        (0564)                                                            ; if in the large memory Model
0524: 52 FA    MOV   A,[X-6]            (0565)     mov   A,[X+RAMPTR_MSB]                         ; Store only MSB of data pointer
0526: 53 03    MOV   [0x3],A            (0566)     mov   [EzI2Cs_1_pRAM_Buf_Addr_MSB],A     ; 
0528: 70 3F    AND   F,0x3F             
052A: 71 C0    OR    F,0xC0             
                                        (0567) ENDIF
                                        (0568) 
                                        (0569)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0570)     RAM_EPILOGUE RAM_USE_CLASS_4
052C: 7F       RET                      (0571)     ret
                                        (0572) 
                                        (0573) .ENDSECTION
                                        (0574) 
                                        (0575) IF (EzI2Cs_1_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0576) .SECTION
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;  FUNCTION NAME: 
                                        (0579) ;          void EzI2Cs_1_SetRomBuffer(BYTE bSize, BYTE * pAddr)
                                        (0580) ;
                                        (0581) ;  DESCRIPTION:
                                        (0582) ;     Sets the location and size of the I2C ROM buffer.          
                                        (0583) ;
                                        (0584) ;-----------------------------------------------------------------------------
                                        (0585) ;
                                        (0586) ;  ARGUMENTS: 
                                        (0587) ;     [SP-3] =>  Size of data const data structure
                                        (0588) ;     [SP-4] =>  LSB of data pointer
                                        (0589) ;     [SP-5] =>  MSB of data pointer (Only used for large memory model)
                                        (0590) ;
                                        (0591) ;  RETURNS: none
                                        (0592) ;
                                        (0593) ;  SIDE EFFECTS;    
                                        (0594) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0595) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0596) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0597) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0598) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0599) ;          
                                        (0600) ;    Page Pointer Registers Modified: 
                                        (0601) ;          CUR_PP
                                        (0602) ;
                                        (0603) ;  THEORY of OPERATION or PROCEDURE:
                                        (0604) ;
                                        (0605) 
                                        (0606) ; Stack offset constants
                                        (0607) ROMBUF_SIZE:   equ  -3   ; Stack position for data structure size.
                                        (0608) ROMPTR_LSB:    equ  -4   ; Stack position for ROM pointer LSB.   
                                        (0609) ROMPTR_MSB:    equ  -5   ; Stack position for ROM pointer MSB.   
                                        (0610) 
                                        (0611)  EzI2Cs_1_SetRomBuffer:
                                        (0612) _EzI2Cs_1_SetRomBuffer:
                                        (0613) 
                                        (0614)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0615)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0616)     RAM_SETPAGE_CUR >EzI2Cs_1_bROM_Buf_Size     ; Set page to global var page.
                                        (0617)                                                         ; All these globals should be
                                        (0618)                                                         ; on the same page.          
                                        (0619)     mov   X,SP
                                        (0620)     mov   A,[X+ROMBUF_SIZE]
                                        (0621)     mov   [EzI2Cs_1_bROM_Buf_Size],A         ; Store the buffer size
                                        (0622) 
                                        (0623)     mov   A,[X+ROMPTR_LSB]                         ; Store LSB of data pointer
                                        (0624)     mov   [EzI2Cs_1_pROM_Buf_Addr_LSB],A     ; 
                                        (0625)     mov   A,[X+ROMPTR_MSB]                         ; Store MSB of data pointer
                                        (0626)     mov   [EzI2Cs_1_pROM_Buf_Addr_MSB],A     ; 
                                        (0627)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0628)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0629)     ret
                                        (0630) 
                                        (0631) .ENDSECTION
                                        (0632) ENDIF
                                        (0633) 
                                        (0634) IF (EzI2Cs_1_CY8C22x45)
                                        (0635)  .SECTION
                                        (0636) ;-----------------------------------------------------------------------------
                                        (0637) ;  FUNCTION NAME: void  EzI2Cs_1_EnableHWAddrCheck(void)
                                        (0638) ;
                                        (0639) ;  DESCRIPTION:
                                        (0640) ;   Set respective bit to engage the HardWare Address Recognition 
                                        (0641) ;   feature in I2C slave block.
                                        (0642) ;
                                        (0643) ;-----------------------------------------------------------------------------
                                        (0644) ;
                                        (0645) ;  ARGUMENTS: none
                                        (0646) ;
                                        (0647) ;  RETURNS: none
                                        (0648) ;
                                        (0649) ;  SIDE EFFECTS:
                                        (0650) ;    If the HardWare Address Recognition feature is enabled, the ROM registers reading does not work.
                                        (0651) ;    The HardWare Address Recognition feature should be disabled for using ROM registers.
                                        (0652) ;
                                        (0653) ;    The A and X registers may be modified by this or future implementations
                                        (0654) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0655) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0656) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0657) ;    functions.
                                        (0658) ;
                                        (0659)  EzI2Cs_1_EnableHWAddrCheck:
                                        (0660) _EzI2Cs_1_EnableHWAddrCheck:
                                        (0661)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0662)    M8C_SetBank1
                                        (0663)    or    reg[EzI2Cs_1_ADDR_REG], EzI2Cs_1_HW_ADDR_EN
                                        (0664)    M8C_SetBank0
                                        (0665)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0666)    ret
                                        (0667) .ENDSECTION
                                        (0668) 
                                        (0669) .SECTION
                                        (0670) ;-----------------------------------------------------------------------------
                                        (0671) ;  FUNCTION NAME: void  EzI2Cs_1_DisableHWAddrCheck(void)
                                        (0672) ;
                                        (0673) ;  DESCRIPTION:
                                        (0674) ;   Clear respective bit to disengage the HardWare Address Recognition 
                                        (0675) ;   feature in I2C slave block.
                                        (0676) ;
                                        (0677) ;-----------------------------------------------------------------------------
                                        (0678) ;
                                        (0679) ;  ARGUMENTS: none
                                        (0680) ;
                                        (0681) ;  RETURNS: none
                                        (0682) ;
                                        (0683) ;  SIDE EFFECTS:
                                        (0684) ;    The A and X registers may be modified by this or future implementations
                                        (0685) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0686) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0687) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0688) ;    functions.
                                        (0689) ;
                                        (0690)  EzI2Cs_1_DisableHWAddrCheck:
                                        (0691) _EzI2Cs_1_DisableHWAddrCheck:
                                        (0692)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0693)    M8C_SetBank1
                                        (0694)    and   reg[EzI2Cs_1_ADDR_REG], ~EzI2Cs_1_HW_ADDR_EN
                                        (0695)    M8C_SetBank0
                                        (0696)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0697)    ret
                                        (0698) .ENDSECTION
                                        (0699) ENDIF
                                        (0700) 
                                        (0701) ; End of File EzI2Cs_1.asm
FILE: C:\Users\MATSUD~1\DOCUME~1\PSOCDE~1.4PR\DC_MOT~2\DC_MOT~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) void x_motor_control(void);
(0009) void y_motor_control(void);
(0010) void z_motor_control(void);
(0011) 
(0012) unsigned char port1data = 0,port2data = 0;
(0013) 
(0014) struct I2C_Motor
(0015) {
(0016) 	BYTE x_1;
(0017) 	BYTE x_2;
(0018) 	BYTE y_1;
(0019) 	BYTE y_2;
(0020) 	BYTE z_1;
(0021) 	BYTE z_2;
(0022) 	
(0023) } MyI2C_Motor;
(0024) 
(0025) void main(void)
(0026) {
__UserModules_end|__text_start|_main|_main:
  port2data            --> X+1
  port1data            --> X+0
    052D: 10       PUSH  X
    052E: 4F       MOV   X,SP
    052F: 38 02    ADD   SP,0x2
(0027) 
(0028) 	
(0029) 	/*ピンデータの保存変数*/
(0030) 	unsigned char port1data = 0,port2data = 0;
    0531: 56 00 00 MOV   [X+0],0x0
    0534: 56 01 00 MOV   [X+1],0x0
(0031) 	 M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
    0537: 71 01    OR    F,0x1
(0032) 	// Insert your main routine code here.
(0033) 	
(0034) 	/*PWM8の1~6をスタート*/
(0035) 	PWM8_1_Start();
    0539: 10       PUSH  X
    053A: 7C 03 EE LCALL _PWM8_1_DisableInt|_PWM8_1_EnableInt|PWM8_1_Start|_PWM8_1_Start
(0036) 	PWM8_2_Start();
    053D: 7C 03 E6 LCALL PWM8_2_Start|_PWM8_2_EnableInt|_PWM8_2_Start|_PWM8_2_DisableInt
(0037) 	PWM8_3_Start();
    0540: 7C 03 DE LCALL _PWM8_3_EnableInt|_PWM8_3_DisableInt|_PWM8_3_Start|PWM8_3_Start
(0038) 	PWM8_4_Start();
    0543: 7C 03 D6 LCALL _PWM8_4_EnableInt|PWM8_4_Start|_PWM8_4_DisableInt|_PWM8_4_Start
(0039) 	PWM8_5_Start();
    0546: 7C 03 CE LCALL _PWM8_5_EnableInt|_PWM8_5_DisableInt|PWM8_5_Start|_PWM8_5_Start
(0040) 	PWM8_6_Start();
    0549: 7C 03 C6 LCALL _PWM8_6_EnableInt|_PWM8_6_Start|PWM8_6_Start|_PWM8_6_DisableInt
(0041) 	
(0042) 	/*EzI2Cs_1の設定*/
(0043) 	EzI2Cs_1_SetRamBuffer(sizeof(MyI2C_Motor),6, (BYTE *)&MyI2C_Motor);
    054C: 50 00    MOV   A,0x0
    054E: 08       PUSH  A
    054F: 50 08    MOV   A,0x8
    0551: 08       PUSH  A
    0552: 50 06    MOV   A,0x6
    0554: 08       PUSH  A
    0555: 08       PUSH  A
    0556: 7C 05 14 LCALL _EzI2Cs_1_DisableSlave|_EzI2Cs_1_Stop|_EzI2Cs_1_SetRamBuffer|_EzI2Cs_1_DisableInt|EzI2Cs_1_SetRamBuffer
    0559: 38 FC    ADD   SP,0xFC
(0044) 	EzI2Cs_1_Start();
    055B: 7C 04 D8 LCALL _EzI2Cs_1_Start
(0045) 	EzI2Cs_1_EnableInt();
    055E: 7C 05 09 LCALL _EzI2Cs_1_GetActivity|_EzI2Cs_1_ResumeInt|EzI2Cs_1_EnableInt|_EzI2Cs_1_GetAddr|_EzI2Cs_1_EnableInt
    0561: 20       POP   X
    0562: 80 07    JMP   0x056A
(0046) 
(0047) 	/*メイン処理(没)*/
(0048) 	while (1)
(0049) 	{
(0050) 		x_motor_control();
    0564: 90 0B    CALL  _x_motor_control
(0051) 		y_motor_control();
    0566: 90 6B    CALL  _y_motor_control
(0052) 		z_motor_control();
    0568: 90 CD    CALL  _z_motor_control
(0053) 
(0054) 	}
    056A: 8F F9    JMP   0x0564
    056C: 38 FE    ADD   SP,0xFE
    056E: 20       POP   X
    056F: 8F FF    JMP   0x056F
(0055) }
(0056) 
(0057) 
(0058) void x_motor_control(void)
(0059) {
(0060) //		xが入力されてなかったらブレーキ
(0061) 	if ( (MyI2C_Motor.x_1 == 0) && (MyI2C_Motor.x_2 == 0) )
_x_motor_control:
    0571: 62 D0 00 MOV   REG[0xD0],0x0
    0574: 3C 08 00 CMP   [MyI2C_Motor],0x0
    0577: B0 1E    JNZ   0x0596
    0579: 3C 09 00 CMP   [MyI2C_Motor+1],0x0
    057C: B0 19    JNZ   0x0596
    057E: 51 10    MOV   A,[port2data]
    0580: 21 FD    AND   A,0xFD
    0582: 91 03    CALL  <created procedures>
    0584: 21 F7    AND   A,0xF7
    0586: 60 04    MOV   REG[0x4],A
(0062) 	{
(0063) 	
(0064) 		PRT2DR = port2data & ~(1 << 1);
(0065) 		PRT1DR = port1data & ~(1 << 3);
(0066) 		
(0067) 		PWM8_1_WritePulseWidth(255);
    0588: 10       PUSH  X
    0589: 50 FF    MOV   A,0xFF
    058B: 7C 03 F2 LCALL _PWM8_1_Stop|_PWM8_1_WritePeriod|PWM8_1_WritePulseWidth|_PWM8_1_WritePulseWidth
(0068) 		PWM8_2_WritePulseWidth(255);
    058E: 50 FF    MOV   A,0xFF
    0590: 7C 03 EA LCALL _PWM8_2_WritePulseWidth|_PWM8_2_Stop|PWM8_2_WritePulseWidth|_PWM8_2_WritePeriod
    0593: 20       POP   X
(0069) 
(0070) 	}
    0594: 80 3D    JMP   0x05D2
(0071) 	
(0072) //		x軸モータ駆動
(0073) 	else if(MyI2C_Motor.x_2 == 0)
    0596: 62 D0 00 MOV   REG[0xD0],0x0
    0599: 3C 09 00 CMP   [MyI2C_Motor+1],0x0
    059C: B0 18    JNZ   0x05B5
    059E: 51 10    MOV   A,[port2data]
    05A0: 29 02    OR    A,0x2
    05A2: 60 08    MOV   REG[0x8],A
(0074) 	{
(0075) 		
(0076) 		PRT2DR = port2data | (1 << 1);
(0077) //		PRT1DR = port1data | (1 << 3);
(0078) 		
(0079) 		PWM8_1_WritePulseWidth(MyI2C_Motor.x_1);
    05A4: 10       PUSH  X
    05A5: 51 08    MOV   A,[MyI2C_Motor]
    05A7: 7C 03 F2 LCALL _PWM8_1_Stop|_PWM8_1_WritePeriod|PWM8_1_WritePulseWidth|_PWM8_1_WritePulseWidth
(0080) 		PWM8_2_WritePulseWidth(MyI2C_Motor.x_2);
    05AA: 62 D0 00 MOV   REG[0xD0],0x0
    05AD: 51 09    MOV   A,[MyI2C_Motor+1]
    05AF: 7C 03 EA LCALL _PWM8_2_WritePulseWidth|_PWM8_2_Stop|PWM8_2_WritePulseWidth|_PWM8_2_WritePeriod
    05B2: 20       POP   X
(0081) 	}
    05B3: 80 1E    JMP   0x05D2
(0082) 	else if(MyI2C_Motor.x_1 == 0)
    05B5: 62 D0 00 MOV   REG[0xD0],0x0
    05B8: 3C 08 00 CMP   [MyI2C_Motor],0x0
    05BB: B0 16    JNZ   0x05D2
    05BD: 51 11    MOV   A,[port1data]
    05BF: 29 08    OR    A,0x8
    05C1: 60 04    MOV   REG[0x4],A
(0083) 	{
(0084) 		
(0085) //		PRT2DR = port2data | (1 << 1);
(0086) 		PRT1DR = port1data | (1 << 3);
(0087) 		
(0088) 		PWM8_1_WritePulseWidth(MyI2C_Motor.x_1);
    05C3: 10       PUSH  X
    05C4: 51 08    MOV   A,[MyI2C_Motor]
    05C6: 7C 03 F2 LCALL _PWM8_1_Stop|_PWM8_1_WritePeriod|PWM8_1_WritePulseWidth|_PWM8_1_WritePulseWidth
(0089) 		PWM8_2_WritePulseWidth(MyI2C_Motor.x_2);
    05C9: 62 D0 00 MOV   REG[0xD0],0x0
    05CC: 51 09    MOV   A,[MyI2C_Motor+1]
    05CE: 7C 03 EA LCALL _PWM8_2_WritePulseWidth|_PWM8_2_Stop|PWM8_2_WritePulseWidth|_PWM8_2_WritePeriod
    05D1: 20       POP   X
(0090) 	}
    05D2: 7F       RET   
(0091) }
(0092) 
(0093) 
(0094) void y_motor_control(void)
(0095) {
(0096) //		yが入力されてなかったらブレーキ	
(0097) 	if ((MyI2C_Motor.y_1 == 0)&&(MyI2C_Motor.y_2 == 0)){
_y_motor_control:
    05D3: 62 D0 00 MOV   REG[0xD0],0x0
    05D6: 3C 0A 00 CMP   [MyI2C_Motor+2],0x0
    05D9: B0 20    JNZ   0x05FA
    05DB: 3C 0B 00 CMP   [MyI2C_Motor+3],0x0
    05DE: B0 1B    JNZ   0x05FA
    05E0: 51 10    MOV   A,[port2data]
    05E2: 21 DF    AND   A,0xDF
    05E4: 60 08    MOV   REG[0x8],A
(0098) 	
(0099) 		PRT2DR = port2data & ~(1 << 5);
(0100) 		PRT2DR = port2data & ~(1 << 7);
    05E6: 51 10    MOV   A,[port2data]
    05E8: 21 7F    AND   A,0x7F
    05EA: 60 08    MOV   REG[0x8],A
(0101) 		
(0102) 		PWM8_3_WritePulseWidth(255);
    05EC: 10       PUSH  X
    05ED: 50 FF    MOV   A,0xFF
    05EF: 7C 03 E2 LCALL _PWM8_3_Stop|_PWM8_3_WritePeriod|PWM8_3_WritePulseWidth|_PWM8_3_WritePulseWidth
(0103) 		PWM8_4_WritePulseWidth(255);
    05F2: 50 FF    MOV   A,0xFF
    05F4: 7C 03 DA LCALL _PWM8_4_Stop|_PWM8_4_WritePeriod|_PWM8_4_WritePulseWidth|PWM8_4_WritePulseWidth
    05F7: 20       POP   X
(0104) 	}
    05F8: 80 3D    JMP   0x0636
(0105) 		
(0106) //		y軸モータ駆動
(0107) 	else if (MyI2C_Motor.y_2 == 0){
    05FA: 62 D0 00 MOV   REG[0xD0],0x0
    05FD: 3C 0B 00 CMP   [MyI2C_Motor+3],0x0
    0600: B0 18    JNZ   0x0619
    0602: 51 10    MOV   A,[port2data]
    0604: 29 20    OR    A,0x20
    0606: 60 08    MOV   REG[0x8],A
(0108) 		
(0109) 		PRT2DR = port2data | (1 << 5);
(0110) //		PRT2DR = port2data | (1 << 7);
(0111) 		
(0112) 		PWM8_3_WritePulseWidth(MyI2C_Motor.y_1);
    0608: 10       PUSH  X
    0609: 51 0A    MOV   A,[MyI2C_Motor+2]
    060B: 7C 03 E2 LCALL _PWM8_3_Stop|_PWM8_3_WritePeriod|PWM8_3_WritePulseWidth|_PWM8_3_WritePulseWidth
(0113) 		PWM8_4_WritePulseWidth(MyI2C_Motor.y_2);
    060E: 62 D0 00 MOV   REG[0xD0],0x0
    0611: 51 0B    MOV   A,[MyI2C_Motor+3]
    0613: 7C 03 DA LCALL _PWM8_4_Stop|_PWM8_4_WritePeriod|_PWM8_4_WritePulseWidth|PWM8_4_WritePulseWidth
    0616: 20       POP   X
(0114) 
(0115) 	}
    0617: 80 1E    JMP   0x0636
(0116) 	else if (MyI2C_Motor.y_1 == 0){
    0619: 62 D0 00 MOV   REG[0xD0],0x0
    061C: 3C 0A 00 CMP   [MyI2C_Motor+2],0x0
    061F: B0 16    JNZ   0x0636
    0621: 51 10    MOV   A,[port2data]
    0623: 29 80    OR    A,0x80
    0625: 60 08    MOV   REG[0x8],A
(0117) 		
(0118) //		PRT2DR = port2data | (1 << 5);
(0119) 		PRT2DR = port2data | (1 << 7);
(0120) 		
(0121) 		PWM8_3_WritePulseWidth(MyI2C_Motor.y_1);
    0627: 10       PUSH  X
    0628: 51 0A    MOV   A,[MyI2C_Motor+2]
    062A: 7C 03 E2 LCALL _PWM8_3_Stop|_PWM8_3_WritePeriod|PWM8_3_WritePulseWidth|_PWM8_3_WritePulseWidth
(0122) 		PWM8_4_WritePulseWidth(MyI2C_Motor.y_2);
    062D: 62 D0 00 MOV   REG[0xD0],0x0
    0630: 51 0B    MOV   A,[MyI2C_Motor+3]
    0632: 7C 03 DA LCALL _PWM8_4_Stop|_PWM8_4_WritePeriod|_PWM8_4_WritePulseWidth|PWM8_4_WritePulseWidth
    0635: 20       POP   X
(0123) 
(0124) 	}
    0636: 7F       RET   
(0125) }
(0126) 
(0127) void z_motor_control(void)
(0128) {
(0129) //				zが入力されてなかったらブレーキ
(0130) 	if ((MyI2C_Motor.z_1 == 0)&&(MyI2C_Motor.z_2 == 0)){
_z_motor_control:
    0637: 62 D0 00 MOV   REG[0xD0],0x0
    063A: 3C 0C 00 CMP   [MyI2C_Motor+4],0x0
    063D: B0 1E    JNZ   0x065C
    063F: 3C 0D 00 CMP   [MyI2C_Motor+5],0x0
    0642: B0 19    JNZ   0x065C
    0644: 51 10    MOV   A,[port2data]
    0646: 21 FE    AND   A,0xFE
    0648: 90 3D    CALL  <created procedures>
    064A: 21 BF    AND   A,0xBF
    064C: 60 04    MOV   REG[0x4],A
(0131) 		
(0132) 		PRT2DR = port2data & ~(1 << 0);
(0133) 		PRT1DR = port1data & ~(1 << 6);
(0134) 		
(0135) 		PWM8_5_WritePulseWidth(255);
    064E: 10       PUSH  X
    064F: 50 FF    MOV   A,0xFF
    0651: 7C 03 D2 LCALL _PWM8_5_WritePulseWidth|_PWM8_5_WritePeriod|_PWM8_5_Stop
(0136) 		PWM8_6_WritePulseWidth(255);
    0654: 50 FF    MOV   A,0xFF
    0656: 7C 03 CA LCALL PWM8_6_WritePulseWidth|_PWM8_6_WritePeriod|_PWM8_6_Stop|_PWM8_6_WritePulseWidth
    0659: 20       POP   X
(0137) 
(0138) 	}
    065A: 80 2A    JMP   0x0685
(0139) 		
(0140) //		z軸モータ駆動
(0141) 	else if((MyI2C_Motor.z_1 == 0)||(MyI2C_Motor.z_2 == 0)){
    065C: 62 D0 00 MOV   REG[0xD0],0x0
    065F: 3C 0C 00 CMP   [MyI2C_Motor+4],0x0
    0662: A0 06    JZ    0x0669
    0664: 3C 0D 00 CMP   [MyI2C_Motor+5],0x0
    0667: B0 1D    JNZ   0x0685
(0142) 		
(0143) 		PRT2DR = port2data | (1 << 0);
    0669: 62 D0 00 MOV   REG[0xD0],0x0
    066C: 51 10    MOV   A,[port2data]
    066E: 29 01    OR    A,0x1
    0670: 90 15    CALL  <created procedures>
    0672: 29 40    OR    A,0x40
    0674: 60 04    MOV   REG[0x4],A
(0144) 		PRT1DR = port1data | (1 << 6);
(0145) 			
(0146) 		PWM8_5_WritePulseWidth(MyI2C_Motor.z_1);
    0676: 10       PUSH  X
    0677: 51 0C    MOV   A,[MyI2C_Motor+4]
    0679: 7C 03 D2 LCALL _PWM8_5_WritePulseWidth|_PWM8_5_WritePeriod|_PWM8_5_Stop
(0147) 		PWM8_6_WritePulseWidth(MyI2C_Motor.z_2);
    067C: 62 D0 00 MOV   REG[0xD0],0x0
    067F: 51 0D    MOV   A,[MyI2C_Motor+5]
    0681: 7C 03 CA LCALL PWM8_6_WritePulseWidth|_PWM8_6_WritePeriod|_PWM8_6_Stop|_PWM8_6_WritePulseWidth
    0684: 20       POP   X
(0148) 
(0149) 	}
    0685: 7F       RET   
(0150) 
(0151) }    0686: 30       HALT  
<created procedures>:
    0687: 60 08    MOV   REG[0x8],A
    0689: 62 D0 00 MOV   REG[0xD0],0x0
    068C: 51 11    MOV   A,[port1data]
    068E: 7F       RET   
