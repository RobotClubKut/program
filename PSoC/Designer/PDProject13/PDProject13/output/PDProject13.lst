FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 07 9E LJMP  _ADCINC_1_ADConversion_ISR(0149)     ljmp	_ADCINC_1_ADConversion_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 04 C8 LJMP  _PWM8_1_ISR        (0153)     ljmp	_PWM8_1_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 04 81 LJMP  _PWM8_2_ISR        (0157)     ljmp	_PWM8_2_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
0064: 7D 03 C7 LJMP  _SleepTimer_1_ISR  (0217)     ljmp	_SleepTimer_1_ISR
0067: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [0xF8],0x0         (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [0xF9],0x0         (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 03 5C LCALL 0x035C             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 02    MOV   A,0x2              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 55    MOV   X,0x55             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 18    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 18    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 18    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 17    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 18    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 18 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 17    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 17    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 18    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 18 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 17    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 09 0E LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
0257: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_pdproject13_Bank1
                                        (0019) export LoadConfigTBL_pdproject13_Bank0
                                        (0020) export LoadConfigTBL_pdproject13_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_pdproject13_Bank0:
                                        (0023) ;  Instance name ADCINC_1, User Module ADCINC
                                        (0024) ;       Instance name ADCINC_1, Block Name ADC(ASC10)
                                        (0025) 	db		80h, 90h		;ADCINC_1_AtoDcr0(ASC10CR0)
                                        (0026) 	db		81h, e0h		;ADCINC_1_AtoDcr1(ASC10CR1)
                                        (0027) 	db		82h, 60h		;ADCINC_1_AtoDcr2(ASC10CR2)
                                        (0028) 	db		83h, f8h		;ADCINC_1_AtoDcr3(ASC10CR3)
                                        (0029) ;       Instance name ADCINC_1, Block Name PWM(DBB00)
                                        (0030) 	db		23h, 00h		;ADCINC_1_PWMcr0(DBB00CR0)
                                        (0031) 	db		21h, 00h		;ADCINC_1_PWMdr1(DBB00DR1)
                                        (0032) 	db		22h, 01h		;ADCINC_1_PWMdr2(DBB00DR2)
                                        (0033) ;  Instance name LCD_1, User Module LCD
                                        (0034) ;  Instance name PWM8_1, User Module PWM8
                                        (0035) ;       Instance name PWM8_1, Block Name PWM8(DBB01)
                                        (0036) 	db		27h, 00h		;PWM8_1_CONTROL_REG(DBB01CR0)
                                        (0037) 	db		25h, ffh		;PWM8_1_PERIOD_REG(DBB01DR1)
                                        (0038) 	db		26h, 00h		;PWM8_1_COMPARE_REG(DBB01DR2)
                                        (0039) ;  Instance name PWM8_2, User Module PWM8
                                        (0040) ;       Instance name PWM8_2, Block Name PWM8(DCB02)
                                        (0041) 	db		2bh, 00h		;PWM8_2_CONTROL_REG(DCB02CR0)
                                        (0042) 	db		29h, ffh		;PWM8_2_PERIOD_REG(DCB02DR1)
                                        (0043) 	db		2ah, 00h		;PWM8_2_COMPARE_REG(DCB02DR2)
                                        (0044) ;  Instance name SleepTimer_1, User Module SleepTimer
                                        (0045) ;  Global Register values Bank 0
                                        (0046) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0047) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0048) 	db		63h, 15h		; AnalogReferenceControl register (ARF_CR)
                                        (0049) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0050) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0051) 	db		e7h, 42h		; DecimatorControl_1 register (DEC_CR1)
                                        (0052) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0053) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0054) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0055) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0056) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0057) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0058) 	db		b5h, 44h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0059) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0060) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0061) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0062) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0063) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0064) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0065) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0066) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0067) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0068) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0069) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0070) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0071) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0072) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0073) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0074) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0075) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0076) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0077) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0078) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0079) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0080) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0081) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0082) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0083) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0084) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0085) 	db		ffh
                                        (0086) LoadConfigTBL_pdproject13_Bank1:
                                        (0087) ;  Instance name ADCINC_1, User Module ADCINC
                                        (0088) ;       Instance name ADCINC_1, Block Name ADC(ASC10)
                                        (0089) ;       Instance name ADCINC_1, Block Name PWM(DBB00)
                                        (0090) 	db		20h, 31h		;ADCINC_1_PWMfn(DBB00FN)
                                        (0091) 	db		21h, 15h		;ADCINC_1_PWMsl(DBB00IN)
                                        (0092) 	db		22h, 40h		;ADCINC_1_PWMos(DBB00OU)
                                        (0093) ;  Instance name LCD_1, User Module LCD
                                        (0094) ;  Instance name PWM8_1, User Module PWM8
                                        (0095) ;       Instance name PWM8_1, Block Name PWM8(DBB01)
                                        (0096) 	db		24h, 29h		;PWM8_1_FUNC_REG(DBB01FN)
                                        (0097) 	db		25h, 16h		;PWM8_1_INPUT_REG(DBB01IN)
                                        (0098) 	db		26h, 44h		;PWM8_1_OUTPUT_REG(DBB01OU)
                                        (0099) ;  Instance name PWM8_2, User Module PWM8
                                        (0100) ;       Instance name PWM8_2, Block Name PWM8(DCB02)
                                        (0101) 	db		28h, 29h		;PWM8_2_FUNC_REG(DCB02FN)
                                        (0102) 	db		29h, 16h		;PWM8_2_INPUT_REG(DCB02IN)
                                        (0103) 	db		2ah, 45h		;PWM8_2_OUTPUT_REG(DCB02OU)
                                        (0104) ;  Instance name SleepTimer_1, User Module SleepTimer
                                        (0105) ;  Global Register values Bank 1
                                        (0106) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0107) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0108) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0109) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0110) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0111) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0112) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0113) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0114) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0115) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0116) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0117) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0118) 	db		e1h, f1h		; OscillatorControl_1 register (OSC_CR1)
                                        (0119) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0120) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0121) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0122) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0123) 	db		e7h, 48h		; Type2Decimator_Control register (DEC_CR2)
                                        (0124) 	db		ffh
                                        (0125) AREA psoc_config(rom, rel)
                                        (0126) LoadConfigTBL_pdproject13_Ordered:
                                        (0127) ;  Ordered Global Register values
                                        (0128) 	M8C_SetBank0
0259: 62 00 00 MOV   REG[0x0],0x0       (0129) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
025C: 71 10    OR    F,0x10             
                                        (0130) 	M8C_SetBank1
025E: 62 00 7F MOV   REG[0x0],0x7F      (0131) 	mov	reg[00h], 7fh		; Port_0_DriveMode_0 register (PRT0DM0)
0261: 62 01 80 MOV   REG[0x1],0x80      (0132) 	mov	reg[01h], 80h		; Port_0_DriveMode_1 register (PRT0DM1)
0264: 70 EF    AND   F,0xEF             
                                        (0133) 	M8C_SetBank0
0266: 62 03 80 MOV   REG[0x3],0x80      (0134) 	mov	reg[03h], 80h		; Port_0_DriveMode_2 register (PRT0DM2)
0269: 62 02 00 MOV   REG[0x2],0x0       (0135) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
026C: 71 10    OR    F,0x10             
                                        (0136) 	M8C_SetBank1
026E: 62 02 00 MOV   REG[0x2],0x0       (0137) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0271: 62 03 00 MOV   REG[0x3],0x0       (0138) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0274: 70 EF    AND   F,0xEF             
                                        (0139) 	M8C_SetBank0
0276: 62 01 00 MOV   REG[0x1],0x0       (0140) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0279: 62 04 00 MOV   REG[0x4],0x0       (0141) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
027C: 71 10    OR    F,0x10             
                                        (0142) 	M8C_SetBank1
027E: 62 04 03 MOV   REG[0x4],0x3       (0143) 	mov	reg[04h], 03h		; Port_1_DriveMode_0 register (PRT1DM0)
0281: 62 05 FC MOV   REG[0x5],0xFC      (0144) 	mov	reg[05h], fch		; Port_1_DriveMode_1 register (PRT1DM1)
0284: 70 EF    AND   F,0xEF             
                                        (0145) 	M8C_SetBank0
0286: 62 07 FC MOV   REG[0x7],0xFC      (0146) 	mov	reg[07h], fch		; Port_1_DriveMode_2 register (PRT1DM2)
0289: 62 06 03 MOV   REG[0x6],0x3       (0147) 	mov	reg[06h], 03h		; Port_1_GlobalSelect register (PRT1GS)
028C: 71 10    OR    F,0x10             
                                        (0148) 	M8C_SetBank1
028E: 62 06 00 MOV   REG[0x6],0x0       (0149) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0291: 62 07 00 MOV   REG[0x7],0x0       (0150) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0294: 70 EF    AND   F,0xEF             
                                        (0151) 	M8C_SetBank0
0296: 62 05 00 MOV   REG[0x5],0x0       (0152) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0299: 62 08 00 MOV   REG[0x8],0x0       (0153) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
029C: 71 10    OR    F,0x10             
                                        (0154) 	M8C_SetBank1
029E: 62 08 00 MOV   REG[0x8],0x0       (0155) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
02A1: 62 09 EB MOV   REG[0x9],0xEB      (0156) 	mov	reg[09h], ebh		; Port_2_DriveMode_1 register (PRT2DM1)
02A4: 70 EF    AND   F,0xEF             
                                        (0157) 	M8C_SetBank0
02A6: 62 0B EB MOV   REG[0xB],0xEB      (0158) 	mov	reg[0bh], ebh		; Port_2_DriveMode_2 register (PRT2DM2)
02A9: 62 0A 00 MOV   REG[0xA],0x0       (0159) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
02AC: 71 10    OR    F,0x10             
                                        (0160) 	M8C_SetBank1
02AE: 62 0A 00 MOV   REG[0xA],0x0       (0161) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
02B1: 62 0B 00 MOV   REG[0xB],0x0       (0162) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
02B4: 70 EF    AND   F,0xEF             
                                        (0163) 	M8C_SetBank0
02B6: 62 09 00 MOV   REG[0x9],0x0       (0164) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
02B9: 62 0C 00 MOV   REG[0xC],0x0       (0165) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
02BC: 71 10    OR    F,0x10             
                                        (0166) 	M8C_SetBank1
02BE: 62 0C 00 MOV   REG[0xC],0x0       (0167) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
02C1: 62 0D 00 MOV   REG[0xD],0x0       (0168) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
02C4: 70 EF    AND   F,0xEF             
                                        (0169) 	M8C_SetBank0
02C6: 62 0F 00 MOV   REG[0xF],0x0       (0170) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02C9: 62 0E 00 MOV   REG[0xE],0x0       (0171) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02CC: 71 10    OR    F,0x10             
                                        (0172) 	M8C_SetBank1
02CE: 62 0E 00 MOV   REG[0xE],0x0       (0173) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02D1: 62 0F 00 MOV   REG[0xF],0x0       (0174) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02D4: 70 EF    AND   F,0xEF             
                                        (0175) 	M8C_SetBank0
02D6: 62 0D 00 MOV   REG[0xD],0x0       (0176) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02D9: 62 10 00 MOV   REG[0x10],0x0      (0177) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02DC: 71 10    OR    F,0x10             
                                        (0178) 	M8C_SetBank1
02DE: 62 10 00 MOV   REG[0x10],0x0      (0179) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02E1: 62 11 00 MOV   REG[0x11],0x0      (0180) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02E4: 70 EF    AND   F,0xEF             
                                        (0181) 	M8C_SetBank0
02E6: 62 13 00 MOV   REG[0x13],0x0      (0182) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02E9: 62 12 00 MOV   REG[0x12],0x0      (0183) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02EC: 71 10    OR    F,0x10             
                                        (0184) 	M8C_SetBank1
02EE: 62 12 00 MOV   REG[0x12],0x0      (0185) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02F1: 62 13 00 MOV   REG[0x13],0x0      (0186) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02F4: 70 EF    AND   F,0xEF             
                                        (0187) 	M8C_SetBank0
02F6: 62 11 00 MOV   REG[0x11],0x0      (0188) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02F9: 62 14 00 MOV   REG[0x14],0x0      (0189) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02FC: 71 10    OR    F,0x10             
                                        (0190) 	M8C_SetBank1
02FE: 62 14 00 MOV   REG[0x14],0x0      (0191) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0301: 62 15 00 MOV   REG[0x15],0x0      (0192) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0304: 70 EF    AND   F,0xEF             
                                        (0193) 	M8C_SetBank0
0306: 62 17 00 MOV   REG[0x17],0x0      (0194) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0309: 62 16 00 MOV   REG[0x16],0x0      (0195) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
030C: 71 10    OR    F,0x10             
                                        (0196) 	M8C_SetBank1
030E: 62 16 00 MOV   REG[0x16],0x0      (0197) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0311: 62 17 00 MOV   REG[0x17],0x0      (0198) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0314: 70 EF    AND   F,0xEF             
                                        (0199) 	M8C_SetBank0
0316: 62 15 00 MOV   REG[0x15],0x0      (0200) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0319: 62 18 00 MOV   REG[0x18],0x0      (0201) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
031C: 71 10    OR    F,0x10             
                                        (0202) 	M8C_SetBank1
031E: 62 18 00 MOV   REG[0x18],0x0      (0203) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0321: 62 19 00 MOV   REG[0x19],0x0      (0204) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0324: 70 EF    AND   F,0xEF             
                                        (0205) 	M8C_SetBank0
0326: 62 1B 00 MOV   REG[0x1B],0x0      (0206) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0329: 62 1A 00 MOV   REG[0x1A],0x0      (0207) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
032C: 71 10    OR    F,0x10             
                                        (0208) 	M8C_SetBank1
032E: 62 1A 00 MOV   REG[0x1A],0x0      (0209) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0331: 62 1B 00 MOV   REG[0x1B],0x0      (0210) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0334: 70 EF    AND   F,0xEF             
                                        (0211) 	M8C_SetBank0
0336: 62 19 00 MOV   REG[0x19],0x0      (0212) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0339: 62 1C 00 MOV   REG[0x1C],0x0      (0213) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
033C: 71 10    OR    F,0x10             
                                        (0214) 	M8C_SetBank1
033E: 62 1C 00 MOV   REG[0x1C],0x0      (0215) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0341: 62 1D 00 MOV   REG[0x1D],0x0      (0216) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0344: 70 EF    AND   F,0xEF             
                                        (0217) 	M8C_SetBank0
0346: 62 1F 00 MOV   REG[0x1F],0x0      (0218) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0349: 62 1E 00 MOV   REG[0x1E],0x0      (0219) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
034C: 71 10    OR    F,0x10             
                                        (0220) 	M8C_SetBank1
034E: 62 1E 00 MOV   REG[0x1E],0x0      (0221) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0351: 62 1F 00 MOV   REG[0x1F],0x0      (0222) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0354: 70 EF    AND   F,0xEF             
                                        (0223) 	M8C_SetBank0
0356: 62 1D 00 MOV   REG[0x1D],0x0      (0224) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0359: 70 EF    AND   F,0xEF             
                                        (0225) 	M8C_SetBank0
035B: 7F       RET                      (0226) 	ret
                                        (0227) 
                                        (0228) 
                                        (0229) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_pdproject13
                                        (0026) export _LoadConfig_pdproject13
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_0_DriveMode_0_SHADE
                                        (0030) export _Port_0_DriveMode_0_SHADE
                                        (0031) export Port_0_DriveMode_1_SHADE
                                        (0032) export _Port_0_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
035C: 55 07 00 MOV   [0x7],0x0          (0065) 	mov		[Port_0_Data_SHADE], 0h
035F: 55 08 7F MOV   [0x8],0x7F         (0066) 	mov		[Port_0_DriveMode_0_SHADE], 7fh
0362: 55 09 80 MOV   [0x9],0x80         (0067) 	mov		[Port_0_DriveMode_1_SHADE], 80h
                                        (0068) 
0365: 7C 03 6C LCALL 0x036C             (0069) 	lcall	LoadConfig_pdproject13
0368: 7C 02 57 LCALL 0x0257             (0070) 	lcall	LoadConfigTBL_pdproject13_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
036B: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration pdproject13
                                        (0078) ;
                                        (0079) ;    Load configuration registers for pdproject13.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_pdproject13:
                                        (0096)  LoadConfig_pdproject13:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
036C: 10       PUSH  X                  (0099) 	push	x
036D: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
036F: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
0371: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
0372: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_pdproject13_Bank0
0374: 57 B5    MOV   X,0xB5             (0105)     mov     X, <LoadConfigTBL_pdproject13_Bank0
0376: 7C 03 87 LCALL 0x0387             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
0379: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
037B: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
037C: 50 02    MOV   A,0x2              (0111)     mov     A, >LoadConfigTBL_pdproject13_Bank1
037E: 57 1E    MOV   X,0x1E             (0112)     mov     X, <LoadConfigTBL_pdproject13_Bank1
0380: 7C 03 87 LCALL 0x0387             (0113)     lcall   LoadConfig              ; Load the bank 1 values
0383: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
0385: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
0386: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
0387: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
0389: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
038A: 08       PUSH  A                  (0143)     push    A
038B: 4F       MOV   X,SP               (0144)     mov     X, SP
038C: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
038F: D0 04    JNC   0x0394             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0391: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
0394: 18       POP   A                  (0149)     pop     A
0395: 20       POP   X                  (0150)     pop     X
0396: 70 EF    AND   F,0xEF             
0398: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
039B: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
039C: 08       PUSH  A                  (0156)     push    A
039D: 28       ROMX                     (0157)     romx                            ; Load register address from table
039E: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
03A0: A0 1F    JZ    0x03C0             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
03A2: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
03A3: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
03A6: A0 03    JZ    0x03AA             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03A8: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
03AA: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
03AC: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
03AD: 20       POP   X                  (0167)     pop     X
03AE: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
03AF: 09 00    ADC   A,0x0              (0169)     adc     A, 0
03B1: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
03B2: 08       PUSH  A                  (0171)     push    A
03B3: 28       ROMX                     (0172)     romx                            ; load config data from the table
03B4: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
03B5: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
03B7: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
03B9: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
03BA: 20       POP   X                  (0177)     pop     X
03BB: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
03BC: 09 00    ADC   A,0x0              (0179)     adc     A, 0
03BE: 8F D7    JMP   0x0396             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
03C0: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
03C2: 70 3F    AND   F,0x3F             
03C4: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
03C6: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_0_Data_SHADE:
                                        (0192) Port_0_Data_SHADE:	BLK	1
                                        (0193) _Port_0_DriveMode_0_SHADE:
                                        (0194) Port_0_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_0_DriveMode_1_SHADE:
                                        (0196) Port_0_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\sleeptimer_1int.asm           (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SleepTimer_1INT.asm
                                        (0004) ;;  Version: 1.0, Updated on 2013/5/19 at 10:44:14
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "SleepTimer_1.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "m8c.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  _SleepTimer_1_ISR
                                        (0021) 
                                        (0022) 
                                        (0023) export  SleepTimer_1_fTick
                                        (0024) export _SleepTimer_1_fTick
                                        (0025) export  SleepTimer_1_bTimerValue
                                        (0026) export _SleepTimer_1_bTimerValue
                                        (0027) export  SleepTimer_1_bCountDown
                                        (0028) export _SleepTimer_1_bCountDown
                                        (0029) export  SleepTimer_1_TickCount
                                        (0030) export _SleepTimer_1_TickCount
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ; Variable Allocation
                                        (0034) ;-----------------------------------------------
                                        (0035) AREA InterruptRAM (RAM, REL, CON)
                                        (0036) 
                                        (0037)  SleepTimer_1_fTick:
                                        (0038) _SleepTimer_1_fTick:        BLK  1
                                        (0039) 
                                        (0040)  SleepTimer_1_bTimerValue:
                                        (0041) _SleepTimer_1_bTimerValue:  BLK  1
                                        (0042) 
                                        (0043)  SleepTimer_1_bCountDown:
                                        (0044) _SleepTimer_1_bCountDown:   BLK  1
                                        (0045) 
                                        (0046)  SleepTimer_1_TickCount:
                                        (0047) _SleepTimer_1_TickCount:    BLK  SleepTimer_1_TICK_CNTR_SIZE
                                        (0048) 
                                        (0049) 
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _SleepTimer_1_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;      interrupt handler for instance SleepTimer_1.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _SleepTimer_1_ISR:
                                        (0090) 
03C7: 2E 00 01 OR    [0x0],0x1          (0091)    or   [SleepTimer_1_fTick],0x01           ; Set tick flag
                                        (0092)  
                                        (0093)                                                 ; Decrement CountDown (Sync counter)
03CA: 47 02 FF TST   [0x2],0xFF         (0094)    tst  [SleepTimer_1_bCountDown],0xFF
03CD: A0 03    JZ    0x03D1             (0095)    jz   .DoTimer
03CF: 7A 02    DEC   [0x2]              (0096)    dec  [SleepTimer_1_bCountDown]
                                        (0097) 
                                        (0098) .DoTimer:                                       ; Decrement TimerValue, if required
03D1: 47 01 FF TST   [0x1],0xFF         (0099)    tst  [SleepTimer_1_bTimerValue],0xFF
03D4: A0 03    JZ    0x03D8             (0100)    jz   .IncBigCounter
03D6: 7A 01    DEC   [0x1]              (0101)    dec  [SleepTimer_1_bTimerValue]
                                        (0102) 
                                        (0103) .IncBigCounter:                                 ; Increment big tick counter
                                        (0104) IF (SleepTimer_1_TICK_CNTR_SIZE & 0x04)
03D8: 76 06    INC   [0x6]              (0105)    inc  [SleepTimer_1_TickCount+3]
03DA: D0 0B    JNC   0x03E6             (0106)    jnc  SleepTimer_1_SLEEP_ISR_END
                                        (0107) 
03DC: 76 05    INC   [0x5]              (0108)    inc  [SleepTimer_1_TickCount+2]
03DE: D0 07    JNC   0x03E6             (0109)    jnc  SleepTimer_1_SLEEP_ISR_END
                                        (0110) ENDIF
                                        (0111) 
                                        (0112) IF (SleepTimer_1_TICK_CNTR_SIZE & (0x04|0x02))
03E0: 76 04    INC   [0x4]              (0113)    inc  [SleepTimer_1_TickCount+1]
03E2: D0 03    JNC   0x03E6             (0114)    jnc  SleepTimer_1_SLEEP_ISR_END
                                        (0115) ENDIF
                                        (0116) 
03E4: 76 03    INC   [0x3]              (0117)    inc  [SleepTimer_1_TickCount+0]
                                        (0118) 
                                        (0119) SleepTimer_1_SLEEP_ISR_END:
                                        (0120) 
                                        (0121)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ; Insert your custom assembly code below this banner
                                        (0124)    ;---------------------------------------------------
                                        (0125)    ;   NOTE: interrupt service routines must preserve
                                        (0126)    ;   the values of the A and X CPU registers.
                                        (0127)    
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ; Insert your custom assembly code above this banner
                                        (0130)    ;---------------------------------------------------
                                        (0131)    
                                        (0132)    ;---------------------------------------------------
                                        (0133)    ; Insert a lcall to a C function below this banner
                                        (0134)    ; and un-comment the lines between these banners
                                        (0135)    ;---------------------------------------------------
                                        (0136)    
                                        (0137)    ;PRESERVE_CPU_CONTEXT
                                        (0138)    ;lcall _My_C_Function
                                        (0139)    ;RESTORE_CPU_CONTEXT
                                        (0140)    
                                        (0141)    ;---------------------------------------------------
                                        (0142)    ; Insert a lcall to a C function above this banner
                                        (0143)    ; and un-comment the lines between these banners
                                        (0144)    ;---------------------------------------------------
                                        (0145)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0146) 
03E6: 7E       RETI                     (0147)    reti
                                        (0148) 
                                        (0149) ; end of file SleepTimer_1INT.asm
                                        (0150) 
FILE: lib\sleeptimer_1.asm              (0001) ;;*****************************************************************************
03E7: 43 E0 40 OR    REG[0xE0],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  Filename:   SleepTimer_1.asm
                                        (0004) ;;  Version: 1.0, Updated on 2013/5/19 at 10:44:14
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer User Module software implementation file for the
                                        (0008) ;;                22/24/27/29xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "SleepTimer_1.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name reference for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  SleepTimer_1_EnableInt
                                        (0041) export _SleepTimer_1_EnableInt
                                        (0042) export  SleepTimer_1_DisableInt
                                        (0043) export _SleepTimer_1_DisableInt
                                        (0044) 
                                        (0045) export  SleepTimer_1_Start
                                        (0046) export _SleepTimer_1_Start
                                        (0047) export  SleepTimer_1_Stop
                                        (0048) export _SleepTimer_1_Stop
                                        (0049) 
                                        (0050) export  SleepTimer_1_TickWait
                                        (0051) export _SleepTimer_1_TickWait
                                        (0052) 
                                        (0053) export  SleepTimer_1_SyncWait
                                        (0054) export _SleepTimer_1_SyncWait
                                        (0055) 
                                        (0056) export  SleepTimer_1_SetInterval
                                        (0057) export _SleepTimer_1_SetInterval
                                        (0058) 	
                                        (0059) export  SleepTimer_1_bGetTickCntr
                                        (0060) export _SleepTimer_1_bGetTickCntr
                                        (0061) 
                                        (0062) export  SleepTimer_1_SetTimer
                                        (0063) export _SleepTimer_1_SetTimer
                                        (0064) 
                                        (0065) export  SleepTimer_1_bGetTimer
                                        (0066) export _SleepTimer_1_bGetTimer
                                        (0067) 
                                        (0068) IF(SleepTimer_1_TICK_CNTR_SIZE & (4|2))
                                        (0069) export  SleepTimer_1_iGetTickCntr
                                        (0070) export _SleepTimer_1_iGetTickCntr
                                        (0071) ENDIF
                                        (0072) 
                                        (0073) IF(SleepTimer_1_TICK_CNTR_SIZE & 4)
                                        (0074) export  SleepTimer_1_lGetTickCntr
                                        (0075) export _SleepTimer_1_lGetTickCntr
                                        (0076) ENDIF
                                        (0077) 
                                        (0078) 
                                        (0079) area text (ROM,REL)
                                        (0080) 
                                        (0081) ;-----------------------------------------------
                                        (0082) ;  EQUATES
                                        (0083) ;-----------------------------------------------
                                        (0084) 
                                        (0085) ; Counter LSB Offset if 4 byte tick counter
                                        (0086) IF(SleepTimer_1_TICK_CNTR_SIZE & 4)
                                        (0087) ST_LSB_OFFSET:   equ  3
                                        (0088) ENDIF
                                        (0089) 
                                        (0090) ; Counter LSB Offset if 2 byte tick counter
                                        (0091) IF(SleepTimer_1_TICK_CNTR_SIZE & 2)
                                        (0092) ST_LSB_OFFSET:   equ  1
                                        (0093) ENDIF
                                        (0094) 
                                        (0095) ; Counter LSB Offset if 1 byte tick counter
                                        (0096) IF(SleepTimer_1_TICK_CNTR_SIZE & 1)
                                        (0097) ST_LSB_OFFSET:   equ  0
                                        (0098) ENDIF
                                        (0099) 
                                        (0100) 
                                        (0101) area UserModules (ROM, REL, CON)
                                        (0102) 
                                        (0103) ;=============================================================================
                                        (0104) ;=============================================================================
                                        (0105) ;
                                        (0106) ;     Low-Level Commands
                                        (0107) ;
                                        (0108) ;=============================================================================
                                        (0109) ;=============================================================================
                                        (0110) 
                                        (0111) .SECTION
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;  FUNCTION NAME: SleepTimer_1_EnableInt
                                        (0114) ;
                                        (0115) ;  DESCRIPTION:
                                        (0116) ;     Enables SleepTimer interrupts.
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;
                                        (0119) ;  ARGUMENTS:
                                        (0120) ;     none.
                                        (0121) ;
                                        (0122) ;  RETURNS:
                                        (0123) ;     none.
                                        (0124) ;
                                        (0125) ;  SIDE EFFECTS:
                                        (0126) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0127) ;
                                        (0128) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0129) ;
                                        (0130)  SleepTimer_1_EnableInt:
                                        (0131) _SleepTimer_1_EnableInt:
                                        (0132)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0133)    M8C_EnableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0134)    RAM_EPILOGUE RAM_USE_CLASS_1
03EA: 7F       RET                      (0135)    ret
03EB: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0136) .ENDSECTION
                                        (0137) 
                                        (0138)     
                                        (0139) .SECTION
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;  FUNCTION NAME: SleepTimer_1_DisableInt
                                        (0142) ;
                                        (0143) ;  DESCRIPTION:
                                        (0144) ;     Disables the sleep timer. 
                                        (0145) ;
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;
                                        (0148) ;  ARGUMENTS:
                                        (0149) ;     none.
                                        (0150) ;
                                        (0151) ;  RETURNS:
                                        (0152) ;     none.
                                        (0153) ;
                                        (0154) ;  SIDE EFFECTS:
                                        (0155) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0156) ;
                                        (0157) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0158) ;
                                        (0159)  SleepTimer_1_DisableInt:
                                        (0160) _SleepTimer_1_DisableInt:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    M8C_DisableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0163)    RAM_EPILOGUE RAM_USE_CLASS_1
03EE: 7F       RET                      (0164)    ret
03EF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0165) .ENDSECTION
                                        (0166) 
                                        (0167) 
                                        (0168) .SECTION
                                        (0169) ;-----------------------------------------------------------------------------
                                        (0170) ;  FUNCTION NAME: SleepTimer_1_Start()
                                        (0171) ;
                                        (0172) ;  DESCRIPTION:
                                        (0173) ;     Clears all the variables.  
                                        (0174) ;-----------------------------------------------------------------------------
                                        (0175) ;
                                        (0176) ;  ARGUMENTS:
                                        (0177) ;      none
                                        (0178) ;
                                        (0179) ;  RETURNS:
                                        (0180) ;     none.
                                        (0181) ;
                                        (0182) ;  SIDE EFFECTS;    
                                        (0183) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0184) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0185) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0186) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0187) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0188) ;          
                                        (0189) ;    Page Pointer Registers Modified: 
                                        (0190) ;          CUR_PP
                                        (0191) ;
                                        (0192) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0193) ;
                                        (0194)  SleepTimer_1_Start:
                                        (0195) _SleepTimer_1_Start:
                                        (0196)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0197)    RAM_SETPAGE_CUR >SleepTimer_1_fTick      
03F2: 50 00    MOV   A,0x0              (0198)    mov  A,0
03F4: 53 00    MOV   [0x0],A            (0199)    mov  [SleepTimer_1_fTick],A
03F6: 53 01    MOV   [0x1],A            (0200)    mov  [SleepTimer_1_bTimerValue],A
03F8: 53 02    MOV   [0x2],A            (0201)    mov  [SleepTimer_1_bCountDown],A
03FA: 53 06    MOV   [0x6],A            (0202)    mov  [SleepTimer_1_TickCount + ST_LSB_OFFSET],A        ; Clear TickCount[0:7]
                                        (0203) IF(SleepTimer_1_TICK_CNTR_SIZE & (4|2))
03FC: 53 05    MOV   [0x5],A            (0204)    mov  [SleepTimer_1_TickCount + ST_LSB_OFFSET - 1],A    ; Clear TickCount[8:15]
                                        (0205) ENDIF
                                        (0206) 
                                        (0207) 
                                        (0208) IF(SleepTimer_1_TICK_CNTR_SIZE & 4)
03FE: 53 04    MOV   [0x4],A            (0209)    mov   [SleepTimer_1_TickCount + ST_LSB_OFFSET - 2],A    ; Clear TickCount[16:31]
0400: 53 03    MOV   [0x3],A            (0210)    mov   [SleepTimer_1_TickCount + ST_LSB_OFFSET - 3],A    
                                        (0211) ENDIF
                                        (0212) 
                                        (0213) 
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_4
0402: 7F       RET                      (0215)    ret
                                        (0216) .ENDSECTION
                                        (0217) 
                                        (0218) 
                                        (0219) .SECTION
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;  FUNCTION NAME: SleepTimer_1_Stop
                                        (0222) ;
                                        (0223) ;  DESCRIPTION:
                                        (0224) ;   This function does nothing at this time.  It is only here as a place 
                                        (0225) ;   holder.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;
                                        (0228) ;  ARGUMENTS:
                                        (0229) ;     none.
                                        (0230) ;
                                        (0231) ;  RETURNS:
                                        (0232) ;     none.
                                        (0233) ;
                                        (0234) ;  SIDE EFFECTS:
                                        (0235) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0236) ;
                                        (0237) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0238) ;
                                        (0239)  SleepTimer_1_Stop:
                                        (0240) _SleepTimer_1_Stop:
                                        (0241)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0242)    RAM_EPILOGUE RAM_USE_CLASS_1
0403: 7F       RET                      (0243)    ret
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: SleepTimer_1_SetInterval
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Sets sleep timer interval
                                        (0252) ;
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;
                                        (0255) ;  ARGUMENTS:
                                        (0256) ;     A <= Timer setting
                                        (0257) ;
                                        (0258) ;  RETURNS:
                                        (0259) ;     none.
                                        (0260) ;
                                        (0261) ;  SIDE EFFECTS:
                                        (0262) ;     REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0263) ;
                                        (0264) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0265) ;
                                        (0266)  SleepTimer_1_SetInterval:
                                        (0267) _SleepTimer_1_SetInterval:
                                        (0268)    RAM_PROLOGUE RAM_USE_CLASS_2
0404: 21 18    AND   A,0x18             (0269)    and  A,SleepTimer_1_CLOCK_MASK               ; Mask off invalid data
0406: 4F       MOV   X,SP               (0270)    mov  X, SP
0407: 08       PUSH  A                  (0271)    push A
0408: 71 10    OR    F,0x10             
                                        (0272)    M8C_SetBank1
040A: 5D E0    MOV   A,REG[0xE0]        (0273)    mov  A, reg[OSC_CR0]                  ; Get current timer value
040C: 21 E7    AND   A,0xE7             (0274)    and  A,~SleepTimer_1_CLOCK_MASK   ; Zero out old timer value
040E: 2B 00    OR    A,[X+0]            (0275)    or   A, [X]                           ; Set new timer values
0410: 60 E0    MOV   REG[0xE0],A        (0276)    mov  reg[OSC_CR0],A                   ; Write it
0412: 70 EF    AND   F,0xEF             
                                        (0277)    M8C_SetBank0
0414: 18       POP   A                  (0278)    pop  A
0415: 70 3F    AND   F,0x3F             
0417: 71 C0    OR    F,0xC0             
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_2
0419: 7F       RET                      (0280)    ret
041A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0281) .ENDSECTION
                                        (0282) 
                                        (0283) 
                                        (0284) .SECTION
                                        (0285) ;-----------------------------------------------------------------------------
                                        (0286) ;  FUNCTION NAME: SleepTimer_1_TickWait(BYTE bTicks)
                                        (0287) ;
                                        (0288) ;  DESCRIPTION:
                                        (0289) ;     Wait X Ticks and return
                                        (0290) ;
                                        (0291) ;-----------------------------------------------------------------------------
                                        (0292) ;
                                        (0293) ;  ARGUMENTS:
                                        (0294) ;     A <= Count down time
                                        (0295) ;
                                        (0296) ;  RETURNS:
                                        (0297) ;     none.
                                        (0298) ;
                                        (0299) ;  SIDE EFFECTS;    
                                        (0300) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0301) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0302) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0303) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0304) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0305) ;          
                                        (0306) ;    Page Pointer Registers Modified: 
                                        (0307) ;          CUR_PP
                                        (0308) ;
                                        (0309) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0310) ;
                                        (0311)  SleepTimer_1_TickWait:
                                        (0312) _SleepTimer_1_TickWait:
                                        (0313)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0314)    RAM_SETPAGE_CUR >SleepTimer_1_fTick      
041D: 55 00 00 MOV   [0x0],0x0          (0315)    mov   [SleepTimer_1_fTick],0x00          ; Clear tick flag
                                        (0316) 
                                        (0317) .WaitTick:
0420: 47 00 FF TST   [0x0],0xFF         (0318)    tst   [SleepTimer_1_fTick],0xFF          ; Check for tick 
0423: AF FC    JZ    0x0420             (0319)    jz    .WaitTick
0425: 55 00 00 MOV   [0x0],0x0          (0320)    mov   [SleepTimer_1_fTick],0x00          ; Clear tick flag
0428: 78       DEC   A                  (0321)    dec   A                                      ; Dec the timer variable
0429: BF F6    JNZ   0x0420             (0322)    jnz   .WaitTick                              ; Loop until we count down to zero
                                        (0323) 
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
042B: 7F       RET                      (0325)    ret
042C: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0326) .ENDSECTION
                                        (0327) 
                                        (0328) 
                                        (0329) .SECTION
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  FUNCTION NAME: SleepTimer_1_SyncWait(BYTE bCounts, BYTE fMode)
                                        (0332) ;
                                        (0333) ;  DESCRIPTION:
                                        (0334) ;     This function resets the SyncWait timer.  If fMode = 0, the timer
                                        (0335) ;     is set to the new value then exits the function immediatly.  If fMode
                                        (0336) ;     is set to 1, the firmware waits for the timer to expire before the
                                        (0337) ;     timer is reset and and exits.
                                        (0338) ;
                                        (0339) ;-----------------------------------------------------------------------------
                                        (0340) ;
                                        (0341) ;  ARGUMENTS:
                                        (0342) ;     A <= tCounts to wait
                                        (0343) ;     X <= fMode    fMode = 0  Just reload the value, do not wait
                                        (0344) ;                   fMode = 1  Wait for last value to count down to zero
                                        (0345) ;                              then reload.
                                        (0346) ;
                                        (0347) ;  RETURNS:
                                        (0348) ;     none.
                                        (0349) ;
                                        (0350) ;  SIDE EFFECTS;    
                                        (0351) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0352) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0353) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0354) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0355) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0356) ;          
                                        (0357) ;    Page Pointer Registers Modified: 
                                        (0358) ;          CUR_PP
                                        (0359) ;
                                        (0360) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0361) ;
                                        (0362)  SleepTimer_1_SyncWait:
                                        (0363) _SleepTimer_1_SyncWait:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >SleepTimer_1_bCountDown
042F: 4B       SWAP  A,X                (0366)    swap  A,X
0430: 21 01    AND   A,0x1              (0367)    AND   A,SleepTimer_1_FORCE_RELOAD
0432: B0 06    JNZ   0x0439             (0368)    jnz   .ReloadIt
                                        (0369) 
                                        (0370) .WaitLoop:
0434: 47 02 FF TST   [0x2],0xFF         (0371)    tst   [SleepTimer_1_bCountDown],0xFF
0437: BF FC    JNZ   0x0434             (0372)    jnz   .WaitLoop
                                        (0373) 
                                        (0374) 
                                        (0375) .ReloadIt:
0439: 4B       SWAP  A,X                (0376)    swap  A,X
043A: 53 02    MOV   [0x2],A            (0377)    mov   [SleepTimer_1_bCountDown],A 
                                        (0378) 
                                        (0379)    RAM_EPILOGUE RAM_USE_CLASS_4
043C: 7F       RET                      (0380)    ret
043D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0381) .ENDSECTION
                                        (0382) 
                                        (0383) 
                                        (0384) 
                                        (0385) .SECTION
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;  FUNCTION NAME: SleepTimer_1_bGetTickCntr
                                        (0388) ;
                                        (0389) ;  DESCRIPTION:
                                        (0390) ;     Returns the LSB of the tick Counter
                                        (0391) ;
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;
                                        (0394) ;  ARGUMENTS:
                                        (0395) ;     none
                                        (0396) ;
                                        (0397) ;  RETURNS:
                                        (0398) ;     LSB of lTickCount
                                        (0399) ;
                                        (0400) ;  SIDE EFFECTS;    
                                        (0401) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0402) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0403) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0404) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0405) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0406) ;          
                                        (0407) ;    Page Pointer Registers Modified: 
                                        (0408) ;          CUR_PP
                                        (0409) ;
                                        (0410) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0411) ;
                                        (0412)  SleepTimer_1_bGetTickCntr:
                                        (0413) _SleepTimer_1_bGetTickCntr:
                                        (0414)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0415)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
0440: 51 06    MOV   A,[0x6]            (0416)    mov   A,[SleepTimer_1_TickCount + ST_LSB_OFFSET]
                                        (0417)    RAM_EPILOGUE RAM_USE_CLASS_4
0442: 7F       RET                      (0418)    ret
0443: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: SleepTimer_1_SetTimer
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;     Set timer with parameter in A
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     A => Value used to set Timer value
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;     None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS;    
                                        (0437) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0438) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0439) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0440) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0441) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0442) ;          
                                        (0443) ;    Page Pointer Registers Modified: 
                                        (0444) ;          CUR_PP
                                        (0445) ;
                                        (0446) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0447) ;
                                        (0448)  SleepTimer_1_SetTimer:
                                        (0449) _SleepTimer_1_SetTimer:
                                        (0450)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0451)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
0446: 53 01    MOV   [0x1],A            (0452)    mov   [SleepTimer_1_bTimerValue],A
                                        (0453)    RAM_EPILOGUE RAM_USE_CLASS_4
0448: 7F       RET                      (0454)    ret
0449: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0455) .ENDSECTION
                                        (0456) 
                                        (0457) .SECTION
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;  FUNCTION NAME: SleepTimer_1_bGetTimer
                                        (0460) ;
                                        (0461) ;  DESCRIPTION:
                                        (0462) ;     Returns timer value in A
                                        (0463) ;
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465) ;
                                        (0466) ;  ARGUMENTS:
                                        (0467) ;     None
                                        (0468) ;
                                        (0469) ;  RETURNS:
                                        (0470) ;     Return timer value in A
                                        (0471) ;
                                        (0472) ;  SIDE EFFECTS;    
                                        (0473) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0474) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0475) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0476) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0477) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0478) ;          
                                        (0479) ;    Page Pointer Registers Modified: 
                                        (0480) ;          CUR_PP
                                        (0481) ;
                                        (0482) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0483) ;
                                        (0484)  SleepTimer_1_bGetTimer:
                                        (0485) _SleepTimer_1_bGetTimer:
                                        (0486)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0487)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
044C: 51 01    MOV   A,[0x1]            (0488)    mov   A,[SleepTimer_1_bTimerValue]
                                        (0489)    RAM_EPILOGUE RAM_USE_CLASS_4
044E: 7F       RET                      (0490)    ret
044F: 62 D0 00 MOV   REG[0xD0],0x0      
0452: 41 E0 BF AND   REG[0xE0],0xBF     
                                        (0491) .ENDSECTION
                                        (0492) 
                                        (0493) IF(SleepTimer_1_TICK_CNTR_SIZE & (4|2))
                                        (0494) .SECTION
                                        (0495) ;-----------------------------------------------------------------------------
                                        (0496) ;  FUNCTION NAME: SleepTimer_1_iGetTickCntr
                                        (0497) ;
                                        (0498) ;  DESCRIPTION:
                                        (0499) ;     Returns the least significant 16 bits.
                                        (0500) ;
                                        (0501) ;-----------------------------------------------------------------------------
                                        (0502) ;
                                        (0503) ;  ARGUMENTS:
                                        (0504) ;     none
                                        (0505) ;
                                        (0506) ;  RETURNS:
                                        (0507) ;     (int)TickCount in A and X  
                                        (0508) ;     X  <= MSB
                                        (0509) ;     A  <= LSB
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS;    
                                        (0512) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0513) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0514) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0515) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0516) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0517) ;          
                                        (0518) ;    Page Pointer Registers Modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0522) ;
                                        (0523)  SleepTimer_1_iGetTickCntr:
                                        (0524) _SleepTimer_1_iGetTickCntr:
                                        (0525)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0526)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
                                        (0527)    ; Disable interrupt here
                                        (0528)    M8C_DisableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
0455: 51 06    MOV   A,[0x6]            (0529)    mov   A,[SleepTimer_1_TickCount + ST_LSB_OFFSET]    ; Place LSB in A
0457: 58 05    MOV   X,[0x5]            (0530)    mov   X,[SleepTimer_1_TickCount + ST_LSB_OFFSET - 1]    ; Place MSB in X
0459: 43 E0 40 OR    REG[0xE0],0x40     
                                        (0531)    M8C_EnableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0532)    RAM_EPILOGUE RAM_USE_CLASS_4
045C: 7F       RET                      (0533)    ret
045D: 70 BF    AND   F,0xBF             
045F: 41 E0 BF AND   REG[0xE0],0xBF     
0462: 62 D0 00 MOV   REG[0xD0],0x0      
0465: 60 D3    MOV   REG[0xD3],A        
                                        (0534) .ENDSECTION
                                        (0535) ENDIF
                                        (0536) 
                                        (0537) IF(SleepTimer_1_TICK_CNTR_SIZE & 4)
                                        (0538) .SECTION
                                        (0539) ;-----------------------------------------------------------------------------
                                        (0540) ;  FUNCTION NAME: SleepTimer_1_lGetTickCntr
                                        (0541) ;
                                        (0542) ;  DESCRIPTION:
                                        (0543) ;     Returns a pointer to TickCount
                                        (0544) ;
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;
                                        (0547) ;  ARGUMENTS:
                                        (0548) ;     [A:X] => Pointer to 32 bit tick counter (X=LSB, A=MSB)
                                        (0549) ;
                                        (0550) ;  RETURNS:
                                        (0551) ;     Pointer to lTickCount
                                        (0552) ;
                                        (0553) ;  SIDE EFFECTS;    
                                        (0554) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0555) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0556) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0557) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0558) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0559) ;          
                                        (0560) ;    Page Pointer Registers Modified: 
                                        (0561) ;          CUR_PP
                                        (0562) ;
                                        (0563) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0564) ;
                                        (0565)  SleepTimer_1_lGetTickCntr:
                                        (0566) _SleepTimer_1_lGetTickCntr:
                                        (0567)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0568)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0569)    ; Disable interrupt here
                                        (0570)    M8C_DisableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0571)    RAM_SETPAGE_CUR >SleepTimer_1_TickCount
                                        (0572)    RAM_SETPAGE_IDX A
0467: 08       PUSH  A                  (0573)    push  A
0468: 51 03    MOV   A,[0x3]            (0574)    mov   A,[SleepTimer_1_TickCount + 0]
046A: 54 00    MOV   [X+0],A            (0575)    mov   [X + 0],A
046C: 51 04    MOV   A,[0x4]            (0576)    mov   A,[SleepTimer_1_TickCount + 1]
046E: 54 01    MOV   [X+1],A            (0577)    mov   [X + 1],A
0470: 51 05    MOV   A,[0x5]            (0578)    mov   A,[SleepTimer_1_TickCount + 2]
0472: 54 02    MOV   [X+2],A            (0579)    mov   [X + 2],A
0474: 51 06    MOV   A,[0x6]            (0580)    mov   A,[SleepTimer_1_TickCount + 3]
0476: 54 03    MOV   [X+3],A            (0581)    mov   [X + 3],A
0478: 18       POP   A                  (0582)    pop   A
0479: 43 E0 40 OR    REG[0xE0],0x40     
047C: 70 3F    AND   F,0x3F             
047E: 71 C0    OR    F,0xC0             
                                        (0583)    
                                        (0584)    M8C_EnableIntMask SleepTimer_1_INT_REG, SleepTimer_1_INT_MASK
                                        (0585)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0586)    RAM_EPILOGUE RAM_USE_CLASS_3
0480: 7F       RET                      (0587)    ret
                                        (0588) .ENDSECTION
                                        (0589) ENDIF
                                        (0590) 
                                        (0591) 
                                        (0592) 
                                        (0593) 
                                        (0594) ; End of File SleepTimer_1.asm
FILE: lib\pwm8_2int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_2INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_2.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_2_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_2_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_2_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0481: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_2INT.asm
FILE: lib\pwm8_2.asm                    (0001) ;;*****************************************************************************
0482: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_2.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_2.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_2_EnableInt
                                        (0030) export _PWM8_2_EnableInt
                                        (0031) export  PWM8_2_DisableInt
                                        (0032) export _PWM8_2_DisableInt
                                        (0033) export  PWM8_2_Start
                                        (0034) export _PWM8_2_Start
                                        (0035) export  PWM8_2_Stop
                                        (0036) export _PWM8_2_Stop
                                        (0037) export  PWM8_2_WritePeriod
                                        (0038) export _PWM8_2_WritePeriod
                                        (0039) export  PWM8_2_WritePulseWidth
                                        (0040) export _PWM8_2_WritePulseWidth
                                        (0041) export  PWM8_2_bReadPulseWidth
                                        (0042) export _PWM8_2_bReadPulseWidth
                                        (0043) export  PWM8_2_bReadCounter
                                        (0044) export _PWM8_2_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_2_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_2_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_2_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_2_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA pdproject13_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_2_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_2_EnableInt:
                                        (0091) _PWM8_2_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_2_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0485: 7F       RET                      (0095)    ret
0486: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_2_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_2_DisableInt:
                                        (0119) _PWM8_2_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_2_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0489: 7F       RET                      (0123)    ret
048A: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_2_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_2_Start:
                                        (0148) _PWM8_2_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_2_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
048D: 7F       RET                      (0152)    ret
048E: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_2_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_2_Stop:
                                        (0176) _PWM8_2_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_2_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0491: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_2_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_2_WritePeriod:
                                        (0206) _PWM8_2_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0492: 60 29    MOV   REG[0x29],A        (0208)    mov   reg[PWM8_2_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0494: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_2_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_2_WritePulseWidth:
                                        (0233) _PWM8_2_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0495: 60 2A    MOV   REG[0x2A],A        (0235)    mov   reg[PWM8_2_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0497: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_2_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_2_bReadPulseWidth:
                                        (0260) _PWM8_2_bReadPulseWidth:
                                        (0261)  bPWM8_2_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_2_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0498: 5D 2A    MOV   A,REG[0x2A]        (0264)    mov   A, reg[PWM8_2_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
049A: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_2_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_2_bReadCounter:
                                        (0293) _PWM8_2_bReadCounter:
                                        (0294)  bPWM8_2_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_2_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
049B: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
049C: 5D 2A    MOV   A,REG[0x2A]        (0304)    mov   A, reg[PWM8_2_COMPARE_REG]              ; Save the Compare register on the stack
049E: 08       PUSH  A                  (0305)    push  A                                       ;
049F: 41 2B FE AND   REG[0x2B],0xFE     
04A2: 71 10    OR    F,0x10             
                                        (0306)    PWM8_2_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
04A4: 5D 29    MOV   A,REG[0x29]        (0308)    mov   A, reg[PWM8_2_INPUT_REG]                ; save the clock input setting
04A6: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
04A7: 62 29 00 MOV   REG[0x29],0x0      (0311)    mov   reg[PWM8_2_INPUT_REG], INPUT_REG_NULL
04AA: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
04AC: 5D 28    MOV   A,REG[0x28]        (0314)    mov   A, reg[PWM8_2_COUNTER_REG]              ; DR2 <- DR0
04AE: 5D 2A    MOV   A,REG[0x2A]        (0315)    mov   A, reg[PWM8_2_COMPARE_REG]              ; Stash the Count on the stack
04B0: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
04B1: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
04B3: 60 2A    MOV   REG[0x2A],A        (0318)    mov   reg[PWM8_2_COMPARE_REG], A
04B5: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
04B7: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
04B9: 60 29    MOV   REG[0x29],A        (0321)    mov   reg[PWM8_2_INPUT_REG], A                ;
04BB: 70 EF    AND   F,0xEF             
04BD: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_2_Start_M                                ;   then re-enable the PWM.
04C0: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
04C1: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
04C3: 70 3F    AND   F,0x3F             
04C5: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
04C7: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_2.asm
FILE: lib\pwm8_1int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_1INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_1.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
04C8: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_1INT.asm
FILE: lib\pwm8_1.asm                    (0001) ;;*****************************************************************************
04C9: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_1.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_1_EnableInt
                                        (0030) export _PWM8_1_EnableInt
                                        (0031) export  PWM8_1_DisableInt
                                        (0032) export _PWM8_1_DisableInt
                                        (0033) export  PWM8_1_Start
                                        (0034) export _PWM8_1_Start
                                        (0035) export  PWM8_1_Stop
                                        (0036) export _PWM8_1_Stop
                                        (0037) export  PWM8_1_WritePeriod
                                        (0038) export _PWM8_1_WritePeriod
                                        (0039) export  PWM8_1_WritePulseWidth
                                        (0040) export _PWM8_1_WritePulseWidth
                                        (0041) export  PWM8_1_bReadPulseWidth
                                        (0042) export _PWM8_1_bReadPulseWidth
                                        (0043) export  PWM8_1_bReadCounter
                                        (0044) export _PWM8_1_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_1_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_1_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_1_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA pdproject13_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_1_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_1_EnableInt:
                                        (0091) _PWM8_1_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_1_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
04CC: 7F       RET                      (0095)    ret
04CD: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_1_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_1_DisableInt:
                                        (0119) _PWM8_1_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_1_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
04D0: 7F       RET                      (0123)    ret
04D1: 43 27 01 OR    REG[0x27],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_1_Start:
                                        (0148) _PWM8_1_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_1_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
04D4: 7F       RET                      (0152)    ret
04D5: 41 27 FE AND   REG[0x27],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_1_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_1_Stop:
                                        (0176) _PWM8_1_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_1_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
04D8: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_1_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_1_WritePeriod:
                                        (0206) _PWM8_1_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
04D9: 60 25    MOV   REG[0x25],A        (0208)    mov   reg[PWM8_1_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
04DB: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_1_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_1_WritePulseWidth:
                                        (0233) _PWM8_1_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
04DC: 60 26    MOV   REG[0x26],A        (0235)    mov   reg[PWM8_1_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
04DE: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_1_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_1_bReadPulseWidth:
                                        (0260) _PWM8_1_bReadPulseWidth:
                                        (0261)  bPWM8_1_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_1_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
04DF: 5D 26    MOV   A,REG[0x26]        (0264)    mov   A, reg[PWM8_1_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
04E1: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_1_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_1_bReadCounter:
                                        (0293) _PWM8_1_bReadCounter:
                                        (0294)  bPWM8_1_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_1_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
04E2: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
04E3: 5D 26    MOV   A,REG[0x26]        (0304)    mov   A, reg[PWM8_1_COMPARE_REG]              ; Save the Compare register on the stack
04E5: 08       PUSH  A                  (0305)    push  A                                       ;
04E6: 41 27 FE AND   REG[0x27],0xFE     
04E9: 71 10    OR    F,0x10             
                                        (0306)    PWM8_1_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
04EB: 5D 25    MOV   A,REG[0x25]        (0308)    mov   A, reg[PWM8_1_INPUT_REG]                ; save the clock input setting
04ED: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
04EE: 62 25 00 MOV   REG[0x25],0x0      (0311)    mov   reg[PWM8_1_INPUT_REG], INPUT_REG_NULL
04F1: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
04F3: 5D 24    MOV   A,REG[0x24]        (0314)    mov   A, reg[PWM8_1_COUNTER_REG]              ; DR2 <- DR0
04F5: 5D 26    MOV   A,REG[0x26]        (0315)    mov   A, reg[PWM8_1_COMPARE_REG]              ; Stash the Count on the stack
04F7: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
04F8: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
04FA: 60 26    MOV   REG[0x26],A        (0318)    mov   reg[PWM8_1_COMPARE_REG], A
04FC: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
04FE: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0500: 60 25    MOV   REG[0x25],A        (0321)    mov   reg[PWM8_1_INPUT_REG], A                ;
0502: 70 EF    AND   F,0xEF             
0504: 43 27 01 OR    REG[0x27],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_1_Start_M                                ;   then re-enable the PWM.
0507: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0508: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
050A: 70 3F    AND   F,0x3F             
050C: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
050E: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_1.asm
FILE: lib\lcd_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD_1.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD_1.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_1_Start
                                        (0044) export  _LCD_1_Start
                                        (0045) export   LCD_1_Init
                                        (0046) export  _LCD_1_Init
                                        (0047) 
                                        (0048) export   LCD_1_WriteData
                                        (0049) export  _LCD_1_WriteData
                                        (0050) 
                                        (0051) export   LCD_1_Control
                                        (0052) export  _LCD_1_Control
                                        (0053) 
                                        (0054) export  LCD_1_PrString
                                        (0055) export _LCD_1_PrString
                                        (0056) 
                                        (0057) export  LCD_1_PrCString
                                        (0058) export _LCD_1_PrCString
                                        (0059) 
                                        (0060) export  LCD_1_Position
                                        (0061) export _LCD_1_Position
                                        (0062) 
                                        (0063) export  LCD_1_PrHexByte
                                        (0064) export _LCD_1_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_1_PrHexInt
                                        (0067) export _LCD_1_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_1_Delay50uTimes
                                        (0070) export _LCD_1_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_1_Delay50u
                                        (0073) export _LCD_1_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0081) export  LCD_1_InitBG
                                        (0082) export _LCD_1_InitBG
                                        (0083) 
                                        (0084) export  LCD_1_InitVBG
                                        (0085) export _LCD_1_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_1_DrawVBG and
                                        (0090) ;    LCD_1_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_1_DrawVBG
                                        (0112) export _LCD_1_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_1_DrawVBG
                                        (0117) export  LCD_1_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_1_Write_Data
                                        (0127) export  _LCD_1_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_1_Port:           equ    PRT0DR
                                        (0135) LCD_1_PortMode0:      equ    PRT0DM0
                                        (0136) LCD_1_PortMode1:      equ    PRT0DM1
                                        (0137) 
                                        (0138) LCD_1_E:              equ    10h
                                        (0139) LCD_1_RW:             equ    40h
                                        (0140) LCD_1_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_1_DATA_MASK:      equ    0Fh
                                        (0143) LCD_1_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_1_DATA_READ:      equ    ( LCD_1_E | LCD_1_RW | LCD_1_RS )
                                        (0146) LCD_1_CNTL_READ:      equ    ( LCD_1_E | LCD_1_RW )
                                        (0147) LCD_1_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_1_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_1_DISP_INC:       equ    03h
                                        (0151) LCD_1_DISP_OFF:       equ    08h
                                        (0152) LCD_1_DISP_ON:        equ    0Ch
                                        (0153) LCD_1_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_1_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_1_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_1_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_1_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_1_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_1_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_1_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_1_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_1_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_1_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_1_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_1_PrCString:
                                        (0205) _LCD_1_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
050F: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0510: 10       PUSH  X                  (0209)     push  X
0511: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0512: B0 04    JNZ   0x0517             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0514: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0515: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0516: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0517: 90 44    CALL  _LCD_1_WriteData|_LCD_1_Write_Data|LCD_1_Write_Data(0218)     call  LCD_1_WriteData              ; Write data to LCD
0519: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
051A: 18       POP   A                  (0220)     pop   A
051B: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
051C: DF F2    JNC   _LCD_1_PrCString   (0222)     jnc   .Loop_PrCString
051E: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
051F: 8F EF    JMP   _LCD_1_PrCString   (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_1_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_1_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_1_PrHexByte:
                                        (0258) _LCD_1_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0531: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0532: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0533: 67       ASR   A                  (0262)     asr   A
0534: 67       ASR   A                  (0263)     asr   A
0535: 67       ASR   A                  (0264)     asr   A
0536: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0538: FF E7    INDEX LCD_1_HEX_STR      (0266)     index LCD_1_HEX_STR                  ; Get Hex value
053A: 90 21    CALL  _LCD_1_WriteData|_LCD_1_Write_Data|LCD_1_Write_Data(0267)     call  LCD_1_WriteData              ; Write data to screen
053C: 18       POP   A                  (0268)     pop   A                            ; Restore value
053D: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
053F: FF E0    INDEX LCD_1_HEX_STR      (0270)     index LCD_1_HEX_STR                  ; Get Hex value
0541: 90 1A    CALL  _LCD_1_WriteData|_LCD_1_Write_Data|LCD_1_Write_Data(0271)     call  LCD_1_WriteData              ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0543: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_1_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_1_PrHexInt:
                                        (0303) _LCD_1_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0544: 4B       SWAP  A,X                (0305)     swap  A,X
0545: 9F EA    CALL  _LCD_1_PrHexByte   (0306)     call  LCD_1_PrHexByte              ; Print MSB
0547: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0548: 9F E7    CALL  _LCD_1_PrHexByte   (0308)     call  LCD_1_PrHexByte              ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
054A: 7F       RET                      (0310)     ret
054B: 70 BF    AND   F,0xBF             
054D: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_1_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_1_PrString:
                                        (0342) _LCD_1_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
054F: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0551: A0 06    JZ    0x0558             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_1_writeData is known not to modify X so no need to preserve
0553: 90 08    CALL  _LCD_1_WriteData|_LCD_1_Write_Data|LCD_1_Write_Data(0349)     call  LCD_1_WriteData              ; Write data to screen
0555: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0556: 8F F8    JMP   0x054F             (0351)     jmp   .Loop_PrString               ; Go get next character
0558: 70 3F    AND   F,0x3F             
055A: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
055C: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_1_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_1_WriteData:
                                        (0382) _LCD_1_WriteData:
                                        (0383)  LCD_1_Write_Data:   ; Do not use
                                        (0384) _LCD_1_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
055D: 90 65    CALL  0x05C4             (0386)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_1_Check_Ready
055F: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0560: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0561: 67       ASR   A                  (0390)     asr   A
0562: 67       ASR   A                  (0391)     asr   A
0563: 67       ASR   A                  (0392)     asr   A
0564: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0566: 90 3B    CALL  0x05A3             (0394)     call  LCD_1_WDATA_Nibble           ; Write Upper nibble
0568: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0569: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
056B: 40       NOP                      (0397)     nop
056C: 40       NOP                      (0398)     nop
056D: 40       NOP                      (0399)     nop
056E: 90 33    CALL  0x05A3             (0400)     call  LCD_1_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0570: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_1_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_1_Control:
                                        (0430) _LCD_1_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0571: 90 51    CALL  0x05C4             (0432)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_1_Check_Ready
0573: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0574: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0575: 67       ASR   A                  (0436)     asr   A
0576: 67       ASR   A                  (0437)     asr   A
0577: 67       ASR   A                  (0438)     asr   A
0578: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
057A: 90 09    CALL  0x0585             (0440)     call  LCD_1_WCNTL_Nibble           ; Write high nibble
057C: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
057D: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
057F: 40       NOP                      (0443)     nop
0580: 40       NOP                      (0444)     nop
0581: 40       NOP                      (0445)     nop
0582: 90 01    CALL  0x0585             (0446)     call  LCD_1_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0584: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_1_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_1_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0585: 08       PUSH  A                  (0477)     push  A
0586: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_0_Data_SHADE           ; Set CUR_PP to LCD variable address
0589: 26 07 80 AND   [0x7],0x80         (0479)     and   [Port_0_Data_SHADE],~LCD_1_PORT_MASK
058C: 51 07    MOV   A,[0x7]            (0480)     mov   A,[Port_0_Data_SHADE]
058E: 60 00    MOV   REG[0x0],A         (0481)     mov   reg[LCD_1_Port],A                      ; Reset control lines
                                        (0482) 
0590: 18       POP   A                  (0483)     pop   A
0591: 21 0F    AND   A,0xF              (0484)     and   A,LCD_1_DATA_MASK                      ; Make sure no bogus data in MSN
0593: 29 10    OR    A,0x10             (0485)     or    A,LCD_1_E                              ; Bring "E" Enable line high
0595: 2A 07    OR    A,[0x7]            (0486)     or    A,[Port_0_Data_SHADE]                  ; OR in bit 7 just
0597: 60 00    MOV   REG[0x0],A         (0487)     mov   reg[LCD_1_Port], A                     ; Write data
0599: 53 07    MOV   [0x7],A            (0488)     mov   [Port_0_Data_SHADE],A                  ; Keep shadow register in sync
059B: 40       NOP                      (0489)     nop
059C: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK)   ; Disable E signal and leave data on bus.
059E: 53 07    MOV   [0x7],A            (0491)     mov   [Port_0_Data_SHADE],A                  ; Keep shadow register in sync
05A0: 60 00    MOV   REG[0x0],A         (0492)     mov   reg[LCD_1_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
05A2: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_1_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_1_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
05A3: 08       PUSH  A                  (0523)     push  A
05A4: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_0_Data_SHADE          ; Set CUR_PP to LCD variable address
05A7: 26 07 80 AND   [0x7],0x80         (0525)     and   [Port_0_Data_SHADE],~LCD_1_PORT_MASK
05AA: 2E 07 20 OR    [0x7],0x20         (0526)     or    [Port_0_Data_SHADE],LCD_1_RS                ; Raise RS to signify a Data Write
05AD: 51 07    MOV   A,[0x7]            (0527)     mov   A,[Port_0_Data_SHADE]
05AF: 60 00    MOV   REG[0x0],A         (0528)     mov   reg[LCD_1_Port],A
                                        (0529) 
05B1: 18       POP   A                  (0530)     pop   A
05B2: 21 0F    AND   A,0xF              (0531)     and   A,LCD_1_DATA_MASK                           ; Make sure no bogus data in A[7:4]
05B4: 29 30    OR    A,0x30             (0532)     or    A,(LCD_1_E | LCD_1_RS)                      ; Bring "E" Enable line high
05B6: 2A 07    OR    A,[0x7]            (0533)     or    A,[Port_0_Data_SHADE]                       ; Keep shadow in sync
05B8: 60 00    MOV   REG[0x0],A         (0534)     mov   reg[LCD_1_Port], A                            ; Write data
05BA: 53 07    MOV   [0x7],A            (0535)     mov   [Port_0_Data_SHADE],A                       ; Keep shadow in sync
05BC: 40       NOP                      (0536)     NOP
05BD: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK|LCD_1_RS)  ; Disable E signal and leave Data on bus
05BF: 53 07    MOV   [0x7],A            (0538)     mov   [Port_0_Data_SHADE],A                       ; keep shadow in sync
05C1: 60 00    MOV   REG[0x0],A         (0539)     mov   reg[LCD_1_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
05C3: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_1_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_1_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
05C4: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
05C5: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_0_Data_SHADE                ; Set CUR_PP to LCD variable address
05C8: 26 07 80 AND   [0x7],0x80         (0573)     and   [Port_0_Data_SHADE],~LCD_1_PORT_MASK        ; Mask of all LCD bits
05CB: 51 07    MOV   A,[0x7]            (0574)     mov   A,[Port_0_Data_SHADE]
05CD: 60 00    MOV   REG[0x0],A         (0575)     mov   reg[LCD_1_Port],A                           ; Zero LCD port bits
                                        (0576) 
05CF: 26 08 F0 AND   [0x8],0xF0         (0577)     and   [Port_0_DriveMode_0_SHADE],~LCD_1_DATA_MASK ; Clear out LCD mode bits.
05D2: 51 08    MOV   A,[0x8]            (0578)     mov   A,[Port_0_DriveMode_0_SHADE]
05D4: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
05D6: 60 00    MOV   REG[0x0],A         (0580)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for reading
05D8: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
05DA: 2E 07 40 OR    [0x7],0x40         (0583)     or    [Port_0_Data_SHADE],LCD_1_RW                ; Raise RW to signify Read operation
05DD: 51 07    MOV   A,[0x7]            (0584)     mov   A,[Port_0_Data_SHADE]
05DF: 60 00    MOV   REG[0x0],A         (0585)     mov   reg[LCD_1_Port],A
05E1: 40       NOP                      (0586)     NOP
                                        (0587) 
05E2: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
05E3: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
05E5: 2E 07 50 OR    [0x7],0x50         (0592)     or    [Port_0_Data_SHADE], LCD_1_CNTL_READ                  ; Raise E to start cycle
05E8: 51 07    MOV   A,[0x7]            (0593)     mov   A,[Port_0_Data_SHADE]
05EA: 60 00    MOV   REG[0x0],A         (0594)     mov   reg[LCD_1_Port],A
                                        (0595) 
05EC: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
05ED: 40       NOP                      (0597)     nop
05EE: 5D 00    MOV   A,REG[0x0]         (0598)     mov   A,reg[LCD_1_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
05F0: 08       PUSH  A                  (0610)     push  A
05F1: 26 07 C0 AND   [0x7],0xC0         (0611)     and   [Port_0_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
05F4: 51 07    MOV   A,[0x7]            (0612)     mov   A,[Port_0_Data_SHADE]
05F6: 60 00    MOV   REG[0x0],A         (0613)     mov   reg[LCD_1_Port],A
                                        (0614) 
05F8: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
05F9: 40       NOP                      (0616)     nop                                    ; fastest PSoC
05FA: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
05FB: 2E 07 50 OR    [0x7],0x50         (0619)     or    [Port_0_Data_SHADE],LCD_1_CNTL_READ                   ; Raise E to start cycle
05FE: 51 07    MOV   A,[0x7]            (0620)     mov   A,[Port_0_Data_SHADE]
0600: 60 00    MOV   REG[0x0],A         (0621)     mov   reg[LCD_1_Port],A
                                        (0622) 
0602: 40       NOP                      (0623)     nop
0603: 40       NOP                      (0624)     nop
                                        (0625) 
0604: 26 07 C0 AND   [0x7],0xC0         (0626)     and   [Port_0_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
0607: 51 07    MOV   A,[0x7]            (0627)     mov   A,[Port_0_Data_SHADE]
0609: 60 00    MOV   REG[0x0],A         (0628)     mov   reg[LCD_1_Port],A
                                        (0629) 
060B: 18       POP   A                  (0630)     pop   A
060C: 21 08    AND   A,0x8              (0631)     and   A,LCD_1_READY_BIT                                       ; Check busy
                                        (0632) 
060E: A0 04    JZ    0x0613             (0633)     jz    .UNLOCK
0610: 79       DEC   X                  (0634)     dec   X
0611: BF D3    JNZ   0x05E5             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0613: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0614: 2E 08 7F OR    [0x8],0x7F         (0639)     or    [Port_0_DriveMode_0_SHADE],LCD_1_PORT_WRITE ; Revert Data bit to Write mode
0617: 51 08    MOV   A,[0x8]            (0640)     mov   A,[Port_0_DriveMode_0_SHADE]
0619: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
061B: 60 00    MOV   REG[0x0],A         (0642)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for writing
061D: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
061F: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0620: 7F       RET                      (0646)     ret
0621: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_1_Start
                                        (0652) ;  FUNCTION NAME: LCD_1_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_1_Start:
                                        (0679) _LCD_1_Start:
                                        (0680)  LCD_1_Init:
                                        (0681) _LCD_1_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_0_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0624: 26 08 80 AND   [0x8],0x80         (0685)     and   [Port_0_DriveMode_0_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
0627: 2E 08 7F OR    [0x8],0x7F         (0686)     or    [Port_0_DriveMode_0_SHADE],LCD_1_PORT_WRITE           ; Set LCD port for writing
062A: 26 09 80 AND   [0x9],0x80         (0687)     and   [Port_0_DriveMode_1_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
                                        (0688) 
062D: 51 08    MOV   A,[0x8]            (0689)     mov   A,[Port_0_DriveMode_0_SHADE]
062F: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0631: 60 00    MOV   REG[0x0],A         (0691)     mov   reg[LCD_1_PortMode0],A                                ; Setup LCD Port for writing
0633: 51 09    MOV   A,[0x9]            (0692)     mov   A,[Port_0_DriveMode_1_SHADE]
0635: 60 01    MOV   REG[0x1],A         (0693)     mov   reg[LCD_1_PortMode1],A
0637: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0639: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
063B: 90 67    CALL  _LCD_1_Delay50uTimes(0697)     call  LCD_1_Delay50uTimes
063D: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
063F: 90 63    CALL  _LCD_1_Delay50uTimes(0699)     call  LCD_1_Delay50uTimes
                                        (0700) 
0641: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0643: 9F 40    CALL  0x0585             (0702)     call  LCD_1_WCNTL_Nibble
                                        (0703) 
0645: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0647: 90 5B    CALL  _LCD_1_Delay50uTimes(0705)     call  LCD_1_Delay50uTimes
                                        (0706) 
0649: 50 03    MOV   A,0x3              (0707)     mov   A,03h
064B: 9F 38    CALL  0x0585             (0708)     call  LCD_1_WCNTL_Nibble
                                        (0709) 
064D: 90 63    CALL  _LCD_1_Delay50u    (0710)     call  LCD_1_Delay50u
064F: 90 61    CALL  _LCD_1_Delay50u    (0711)     call  LCD_1_Delay50u
0651: 90 5F    CALL  _LCD_1_Delay50u    (0712)     call  LCD_1_Delay50u
                                        (0713) 
0653: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0655: 9F 2E    CALL  0x0585             (0715)     call  LCD_1_WCNTL_Nibble
                                        (0716) 
0657: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0659: 90 49    CALL  _LCD_1_Delay50uTimes(0718)     call  LCD_1_Delay50uTimes
                                        (0719) 
065B: 50 02    MOV   A,0x2              (0720)     mov   A,02h
065D: 9F 26    CALL  0x0585             (0721)     call  LCD_1_WCNTL_Nibble
                                        (0722) 
065F: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0661: 90 41    CALL  _LCD_1_Delay50uTimes(0724)     call  LCD_1_Delay50uTimes
                                        (0725) 
0663: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0665: 9F 0A    CALL  _LCD_1_Control     (0727)     call  LCD_1_Control
0667: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0669: 90 39    CALL  _LCD_1_Delay50uTimes(0729)     call  LCD_1_Delay50uTimes
                                        (0730) 
066B: 50 01    MOV   A,0x1              (0731)     mov   A,01h
066D: 9F 02    CALL  _LCD_1_Control     (0732)     call  LCD_1_Control
066F: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0671: 90 31    CALL  _LCD_1_Delay50uTimes(0734)     call  LCD_1_Delay50uTimes
                                        (0735) 
0673: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0675: 9E FA    CALL  _LCD_1_Control     (0737)     call  LCD_1_Control
                                        (0738) 
0677: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0679: 9E F6    CALL  _LCD_1_Control     (0740)     call  LCD_1_Control
                                        (0741) 
067B: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_1_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
067D: 9E F2    CALL  _LCD_1_Control     (0743)     call  LCD_1_Control
                                        (0744) 
067F: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_1_DISP_OFF
0681: 9E EE    CALL  _LCD_1_Control     (0746)     call  LCD_1_Control
                                        (0747) 
0683: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_1_DISP_ON
0685: 9E EA    CALL  _LCD_1_Control     (0749)     call  LCD_1_Control
                                        (0750) 
0687: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_1_DISP_INC
0689: 9E E6    CALL  _LCD_1_Control     (0752)     call  LCD_1_Control
                                        (0753) 
068B: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
068D: 90 15    CALL  _LCD_1_Delay50uTimes(0755)     call  LCD_1_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
068F: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_1_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_1_ROW_OFFSET::
                                        (0783)      DB    LCD_1_ROW1_OFFSET, LCD_1_ROW2_OFFSET, LCD_1_ROW3_OFFSET, LCD_1_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_1_Position:
                                        (0788) _LCD_1_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0694: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0696: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0697: FF F7    INDEX LCD_1_ROW_OFFSET   (0792)     index LCD_1_ROW_OFFSET ; Get ROW memory offset from table
0699: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
069A: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
069C: 20       POP   X                  (0795)     pop   X
                                        (0796) 
069D: 9E D2    CALL  _LCD_1_Control     (0797)     call  LCD_1_Control                ; Write control byte
069F: 70 3F    AND   F,0x3F             
06A1: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
06A3: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_1_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_1_Delay50uTimes:
                                        (0825) _LCD_1_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
06A4: 90 0C    CALL  _LCD_1_Delay50u    (0827)     call  LCD_1_Delay50u
06A6: 78       DEC   A                  (0828)     dec   A
06A7: BF FC    JNZ   _LCD_1_Delay50uTimes(0829)     jnz   LCD_1_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
06A9: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_1_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_1_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_1_Delay50u:
                                        (0869)  _LCD_1_Delay50u:                      ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
06B2: 08       PUSH  A                  (0871)     push  A
06B3: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
06B5: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
06B7: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
06B9: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
06BB: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
06BD: D0 06    JNC   0x06C4             (0877)     jnc   .Delay50u_End
06BF: FF E9    INDEX LCD_1_Delay50u_Table(0878)     index LCD_1_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
06C1: 78       DEC   A                  (0880)     dec   A                              ; [4]
06C2: BF FE    JNZ   0x06C1             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
06C4: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
06C5: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_1_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_1_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_1_Position               ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_1_WriteData              ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_1_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_1_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
06C6: 4F       MOV   X,SP               (1015)     mov   X, SP
06C7: 10       PUSH  X                  (1016)     push  X
06C8: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
06CA: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
06CC: 70 3F    AND   F,0x3F             
06CE: 71 C0    OR    F,0xC0             
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
06D0: 9F C2    CALL  _LCD_1_Position    (1020)     call  LCD_1_Position               ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
06D2: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
06D3: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
06D6: B0 05    JNZ   0x06DC             (1026)     jnz   .LCD_CHECK1
06D8: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
06DA: 80 11    JMP   0x06EC             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
06DC: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
06DF: D0 07    JNC   0x06E7             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
06E1: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
06E3: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
06E5: 80 06    JMP   0x06EC             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
06E7: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
06E9: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
06EC: 9E 6F    CALL  _LCD_1_WriteData|_LCD_1_Write_Data|LCD_1_Write_Data(1042)     call  LCD_1_WriteData              ; Display BG character
                                        (1043) 
06EE: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
06F0: BF E2    JNZ   0x06D3             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
06F2: 70 3F    AND   F,0x3F             
06F4: 71 C0    OR    F,0xC0             
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
06F6: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_1_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_1_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_1_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_1_Control                ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_1_WriteData              ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_1_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_1_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
06F7: 4F       MOV   X,SP               (1168)     mov   X, SP
06F8: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
06FA: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
06FC: 08       PUSH  A                  (1172)     push  A
06FD: FF 91    INDEX LCD_1_ROW_OFFSET   (1173)     index LCD_1_ROW_OFFSET  ; Get row offset
06FF: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
0701: 9E 6E    CALL  _LCD_1_Control     (1175)     call  LCD_1_Control                ; Position Cursor
0703: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
0706: B0 05    JNZ   0x070C             (1177)     jnz   .VBG_NZ_SEG
0708: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
070A: 80 13    JMP   0x071E             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
070C: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
070F: D0 09    JNC   0x0719             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0711: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
0713: 78       DEC   A                  (1185)     dec   A
0714: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
0717: 80 06    JMP   0x071E             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
0719: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
071C: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
071E: 9E 3D    CALL  _LCD_1_WriteData|_LCD_1_Write_Data|LCD_1_Write_Data(1194)     call  LCD_1_WriteData              ; Write value
0720: 18       POP   A                  (1195)     pop   A
0721: 78       DEC   A                  (1196)     dec   A
0722: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
0724: BF D7    JNZ   0x06FC             (1198)     jnz   .VBG_LOOP
0726: 70 3F    AND   F,0x3F             
0728: 71 C0    OR    F,0xC0             
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
072A: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_1_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_1_InitVBG:
                                        (1236) _LCD_1_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
072B: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
072C: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
072D: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
072E: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
0730: 9E 3F    CALL  _LCD_1_Control     (1243)     call  LCD_1_Control                ; Position the CG pointer
0732: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
0735: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
0738: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
073A: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
073C: D0 05    JNC   0x0742             (1251)     jnc   .VBG_SOLID
073E: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0740: 80 03    JMP   0x0744             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
0742: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0744: 9E 17    CALL  _LCD_1_WriteData|_LCD_1_Write_Data|LCD_1_Write_Data(1257)     call  LCD_1_WriteData              ; character data
0746: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
0748: BF EF    JNZ   0x0738             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
074A: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
074C: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
074F: BF E5    JNZ   0x0735             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0751: 18       POP   A                  (1264)     pop  A
0752: 18       POP   A                  (1265)     pop  A
0753: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_1_DISP_ON                    ; Turn on display, don't really
0755: 9E 1A    CALL  _LCD_1_Control     (1267)     call LCD_1_Control                 ; need this.
0757: 70 3F    AND   F,0x3F             
0759: 71 C0    OR    F,0xC0             
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
075B: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_1_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_1_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_1_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_1_InitBG:
                                        (1317) _LCD_1_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
076A: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
076B: 38 03    ADD   SP,0x3             (1320)     add   SP,3
076D: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
076F: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
0771: 9D FE    CALL  _LCD_1_Control     (1324)     call  LCD_1_Control                ; Position the CG pointer
0773: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0776: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
0779: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
077B: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
077E: B0 05    JNZ   0x0784             (1332)     jnz   .BG_OTHER
0780: FF DA    INDEX LCD_1_BG_TYPE1     (1333)     index LCD_1_BG_TYPE1
0782: 80 03    JMP   0x0786             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0784: FF DD    INDEX LCD_1_BG_TYPE2     (1336)     index LCD_1_BG_TYPE2
                                        (1337)  .BG_Load:
0786: 9D D5    CALL  _LCD_1_WriteData|_LCD_1_Write_Data|LCD_1_Write_Data(1338)     call  LCD_1_WriteData
0788: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
078A: BF EE    JNZ   0x0779             (1340)     jnz   .BG_Loop2
078C: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
078E: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0791: BF E4    JNZ   0x0776             (1343)     jnz   .BG_Loop1
                                        (1344) 
0793: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0795: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_1_DISP_ON
0797: 9D D8    CALL  _LCD_1_Control     (1347)     call  LCD_1_Control
0799: 70 3F    AND   F,0x3F             
079B: 71 C0    OR    F,0xC0             
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
079D: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD_1.asm
FILE: lib\adcinc_1int.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINC_1INT.asm
                                        (0004) ;;  Version: 1.20, Updated on 2013/5/19 at 10:39:54
                                        (0005) ;;
                                        (0006) ;;  DESCRIPTION: Assembler interrupt service routine for the ADCINC
                                        (0007) ;;               A/D Converter User Module. This code works for both the
                                        (0008) ;;               first and second-order modulator topologies.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "ADCINC_1.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export _ADCINC_1_ADConversion_ISR
                                        (0024) 
                                        (0025) export _ADCINC_1_iResult
                                        (0026) export  ADCINC_1_iResult
                                        (0027) export _ADCINC_1_fStatus
                                        (0028) export  ADCINC_1_fStatus
                                        (0029) export _ADCINC_1_bState
                                        (0030) export  ADCINC_1_bState
                                        (0031) export _ADCINC_1_fMode
                                        (0032) export  ADCINC_1_fMode
                                        (0033) export _ADCINC_1_bNumSamples
                                        (0034) export  ADCINC_1_bNumSamples
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM,REL)
                                        (0040)  ADCINC_1_iResult:
                                        (0041) _ADCINC_1_iResult:                         BLK  2 ;Calculated answer
                                        (0042)   iTemp:                                   BLK  2 ;internal temp storage
                                        (0043)  ADCINC_1_fStatus:
                                        (0044) _ADCINC_1_fStatus:                         BLK  1 ;ADC Status
                                        (0045)  ADCINC_1_bState:
                                        (0046) _ADCINC_1_bState:                          BLK  1 ;State value of ADC count
                                        (0047)  ADCINC_1_fMode:
                                        (0048) _ADCINC_1_fMode:                           BLK  1 ;Integrate and reset mode.
                                        (0049)  ADCINC_1_bNumSamples:
                                        (0050) _ADCINC_1_bNumSamples:                     BLK  1 ;Number of samples to take.
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0057) ;---------------------------------------------------
                                        (0058) ; Insert your custom declarations below this banner
                                        (0059) ;---------------------------------------------------
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _ADCINC_1_ADConversion_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION: Perform final filter operations to produce output samples.
                                        (0083) ;
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;
                                        (0086) ;    The decimation rate is established by the PWM interrupt. Four timer
                                        (0087) ;    clocks elapse for each modulator output (decimator input) since the
                                        (0088) ;    phi1/phi2 generator divides by 4. This means the timer period and thus
                                        (0089) ;    it's interrupt must equal 4 times the actual decimation rate.  The
                                        (0090) ;    decimator is ru  for 2^(#bits-6).
                                        (0091) ;
                                        (0092) _ADCINC_1_ADConversion_ISR:
079E: 7A 0F    DEC   [0xF]              (0093)     dec  [ADCINC_1_bState]
                                        (0094) if1:
07A0: C0 02    JC    0x07A3             (0095)     jc endif1 ; no underflow
07A2: 7E       RETI                     (0096)     reti
                                        (0097) endif1:
07A3: 3C 10 00 CMP   [0x10],0x0         (0098)     cmp [ADCINC_1_fMode],0
                                        (0099) if2: 
07A6: B0 12    JNZ   0x07B9             (0100)     jnz endif2  ;leaving reset mode
07A8: 08       PUSH  A                  (0101)     push A                            ;read decimator
07A9: 5D E5    MOV   A,REG[0xE5]        (0102)     mov  A, reg[DEC_DL]
07AB: 53 0D    MOV   [0xD],A            (0103)     mov  [iTemp + LowByte],A
07AD: 5D E4    MOV   A,REG[0xE4]        (0104)     mov  A, reg[DEC_DH]
07AF: 53 0C    MOV   [0xC],A            (0105)     mov  [iTemp + HighByte], A
07B1: 18       POP   A                  (0106)     pop A
07B2: 55 10 01 MOV   [0x10],0x1         (0107)     mov [ADCINC_1_fMode],1
07B5: 55 0F 03 MOV   [0xF],0x3          (0108)     mov [ADCINC_1_bState],((1<<(ADCINC_1_bNUMBITS- 6))-1)
07B8: 7E       RETI                     (0109)     reti
07B9: 43 82 20 OR    REG[0x82],0x20     
07BC: 43 83 10 OR    REG[0x83],0x10     
                                        (0110) endif2:
                                        (0111)     ;This code runs at end of integrate
                                        (0112)     ADCINC_1_RESET_INTEGRATOR_M
07BF: 08       PUSH  A                  (0113)     push A
07C0: 5D E5    MOV   A,REG[0xE5]        (0114)     mov  A, reg[DEC_DL]
07C2: 12 0D    SUB   A,[0xD]            (0115)     sub  A,[iTemp + LowByte]
07C4: 53 0D    MOV   [0xD],A            (0116)     mov  [iTemp +LowByte],A
07C6: 5D E4    MOV   A,REG[0xE4]        (0117)     mov  A, reg[DEC_DH]
07C8: 1A 0C    SBB   A,[0xC]            (0118)     sbb  A,[iTemp + HighByte]
                                        (0119) 
                                        (0120)        ;check for overflow
                                        (0121) IF     ADCINC_1_8_OR_MORE_BITS
07CA: 39 01    CMP   A,0x1              (0122)     cmp A,(1<<(ADCINC_1_bNUMBITS - 8))
                                        (0123) if3: 
07CC: B0 05    JNZ   0x07D2             (0124)     jnz endif3 ;overflow
07CE: 78       DEC   A                  (0125)     dec A
07CF: 55 0D FF MOV   [0xD],0xFF         (0126)     mov [iTemp + LowByte],ffh
                                        (0127) endif3:
                                        (0128) ELSE
                                        (0129)     cmp [iTemp + LowByte],(1<<(ADCINC_1_bNUMBITS))
                                        (0130) if4: 
                                        (0131)     jnz endif4 ;overflow
                                        (0132)     dec [iTemp + LowByte]
                                        (0133) endif4:
                                        (0134) ENDIF
                                        (0135) IF ADCINC_1_SIGNED_DATA
                                        (0136) IF ADCINC_1_9_OR_MORE_BITS
                                        (0137)     sub A,(1<<(ADCINC_1_bNUMBITS - 9))
                                        (0138) ELSE
                                        (0139)     sub [iTemp +LowByte],(1<<(ADCINC_1_bNUMBITS - 1))
                                        (0140)     sbb A,0
                                        (0141) ENDIF
                                        (0142) ENDIF
07D2: 5F 0B 0D MOV   [0xB],[0xD]        (0143)     mov  [ADCINC_1_iResult + LowByte],[iTemp +LowByte]
07D5: 53 0A    MOV   [0xA],A            (0144)     mov  [ADCINC_1_iResult + HighByte],A
07D7: 55 0E 01 MOV   [0xE],0x1          (0145)     mov  [ADCINC_1_fStatus],1
                                        (0146) ConversionReady:
                                        (0147)     ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0148)     ;---------------------------------------------------
                                        (0149)     ; Insert your custom code below this banner
                                        (0150)     ;---------------------------------------------------
                                        (0151)     ;  Sample data is now in iResult
                                        (0152)     ;
                                        (0153)     ;  NOTE: This interrupt service routine has already
                                        (0154)     ;  preserved the values of the A CPU register. If
                                        (0155)     ;  you need to use the X register you must preserve
                                        (0156)     ;  its value and restore it before the return from
                                        (0157)     ;  interrupt.
                                        (0158)     ;---------------------------------------------------
                                        (0159)     ; Insert your custom code above this banner
                                        (0160)     ;---------------------------------------------------
                                        (0161)     ;@PSoC_UserCode_END@ (Do not change this line.)
07DA: 18       POP   A                  (0162)     pop A
07DB: 3C 11 00 CMP   [0x11],0x0         (0163)     cmp [ADCINC_1_bNumSamples],0
                                        (0164) if5: 
07DE: B0 0E    JNZ   0x07ED             (0165)     jnz endif5 ; Number of samples is zero
07E0: 55 10 00 MOV   [0x10],0x0         (0166)     mov [ADCINC_1_fMode],0
07E3: 55 0F 00 MOV   [0xF],0x0          (0167)     mov [ADCINC_1_bState],0
07E6: 41 83 EF AND   REG[0x83],0xEF     
07E9: 41 82 DF AND   REG[0x82],0xDF     
                                        (0168)     ADCINC_1_ENABLE_INTEGRATOR_M
07EC: 7E       RETI                     (0169)     reti       
                                        (0170) endif5:
07ED: 7A 11    DEC   [0x11]             (0171)     dec [ADCINC_1_bNumSamples]
                                        (0172) if6:
07EF: A0 0E    JZ    0x07FE             (0173)     jz endif6  ; count not zero
07F1: 55 10 00 MOV   [0x10],0x0         (0174)     mov [ADCINC_1_fMode],0
07F4: 55 0F 00 MOV   [0xF],0x0          (0175)     mov [ADCINC_1_bState],0
07F7: 41 83 EF AND   REG[0x83],0xEF     
07FA: 41 82 DF AND   REG[0x82],0xDF     
                                        (0176)     ADCINC_1_ENABLE_INTEGRATOR_M
07FD: 7E       RETI                     (0177)     reti       
07FE: 71 10    OR    F,0x10             
                                        (0178) endif6:
                                        (0179)     ;All samples done
                                        (0180)     M8C_SetBank1
0800: 41 E7 3F AND   REG[0xE7],0x3F     (0181)     and reg[E7h], 3Fh            ; if we are in 29xxx or 24x94   
0803: 43 E7 80 OR    REG[0xE7],0x80     (0182)     or  reg[E7h], 80h            ; then set to incremental Mode
0806: 70 EF    AND   F,0xEF             
0808: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0183)     M8C_SetBank0
                                        (0184)     ADCINC_1_STOPADC_M
080B: 7E       RETI                     (0185)  reti 
FILE: lib\adcinc_1.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINC_1.asm
                                        (0004) ;;   Version: 1.20, Updated on 2013/5/19 at 10:39:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the ADCINC A/D Converter
                                        (0008) ;;               User Module with 1st-order modulator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API
                                        (0014) ;;        function returns. Even though these registers may be preserved now,
                                        (0015) ;;        there is no guarantee they will be preserved in future releases.
                                        (0016) ;;-----------------------------------------------------------------------------
                                        (0017) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0018) ;;*****************************************************************************
                                        (0019) ;;*****************************************************************************
                                        (0020) 
                                        (0021) include "m8c.inc"
                                        (0022) include "memory.inc"
                                        (0023) 
                                        (0024) include "ADCINC_1.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  ADCINC_1_Start
                                        (0031) export _ADCINC_1_Start
                                        (0032) export  ADCINC_1_SetPower
                                        (0033) export _ADCINC_1_SetPower
                                        (0034) export  ADCINC_1_Stop
                                        (0035) export _ADCINC_1_Stop
                                        (0036) export  ADCINC_1_GetSamples
                                        (0037) export _ADCINC_1_GetSamples
                                        (0038) export  ADCINC_1_StopADC
                                        (0039) export _ADCINC_1_StopADC
                                        (0040) export  ADCINC_1_fIsDataAvailable
                                        (0041) export _ADCINC_1_fIsDataAvailable
                                        (0042) export  ADCINC_1_iClearFlagGetData
                                        (0043) export _ADCINC_1_iClearFlagGetData
                                        (0044) export  ADCINC_1_wClearFlagGetData
                                        (0045) export _ADCINC_1_wClearFlagGetData
                                        (0046) export  ADCINC_1_cClearFlagGetData
                                        (0047) export _ADCINC_1_cClearFlagGetData
                                        (0048) export  ADCINC_1_bClearFlagGetData
                                        (0049) export _ADCINC_1_bClearFlagGetData
                                        (0050) export  ADCINC_1_iGetData
                                        (0051) export _ADCINC_1_iGetData
                                        (0052) export  ADCINC_1_wGetData
                                        (0053) export _ADCINC_1_wGetData
                                        (0054) export  ADCINC_1_bGetData
                                        (0055) export _ADCINC_1_bGetData
                                        (0056) export  ADCINC_1_cGetData
                                        (0057) export _ADCINC_1_cGetData
                                        (0058) export  ADCINC_1_fClearFlag
                                        (0059) export _ADCINC_1_fClearFlag
                                        (0060) export  ADCINC_1_WritePulseWidth
                                        (0061) export _ADCINC_1_WritePulseWidth
                                        (0062) 
                                        (0063) 
                                        (0064) AREA bss (RAM,REL)
                                        (0065) 
                                        (0066) ;-----------------------------------------------
                                        (0067) ;  Constant Definitions
                                        (0068) ;-----------------------------------------------
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: ADCINC_1_Start
                                        (0080) ;
                                        (0081) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0082) ;               and starts the PWM
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0086) ;  RETURNS:      Nothing.
                                        (0087) ;  SIDE EFFECTS:
                                        (0088) ;    The A and X registers may be modified by this or future implementations
                                        (0089) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0090) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0091) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0092) ;    functions.
                                        (0093) ;
                                        (0094)  ADCINC_1_Start:
                                        (0095) _ADCINC_1_Start:
                                        (0096)    RAM_PROLOGUE RAM_USE_CLASS_1
080C: 90 0D    CALL  _ADCINC_1_SetPower (0097)    call  ADCINC_1_SetPower
080E: 43 82 20 OR    REG[0x82],0x20     
0811: 43 83 10 OR    REG[0x83],0x10     
                                        (0098)    ADCINC_1_RESET_INTEGRATOR_M
0814: 62 21 FF MOV   REG[0x21],0xFF     (0099)    mov   reg[ADCINC_1_PWMdr1],ffh
0817: 43 23 01 OR    REG[0x23],0x1      (0100)    or    reg[ADCINC_1_PWMcr0],01h                    ; start PWM
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
081A: 7F       RET                      (0102)    ret
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105)    
                                        (0106) .SECTION
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;  FUNCTION NAME: ADCINC_1_SetPower
                                        (0109) ;
                                        (0110) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0111) ;-----------------------------------------------------------------------------
                                        (0112) ;
                                        (0113) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0114) ;  RETURNS:      Nothing.
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;    The A and X registers may be modified by this or future implementations
                                        (0117) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0118) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0119) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0120) ;    functions.
                                        (0121) ;
                                        (0122)  ADCINC_1_SetPower:
                                        (0123) _ADCINC_1_SetPower:
                                        (0124)    RAM_PROLOGUE RAM_USE_CLASS_2
081B: 4F       MOV   X,SP               (0125)    mov  X,SP                                     ; Set up Stack frame
081C: 21 03    AND   A,0x3              (0126)    and  A,03h                                    ; Ensure value is legal
081E: 08       PUSH  A                  (0127)    push A
081F: 5D 83    MOV   A,REG[0x83]        (0128)    mov  A,reg[ADCINC_1_AtoDcr3]                  ; First SC block:
0821: 21 FC    AND   A,0xFC             (0129)    and  A,~03h                                   ;   clear power bits to zero
0823: 2B 00    OR    A,[X+0]            (0130)    or   A,[ X ]                                  ;   establish new value
0825: 60 83    MOV   REG[0x83],A        (0131)    mov  reg[ADCINC_1_AtoDcr3],A                  ;   change the actual setting
0827: 18       POP   A                  (0132)    pop  A
0828: 70 3F    AND   F,0x3F             
082A: 71 C0    OR    F,0xC0             
                                        (0133)    RAM_EPILOGUE RAM_USE_CLASS_2
082C: 7F       RET                      (0134)    ret
082D: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0135) .ENDSECTION
                                        (0136) 
                                        (0137) .SECTION
                                        (0138) ;-----------------------------------------------------------------------------
                                        (0139) ;  FUNCTION NAME: ADCINC_1_Stop
                                        (0140) ;
                                        (0141) ;  DESCRIPTION:   Removes power from the module's analog PSoc block.
                                        (0142) ;                 and turns off PWM
                                        (0143) ;-----------------------------------------------------------------------------
                                        (0144) ;
                                        (0145) ;  ARGUMENTS:     None.
                                        (0146) ;  RETURNS:       Nothing.
                                        (0147) ;  SIDE EFFECTS:
                                        (0148) ;    The A and X registers may be modified by this or future implementations
                                        (0149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0151) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0152) ;    functions.
                                        (0153) ;
                                        (0154)  ADCINC_1_Stop:
                                        (0155) _ADCINC_1_Stop:
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0157)    ADCINC_1_STOPADC_M
0830: 41 83 FC AND   REG[0x83],0xFC     (0158)    and  reg[ADCINC_1_AtoDcr3], ~03h
0833: 41 23 FE AND   REG[0x23],0xFE     (0159)    and  reg[ADCINC_1_PWMcr0], ~01h ; stop PWM
                                        (0160)    RAM_EPILOGUE RAM_USE_CLASS_1
0836: 7F       RET                      (0161)    ret
0837: 62 D0 00 MOV   REG[0xD0],0x0      
083A: 41 83 EF AND   REG[0x83],0xEF     
083D: 41 82 DF AND   REG[0x82],0xDF     
                                        (0162) .ENDSECTION
                                        (0163) 
                                        (0164) 
                                        (0165) .SECTION
                                        (0166) ;-----------------------------------------------------------------------------
                                        (0167) ;  FUNCTION NAME: ADCINC_1_GetSamples
                                        (0168) ;
                                        (0169) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    A register contain number of samples
                                        (0173) ;  RETURNS:      Nothing.
                                        (0174) ;  SIDE EFFECTS:
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;          
                                        (0181) ;    Currently only the page pointer registers listed below are modified: 
                                        (0182) ;          CUR_PP
                                        (0183) ;
                                        (0184)  ADCINC_1_GetSamples:
                                        (0185) _ADCINC_1_GetSamples:
                                        (0186)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0187)    RAM_SETPAGE_CUR >ADCINC_1_fMode
                                        (0188)    ADCINC_1_ENABLE_INTEGRATOR_M
0840: 55 10 00 MOV   [0x10],0x0         (0189)    mov [ADCINC_1_fMode],0
0843: 55 0F 00 MOV   [0xF],0x0          (0190)    mov [ADCINC_1_bState],0
0846: 53 11    MOV   [0x11],A           (0191)    mov [ADCINC_1_bNumSamples],A
0848: 5D 22    MOV   A,REG[0x22]        (0192)    mov A, reg[ADCINC_1_PWMdr2]
084A: B0 04    JNZ   0x084F             (0193)    jnz  .SkipPulseWrite
084C: 62 22 01 MOV   REG[0x22],0x1      (0194)    mov reg[ADCINC_1_PWMdr2], 1
084F: 71 10    OR    F,0x10             
                                        (0195) .SkipPulseWrite:
                                        (0196) 
                                        (0197)    M8C_SetBank1
0851: 41 E7 3F AND   REG[0xE7],0x3F     (0198)    and reg[E7h], 3Fh             ; if we are in 29xxx or 24x94   
0854: 43 E7 40 OR    REG[0xE7],0x40     (0199)    or  reg[E7h], 40h             ; then set to incremental Mode
0857: 70 EF    AND   F,0xEF             
0859: 62 DB FE MOV   REG[0xDB],0xFE     
085C: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0200)    M8C_SetBank0
                                        (0201) 
                                        (0202)    ADCINC_1_STARTADC_M  ;enable interrupt 
                                        (0203)    RAM_EPILOGUE RAM_USE_CLASS_4 
085F: 7F       RET                      (0204)    ret
0860: 71 10    OR    F,0x10             
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) 
                                        (0208) .SECTION
                                        (0209) ;-----------------------------------------------------------------------------
                                        (0210) ;  FUNCTION NAME: ADCINC_1_StopADC
                                        (0211) ;
                                        (0212) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The interrupt
                                        (0213) ;               is disabled but the PWM output is still active.
                                        (0214) ;               Integrator is reset
                                        (0215) ;-----------------------------------------------------------------------------
                                        (0216) ;
                                        (0217) ;  ARGUMENTS:    None.
                                        (0218) ;  RETURNS:      Nothing.
                                        (0219) ;  SIDE EFFECTS:
                                        (0220) ;    The A and X registers may be modified by this or future implementations
                                        (0221) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0222) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0223) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0224) ;    functions.
                                        (0225) ;
                                        (0226)  ADCINC_1_StopADC:
                                        (0227) _ADCINC_1_StopADC:
                                        (0228)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0229)    M8C_SetBank1
0862: 41 E7 3F AND   REG[0xE7],0x3F     (0230)    and reg[E7h], 3Fh             ; if we are in 29xxx or 24x94   
0865: 43 E7 80 OR    REG[0xE7],0x80     (0231)    or  reg[E7h], 80h             ; then set to incremental Mode
0868: 70 EF    AND   F,0xEF             
086A: 41 E1 FE AND   REG[0xE1],0xFE     
086D: 43 82 20 OR    REG[0x82],0x20     
0870: 43 83 10 OR    REG[0x83],0x10     
                                        (0232)    M8C_SetBank0
                                        (0233)    ADCINC_1_STOPADC_M
                                        (0234)    ADCINC_1_RESET_INTEGRATOR_M
                                        (0235)    RAM_EPILOGUE RAM_USE_CLASS_1 
0873: 7F       RET                      (0236)    ret
0874: 62 D0 00 MOV   REG[0xD0],0x0      
0877: 51 0E    MOV   A,[0xE]            
                                        (0237) .ENDSECTION
                                        (0238) 
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: ADCINC_1_fIsDataAvailable
                                        (0243) ;
                                        (0244) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  ARGUMENTS:    None.
                                        (0247) ;  RETURNS:      fastcall BOOL DataAvailable returned in the A register
                                        (0248) ;  SIDE EFFECTS:
                                        (0249) ;    The A and X registers may be modified by this or future implementations
                                        (0250) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0251) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0252) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0253) ;    functions.
                                        (0254) ;          
                                        (0255) ;    Currently only the page pointer registers listed below are modified: 
                                        (0256) ;          CUR_PP
                                        (0257) ;
                                        (0258)  ADCINC_1_fIsDataAvailable:
                                        (0259) _ADCINC_1_fIsDataAvailable:
                                        (0260)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0261)    ADCINC_1_fIsDataAvailable_M   
                                        (0262)    RAM_EPILOGUE RAM_USE_CLASS_4
0879: 7F       RET                      (0263)    ret
087A: 62 D0 00 MOV   REG[0xD0],0x0      
087D: 55 0E 00 MOV   [0xE],0x0          
0880: 58 0A    MOV   X,[0xA]            
0882: 51 0B    MOV   A,[0xB]            
0884: 3C 0E 00 CMP   [0xE],0x0          
0887: BF F5    JNZ   0x087D             
                                        (0264) .ENDSECTION
                                        (0265) 
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME:  ADCINC_1_iClearFlagGetData
                                        (0270) ;                  ADCINC_1_wClearFlagGetData
                                        (0271) ;
                                        (0272) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0273) ;                  Flag is checked after trandfer to insure valid data.
                                        (0274) ;                  available. Also clears the DATA_READY flag. 
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  ARGUMENTS:    None.
                                        (0277) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;          
                                        (0285) ;    Currently only the page pointer registers listed below are modified: 
                                        (0286) ;          CUR_PP
                                        (0287) ;
                                        (0288)  ADCINC_1_iClearFlagGetData:
                                        (0289) _ADCINC_1_iClearFlagGetData:
                                        (0290)  ADCINC_1_wClearFlagGetData:
                                        (0291) _ADCINC_1_wClearFlagGetData:
                                        (0292)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0293)    ADCINC_1_iClearFlagGetData_M   
                                        (0294)    RAM_EPILOGUE RAM_USE_CLASS_4
0889: 7F       RET                      (0295)    ret
088A: 62 D0 00 MOV   REG[0xD0],0x0      
088D: 55 0E 00 MOV   [0xE],0x0          
0890: 51 0B    MOV   A,[0xB]            
                                        (0296) .ENDSECTION
                                        (0297) 
                                        (0298) 
                                        (0299) .SECTION
                                        (0300) ;-----------------------------------------------------------------------------
                                        (0301) ;  FUNCTION NAME:  ADCINC_1_cClearFlagGetData
                                        (0302) ;                  ADCINC_1_bClearFlagGetData
                                        (0303) ;
                                        (0304) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0305) ;-----------------------------------------------------------------------------
                                        (0306) ;  ARGUMENTS:    None.
                                        (0307) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0311) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0312) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0313) ;    functions.
                                        (0314) ;          
                                        (0315) ;    Currently only the page pointer registers listed below are modified: 
                                        (0316) ;          CUR_PP
                                        (0317) ;
                                        (0318)  ADCINC_1_cClearFlagGetData:
                                        (0319) _ADCINC_1_cClearFlagGetData:
                                        (0320)  ADCINC_1_bClearFlagGetData:
                                        (0321) _ADCINC_1_bClearFlagGetData:
                                        (0322)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0323)    ADCINC_1_bClearFlagGetData_M     
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
0892: 7F       RET                      (0325)    ret
0893: 62 D0 00 MOV   REG[0xD0],0x0      
0896: 58 0A    MOV   X,[0xA]            
0898: 51 0B    MOV   A,[0xB]            
                                        (0326) .ENDSECTION
                                        (0327) .SECTION
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;  FUNCTION NAME:  ADCINC_1_iGetData
                                        (0330) ;				   ADCINC_1_wGetData
                                        (0331) ;
                                        (0332) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0333) ;                   available.
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;  ARGUMENTS:    None.
                                        (0336) ;  RETURNS:      fastcall int iResult is returned in the X,A registers
                                        (0337) ;  SIDE EFFECTS:
                                        (0338) ;    The A and X registers may be modified by this or future implementations
                                        (0339) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0340) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0341) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0342) ;    functions.
                                        (0343) ;          
                                        (0344) ;    Currently only the page pointer registers listed below are modified: 
                                        (0345) ;          CUR_PP
                                        (0346) ;
                                        (0347)  ADCINC_1_iGetData:
                                        (0348) _ADCINC_1_iGetData:
                                        (0349)  ADCINC_1_wGetData:
                                        (0350) _ADCINC_1_wGetData:
                                        (0351)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0352)    ADCINC_1_wGetData_M          
                                        (0353)    RAM_EPILOGUE RAM_USE_CLASS_4
089A: 7F       RET                      (0354)    ret
089B: 62 D0 00 MOV   REG[0xD0],0x0      
089E: 51 0B    MOV   A,[0xB]            
                                        (0355) .ENDSECTION
                                        (0356) .SECTION
                                        (0357) ;-----------------------------------------------------------------------------
                                        (0358) ;  FUNCTION NAME:  ADCINC_1_bGetData
                                        (0359) ;                  ADCINC_1_cGetData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0362) ;                   available.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  ARGUMENTS:    None.
                                        (0365) ;  RETURNS:      fastcall CHAR cData returned in the A register
                                        (0366) ;  SIDE EFFECTS:
                                        (0367) ;    The A and X registers may be modified by this or future implementations
                                        (0368) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0369) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0370) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0371) ;    functions.
                                        (0372) ;          
                                        (0373) ;    Currently only the page pointer registers listed below are modified: 
                                        (0374) ;          CUR_PP
                                        (0375) ;
                                        (0376)  ADCINC_1_bGetData:
                                        (0377) _ADCINC_1_bGetData:
                                        (0378)  ADCINC_1_cGetData:
                                        (0379) _ADCINC_1_cGetData:
                                        (0380)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0381)    ADCINC_1_cGetData_M        
                                        (0382)    RAM_EPILOGUE RAM_USE_CLASS_4
08A0: 7F       RET                      (0383)    ret
08A1: 62 D0 00 MOV   REG[0xD0],0x0      
08A4: 51 0E    MOV   A,[0xE]            
08A6: 55 0E 00 MOV   [0xE],0x0          
                                        (0384) .ENDSECTION
                                        (0385) 
                                        (0386) 
                                        (0387) .SECTION
                                        (0388) ;-----------------------------------------------------------------------------
                                        (0389) ;  FUNCTION NAME: ADCINC_1_fClearFlag
                                        (0390) ;
                                        (0391) ;  DESCRIPTION: Clears the data ready flag.
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;  ARGUMENTS:    None.
                                        (0394) ;  RETURNS:      Nothing.
                                        (0395) ;  SIDE EFFECTS: 
                                        (0396) ;    The DATA_READY flag is cleared.
                                        (0397) ;    
                                        (0398) ;    The A and X registers may be modified by this or future implementations
                                        (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0402) ;    functions.
                                        (0403) ;          
                                        (0404) ;    Currently only the page pointer registers listed below are modified: 
                                        (0405) ;          CUR_PP
                                        (0406) ;
                                        (0407)  ADCINC_1_fClearFlag:
                                        (0408) _ADCINC_1_fClearFlag:
                                        (0409)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0410)    ADCINC_1_fClearFlag_M    
                                        (0411)    RAM_EPILOGUE RAM_USE_CLASS_4
08A9: 7F       RET                      (0412)    ret
08AA: 60 22    MOV   REG[0x22],A        
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) 
                                        (0416) .SECTION
                                        (0417) ;-----------------------------------------------------------------------------
                                        (0418) ;  FUNCTION NAME: ADCINC_1_WritePulseWidth
                                        (0419) ;
                                        (0420) ;  DESCRIPTION:
                                        (0421) ;     Write the 8-bit period value into the compare register (DR2).
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;
                                        (0424) ;  ARGUMENTS: fastcall BYTE bPeriodValue (passed in A)
                                        (0425) ;  RETURNS:   Nothing
                                        (0426) ;  SIDE EFFECTS:
                                        (0427) ;    The A and X registers may be modified by this or future implementations
                                        (0428) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0429) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0430) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0431) ;    functions.
                                        (0432) ;
                                        (0433)  ADCINC_1_WritePulseWidth:
                                        (0434) _ADCINC_1_WritePulseWidth:
                                        (0435)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0436)    ADCINC_1_WritePulseWidth_M  
                                        (0437)    RAM_EPILOGUE RAM_USE_CLASS_1
08AC: 7F       RET                      (0438)    ret
                                        (0439) .ENDSECTION
                                        (0440) 
                                        (0441) ; End of File ADCINC_1.asm
FILE: C:\Users\MATSUD~1\DOCUME~1\PSOCDE~1.4PR\PDED11~1\PDPROJ~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include <stdio.h>
(0008) #include <string.h>
(0009) 
(0010) int putchar (char c)
(0011) {
__UserModules_end|_putchar|__text_start|_putchar:
  str                  --> X+0
  c                    --> X-4
    08AD: 10       PUSH  X
    08AE: 4F       MOV   X,SP
    08AF: 38 02    ADD   SP,0x2
(0012) 	char str[] = " ";
    08B1: 62 D0 00 MOV   REG[0xD0],0x0
    08B4: 55 17 A0 MOV   [__r1],0xA0
    08B7: 55 18 01 MOV   [__r0],0x1
    08BA: 5A 15    MOV   [__r3],X
    08BC: 62 D5 07 MOV   REG[0xD5],0x7
    08BF: 10       PUSH  X
    08C0: 55 14 00 MOV   [__rX],0x0
    08C3: 51 18    MOV   A,[__r0]
    08C5: 58 17    MOV   X,[__r1]
    08C7: 08       PUSH  A
    08C8: 28       ROMX  
    08C9: 62 D0 00 MOV   REG[0xD0],0x0
    08CC: 3F 15    MVI   [__r3],A
    08CE: 18       POP   A
    08CF: 75       INC   X
    08D0: 09 00    ADC   A,0x0
    08D2: 76 14    INC   [__rX]
    08D4: 3C 14 02 CMP   [__rX],0x2
    08D7: BF EF    JNZ   0x08C7
    08D9: 20       POP   X
(0013) 	strncpy( str , &c , 1 );
    08DA: 50 00    MOV   A,0x0
    08DC: 08       PUSH  A
    08DD: 50 01    MOV   A,0x1
    08DF: 08       PUSH  A
    08E0: 5A 17    MOV   [__r1],X
    08E2: 16 17 04 SUB   [__r1],0x4
    08E5: 50 07    MOV   A,0x7
    08E7: 08       PUSH  A
    08E8: 51 17    MOV   A,[__r1]
    08EA: 08       PUSH  A
    08EB: 50 07    MOV   A,0x7
    08ED: 08       PUSH  A
    08EE: 10       PUSH  X
    08EF: 7C 0B CD LCALL _strncpy
    08F2: 38 FA    ADD   SP,0xFA
(0014) 	LCD_1_PrString( str );
    08F4: 62 D0 00 MOV   REG[0xD0],0x0
    08F7: 10       PUSH  X
    08F8: 50 07    MOV   A,0x7
    08FA: 08       PUSH  A
    08FB: 18       POP   A
    08FC: 7C 05 4B LCALL _LCD_1_PrString
    08FF: 20       POP   X
(0015) 	return c;
    0900: 62 D0 00 MOV   REG[0xD0],0x0
    0903: 52 FC    MOV   A,[X-4]
    0905: 53 17    MOV   [__r1],A
    0907: 55 18 00 MOV   [__r0],0x0
    090A: 38 FE    ADD   SP,0xFE
    090C: 20       POP   X
    090D: 7F       RET   
(0016) }
(0017) 	
(0018) void main(void)
(0019) {
_main:
  ki                   --> X+16
  kp                   --> X+12
  det_target           --> X+10
  target               --> X+8
  det_date2            --> X+6
  date                 --> X+4
  det_date1            --> X+2
  det_operation        --> X+0
    090E: 10       PUSH  X
    090F: 4F       MOV   X,SP
    0910: 38 14    ADD   SP,0x14
(0020) 	int date;
(0021) 	int target = 20;
    0912: 56 09 14 MOV   [X+9],0x14
    0915: 56 08 00 MOV   [X+8],0x0
(0022) 	int det_target = 0;
    0918: 56 0B 00 MOV   [X+11],0x0
    091B: 56 0A 00 MOV   [X+10],0x0
(0023) 	double kp,ki;
(0024) 	int det_operation = 0;
    091E: 56 01 00 MOV   [X+1],0x0
    0921: 56 00 00 MOV   [X+0],0x0
(0025) 	int det_date1 = 0,det_date2 = 0;
    0924: 56 03 00 MOV   [X+3],0x0
    0927: 56 02 00 MOV   [X+2],0x0
    092A: 56 07 00 MOV   [X+7],0x0
    092D: 56 06 00 MOV   [X+6],0x0
(0026) 	M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
    0930: 71 01    OR    F,0x1
(0027) 	// Insert your main routine code here.
(0028) 	LCD_1_Start();
    0932: 10       PUSH  X
    0933: 7C 06 21 LCALL LCD_1_Start|_LCD_1_Init|_LCD_1_Start|LCD_1_Init
(0029) 	ADCINC_1_Start(3);
    0936: 50 03    MOV   A,0x3
    0938: 7C 08 0C LCALL _ADCINC_1_Start
(0030) 	ADCINC_1_GetSamples(0);
    093B: 50 00    MOV   A,0x0
    093D: 7C 08 37 LCALL _ADCINC_1_GetSamples
(0031) 	PWM8_1_Start();
    0940: 7C 04 D1 LCALL _PWM8_1_Start
(0032) 	PWM8_2_Start();
    0943: 7C 04 8A LCALL _PWM8_2_Start
(0033) 	SleepTimer_1_Start();
    0946: 7C 03 EF LCALL _SleepTimer_1_Start
(0034) 	SleepTimer_1_SetInterval(SleepTimer_1_1_HZ);
    0949: 50 18    MOV   A,0x18
    094B: 7C 04 04 LCALL _SleepTimer_1_SetInterval
(0035) 	SleepTimer_1_EnableInt();
    094E: 7C 03 E7 LCALL _SleepTimer_1_EnableInt
    0951: 20       POP   X
    0952: 81 AE    JMP   0x0B01
(0036) 	
(0037) 	//////////////////サーボテストプログラム//////////////////
(0038) 	while (1){
(0039) 
(0040) 		////////////////AD変換//////////////////////
(0041) 		while (ADCINC_1_fIsDataAvailable() == 0);
    0954: 10       PUSH  X
    0955: 7C 08 74 LCALL _ADCINC_1_fIsDataAvailable
    0958: 20       POP   X
    0959: 62 D0 00 MOV   REG[0xD0],0x0
    095C: 39 00    CMP   A,0x0
    095E: AF F5    JZ    0x0954
(0042) 		LCD_1_Position(0,0);
    0960: 10       PUSH  X
    0961: 50 00    MOV   A,0x0
    0963: 57 00    MOV   X,0x0
    0965: 7C 06 94 LCALL _LCD_1_Position
(0043) 		date = ADCINC_1_iClearFlagGetData();
    0968: 7C 08 7A LCALL _ADCINC_1_wClearFlagGetData|_ADCINC_1_iClearFlagGetData|ADCINC_1_iClearFlagGetData|ADCINC_1_wClearFlagGetData
    096B: 62 D0 00 MOV   REG[0xD0],0x0
    096E: 5A 18    MOV   [__r0],X
    0970: 20       POP   X
    0971: 54 05    MOV   [X+5],A
    0973: 51 18    MOV   A,[__r0]
    0975: 54 04    MOV   [X+4],A
(0044) 		LCD_1_PrCString("AD:");
    0977: 10       PUSH  X
    0978: 50 01    MOV   A,0x1
    097A: 08       PUSH  A
    097B: 50 B1    MOV   A,0xB1
    097D: 5C       MOV   X,A
    097E: 18       POP   A
    097F: 7C 05 0F LCALL _LCD_1_PrCString
    0982: 20       POP   X
(0045) 		LCD_1_PrHexByte(date);
    0983: 62 D0 00 MOV   REG[0xD0],0x0
    0986: 52 05    MOV   A,[X+5]
    0988: 10       PUSH  X
    0989: 7C 05 31 LCALL _LCD_1_PrHexByte
    098C: 20       POP   X
(0046) 		
(0047) 		det_date1 = target  - date;
    098D: 52 09    MOV   A,[X+9]
    098F: 13 05    SUB   A,[X+5]
    0991: 54 03    MOV   [X+3],A
    0993: 52 08    MOV   A,[X+8]
    0995: 1B 04    SBB   A,[X+4]
    0997: 54 02    MOV   [X+2],A
(0048) 		
(0049) 		///////////////////////操作量/////////////////
(0050) 		det_operation = (det_date1 - det_date2) * 2 / 3 + det_date1 * 1 / 3 ;
    0999: 62 D0 00 MOV   REG[0xD0],0x0
    099C: 52 02    MOV   A,[X+2]
    099E: 08       PUSH  A
    099F: 52 03    MOV   A,[X+3]
    09A1: 08       PUSH  A
    09A2: 50 00    MOV   A,0x0
    09A4: 08       PUSH  A
    09A5: 50 01    MOV   A,0x1
    09A7: 08       PUSH  A
    09A8: 7C 0B 8F LCALL 0x0B8F
    09AB: 38 FC    ADD   SP,0xFC
    09AD: 51 14    MOV   A,[__rX]
    09AF: 53 17    MOV   [__r1],A
    09B1: 51 13    MOV   A,[__rY]
    09B3: 53 18    MOV   [__r0],A
    09B5: 50 00    MOV   A,0x0
    09B7: 08       PUSH  A
    09B8: 50 03    MOV   A,0x3
    09BA: 08       PUSH  A
    09BB: 51 18    MOV   A,[__r0]
    09BD: 08       PUSH  A
    09BE: 51 17    MOV   A,[__r1]
    09C0: 08       PUSH  A
    09C1: 7C 0B 08 LCALL 0x0B08
    09C4: 18       POP   A
    09C5: 53 17    MOV   [__r1],A
    09C7: 18       POP   A
    09C8: 53 18    MOV   [__r0],A
    09CA: 38 FE    ADD   SP,0xFE
    09CC: 52 03    MOV   A,[X+3]
    09CE: 13 07    SUB   A,[X+7]
    09D0: 53 15    MOV   [__r3],A
    09D2: 52 02    MOV   A,[X+2]
    09D4: 1B 06    SBB   A,[X+6]
    09D6: 53 16    MOV   [__r2],A
    09D8: 65 15    ASL   [__r3]
    09DA: 6B 16    RLC   [__r2]
    09DC: 50 00    MOV   A,0x0
    09DE: 08       PUSH  A
    09DF: 50 03    MOV   A,0x3
    09E1: 08       PUSH  A
    09E2: 51 16    MOV   A,[__r2]
    09E4: 08       PUSH  A
    09E5: 51 15    MOV   A,[__r3]
    09E7: 08       PUSH  A
    09E8: 7C 0B 08 LCALL 0x0B08
    09EB: 18       POP   A
    09EC: 53 15    MOV   [__r3],A
    09EE: 18       POP   A
    09EF: 53 16    MOV   [__r2],A
    09F1: 38 FE    ADD   SP,0xFE
    09F3: 51 15    MOV   A,[__r3]
    09F5: 02 17    ADD   A,[__r1]
    09F7: 54 01    MOV   [X+1],A
    09F9: 51 16    MOV   A,[__r2]
    09FB: 0A 18    ADC   A,[__r0]
    09FD: 54 00    MOV   [X+0],A
(0051) 		
(0052) 		det_date2 = det_date1;
    09FF: 52 03    MOV   A,[X+3]
    0A01: 54 07    MOV   [X+7],A
    0A03: 52 02    MOV   A,[X+2]
    0A05: 54 06    MOV   [X+6],A
(0053) 		
(0054) 		LCD_1_Position(0,6);
    0A07: 10       PUSH  X
    0A08: 57 06    MOV   X,0x6
    0A0A: 50 00    MOV   A,0x0
    0A0C: 7C 06 94 LCALL _LCD_1_Position
(0055) 		LCD_1_PrCString("d_op");
    0A0F: 50 01    MOV   A,0x1
    0A11: 08       PUSH  A
    0A12: 50 AC    MOV   A,0xAC
    0A14: 5C       MOV   X,A
    0A15: 18       POP   A
    0A16: 7C 05 0F LCALL _LCD_1_PrCString
    0A19: 20       POP   X
(0056) 		LCD_1_PrHexByte(det_operation);
    0A1A: 62 D0 00 MOV   REG[0xD0],0x0
    0A1D: 52 01    MOV   A,[X+1]
    0A1F: 10       PUSH  X
    0A20: 7C 05 31 LCALL _LCD_1_PrHexByte
    0A23: 20       POP   X
(0057) 		////////目標値に達成///////////////
(0058) 		if (det_operation == 0){
    0A24: 3D 00 00 CMP   [X+0],0x0
    0A27: B0 53    JNZ   0x0A7B
    0A29: 3D 01 00 CMP   [X+1],0x0
    0A2C: B0 4E    JNZ   0x0A7B
(0059) 			
(0060) 			LCD_1_Position(0,12);
    0A2E: 10       PUSH  X
    0A2F: 57 0C    MOV   X,0xC
    0A31: 50 00    MOV   A,0x0
    0A33: 7C 06 94 LCALL _LCD_1_Position
(0061) 			LCD_1_PrCString("stop");
    0A36: 50 01    MOV   A,0x1
    0A38: 08       PUSH  A
    0A39: 50 A7    MOV   A,0xA7
    0A3B: 5C       MOV   X,A
    0A3C: 18       POP   A
    0A3D: 7C 05 0F LCALL _LCD_1_PrCString
(0062) 			PWM8_1_WritePulseWidth(255);
    0A40: 50 FF    MOV   A,0xFF
    0A42: 7C 04 DC LCALL _PWM8_1_WritePulseWidth
(0063) 			PWM8_2_WritePulseWidth(255);
    0A45: 50 FF    MOV   A,0xFF
    0A47: 7C 04 95 LCALL _PWM8_2_WritePulseWidth
    0A4A: 20       POP   X
(0064) 			
(0065) 			
(0066) 			
(0067) 			if (PRT2DR & (1 << 2)){
    0A4B: 5D 08    MOV   A,REG[0x8]
    0A4D: 62 D0 00 MOV   REG[0xD0],0x0
    0A50: 53 18    MOV   [__r0],A
    0A52: 47 18 04 TST   [__r0],0x4
    0A55: A0 09    JZ    0x0A5F
(0068) 				
(0069) 				target = 0xf0;
    0A57: 56 09 F0 MOV   [X+9],0xF0
    0A5A: 56 08 00 MOV   [X+8],0x0
(0070) 				
(0071) 			}
    0A5D: 80 A3    JMP   0x0B01
(0072) 			
(0073) 			else if (PRT2DR & (1 << 4)){
    0A5F: 5D 08    MOV   A,REG[0x8]
    0A61: 62 D0 00 MOV   REG[0xD0],0x0
    0A64: 53 18    MOV   [__r0],A
    0A66: 47 18 10 TST   [__r0],0x10
    0A69: A0 09    JZ    0x0A73
(0074) 				
(0075) 				target = 0x14;
    0A6B: 56 09 14 MOV   [X+9],0x14
    0A6E: 56 08 00 MOV   [X+8],0x0
(0076) 				
(0077) 			}
    0A71: 80 8F    JMP   0x0B01
(0078) 			
(0079) 			else {
(0080) 				
(0081) 				target = 0x80;
    0A73: 56 09 80 MOV   [X+9],0x80
    0A76: 56 08 00 MOV   [X+8],0x0
(0082) 			}
(0083) 		
(0084) 		}
    0A79: 80 87    JMP   0x0B01
(0085) 		/////////目標値とずれていた場合/////////////
(0086) 		else{
(0087) 			
(0088) 			LCD_1_Position(0,12);
    0A7B: 10       PUSH  X
    0A7C: 57 0C    MOV   X,0xC
    0A7E: 50 00    MOV   A,0x0
    0A80: 7C 06 94 LCALL _LCD_1_Position
(0089) 			LCD_1_PrCString("    ");
    0A83: 50 01    MOV   A,0x1
    0A85: 08       PUSH  A
    0A86: 50 A2    MOV   A,0xA2
    0A88: 5C       MOV   X,A
    0A89: 18       POP   A
    0A8A: 7C 05 0F LCALL _LCD_1_PrCString
    0A8D: 20       POP   X
(0090) 			LCD_1_PrHexByte(det_date1);
    0A8E: 62 D0 00 MOV   REG[0xD0],0x0
    0A91: 52 03    MOV   A,[X+3]
    0A93: 10       PUSH  X
    0A94: 7C 05 31 LCALL _LCD_1_PrHexByte
    0A97: 20       POP   X
(0091) 			///////目標値より負///////////////
(0092) 			if (det_operation < 0){
    0A98: 52 01    MOV   A,[X+1]
    0A9A: 11 00    SUB   A,0x0
    0A9C: 52 00    MOV   A,[X+0]
    0A9E: 31 80    XOR   A,0x80
    0AA0: 19 80    SBB   A,0x80
    0AA2: D0 2D    JNC   0x0AD0
(0093) 				LCD_1_Position(1,0);
    0AA4: 10       PUSH  X
    0AA5: 57 00    MOV   X,0x0
    0AA7: 50 01    MOV   A,0x1
    0AA9: 7C 06 94 LCALL _LCD_1_Position
    0AAC: 20       POP   X
(0094) 			//	LCD_1_PrCString("se:");
(0095) 				LCD_1_PrHexInt((BYTE)det_operation);
    0AAD: 62 D0 00 MOV   REG[0xD0],0x0
    0AB0: 52 01    MOV   A,[X+1]
    0AB2: 53 17    MOV   [__r1],A
    0AB4: 10       PUSH  X
    0AB5: 50 00    MOV   A,0x0
    0AB7: 08       PUSH  A
    0AB8: 51 17    MOV   A,[__r1]
    0ABA: 20       POP   X
    0ABB: 7C 05 44 LCALL _LCD_1_PrHexInt
    0ABE: 20       POP   X
(0096) 				PWM8_1_WritePulseWidth(256 + (BYTE)det_operation);
    0ABF: 62 D0 00 MOV   REG[0xD0],0x0
    0AC2: 52 01    MOV   A,[X+1]
    0AC4: 10       PUSH  X
    0AC5: 7C 04 DC LCALL _PWM8_1_WritePulseWidth
(0097) 				PWM8_2_WritePulseWidth(0);
    0AC8: 50 00    MOV   A,0x0
    0ACA: 7C 04 95 LCALL _PWM8_2_WritePulseWidth
    0ACD: 20       POP   X
(0098) 			}
    0ACE: 80 32    JMP   0x0B01
(0099) 			////////目標値より正/////////////
(0100) 			else{
(0101) 				LCD_1_Position(1,6);
    0AD0: 10       PUSH  X
    0AD1: 57 06    MOV   X,0x6
    0AD3: 50 01    MOV   A,0x1
    0AD5: 7C 06 94 LCALL _LCD_1_Position
    0AD8: 20       POP   X
(0102) 			//	LCD_1_PrCString("fu:");
(0103) 				LCD_1_PrHexInt((BYTE)det_operation);
    0AD9: 62 D0 00 MOV   REG[0xD0],0x0
    0ADC: 52 01    MOV   A,[X+1]
    0ADE: 53 17    MOV   [__r1],A
    0AE0: 10       PUSH  X
    0AE1: 50 00    MOV   A,0x0
    0AE3: 08       PUSH  A
    0AE4: 51 17    MOV   A,[__r1]
    0AE6: 20       POP   X
    0AE7: 7C 05 44 LCALL _LCD_1_PrHexInt
    0AEA: 20       POP   X
(0104) 				PWM8_2_WritePulseWidth(215 + (BYTE)det_operation);
    0AEB: 62 D0 00 MOV   REG[0xD0],0x0
    0AEE: 52 01    MOV   A,[X+1]
    0AF0: 53 18    MOV   [__r0],A
    0AF2: 06 18 D7 ADD   [__r0],0xD7
    0AF5: 10       PUSH  X
    0AF6: 51 18    MOV   A,[__r0]
    0AF8: 7C 04 95 LCALL _PWM8_2_WritePulseWidth
(0105) 				PWM8_1_WritePulseWidth(0);
    0AFB: 50 00    MOV   A,0x0
    0AFD: 7C 04 DC LCALL _PWM8_1_WritePulseWidth
    0B00: 20       POP   X
(0106) 				
(0107) 			}
(0108) 		}
(0109) 		
(0110) 	}
    0B01: 8E 52    JMP   0x0954
(0111) 
(0112) 	/*
(0113) 	while(1){
(0114) 		while (ADCINC_1_fIsDataAvailable() == 0);
(0115) 		LCD_1_Position(0,0);
(0116) 		date = ADCINC_1_iClearFlagGetData();
(0117) 		LCD_1_PrHexByte(date);
(0118) 	}*/
(0119) }
    0B03: 38 EC    ADD   SP,0xEC
    0B05: 20       POP   X
    0B06: 8F FF    JMP   0x0B06
_strncpy:
    0BCD: 10       PUSH  X
    0BCE: 4F       MOV   X,SP
    0BCF: 38 02    ADD   SP,0x2
    0BD1: 52 FC    MOV   A,[X-4]
    0BD3: 54 01    MOV   [X+1],A
    0BD5: 52 FB    MOV   A,[X-5]
    0BD7: 54 00    MOV   [X+0],A
    0BD9: 80 43    JMP   0x0C1D
    0BDB: 62 D0 00 MOV   REG[0xD0],0x0
    0BDE: 52 FC    MOV   A,[X-4]
    0BE0: 53 17    MOV   [__r1],A
    0BE2: 52 FB    MOV   A,[X-5]
    0BE4: 53 18    MOV   [__r0],A
    0BE6: 51 17    MOV   A,[__r1]
    0BE8: 01 01    ADD   A,0x1
    0BEA: 54 FC    MOV   [X-4],A
    0BEC: 51 18    MOV   A,[__r0]
    0BEE: 09 00    ADC   A,0x0
    0BF0: 54 FB    MOV   [X-5],A
    0BF2: 52 FA    MOV   A,[X-6]
    0BF4: 53 15    MOV   [__r3],A
    0BF6: 52 F9    MOV   A,[X-7]
    0BF8: 53 16    MOV   [__r2],A
    0BFA: 51 15    MOV   A,[__r3]
    0BFC: 01 01    ADD   A,0x1
    0BFE: 54 FA    MOV   [X-6],A
    0C00: 51 16    MOV   A,[__r2]
    0C02: 09 00    ADC   A,0x0
    0C04: 54 F9    MOV   [X-7],A
    0C06: 51 16    MOV   A,[__r2]
    0C08: 60 D4    MOV   REG[0xD4],A
    0C0A: 3E 15    MVI   A,[__r3]
    0C0C: 7A 15    DEC   [__r3]
    0C0E: 53 16    MOV   [__r2],A
    0C10: 51 18    MOV   A,[__r0]
    0C12: 60 D5    MOV   REG[0xD5],A
    0C14: 51 16    MOV   A,[__r2]
    0C16: 3F 17    MVI   [__r1],A
    0C18: 7B F8    DEC   [X-8]
    0C1A: 1F F7 00 SBB   [X-9],0x0
    0C1D: 62 D0 00 MOV   REG[0xD0],0x0
    0C20: 52 FA    MOV   A,[X-6]
    0C22: 53 17    MOV   [__r1],A
    0C24: 52 F9    MOV   A,[X-7]
    0C26: 60 D4    MOV   REG[0xD4],A
    0C28: 3E 17    MVI   A,[__r1]
    0C2A: 39 00    CMP   A,0x0
    0C2C: A0 0B    JZ    0x0C38
    0C2E: 3D F7 00 CMP   [X-9],0x0
    0C31: BF A9    JNZ   0x0BDB
    0C33: 3D F8 00 CMP   [X-8],0x0
    0C36: BF A4    JNZ   0x0BDB
    0C38: 80 20    JMP   0x0C59
    0C3A: 62 D0 00 MOV   REG[0xD0],0x0
    0C3D: 52 FC    MOV   A,[X-4]
    0C3F: 53 17    MOV   [__r1],A
    0C41: 52 FB    MOV   A,[X-5]
    0C43: 53 18    MOV   [__r0],A
    0C45: 51 17    MOV   A,[__r1]
    0C47: 01 01    ADD   A,0x1
    0C49: 54 FC    MOV   [X-4],A
    0C4B: 51 18    MOV   A,[__r0]
    0C4D: 09 00    ADC   A,0x0
    0C4F: 54 FB    MOV   [X-5],A
    0C51: 51 18    MOV   A,[__r0]
    0C53: 60 D5    MOV   REG[0xD5],A
    0C55: 50 00    MOV   A,0x0
    0C57: 3F 17    MVI   [__r1],A
    0C59: 62 D0 00 MOV   REG[0xD0],0x0
    0C5C: 52 F8    MOV   A,[X-8]
    0C5E: 53 17    MOV   [__r1],A
    0C60: 52 F7    MOV   A,[X-9]
    0C62: 53 18    MOV   [__r0],A
    0C64: 51 17    MOV   A,[__r1]
    0C66: 11 01    SUB   A,0x1
    0C68: 54 F8    MOV   [X-8],A
    0C6A: 51 18    MOV   A,[__r0]
    0C6C: 19 00    SBB   A,0x0
    0C6E: 54 F7    MOV   [X-9],A
    0C70: 3C 18 00 CMP   [__r0],0x0
    0C73: BF C6    JNZ   0x0C3A
    0C75: 3C 17 00 CMP   [__r1],0x0
    0C78: BF C1    JNZ   0x0C3A
    0C7A: 62 D0 00 MOV   REG[0xD0],0x0
    0C7D: 52 01    MOV   A,[X+1]
    0C7F: 53 17    MOV   [__r1],A
    0C81: 52 00    MOV   A,[X+0]
    0C83: 53 18    MOV   [__r0],A
    0C85: 38 FE    ADD   SP,0xFE
    0C87: 20       POP   X
    0C88: 7F       RET   
