FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 06 33 LJMP  _Timer8_1_ISR      (0161)     ljmp	_Timer8_1_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
0060: 7D 08 B9 LJMP  _EzI2Cs_1_ISR      (0213)     ljmp	_EzI2Cs_1_ISR
0063: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
007E: 43 FE 04 OR    REG[0xFE],0x4      (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
                                        (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
0087: 5D D0    MOV   A,REG[0xD0]        
0089: 08       PUSH  A                  
008A: 62 D0 00 MOV   REG[0xD0],0x0      
008D: 55 FA 01 MOV   [ct+140],0x1       
0090: 4F       MOV   X,SP               
0091: 5B       MOV   A,X                
0092: 01 03    ADD   A,0x3              
0094: 53 F9    MOV   [ct+139],A         
0096: 55 F8 3A MOV   [ct+138],0x3A      
0099: 50 06    MOV   A,0x6              
009B: 00       SWI                      
009C: 71 10    OR    F,0x10             
009E: 51 FC    MOV   A,[ct+142]         
00A0: 29 40    OR    A,0x40             
00A2: 60 EA    MOV   REG[0xEA],A        
00A4: 70 EF    AND   F,0xEF             
00A6: 18       POP   A                  
00A7: 60 D0    MOV   REG[0xD0],A        
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
00A9: 55 F8 00 MOV   [ct+138],0x0       (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
00AC: 55 F9 00 MOV   [ct+139],0x0       (0308)     mov  [bSSC_KEYSP], 0
00AF: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
00B1: 62 E0 9A MOV   REG[0xE0],0x9A     (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
00B4: 70 EF    AND   F,0xEF             
00B6: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
00B9: 43 E0 40 OR    REG[0xE0],0x40     (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
00BC: 62 E2 00 MOV   REG[0xE2],0x0      (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
00BF: 49 DA 40 TST   REG[0xDA],0x40     (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
00C2: AF FC    JZ    0x00BF             (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
00C4: 71 10    OR    F,0x10             
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
                                        (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
00C6: 62 E0 C8 MOV   REG[0xE0],0xC8     (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
00C9: 70 EF    AND   F,0xEF             
00CB: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
00CE: 62 E2 00 MOV   REG[0xE2],0x0      (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
00D1: 49 DA 40 TST   REG[0xDA],0x40     (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
00D4: AF FC    JZ    0x00D1             (0351)     jz   .WaitFor16ms
00D6: 71 10    OR    F,0x10             
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
00D8: 62 E0 CA MOV   REG[0xE0],0xCA     (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
00DB: 70 EF    AND   F,0xEF             
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
00DD: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
00E0: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
00E3: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00E6: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00E9: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00EC: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00EE: 4E       SWAP  SP,A               (0410)     swap  A, SP
00EF: 62 D3 07 MOV   REG[0xD3],0x7      
00F2: 62 D0 00 MOV   REG[0xD0],0x0      
00F5: 62 D5 00 MOV   REG[0xD5],0x0      
00F8: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00FB: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00FD: 7C 06 1A LCALL 0x061A             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
0100: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
0103: 50 03    MOV   A,0x3              (0484)     mov   A, >__pXIData                ; Get the address of the flash
0105: 57 76    MOV   X,0x76             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
0107: 08       PUSH  A                  (0486)     push  A
0108: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
0109: 53 49    MOV   [__r0],A           (0488)     mov   [__r0], A
010B: 18       POP   A                  (0489)     pop   A
010C: 75       INC   X                  (0490)     inc   X
010D: 09 00    ADC   A,0x0              (0491)     adc   A, 0
010F: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
0110: 4B       SWAP  A,X                (0493)     swap  A, X
0111: 51 49    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
0113: 80 04    JMP   0x0118             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
0115: 75       INC   X                  (0514)     inc   X                            ; pXIData++
0116: 09 00    ADC   A,0x0              (0515)     adc   A, 0
0118: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
011B: 08       PUSH  A                  (0521)     push  A
011C: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
011D: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
011F: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
0120: A0 4B    JZ    0x016C             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
0122: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
0123: 75       INC   X                  (0527)     inc   X                            ; pXIData++
0124: 09 00    ADC   A,0x0              (0528)     adc   A, 0
0126: 08       PUSH  A                  (0529)     push  A
0127: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
0128: 53 49    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
012A: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
012B: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
012C: 09 00    ADC   A,0x0              (0534)     adc   A, 0
012E: 08       PUSH  A                  (0535)     push  A
012F: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
0130: A0 1C    JZ    0x014D             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
0132: 53 48    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
0134: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
0135: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
0136: 09 00    ADC   A,0x0              (0548)     adc   A, 0
0138: 08       PUSH  A                  (0549)     push  A
0139: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
013A: 3F 49    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
013C: 47 49 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
013F: B0 06    JNZ   0x0146             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
0141: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0143: 74       INC   A                  (0555)     inc   A
0144: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0146: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0147: 7A 48    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0149: BF EB    JNZ   0x0135             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
014B: 8F C9    JMP   0x0115             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
014D: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
014E: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
014F: 09 00    ADC   A,0x0              (0566)     adc   A, 0
0151: 08       PUSH  A                  (0567)     push  A
0152: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
0153: 53 48    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
0155: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0157: 3F 49    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0159: 47 49 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
015C: B0 08    JNZ   0x0165             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
015E: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0160: 74       INC   A                  (0580)     inc   A
0161: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
0163: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
0165: 7A 48    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0167: BF EF    JNZ   0x0157             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0169: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
016A: 8F AA    JMP   0x0115             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
016C: 18       POP   A                  (0590)     pop   A                            ; balance stack
016D: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
016F: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
0172: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
0174: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0177: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0179: 62 E0 C3 MOV   REG[0xE0],0xC3     (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
017C: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
017F: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0181: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
0184: 7C 09 F3 LCALL __UserModules_end|__text_start|_main|_main(0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0187: 8F FF    JMP   0x0187             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0189: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
018B: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
037A: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_catchrobo_dcm
                                        (0019) AREA psoc_config(rom, rel)
                                        (0020) LoadConfigTBL_catchrobo_dcm:
                                        (0021) 	M8C_SetBank0
                                        (0022) ;  Global Register values Bank 0
037C: 62 60 28 MOV   REG[0x60],0x28     (0023) 	mov	reg[60h], 28h		; AnalogColumnInputSelect register (AMX_IN)
037F: 62 66 00 MOV   REG[0x66],0x0      (0024) 	mov	reg[66h], 00h		; AnalogComparatorControl1 register (CMP_CR1)
0382: 62 63 05 MOV   REG[0x63],0x5      (0025) 	mov	reg[63h], 05h		; AnalogReferenceControl register (ARF_CR)
0385: 62 65 00 MOV   REG[0x65],0x0      (0026) 	mov	reg[65h], 00h		; AnalogSyncControl register (ASY_CR)
0388: 62 E6 00 MOV   REG[0xE6],0x0      (0027) 	mov	reg[e6h], 00h		; DecimatorControl_0 register (DEC_CR0)
038B: 62 E7 00 MOV   REG[0xE7],0x0      (0028) 	mov	reg[e7h], 00h		; DecimatorControl_1 register (DEC_CR1)
038E: 62 D6 04 MOV   REG[0xD6],0x4      (0029) 	mov	reg[d6h], 04h		; I2CConfig register (I2C_CFG)
0391: 62 B0 00 MOV   REG[0xB0],0x0      (0030) 	mov	reg[b0h], 00h		; Row_0_InputMux register (RDI0RI)
0394: 62 B1 00 MOV   REG[0xB1],0x0      (0031) 	mov	reg[b1h], 00h		; Row_0_InputSync register (RDI0SYN)
0397: 62 B2 00 MOV   REG[0xB2],0x0      (0032) 	mov	reg[b2h], 00h		; Row_0_LogicInputAMux register (RDI0IS)
039A: 62 B3 33 MOV   REG[0xB3],0x33     (0033) 	mov	reg[b3h], 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
039D: 62 B4 33 MOV   REG[0xB4],0x33     (0034) 	mov	reg[b4h], 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
03A0: 62 B5 00 MOV   REG[0xB5],0x0      (0035) 	mov	reg[b5h], 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
03A3: 62 B6 00 MOV   REG[0xB6],0x0      (0036) 	mov	reg[b6h], 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
03A6: 62 B8 55 MOV   REG[0xB8],0x55     (0037) 	mov	reg[b8h], 55h		; Row_1_InputMux register (RDI1RI)
03A9: 62 B9 00 MOV   REG[0xB9],0x0      (0038) 	mov	reg[b9h], 00h		; Row_1_InputSync register (RDI1SYN)
03AC: 62 BA 10 MOV   REG[0xBA],0x10     (0039) 	mov	reg[bah], 10h		; Row_1_LogicInputAMux register (RDI1IS)
03AF: 62 BB 33 MOV   REG[0xBB],0x33     (0040) 	mov	reg[bbh], 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
03B2: 62 BC 33 MOV   REG[0xBC],0x33     (0041) 	mov	reg[bch], 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
03B5: 62 BD 00 MOV   REG[0xBD],0x0      (0042) 	mov	reg[bdh], 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
03B8: 62 BE 0C MOV   REG[0xBE],0xC      (0043) 	mov	reg[beh], 0ch		; Row_1_OutputDrive_1 register (RDI1SRO1)
03BB: 62 C0 00 MOV   REG[0xC0],0x0      (0044) 	mov	reg[c0h], 00h		; Row_2_InputMux register (RDI2RI)
03BE: 62 C1 00 MOV   REG[0xC1],0x0      (0045) 	mov	reg[c1h], 00h		; Row_2_InputSync register (RDI2SYN)
03C1: 62 C2 20 MOV   REG[0xC2],0x20     (0046) 	mov	reg[c2h], 20h		; Row_2_LogicInputAMux register (RDI2IS)
03C4: 62 C3 33 MOV   REG[0xC3],0x33     (0047) 	mov	reg[c3h], 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
03C7: 62 C4 33 MOV   REG[0xC4],0x33     (0048) 	mov	reg[c4h], 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
03CA: 62 C5 30 MOV   REG[0xC5],0x30     (0049) 	mov	reg[c5h], 30h		; Row_2_OutputDrive_0 register (RDI2SRO0)
03CD: 62 C6 00 MOV   REG[0xC6],0x0      (0050) 	mov	reg[c6h], 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
03D0: 62 C8 55 MOV   REG[0xC8],0x55     (0051) 	mov	reg[c8h], 55h		; Row_3_InputMux register (RDI3RI)
03D3: 62 C9 00 MOV   REG[0xC9],0x0      (0052) 	mov	reg[c9h], 00h		; Row_3_InputSync register (RDI3SYN)
03D6: 62 CA 30 MOV   REG[0xCA],0x30     (0053) 	mov	reg[cah], 30h		; Row_3_LogicInputAMux register (RDI3IS)
03D9: 62 CB 33 MOV   REG[0xCB],0x33     (0054) 	mov	reg[cbh], 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
03DC: 62 CC 33 MOV   REG[0xCC],0x33     (0055) 	mov	reg[cch], 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
03DF: 62 CD 00 MOV   REG[0xCD],0x0      (0056) 	mov	reg[cdh], 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
03E2: 62 CE 20 MOV   REG[0xCE],0x20     (0057) 	mov	reg[ceh], 20h		; Row_3_OutputDrive_1 register (RDI3SRO1)
03E5: 62 6C 00 MOV   REG[0x6C],0x0      (0058) 	mov	reg[6ch], 00h		; TMP_DR0 register (TMP_DR0)
03E8: 62 6D 00 MOV   REG[0x6D],0x0      (0059) 	mov	reg[6dh], 00h		; TMP_DR1 register (TMP_DR1)
03EB: 62 6E 00 MOV   REG[0x6E],0x0      (0060) 	mov	reg[6eh], 00h		; TMP_DR2 register (TMP_DR2)
03EE: 62 6F 00 MOV   REG[0x6F],0x0      (0061) 	mov	reg[6fh], 00h		; TMP_DR3 register (TMP_DR3)
                                        (0062) ;  Instance name EzI2Cs_1, User Module EzI2Cs
                                        (0063) ;  Instance name LCD_1, User Module LCD
                                        (0064) ;  Instance name MBM_1, User Module MBM
                                        (0065) ;  Instance name PRS32_1, User Module PRS32
                                        (0066) ;       Instance name PRS32_1, Block Name PRS32_ISB1(DBB11)
03F1: 62 37 00 MOV   REG[0x37],0x0      (0067) 	mov	reg[37h], 00h		;PRS32_1_CONTROL_REG_ISB1(DBB11CR0)
03F4: 62 35 00 MOV   REG[0x35],0x0      (0068) 	mov	reg[35h], 00h		;PRS32_1_POLY_REG_ISB1   (DBB11DR1)
03F7: 62 36 00 MOV   REG[0x36],0x0      (0069) 	mov	reg[36h], 00h		;PRS32_1_SEED_REG_ISB1   (DBB11DR2)
                                        (0070) ;       Instance name PRS32_1, Block Name PRS32_ISB2(DCB12)
03FA: 62 3B 00 MOV   REG[0x3B],0x0      (0071) 	mov	reg[3bh], 00h		;PRS32_1_CONTROL_REG_ISB2(DCB12CR0)
03FD: 62 39 00 MOV   REG[0x39],0x0      (0072) 	mov	reg[39h], 00h		;PRS32_1_POLY_REG_ISB2   (DCB12DR1)
0400: 62 3A 00 MOV   REG[0x3A],0x0      (0073) 	mov	reg[3ah], 00h		;PRS32_1_SEED_REG_ISB2   (DCB12DR2)
                                        (0074) ;       Instance name PRS32_1, Block Name PRS32_LSB(DBB10)
0403: 62 33 00 MOV   REG[0x33],0x0      (0075) 	mov	reg[33h], 00h		;PRS32_1_CONTROL_REG_LSB (DBB10CR0)
0406: 62 31 00 MOV   REG[0x31],0x0      (0076) 	mov	reg[31h], 00h		;PRS32_1_POLY_REG_LSB    (DBB10DR1)
0409: 62 32 00 MOV   REG[0x32],0x0      (0077) 	mov	reg[32h], 00h		;PRS32_1_SEED_REG_LSB    (DBB10DR2)
                                        (0078) ;       Instance name PRS32_1, Block Name PRS32_MSB(DCB13)
040C: 62 3F 00 MOV   REG[0x3F],0x0      (0079) 	mov	reg[3fh], 00h		;PRS32_1_CONTROL_REG_MSB (DCB13CR0)
040F: 62 3D 00 MOV   REG[0x3D],0x0      (0080) 	mov	reg[3dh], 00h		;PRS32_1_POLY_REG_MSB    (DCB13DR1)
0412: 62 3E 00 MOV   REG[0x3E],0x0      (0081) 	mov	reg[3eh], 00h		;PRS32_1_SEED_REG_MSB    (DCB13DR2)
                                        (0082) ;  Instance name PRS32_2, User Module PRS32
                                        (0083) ;       Instance name PRS32_2, Block Name PRS32_ISB1(DBB21)
0415: 62 47 00 MOV   REG[0x47],0x0      (0084) 	mov	reg[47h], 00h		;PRS32_2_CONTROL_REG_ISB1(DBB21CR0)
0418: 62 45 00 MOV   REG[0x45],0x0      (0085) 	mov	reg[45h], 00h		;PRS32_2_POLY_REG_ISB1   (DBB21DR1)
041B: 62 46 00 MOV   REG[0x46],0x0      (0086) 	mov	reg[46h], 00h		;PRS32_2_SEED_REG_ISB1   (DBB21DR2)
                                        (0087) ;       Instance name PRS32_2, Block Name PRS32_ISB2(DCB22)
041E: 62 4B 00 MOV   REG[0x4B],0x0      (0088) 	mov	reg[4bh], 00h		;PRS32_2_CONTROL_REG_ISB2(DCB22CR0)
0421: 62 49 00 MOV   REG[0x49],0x0      (0089) 	mov	reg[49h], 00h		;PRS32_2_POLY_REG_ISB2   (DCB22DR1)
0424: 62 4A 00 MOV   REG[0x4A],0x0      (0090) 	mov	reg[4ah], 00h		;PRS32_2_SEED_REG_ISB2   (DCB22DR2)
                                        (0091) ;       Instance name PRS32_2, Block Name PRS32_LSB(DBB20)
0427: 62 43 00 MOV   REG[0x43],0x0      (0092) 	mov	reg[43h], 00h		;PRS32_2_CONTROL_REG_LSB (DBB20CR0)
042A: 62 41 00 MOV   REG[0x41],0x0      (0093) 	mov	reg[41h], 00h		;PRS32_2_POLY_REG_LSB    (DBB20DR1)
042D: 62 42 00 MOV   REG[0x42],0x0      (0094) 	mov	reg[42h], 00h		;PRS32_2_SEED_REG_LSB    (DBB20DR2)
                                        (0095) ;       Instance name PRS32_2, Block Name PRS32_MSB(DCB23)
0430: 62 4F 00 MOV   REG[0x4F],0x0      (0096) 	mov	reg[4fh], 00h		;PRS32_2_CONTROL_REG_MSB (DCB23CR0)
0433: 62 4D 00 MOV   REG[0x4D],0x0      (0097) 	mov	reg[4dh], 00h		;PRS32_2_POLY_REG_MSB    (DCB23DR1)
0436: 62 4E 00 MOV   REG[0x4E],0x0      (0098) 	mov	reg[4eh], 00h		;PRS32_2_SEED_REG_MSB    (DCB23DR2)
                                        (0099) ;  Instance name PRS32_3, User Module PRS32
                                        (0100) ;       Instance name PRS32_3, Block Name PRS32_ISB1(DBB31)
0439: 62 57 00 MOV   REG[0x57],0x0      (0101) 	mov	reg[57h], 00h		;PRS32_3_CONTROL_REG_ISB1(DBB31CR0)
043C: 62 55 00 MOV   REG[0x55],0x0      (0102) 	mov	reg[55h], 00h		;PRS32_3_POLY_REG_ISB1   (DBB31DR1)
043F: 62 56 00 MOV   REG[0x56],0x0      (0103) 	mov	reg[56h], 00h		;PRS32_3_SEED_REG_ISB1   (DBB31DR2)
                                        (0104) ;       Instance name PRS32_3, Block Name PRS32_ISB2(DCB32)
0442: 62 5B 00 MOV   REG[0x5B],0x0      (0105) 	mov	reg[5bh], 00h		;PRS32_3_CONTROL_REG_ISB2(DCB32CR0)
0445: 62 59 00 MOV   REG[0x59],0x0      (0106) 	mov	reg[59h], 00h		;PRS32_3_POLY_REG_ISB2   (DCB32DR1)
0448: 62 5A 00 MOV   REG[0x5A],0x0      (0107) 	mov	reg[5ah], 00h		;PRS32_3_SEED_REG_ISB2   (DCB32DR2)
                                        (0108) ;       Instance name PRS32_3, Block Name PRS32_LSB(DBB30)
044B: 62 53 00 MOV   REG[0x53],0x0      (0109) 	mov	reg[53h], 00h		;PRS32_3_CONTROL_REG_LSB (DBB30CR0)
044E: 62 51 00 MOV   REG[0x51],0x0      (0110) 	mov	reg[51h], 00h		;PRS32_3_POLY_REG_LSB    (DBB30DR1)
0451: 62 52 00 MOV   REG[0x52],0x0      (0111) 	mov	reg[52h], 00h		;PRS32_3_SEED_REG_LSB    (DBB30DR2)
                                        (0112) ;       Instance name PRS32_3, Block Name PRS32_MSB(DCB33)
0454: 62 5F 00 MOV   REG[0x5F],0x0      (0113) 	mov	reg[5fh], 00h		;PRS32_3_CONTROL_REG_MSB (DCB33CR0)
0457: 62 5D 00 MOV   REG[0x5D],0x0      (0114) 	mov	reg[5dh], 00h		;PRS32_3_POLY_REG_MSB    (DCB33DR1)
045A: 62 5E 00 MOV   REG[0x5E],0x0      (0115) 	mov	reg[5eh], 00h		;PRS32_3_SEED_REG_MSB    (DCB33DR2)
                                        (0116) ;  Instance name SHADOWREGS_1, User Module SHADOWREGS
                                        (0117) ;  Instance name SHADOWREGS_2, User Module SHADOWREGS
                                        (0118) ;  Instance name SHADOWREGS_3, User Module SHADOWREGS
                                        (0119) ;  Instance name Timer8_1, User Module Timer8
                                        (0120) ;       Instance name Timer8_1, Block Name TIMER8(DCB03)
045D: 62 2F 04 MOV   REG[0x2F],0x4      (0121) 	mov	reg[2fh], 04h		;Timer8_1_CONTROL_REG(DCB03CR0)
0460: 62 2D F9 MOV   REG[0x2D],0xF9     (0122) 	mov	reg[2dh], f9h		;Timer8_1_PERIOD_REG(DCB03DR1)
0463: 62 2E 00 MOV   REG[0x2E],0x0      (0123) 	mov	reg[2eh], 00h		;Timer8_1_COMPARE_REG(DCB03DR2)
0466: 71 10    OR    F,0x10             
                                        (0124) 	M8C_SetBank1
                                        (0125) ;  Global Register values Bank 1
0468: 62 61 00 MOV   REG[0x61],0x0      (0126) 	mov	reg[61h], 00h		; AnalogClockSelect1 register (CLK_CR1)
046B: 62 69 00 MOV   REG[0x69],0x0      (0127) 	mov	reg[69h], 00h		; AnalogClockSelect2 register (CLK_CR2)
046E: 62 60 00 MOV   REG[0x60],0x0      (0128) 	mov	reg[60h], 00h		; AnalogColumnClockSelect register (CLK_CR0)
0471: 62 62 00 MOV   REG[0x62],0x0      (0129) 	mov	reg[62h], 00h		; AnalogIOControl_0 register (ABF_CR0)
0474: 62 67 33 MOV   REG[0x67],0x33     (0130) 	mov	reg[67h], 33h		; AnalogLUTControl0 register (ALT_CR0)
0477: 62 68 33 MOV   REG[0x68],0x33     (0131) 	mov	reg[68h], 33h		; AnalogLUTControl1 register (ALT_CR1)
047A: 62 63 00 MOV   REG[0x63],0x0      (0132) 	mov	reg[63h], 00h		; AnalogModulatorControl_0 register (AMD_CR0)
047D: 62 66 00 MOV   REG[0x66],0x0      (0133) 	mov	reg[66h], 00h		; AnalogModulatorControl_1 register (AMD_CR1)
0480: 62 D1 00 MOV   REG[0xD1],0x0      (0134) 	mov	reg[d1h], 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
0483: 62 D3 00 MOV   REG[0xD3],0x0      (0135) 	mov	reg[d3h], 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
0486: 62 D0 00 MOV   REG[0xD0],0x0      (0136) 	mov	reg[d0h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
0489: 62 D2 00 MOV   REG[0xD2],0x0      (0137) 	mov	reg[d2h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
048C: 62 E1 53 MOV   REG[0xE1],0x53     (0138) 	mov	reg[e1h], 53h		; OscillatorControl_1 register (OSC_CR1)
048F: 62 E2 00 MOV   REG[0xE2],0x0      (0139) 	mov	reg[e2h], 00h		; OscillatorControl_2 register (OSC_CR2)
0492: 62 DF 3F MOV   REG[0xDF],0x3F     (0140) 	mov	reg[dfh], 3fh		; OscillatorControl_3 register (OSC_CR3)
0495: 62 DE 00 MOV   REG[0xDE],0x0      (0141) 	mov	reg[deh], 00h		; OscillatorControl_4 register (OSC_CR4)
0498: 62 DD 00 MOV   REG[0xDD],0x0      (0142) 	mov	reg[ddh], 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
049B: 62 E7 00 MOV   REG[0xE7],0x0      (0143) 	mov	reg[e7h], 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0144) ;  Instance name EzI2Cs_1, User Module EzI2Cs
                                        (0145) ;  Instance name LCD_1, User Module LCD
                                        (0146) ;  Instance name MBM_1, User Module MBM
                                        (0147) ;  Instance name PRS32_1, User Module PRS32
                                        (0148) ;       Instance name PRS32_1, Block Name PRS32_ISB1(DBB11)
049E: 62 34 0A MOV   REG[0x34],0xA      (0149) 	mov	reg[34h], 0ah		;PRS32_1_FUNC_REG_ISB1   (DBB11FN)
04A1: 62 35 35 MOV   REG[0x35],0x35     (0150) 	mov	reg[35h], 35h		;PRS32_1_INPUT_REG_ISB1  (DBB11IN)
04A4: 62 36 40 MOV   REG[0x36],0x40     (0151) 	mov	reg[36h], 40h		;PRS32_1_OUTPUT_REG_ISB1 (DBB11OU)
                                        (0152) ;       Instance name PRS32_1, Block Name PRS32_ISB2(DCB12)
04A7: 62 38 0A MOV   REG[0x38],0xA      (0153) 	mov	reg[38h], 0ah		;PRS32_1_FUNC_REG_ISB2   (DCB12FN)
04AA: 62 39 35 MOV   REG[0x39],0x35     (0154) 	mov	reg[39h], 35h		;PRS32_1_INPUT_REG_ISB2  (DCB12IN)
04AD: 62 3A 40 MOV   REG[0x3A],0x40     (0155) 	mov	reg[3ah], 40h		;PRS32_1_OUTPUT_REG_ISB2 (DCB12OU)
                                        (0156) ;       Instance name PRS32_1, Block Name PRS32_LSB(DBB10)
04B0: 62 30 0A MOV   REG[0x30],0xA      (0157) 	mov	reg[30h], 0ah		;PRS32_1_FUNC_REG_LSB    (DBB10FN)
04B3: 62 31 05 MOV   REG[0x31],0x5      (0158) 	mov	reg[31h], 05h		;PRS32_1_INPUT_REG_LSB   (DBB10IN)
04B6: 62 32 40 MOV   REG[0x32],0x40     (0159) 	mov	reg[32h], 40h		;PRS32_1_OUTPUT_REG_LSB  (DBB10OU)
                                        (0160) ;       Instance name PRS32_1, Block Name PRS32_MSB(DCB13)
04B9: 62 3C 2A MOV   REG[0x3C],0x2A     (0161) 	mov	reg[3ch], 2ah		;PRS32_1_FUNC_REG_MSB    (DCB13FN)
04BC: 62 3D 35 MOV   REG[0x3D],0x35     (0162) 	mov	reg[3dh], 35h		;PRS32_1_INPUT_REG_MSB   (DCB13IN)
04BF: 62 3E 70 MOV   REG[0x3E],0x70     (0163) 	mov	reg[3eh], 70h		;PRS32_1_OUTPUT_REG_MSB  (DCB13OU)
                                        (0164) ;  Instance name PRS32_2, User Module PRS32
                                        (0165) ;       Instance name PRS32_2, Block Name PRS32_ISB1(DBB21)
04C2: 62 44 0A MOV   REG[0x44],0xA      (0166) 	mov	reg[44h], 0ah		;PRS32_2_FUNC_REG_ISB1   (DBB21FN)
04C5: 62 45 35 MOV   REG[0x45],0x35     (0167) 	mov	reg[45h], 35h		;PRS32_2_INPUT_REG_ISB1  (DBB21IN)
04C8: 62 46 40 MOV   REG[0x46],0x40     (0168) 	mov	reg[46h], 40h		;PRS32_2_OUTPUT_REG_ISB1 (DBB21OU)
                                        (0169) ;       Instance name PRS32_2, Block Name PRS32_ISB2(DCB22)
04CB: 62 48 0A MOV   REG[0x48],0xA      (0170) 	mov	reg[48h], 0ah		;PRS32_2_FUNC_REG_ISB2   (DCB22FN)
04CE: 62 49 35 MOV   REG[0x49],0x35     (0171) 	mov	reg[49h], 35h		;PRS32_2_INPUT_REG_ISB2  (DCB22IN)
04D1: 62 4A 40 MOV   REG[0x4A],0x40     (0172) 	mov	reg[4ah], 40h		;PRS32_2_OUTPUT_REG_ISB2 (DCB22OU)
                                        (0173) ;       Instance name PRS32_2, Block Name PRS32_LSB(DBB20)
04D4: 62 40 0A MOV   REG[0x40],0xA      (0174) 	mov	reg[40h], 0ah		;PRS32_2_FUNC_REG_LSB    (DBB20FN)
04D7: 62 41 05 MOV   REG[0x41],0x5      (0175) 	mov	reg[41h], 05h		;PRS32_2_INPUT_REG_LSB   (DBA20IN)
04DA: 62 42 40 MOV   REG[0x42],0x40     (0176) 	mov	reg[42h], 40h		;PRS32_2_OUTPUT_REG_LSB  (DBA20OU)
                                        (0177) ;       Instance name PRS32_2, Block Name PRS32_MSB(DCB23)
04DD: 62 4C 2A MOV   REG[0x4C],0x2A     (0178) 	mov	reg[4ch], 2ah		;PRS32_2_FUNC_REG_MSB    (DCB23FN)
04E0: 62 4D 35 MOV   REG[0x4D],0x35     (0179) 	mov	reg[4dh], 35h		;PRS32_2_INPUT_REG_MSB   (DCB23IN)
04E3: 62 4E 68 MOV   REG[0x4E],0x68     (0180) 	mov	reg[4eh], 68h		;PRS32_2_OUTPUT_REG_MSB  (DCB23OU)
                                        (0181) ;  Instance name PRS32_3, User Module PRS32
                                        (0182) ;       Instance name PRS32_3, Block Name PRS32_ISB1(DBB31)
04E6: 62 54 0A MOV   REG[0x54],0xA      (0183) 	mov	reg[54h], 0ah		;PRS32_3_FUNC_REG_ISB1   (DBB31FN)
04E9: 62 55 35 MOV   REG[0x55],0x35     (0184) 	mov	reg[55h], 35h		;PRS32_3_INPUT_REG_ISB1  (DBB31IN)
04EC: 62 56 40 MOV   REG[0x56],0x40     (0185) 	mov	reg[56h], 40h		;PRS32_3_OUTPUT_REG_ISB1 (DBB31OU)
                                        (0186) ;       Instance name PRS32_3, Block Name PRS32_ISB2(DCB32)
04EF: 62 58 0A MOV   REG[0x58],0xA      (0187) 	mov	reg[58h], 0ah		;PRS32_3_FUNC_REG_ISB2   (DCB32FN)
04F2: 62 59 35 MOV   REG[0x59],0x35     (0188) 	mov	reg[59h], 35h		;PRS32_3_INPUT_REG_ISB2  (DCB32IN)
04F5: 62 5A 40 MOV   REG[0x5A],0x40     (0189) 	mov	reg[5ah], 40h		;PRS32_3_OUTPUT_REG_ISB2 (DCB32OU)
                                        (0190) ;       Instance name PRS32_3, Block Name PRS32_LSB(DBB30)
04F8: 62 50 0A MOV   REG[0x50],0xA      (0191) 	mov	reg[50h], 0ah		;PRS32_3_FUNC_REG_LSB    (DBB30FN)
04FB: 62 51 05 MOV   REG[0x51],0x5      (0192) 	mov	reg[51h], 05h		;PRS32_3_INPUT_REG_LSB   (DBB30IN)
04FE: 62 52 40 MOV   REG[0x52],0x40     (0193) 	mov	reg[52h], 40h		;PRS32_3_OUTPUT_REG_LSB  (DBB30OU)
                                        (0194) ;       Instance name PRS32_3, Block Name PRS32_MSB(DCB33)
0501: 62 5C 2A MOV   REG[0x5C],0x2A     (0195) 	mov	reg[5ch], 2ah		;PRS32_3_FUNC_REG_MSB    (DCB33FN)
0504: 62 5D 35 MOV   REG[0x5D],0x35     (0196) 	mov	reg[5dh], 35h		;PRS32_3_INPUT_REG_MSB   (DCB33IN)
0507: 62 5E 78 MOV   REG[0x5E],0x78     (0197) 	mov	reg[5eh], 78h		;PRS32_3_OUTPUT_REG_MSB  (DCB33OU)
                                        (0198) ;  Instance name SHADOWREGS_1, User Module SHADOWREGS
                                        (0199) ;  Instance name SHADOWREGS_2, User Module SHADOWREGS
                                        (0200) ;  Instance name SHADOWREGS_3, User Module SHADOWREGS
                                        (0201) ;  Instance name Timer8_1, User Module Timer8
                                        (0202) ;       Instance name Timer8_1, Block Name TIMER8(DCB03)
050A: 62 2C 20 MOV   REG[0x2C],0x20     (0203) 	mov	reg[2ch], 20h		;Timer8_1_FUNC_REG(DCB03FN)
050D: 62 2D 01 MOV   REG[0x2D],0x1      (0204) 	mov	reg[2dh], 01h		;Timer8_1_INPUT_REG(DCB03IN)
0510: 62 2E 40 MOV   REG[0x2E],0x40     (0205) 	mov	reg[2eh], 40h		;Timer8_1_OUTPUT_REG(DCB03OU)
0513: 70 EF    AND   F,0xEF             
0515: 70 EF    AND   F,0xEF             
                                        (0206) 	M8C_SetBank0
                                        (0207) ;  Ordered Global Register values
                                        (0208) 	M8C_SetBank0
0517: 62 00 00 MOV   REG[0x0],0x0       (0209) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
051A: 71 10    OR    F,0x10             
                                        (0210) 	M8C_SetBank1
051C: 62 00 FF MOV   REG[0x0],0xFF      (0211) 	mov	reg[00h], ffh		; Port_0_DriveMode_0 register (PRT0DM0)
051F: 62 01 00 MOV   REG[0x1],0x0       (0212) 	mov	reg[01h], 00h		; Port_0_DriveMode_1 register (PRT0DM1)
0522: 70 EF    AND   F,0xEF             
                                        (0213) 	M8C_SetBank0
0524: 62 03 00 MOV   REG[0x3],0x0       (0214) 	mov	reg[03h], 00h		; Port_0_DriveMode_2 register (PRT0DM2)
0527: 62 02 80 MOV   REG[0x2],0x80      (0215) 	mov	reg[02h], 80h		; Port_0_GlobalSelect register (PRT0GS)
052A: 71 10    OR    F,0x10             
                                        (0216) 	M8C_SetBank1
052C: 62 02 00 MOV   REG[0x2],0x0       (0217) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
052F: 62 03 00 MOV   REG[0x3],0x0       (0218) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0532: 70 EF    AND   F,0xEF             
                                        (0219) 	M8C_SetBank0
0534: 62 01 00 MOV   REG[0x1],0x0       (0220) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0537: 62 04 A0 MOV   REG[0x4],0xA0      (0221) 	mov	reg[04h], a0h		; Port_1_Data register (PRT1DR)
053A: 71 10    OR    F,0x10             
                                        (0222) 	M8C_SetBank1
053C: 62 04 FC MOV   REG[0x4],0xFC      (0223) 	mov	reg[04h], fch		; Port_1_DriveMode_0 register (PRT1DM0)
053F: 62 05 A3 MOV   REG[0x5],0xA3      (0224) 	mov	reg[05h], a3h		; Port_1_DriveMode_1 register (PRT1DM1)
0542: 70 EF    AND   F,0xEF             
                                        (0225) 	M8C_SetBank0
0544: 62 07 A0 MOV   REG[0x7],0xA0      (0226) 	mov	reg[07h], a0h		; Port_1_DriveMode_2 register (PRT1DM2)
0547: 62 06 44 MOV   REG[0x6],0x44      (0227) 	mov	reg[06h], 44h		; Port_1_GlobalSelect register (PRT1GS)
054A: 71 10    OR    F,0x10             
                                        (0228) 	M8C_SetBank1
054C: 62 06 00 MOV   REG[0x6],0x0       (0229) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
054F: 62 07 00 MOV   REG[0x7],0x0       (0230) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0552: 70 EF    AND   F,0xEF             
                                        (0231) 	M8C_SetBank0
0554: 62 05 00 MOV   REG[0x5],0x0       (0232) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0557: 62 08 00 MOV   REG[0x8],0x0       (0233) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
055A: 71 10    OR    F,0x10             
                                        (0234) 	M8C_SetBank1
055C: 62 08 EF MOV   REG[0x8],0xEF      (0235) 	mov	reg[08h], efh		; Port_2_DriveMode_0 register (PRT2DM0)
055F: 62 09 10 MOV   REG[0x9],0x10      (0236) 	mov	reg[09h], 10h		; Port_2_DriveMode_1 register (PRT2DM1)
0562: 70 EF    AND   F,0xEF             
                                        (0237) 	M8C_SetBank0
0564: 62 0B 10 MOV   REG[0xB],0x10      (0238) 	mov	reg[0bh], 10h		; Port_2_DriveMode_2 register (PRT2DM2)
0567: 62 0A A2 MOV   REG[0xA],0xA2      (0239) 	mov	reg[0ah], a2h		; Port_2_GlobalSelect register (PRT2GS)
056A: 71 10    OR    F,0x10             
                                        (0240) 	M8C_SetBank1
056C: 62 0A 00 MOV   REG[0xA],0x0       (0241) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
056F: 62 0B 00 MOV   REG[0xB],0x0       (0242) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0572: 70 EF    AND   F,0xEF             
                                        (0243) 	M8C_SetBank0
0574: 62 09 00 MOV   REG[0x9],0x0       (0244) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0577: 62 0C 00 MOV   REG[0xC],0x0       (0245) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
057A: 71 10    OR    F,0x10             
                                        (0246) 	M8C_SetBank1
057C: 62 0C 00 MOV   REG[0xC],0x0       (0247) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
057F: 62 0D 00 MOV   REG[0xD],0x0       (0248) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0582: 70 EF    AND   F,0xEF             
                                        (0249) 	M8C_SetBank0
0584: 62 0F 00 MOV   REG[0xF],0x0       (0250) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0587: 62 0E 00 MOV   REG[0xE],0x0       (0251) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
058A: 71 10    OR    F,0x10             
                                        (0252) 	M8C_SetBank1
058C: 62 0E 00 MOV   REG[0xE],0x0       (0253) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
058F: 62 0F 00 MOV   REG[0xF],0x0       (0254) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0592: 70 EF    AND   F,0xEF             
                                        (0255) 	M8C_SetBank0
0594: 62 0D 00 MOV   REG[0xD],0x0       (0256) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0597: 62 10 00 MOV   REG[0x10],0x0      (0257) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
059A: 71 10    OR    F,0x10             
                                        (0258) 	M8C_SetBank1
059C: 62 10 00 MOV   REG[0x10],0x0      (0259) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
059F: 62 11 00 MOV   REG[0x11],0x0      (0260) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
05A2: 70 EF    AND   F,0xEF             
                                        (0261) 	M8C_SetBank0
05A4: 62 13 00 MOV   REG[0x13],0x0      (0262) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
05A7: 62 12 00 MOV   REG[0x12],0x0      (0263) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
05AA: 71 10    OR    F,0x10             
                                        (0264) 	M8C_SetBank1
05AC: 62 12 00 MOV   REG[0x12],0x0      (0265) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
05AF: 62 13 00 MOV   REG[0x13],0x0      (0266) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
05B2: 70 EF    AND   F,0xEF             
                                        (0267) 	M8C_SetBank0
05B4: 62 11 00 MOV   REG[0x11],0x0      (0268) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
05B7: 62 14 00 MOV   REG[0x14],0x0      (0269) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
05BA: 71 10    OR    F,0x10             
                                        (0270) 	M8C_SetBank1
05BC: 62 14 00 MOV   REG[0x14],0x0      (0271) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
05BF: 62 15 00 MOV   REG[0x15],0x0      (0272) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
05C2: 70 EF    AND   F,0xEF             
                                        (0273) 	M8C_SetBank0
05C4: 62 17 00 MOV   REG[0x17],0x0      (0274) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
05C7: 62 16 00 MOV   REG[0x16],0x0      (0275) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
05CA: 71 10    OR    F,0x10             
                                        (0276) 	M8C_SetBank1
05CC: 62 16 00 MOV   REG[0x16],0x0      (0277) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
05CF: 62 17 00 MOV   REG[0x17],0x0      (0278) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
05D2: 70 EF    AND   F,0xEF             
                                        (0279) 	M8C_SetBank0
05D4: 62 15 00 MOV   REG[0x15],0x0      (0280) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
05D7: 62 18 00 MOV   REG[0x18],0x0      (0281) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
05DA: 71 10    OR    F,0x10             
                                        (0282) 	M8C_SetBank1
05DC: 62 18 00 MOV   REG[0x18],0x0      (0283) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
05DF: 62 19 00 MOV   REG[0x19],0x0      (0284) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
05E2: 70 EF    AND   F,0xEF             
                                        (0285) 	M8C_SetBank0
05E4: 62 1B 00 MOV   REG[0x1B],0x0      (0286) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
05E7: 62 1A 00 MOV   REG[0x1A],0x0      (0287) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
05EA: 71 10    OR    F,0x10             
                                        (0288) 	M8C_SetBank1
05EC: 62 1A 00 MOV   REG[0x1A],0x0      (0289) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
05EF: 62 1B 00 MOV   REG[0x1B],0x0      (0290) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
05F2: 70 EF    AND   F,0xEF             
                                        (0291) 	M8C_SetBank0
05F4: 62 19 00 MOV   REG[0x19],0x0      (0292) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
05F7: 62 1C 00 MOV   REG[0x1C],0x0      (0293) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
05FA: 71 10    OR    F,0x10             
                                        (0294) 	M8C_SetBank1
05FC: 62 1C 00 MOV   REG[0x1C],0x0      (0295) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
05FF: 62 1D 00 MOV   REG[0x1D],0x0      (0296) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0602: 70 EF    AND   F,0xEF             
                                        (0297) 	M8C_SetBank0
0604: 62 1F 00 MOV   REG[0x1F],0x0      (0298) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0607: 62 1E 00 MOV   REG[0x1E],0x0      (0299) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
060A: 71 10    OR    F,0x10             
                                        (0300) 	M8C_SetBank1
060C: 62 1E 00 MOV   REG[0x1E],0x0      (0301) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
060F: 62 1F 00 MOV   REG[0x1F],0x0      (0302) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0612: 70 EF    AND   F,0xEF             
                                        (0303) 	M8C_SetBank0
0614: 62 1D 00 MOV   REG[0x1D],0x0      (0304) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0617: 70 EF    AND   F,0xEF             
                                        (0305) 	M8C_SetBank0
0619: 7F       RET                      (0306) 	ret
                                        (0307) 
                                        (0308) 
                                        (0309) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_catchrobo_dcm
                                        (0026) export _LoadConfig_catchrobo_dcm
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_0_DriveMode_0_SHADE
                                        (0030) export _Port_0_DriveMode_0_SHADE
                                        (0031) export Port_0_DriveMode_1_SHADE
                                        (0032) export _Port_0_DriveMode_1_SHADE
                                        (0033) export Port_1_Data_SHADE
                                        (0034) export _Port_1_Data_SHADE
                                        (0035) export Port_2_Data_SHADE
                                        (0036) export _Port_2_Data_SHADE
                                        (0037) 
                                        (0038) 
                                        (0039) export NO_SHADOW
                                        (0040) export _NO_SHADOW
                                        (0041) 
                                        (0042) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0043) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0044) 
                                        (0045) AREA psoc_config(rom, rel)
                                        (0046) 
                                        (0047) 
                                        (0048) ;---------------------------------------------------------------------------
                                        (0049) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0050) ;                  parameters handled by boot code, like CPU speed). This
                                        (0051) ;                  function can be called from user code, but typically it
                                        (0052) ;                  is only called from boot.
                                        (0053) ;
                                        (0054) ;       INPUTS: None.
                                        (0055) ;      RETURNS: Nothing.
                                        (0056) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0057) ;               In the large memory model currently only the page
                                        (0058) ;               pointer registers listed below are modified.  This does
                                        (0059) ;               not guarantee that in future implementations of this
                                        (0060) ;               function other page pointer registers will not be
                                        (0061) ;               modified.
                                        (0062) ;          
                                        (0063) ;               Page Pointer Registers Modified: 
                                        (0064) ;               CUR_PP
                                        (0065) ;
                                        (0066) _LoadConfigInit:
                                        (0067)  LoadConfigInit:
                                        (0068)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0069)     
061A: 55 00 00 MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx],0x0(0070) 	mov		[Port_0_Data_SHADE], 0h
061D: 55 03 FF MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+3],0xFF(0071) 	mov		[Port_0_DriveMode_0_SHADE], ffh
0620: 55 04 00 MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+4],0x0(0072) 	mov		[Port_0_DriveMode_1_SHADE], 0h
0623: 55 01 A0 MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1],0xA0(0073) 	mov		[Port_1_Data_SHADE], a0h
0626: 55 02 00 MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0x0(0074) 	mov		[Port_2_Data_SHADE], 0h
                                        (0075) 
0629: 7C 06 2D LCALL 0x062D             (0076) 	lcall	LoadConfig_catchrobo_dcm
                                        (0077) 
                                        (0078) 
                                        (0079)     RAM_EPILOGUE RAM_USE_CLASS_4
062C: 7F       RET                      (0080)     ret
                                        (0081) 
                                        (0082) ;---------------------------------------------------------------------------
                                        (0083) ; Load Configuration catchrobo_dcm
                                        (0084) ;
                                        (0085) ;    Load configuration registers for catchrobo_dcm.
                                        (0086) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0087) ;
                                        (0088) ;       INPUTS: None.
                                        (0089) ;      RETURNS: Nothing.
                                        (0090) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0091) ;               modified as may the Page Pointer registers!
                                        (0092) ;               In the large memory model currently only the page
                                        (0093) ;               pointer registers listed below are modified.  This does
                                        (0094) ;               not guarantee that in future implementations of this
                                        (0095) ;               function other page pointer registers will not be
                                        (0096) ;               modified.
                                        (0097) ;          
                                        (0098) ;               Page Pointer Registers Modified: 
                                        (0099) ;               CUR_PP
                                        (0100) ;
                                        (0101) _LoadConfig_catchrobo_dcm:
                                        (0102)  LoadConfig_catchrobo_dcm:
                                        (0103)     RAM_PROLOGUE RAM_USE_CLASS_4
062D: 7C 03 7A LCALL 0x037A             (0104)     lcall   LoadConfigTBL_catchrobo_dcm            ; Call load config table routine
0630: 70 EF    AND   F,0xEF             
                                        (0105) 
                                        (0106) 
                                        (0107)     M8C_SetBank0                    ; Force return to bank 0
                                        (0108)     RAM_EPILOGUE RAM_USE_CLASS_4
0632: 7F       RET                      (0109)     ret
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) AREA InterruptRAM(ram, rel)
                                        (0114) 
                                        (0115) NO_SHADOW:
                                        (0116) _NO_SHADOW:
                                        (0117) ; write only register shadows
                                        (0118) _Port_0_Data_SHADE:
                                        (0119) Port_0_Data_SHADE:	BLK	1
                                        (0120) _Port_1_Data_SHADE:
                                        (0121) Port_1_Data_SHADE:	BLK	1
                                        (0122) _Port_2_Data_SHADE:
                                        (0123) Port_2_Data_SHADE:	BLK	1
                                        (0124) _Port_0_DriveMode_0_SHADE:
                                        (0125) Port_0_DriveMode_0_SHADE:	BLK	1
                                        (0126) _Port_0_DriveMode_1_SHADE:
                                        (0127) Port_0_DriveMode_1_SHADE:	BLK	1
                                        (0128) 
FILE: lib\timer8_1int.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8_1INT.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer8_1.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer8_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer8_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer8_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
0633: 7D 0C 59 LJMP  __Timer8_1_ISR     (0075)    ljmp __Timer8_1_ISR
                                        (0076)    
                                        (0077)    ;---------------------------------------------------
                                        (0078)    ; Insert a lcall to a C function below this banner
                                        (0079)    ; and un-comment the lines between these banners
                                        (0080)    ;---------------------------------------------------
                                        (0081)    
                                        (0082)    ;PRESERVE_CPU_CONTEXT
                                        (0083)    ;lcall _My_C_Function
                                        (0084)    ;RESTORE_CPU_CONTEXT
                                        (0085)    
                                        (0086)    ;---------------------------------------------------
                                        (0087)    ; Insert a lcall to a C function above this banner
                                        (0088)    ; and un-comment the lines between these banners
                                        (0089)    ;---------------------------------------------------
                                        (0090)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0091) 
0636: 7E       RETI                     (0092)    reti
                                        (0093) 
                                        (0094) 
                                        (0095) ; end of file Timer8_1INT.asm
FILE: lib\timer8_1.asm                  (0001) ;;*****************************************************************************
0637: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8_1.asm
                                        (0004) ;;   Version: 2.70, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer8_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer8_1_EnableInt
                                        (0030) export _Timer8_1_EnableInt
                                        (0031) export  Timer8_1_DisableInt
                                        (0032) export _Timer8_1_DisableInt
                                        (0033) export  Timer8_1_Start
                                        (0034) export _Timer8_1_Start
                                        (0035) export  Timer8_1_Stop
                                        (0036) export _Timer8_1_Stop
                                        (0037) export  Timer8_1_WritePeriod
                                        (0038) export _Timer8_1_WritePeriod
                                        (0039) export  Timer8_1_WriteCompareValue
                                        (0040) export _Timer8_1_WriteCompareValue
                                        (0041) export  Timer8_1_bReadCompareValue
                                        (0042) export _Timer8_1_bReadCompareValue
                                        (0043) export  Timer8_1_bReadTimer
                                        (0044) export _Timer8_1_bReadTimer
                                        (0045) export  Timer8_1_bReadTimerSaveCV
                                        (0046) export _Timer8_1_bReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  bTimer8_1_ReadCompareValue  ; deprecated
                                        (0051) export _bTimer8_1_ReadCompareValue  ; deprecated
                                        (0052) export  bTimer8_1_ReadTimer         ; deprecated
                                        (0053) export _bTimer8_1_ReadTimer         ; deprecated
                                        (0054) export  bTimer8_1_ReadTimerSaveCV   ; deprecated
                                        (0055) export _bTimer8_1_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  bTimer8_1_ReadCounter       ; obsolete
                                        (0058) export _bTimer8_1_ReadCounter       ; obsolete
                                        (0059) export  bTimer8_1_CaptureCounter    ; obsolete
                                        (0060) export _bTimer8_1_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA catchrobo_dcm_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer8_1_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer8_1_EnableInt:
                                        (0098) _Timer8_1_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer8_1_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
063A: 7F       RET                      (0102)    ret
063B: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer8_1_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer8_1_DisableInt:
                                        (0126) _Timer8_1_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer8_1_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
063E: 7F       RET                      (0130)    ret
063F: 43 2F 01 OR    REG[0x2F],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer8_1_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer8_1_Start:
                                        (0154) _Timer8_1_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer8_1_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0642: 7F       RET                      (0158)    ret
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer8_1_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer8_1_Stop:
                                        (0182) _Timer8_1_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer8_1_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer8_1_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 8-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS: 
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer8_1_WritePeriod:
                                        (0211) _Timer8_1_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0213)    mov   reg[Timer8_1_PERIOD_REG], A
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0215)    ret
                                        (0216) 
                                        (0217) .ENDSECTION
                                        (0218) 
                                        (0219) 
                                        (0220) .SECTION
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;  FUNCTION NAME: Timer8_1_WriteCompareValue
                                        (0223) ;
                                        (0224) ;  DESCRIPTION:
                                        (0225) ;     Writes compare value into the Compare register (DR2).
                                        (0226) ;
                                        (0227) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0228) ;           Compare register. (Call Timer8_1_Stop to disable).
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0232) ;  RETURNS:      Nothing
                                        (0233) ;  SIDE EFFECTS: 
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240)  Timer8_1_WriteCompareValue:
                                        (0241) _Timer8_1_WriteCompareValue:
                                        (0242)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0243)    mov   reg[Timer8_1_COMPARE_REG], A
                                        (0244)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0245)    ret
                                        (0246) 
                                        (0247) .ENDSECTION
                                        (0248) 
                                        (0249) 
                                        (0250) .SECTION
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;  FUNCTION NAME: Timer8_1_bReadCompareValue
                                        (0253) ;
                                        (0254) ;  DESCRIPTION:
                                        (0255) ;     Reads the Compare register.
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;
                                        (0258) ;  ARGUMENTS:    None
                                        (0259) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0260) ;  SIDE EFFECTS: 
                                        (0261) ;    The A and X registers may be modified by this or future implementations
                                        (0262) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0263) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0264) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0265) ;    functions.
                                        (0266) ;
                                        (0267)  Timer8_1_bReadCompareValue:
                                        (0268) _Timer8_1_bReadCompareValue:
                                        (0269)  bTimer8_1_ReadCompareValue:                     ; this name deprecated
                                        (0270) _bTimer8_1_ReadCompareValue:                     ; this name deprecated
                                        (0271)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0272)    mov   A, reg[Timer8_1_COMPARE_REG]
                                        (0273)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0274)    ret
                                        (0275) 
                                        (0276) .ENDSECTION
                                        (0277) 
                                        (0278) 
                                        (0279) .SECTION
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  FUNCTION NAME: Timer8_1_bReadTimerSaveCV
                                        (0282) ;
                                        (0283) ;  DESCRIPTION:
                                        (0284) ;     Returns the value in the Count register (DR0), preserving the
                                        (0285) ;     value in the compare register (DR2).
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0292) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0293) ;     3) The user module is stopped momentarily while the compare value is
                                        (0294) ;        restored.  This may cause the Count register to miss one or more
                                        (0295) ;        counts depending on the input clock speed.
                                        (0296) ;     4) The A and X registers may be modified by this or future implementations
                                        (0297) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0298) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0299) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0300) ;        functions.
                                        (0301) ;
                                        (0302) ;  THEORY of OPERATION:
                                        (0303) ;     1) Read and save the Compare register.
                                        (0304) ;     2) Read the Count register, causing its data to be latched into
                                        (0305) ;        the Compare register.
                                        (0306) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0307) ;        to the buffer.
                                        (0308) ;     4) Disable global interrupts
                                        (0309) ;     5) Halt the timer
                                        (0310) ;     6) Restore the Compare register values
                                        (0311) ;     7) Start the Timer again
                                        (0312) ;     8) Restore global interrupt state
                                        (0313) ;
                                        (0314)  Timer8_1_bReadTimerSaveCV:
                                        (0315) _Timer8_1_bReadTimerSaveCV:
                                        (0316)  bTimer8_1_ReadTimerSaveCV:                      ; this name deprecated
                                        (0317) _bTimer8_1_ReadTimerSaveCV:                      ; this name deprecated
                                        (0318)  bTimer8_1_ReadCounter:                          ; this name deprecated
                                        (0319) _bTimer8_1_ReadCounter:                          ; this name deprecated
                                        (0320) 
                                        (0321) CpuFlags:      equ   0
                                        (0322) bCount:        equ   1
                                        (0323) 
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0325)    mov   X, SP                                   ; X <- stack frame pointer
                                        (0326)    add   SP, 2                                   ; Reserve space for flags, count
                                        (0327)    mov   A, reg[Timer8_1_CONTROL_REG]            ; save the Control register
                                        (0328)    push  A
                                        (0329)    mov   A, reg[Timer8_1_COMPARE_REG]            ; save the Compare register
                                        (0330)    push  A
                                        (0331)    mov   A, reg[Timer8_1_COUNTER_REG]            ; synchronous copy DR2 <- DR0
                                        (0332)                                                  ; This may cause an interrupt!
                                        (0333)    mov   A, reg[Timer8_1_COMPARE_REG]            ; Now grab DR2 (DR0) and save
                                        (0334)    mov   [X+bCount], A
                                        (0335)    mov   A, 0                                    ; Guess the global interrupt state
                                        (0336)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
                                        (0337)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
                                        (0338)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0339) .SetupStatusFlag:                                ; and ...
                                        (0340)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
                                        (0341)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0342)    Timer8_1_Stop_M                               ; Stop the timer
                                        (0343)    pop   A                                       ; Restore the Compare register
                                        (0344)    mov   reg[Timer8_1_COMPARE_REG], A
                                        (0345)    pop   A                                       ; restore start state of the timer
                                        (0346)    mov   reg[Timer8_1_CONTROL_REG], A
                                        (0347)    pop   A                                       ; Return result stored in stack frame
                                        (0348)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0349)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0350) 
                                        (0351) .ENDSECTION
                                        (0352) 
                                        (0353) 
                                        (0354) .SECTION
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  FUNCTION NAME: Timer8_1_bReadTimer
                                        (0357) ;
                                        (0358) ;  DESCRIPTION:
                                        (0359) ;     Performs a software capture of the Count register.  A synchronous
                                        (0360) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0361) ;
                                        (0362) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS:    None
                                        (0366) ;  RETURNS:      fastcall16 BYTE bCount, (value of DR0 in the A register)
                                        (0367) ;  SIDE EFFECTS:
                                        (0368) ;    May cause an interrupt.
                                        (0369) ;
                                        (0370) ;    The A and X registers may be modified by this or future implementations
                                        (0371) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0372) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0373) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0374) ;    functions.
                                        (0375) ;
                                        (0376) ;  THEORY of OPERATION:
                                        (0377) ;     1) Read the Count register - this causes the count value to be
                                        (0378) ;        latched into the Compare register.
                                        (0379) ;     2) Read and return the Count register values from the Compare
                                        (0380) ;        registers into the return buffer.
                                        (0381) ;
                                        (0382)  Timer8_1_bReadTimer:
                                        (0383) _Timer8_1_bReadTimer:
                                        (0384)  bTimer8_1_ReadTimer:                            ; this name deprecated
                                        (0385) _bTimer8_1_ReadTimer:                            ; this name deprecated
                                        (0386)  bTimer8_1_CaptureCounter:                       ; this name deprecated
                                        (0387) _bTimer8_1_CaptureCounter:                       ; this name deprecated
                                        (0388) 
                                        (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0390)    mov   A, reg[Timer8_1_COUNTER_REG]            ; synchronous copy DR2 <- DR0
                                        (0391)                                                  ; This may cause an interrupt!
                                        (0392)    mov   A, reg[Timer8_1_COMPARE_REG]            ; Return DR2 (actually DR0)
                                        (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0394)    ret
                                        (0395) 
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File Timer8_1.asm
FILE: lib\prs32_3.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PRS32_3.asm
                                        (0004) ;;   Version: 3.4, Updated on 2013/5/19 at 10:44:2
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PRS32 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "PRS32_3.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export    PRS32_3_Start
                                        (0030) export   _PRS32_3_Start
                                        (0031) export    PRS32_3_Stop
                                        (0032) export   _PRS32_3_Stop
                                        (0033) export    PRS32_3_WriteSeed
                                        (0034) export   _PRS32_3_WriteSeed
                                        (0035) export    PRS32_3_WritePolynomial
                                        (0036) export   _PRS32_3_WritePolynomial
                                        (0037) export    PRS32_3_ReadPRS
                                        (0038) export   _PRS32_3_ReadPRS
                                        (0039) 
                                        (0040) ;-----------------------------------------------
                                        (0041) ;  Constant Definitions
                                        (0042) ;-----------------------------------------------
                                        (0043) bfCONTROL_REG_START_BIT:   equ   1        ; Control register start bit
                                        (0044) 
                                        (0045) AREA UserModules (ROM, REL)
                                        (0046) 
                                        (0047) .SECTION
                                        (0048) ;-----------------------------------------------------------------------------
                                        (0049) ;  FUNCTION NAME: PRS32_3_Start
                                        (0050) ;
                                        (0051) ;  DESCRIPTION:
                                        (0052) ;     Starts the PRS32 user module.  The PRS will begin computing the PRS
                                        (0053) ;     POLYNOMIAL when data is clocked in.
                                        (0054) ;
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;
                                        (0057) ;  ARGUMENTS: None
                                        (0058) ;
                                        (0059) ;  RETURNS:   None
                                        (0060) ;
                                        (0061) ;  SIDE EFFECTS:
                                        (0062) ;    The A and X registers may be modified by this or future implementations
                                        (0063) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0064) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0065) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0066) ;    functions.
                                        (0067) ;
                                        (0068)  PRS32_3_Start:
                                        (0069) _PRS32_3_Start:
                                        (0070)    RAM_PROLOGUE RAM_USE_CLASS_1
0643: 43 53 01 OR    REG[0x53],0x1      (0071)    or    REG[PRS32_3_CONTROL_REG_LSB], bfCONTROL_REG_START_BIT
                                        (0072)    RAM_EPILOGUE RAM_USE_CLASS_1
0646: 7F       RET                      (0073)    ret
                                        (0074) .ENDSECTION
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: PRS32_3_Stop
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Disables PRS32 operation.
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS: None
                                        (0086) ;
                                        (0087) ;  RETURNS:   None
                                        (0088) ;
                                        (0089) ;  SIDE EFFECTS:
                                        (0090) ;    The A and X registers may be modified by this or future implementations
                                        (0091) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0092) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0093) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0094) ;    functions.
                                        (0095) ;
                                        (0096) ;    Writing to the Seed register will cause the seed value to be latched into
                                        (0097) ;    the Shift register.
                                        (0098) ;
                                        (0099) ;  THEORY of OPERATION or PROCEDURE:
                                        (0100) ;     Clear the start bit in the Control register of the LSB block.
                                        (0101) ;
                                        (0102) ;-----------------------------------------------------------------------------
                                        (0103)  PRS32_3_Stop:
                                        (0104) _PRS32_3_Stop:
                                        (0105)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0106)    and   REG[PRS32_3_CONTROL_REG_LSB], ~bfCONTROL_REG_START_BIT
                                        (0107)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0108)    ret
                                        (0109) .ENDSECTION
                                        (0110) 
                                        (0111) .SECTION
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;  FUNCTION NAME: PRS32_3_WriteSeed
                                        (0114) ;
                                        (0115) ;  DESCRIPTION:
                                        (0116) ;     Initializes the PRS polynomial function with a starting seed value.
                                        (0117) ;     The PRS32 User module is stopped while the Seed value is updated and
                                        (0118) ;     upon exit, its previous start state is restored.
                                        (0119) ;
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;
                                        (0122) ;  ARGUMENTS:
                                        (0123) ;     DWORD dwSeedValue - the seed value to initialize the polynomial function.
                                        (0124) ;        X register points to 4 byte dword value.
                                        (0125) ;        Note that X points to MSB.
                                        (0126) ;
                                        (0127) ;  RETURNS: None
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;    The A and X registers may be modified by this or future implementations
                                        (0131) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0132) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0133) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0134) ;    functions.
                                        (0135) ;
                                        (0136) ;    PRS32 user module is stopped while the seed is updated.
                                        (0137) ;
                                        (0138) ;  THEORY of OPERATION or PROCEDURE:
                                        (0139) ;     Set the seed value in the Seed register.
                                        (0140) ;
                                        (0141) ;-----------------------------------------------------------------------------
                                        (0142) _PRS32_3_WriteSeed:
                                        (0143)  PRS32_3_WriteSeed:
                                        (0144)    RAM_PROLOGUE RAM_USE_CLASS_2
0647: 4F       MOV   X,SP               (0145)    mov   X, SP
                                        (0146)    ;get and save the current start state
0648: 5D 53    MOV   A,REG[0x53]        (0147)    mov   A, REG[PRS32_3_CONTROL_REG_LSB]
064A: 08       PUSH  A                  (0148)    push  A
                                        (0149) 
                                        (0150)    ;stop the PRS32
064B: 41 53 FE AND   REG[0x53],0xFE     (0151)    and   REG[PRS32_3_CONTROL_REG_LSB], ~bfCONTROL_REG_START_BIT
                                        (0152) 
                                        (0153)    ; Load the Seed value into the Seed register
064E: 52 FA    MOV   A,[X-6]            (0154)    mov   A, [X-6]
0650: 60 5E    MOV   REG[0x5E],A        (0155)    mov   reg[PRS32_3_SEED_REG_MSB], A
0652: 52 FB    MOV   A,[X-5]            (0156)    mov   A, [X-5]
0654: 60 5A    MOV   REG[0x5A],A        (0157)    mov   reg[PRS32_3_SEED_REG_ISB2], A
0656: 52 FC    MOV   A,[X-4]            (0158)    mov   A, [X-4]
0658: 60 56    MOV   REG[0x56],A        (0159)    mov   reg[PRS32_3_SEED_REG_ISB1], A
065A: 52 FD    MOV   A,[X-3]            (0160)    mov   A, [X-3]
065C: 60 52    MOV   REG[0x52],A        (0161)    mov   reg[PRS32_3_SEED_REG_LSB], A
                                        (0162) 
                                        (0163)    ; restore the start state
065E: 18       POP   A                  (0164)    pop   A
065F: 60 53    MOV   REG[0x53],A        (0165)    mov   REG[PRS32_3_CONTROL_REG_LSB], A
0661: 70 3F    AND   F,0x3F             
0663: 71 C0    OR    F,0xC0             
                                        (0166)    RAM_EPILOGUE RAM_USE_CLASS_2
0665: 7F       RET                      (0167)    ret
                                        (0168) .ENDSECTION
                                        (0169) 
                                        (0170) .SECTION
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;  FUNCTION NAME: PRS32_3_WritePolynomial
                                        (0173) ;
                                        (0174) ;  DESCRIPTION:
                                        (0175) ;     Initializes the PRS polynomial value.
                                        (0176) ;     The PRS32 User module is stopped while the polynomial value is updated and
                                        (0177) ;     upon exit, its previous start state is restored.
                                        (0178) ;
                                        (0179) ;-----------------------------------------------------------------------------
                                        (0180) ;
                                        (0181) ;  ARGUMENTS:
                                        (0182) ;     dwPolynomial - the polynomial to load into the polynomial register
                                        (0183) ;        X register points to 4 byte dword value - MSB byte is zero.
                                        (0184) ;        Note that X points to MSB.
                                        (0185) ;
                                        (0186) ;  RETURNS: None
                                        (0187) ;
                                        (0188) ;  SIDE EFFECTS:
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195) ;    PRS32 user module is stopped while the polynomial is updated.
                                        (0196) ;
                                        (0197) ;  THEORY of OPERATION or PROCEDURE:
                                        (0198) ;     Set the polynomial value in the Polynomial register
                                        (0199) ;
                                        (0200) ;-----------------------------------------------------------------------------
                                        (0201) _PRS32_3_WritePolynomial:
                                        (0202)  PRS32_3_WritePolynomial:
                                        (0203)    RAM_PROLOGUE RAM_USE_CLASS_2
0666: 4F       MOV   X,SP               (0204)    mov   X, SP
                                        (0205) 
                                        (0206)    ;get and save the current start state
0667: 5D 53    MOV   A,REG[0x53]        (0207)    mov   A, REG[PRS32_3_CONTROL_REG_LSB]
0669: 08       PUSH  A                  (0208)    push  A
                                        (0209) 
                                        (0210)    ;stop the PRS32
066A: 41 53 FE AND   REG[0x53],0xFE     (0211)    and   REG[PRS32_3_CONTROL_REG_LSB], ~bfCONTROL_REG_START_BIT
                                        (0212) 
                                        (0213)    ; Load the polynomial into the PRS32 Polynomial register
066D: 52 FA    MOV   A,[X-6]            (0214)    mov   A, [X-6]
066F: 60 5D    MOV   REG[0x5D],A        (0215)    mov   reg[PRS32_3_POLY_REG_MSB], A
0671: 52 FB    MOV   A,[X-5]            (0216)    mov   A, [X-5]
0673: 60 59    MOV   REG[0x59],A        (0217)    mov   reg[PRS32_3_POLY_REG_ISB2], A
0675: 52 FC    MOV   A,[X-4]            (0218)    mov   A, [X-4]
0677: 60 55    MOV   REG[0x55],A        (0219)    mov   reg[PRS32_3_POLY_REG_ISB1], A
0679: 52 FD    MOV   A,[X-3]            (0220)    mov   A, [X-3]
067B: 60 51    MOV   REG[0x51],A        (0221)    mov   reg[PRS32_3_POLY_REG_LSB], A
                                        (0222) 
                                        (0223)    ; restore the start state
067D: 18       POP   A                  (0224)    pop   A
067E: 60 53    MOV   REG[0x53],A        (0225)    mov   REG[PRS32_3_CONTROL_REG_LSB], A
0680: 70 3F    AND   F,0x3F             
0682: 71 C0    OR    F,0xC0             
                                        (0226) 
                                        (0227)    RAM_EPILOGUE RAM_USE_CLASS_2
0684: 7F       RET                      (0228)    ret
                                        (0229) .ENDSECTION
                                        (0230) 
                                        (0231) .SECTION
                                        (0232) ;-----------------------------------------------------------------------------
                                        (0233) ;  FUNCTION NAME: PRS32_3_ReadPRS
                                        (0234) ;
                                        (0235) ;  DESCRIPTION:
                                        (0236) ;     Reads the currently computed PRS polynomial function value.
                                        (0237) ;
                                        (0238) ;-----------------------------------------------------------------------------
                                        (0239) ;
                                        (0240) ;  ARGUMENTS:
                                        (0241) ;     DWORD * pdwPRSNumber - a pointer to a DWORD buffer to put the PRS computed
                                        (0242) ;        value.
                                        (0243) ;        The pointer is passed in the X register.
                                        (0244) ;        X points to the MSB of the DWORD
                                        (0245) ;
                                        (0246) ;  RETURNS:
                                        (0247) ;     The read value is placed in the data buffer pointed to by pdwPRSNumber as
                                        (0248) ;     passed in the X register.
                                        (0249) ;
                                        (0250) ;  SIDE EFFECTS:
                                        (0251) ;    The A and X registers may be modified by this or future implementations
                                        (0252) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0253) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0254) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0255) ;    functions.
                                        (0256) ;          
                                        (0257) ;    Currently only the page pointer registers listed below are modified:
                                        (0258) ;          IDX_PP
                                        (0259) ;
                                        (0260) ;     The seed value is lost.
                                        (0261) ;
                                        (0262) ;  THEORY of OPERATION or PROCEDURE:
                                        (0263) ;     1) Read the Shift register - PRS value is transferred to Seed register
                                        (0264) ;     2) Read the Seed register.
                                        (0265) ;
                                        (0266) ;-----------------------------------------------------------------------------
                                        (0267)  PRS32_3_ReadPRS:
                                        (0268) _PRS32_3_ReadPRS:
                                        (0269)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0270)    RAM_SETPAGE_IDX A 
                                        (0271) 
                                        (0272)    ;-------------
                                        (0273)    ;  MSB BYTE
                                        (0274)    ;-------------
                                        (0275)    ; Read the Shift register.  This causes the current
                                        (0276)    ;  PRS computed number to be transferred to the Seed register.
                                        (0277)    mov   A, reg[PRS32_3_SHIFT_REG_MSB]
                                        (0278) 
                                        (0279)    ; Read the PRS computed value
                                        (0280)    mov   A, reg[PRS32_3_SEED_REG_MSB]
                                        (0281)    mov   [X+0], A
                                        (0282) 
                                        (0283)    ;-------------
                                        (0284)    ;  ISB2 BYTE
                                        (0285)    ;-------------
                                        (0286)    ; Read the Shift register.  This causes the current
                                        (0287)    ;  PRS computed number to be transferred to the Seed register.
                                        (0288)    mov   A, reg[PRS32_3_SHIFT_REG_ISB2]
                                        (0289) 
                                        (0290)    ; Read the PRS computed value
                                        (0291)    mov   A, reg[PRS32_3_SEED_REG_ISB2]
                                        (0292)    mov   [X+1], A
                                        (0293) 
                                        (0294)    ;-------------
                                        (0295)    ;  ISB1 BYTE
                                        (0296)    ;-------------
                                        (0297)    ; Read the Shift register.  This causes the current
                                        (0298)    ;  PRS computed number to be transferred to the Seed register.
                                        (0299)    mov   A, reg[PRS32_3_SHIFT_REG_ISB1]
                                        (0300) 
                                        (0301)    ; Read the PRS computed value
                                        (0302)    mov   A, reg[PRS32_3_SEED_REG_ISB1]
                                        (0303)    mov   [X+2], A
                                        (0304) 
                                        (0305)    ;-------------
                                        (0306)    ;  LSB BYTE
                                        (0307)    ;-------------
                                        (0308)    ; Read the Shift register.  This causes the current
                                        (0309)    ;  PRS computed number to be transferred to the Seed register.
                                        (0310)    mov   A, reg[PRS32_3_SHIFT_REG_LSB]
                                        (0311) 
                                        (0312)    ; Read the PRS computed value
                                        (0313)    mov   A, reg[PRS32_3_SEED_REG_LSB]
                                        (0314)    mov   [X+3], A
                                        (0315) 
                                        (0316)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0317)    ret
                                        (0318) .ENDSECTION
                                        (0319) 
                                        (0320) ; End of File PRS32_3.asm
FILE: lib\prs32_2.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PRS32_2.asm
                                        (0004) ;;   Version: 3.4, Updated on 2013/5/19 at 10:44:2
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PRS32 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "PRS32_2.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export    PRS32_2_Start
                                        (0030) export   _PRS32_2_Start
                                        (0031) export    PRS32_2_Stop
                                        (0032) export   _PRS32_2_Stop
                                        (0033) export    PRS32_2_WriteSeed
                                        (0034) export   _PRS32_2_WriteSeed
                                        (0035) export    PRS32_2_WritePolynomial
                                        (0036) export   _PRS32_2_WritePolynomial
                                        (0037) export    PRS32_2_ReadPRS
                                        (0038) export   _PRS32_2_ReadPRS
                                        (0039) 
                                        (0040) ;-----------------------------------------------
                                        (0041) ;  Constant Definitions
                                        (0042) ;-----------------------------------------------
                                        (0043) bfCONTROL_REG_START_BIT:   equ   1        ; Control register start bit
                                        (0044) 
                                        (0045) AREA UserModules (ROM, REL)
                                        (0046) 
                                        (0047) .SECTION
                                        (0048) ;-----------------------------------------------------------------------------
                                        (0049) ;  FUNCTION NAME: PRS32_2_Start
                                        (0050) ;
                                        (0051) ;  DESCRIPTION:
                                        (0052) ;     Starts the PRS32 user module.  The PRS will begin computing the PRS
                                        (0053) ;     POLYNOMIAL when data is clocked in.
                                        (0054) ;
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;
                                        (0057) ;  ARGUMENTS: None
                                        (0058) ;
                                        (0059) ;  RETURNS:   None
                                        (0060) ;
                                        (0061) ;  SIDE EFFECTS:
                                        (0062) ;    The A and X registers may be modified by this or future implementations
                                        (0063) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0064) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0065) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0066) ;    functions.
                                        (0067) ;
                                        (0068)  PRS32_2_Start:
                                        (0069) _PRS32_2_Start:
                                        (0070)    RAM_PROLOGUE RAM_USE_CLASS_1
0685: 43 43 01 OR    REG[0x43],0x1      (0071)    or    REG[PRS32_2_CONTROL_REG_LSB], bfCONTROL_REG_START_BIT
                                        (0072)    RAM_EPILOGUE RAM_USE_CLASS_1
0688: 7F       RET                      (0073)    ret
                                        (0074) .ENDSECTION
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: PRS32_2_Stop
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Disables PRS32 operation.
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS: None
                                        (0086) ;
                                        (0087) ;  RETURNS:   None
                                        (0088) ;
                                        (0089) ;  SIDE EFFECTS:
                                        (0090) ;    The A and X registers may be modified by this or future implementations
                                        (0091) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0092) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0093) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0094) ;    functions.
                                        (0095) ;
                                        (0096) ;    Writing to the Seed register will cause the seed value to be latched into
                                        (0097) ;    the Shift register.
                                        (0098) ;
                                        (0099) ;  THEORY of OPERATION or PROCEDURE:
                                        (0100) ;     Clear the start bit in the Control register of the LSB block.
                                        (0101) ;
                                        (0102) ;-----------------------------------------------------------------------------
                                        (0103)  PRS32_2_Stop:
                                        (0104) _PRS32_2_Stop:
                                        (0105)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0106)    and   REG[PRS32_2_CONTROL_REG_LSB], ~bfCONTROL_REG_START_BIT
                                        (0107)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0108)    ret
                                        (0109) .ENDSECTION
                                        (0110) 
                                        (0111) .SECTION
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;  FUNCTION NAME: PRS32_2_WriteSeed
                                        (0114) ;
                                        (0115) ;  DESCRIPTION:
                                        (0116) ;     Initializes the PRS polynomial function with a starting seed value.
                                        (0117) ;     The PRS32 User module is stopped while the Seed value is updated and
                                        (0118) ;     upon exit, its previous start state is restored.
                                        (0119) ;
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;
                                        (0122) ;  ARGUMENTS:
                                        (0123) ;     DWORD dwSeedValue - the seed value to initialize the polynomial function.
                                        (0124) ;        X register points to 4 byte dword value.
                                        (0125) ;        Note that X points to MSB.
                                        (0126) ;
                                        (0127) ;  RETURNS: None
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;    The A and X registers may be modified by this or future implementations
                                        (0131) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0132) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0133) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0134) ;    functions.
                                        (0135) ;
                                        (0136) ;    PRS32 user module is stopped while the seed is updated.
                                        (0137) ;
                                        (0138) ;  THEORY of OPERATION or PROCEDURE:
                                        (0139) ;     Set the seed value in the Seed register.
                                        (0140) ;
                                        (0141) ;-----------------------------------------------------------------------------
                                        (0142) _PRS32_2_WriteSeed:
                                        (0143)  PRS32_2_WriteSeed:
                                        (0144)    RAM_PROLOGUE RAM_USE_CLASS_2
0689: 4F       MOV   X,SP               (0145)    mov   X, SP
                                        (0146)    ;get and save the current start state
068A: 5D 43    MOV   A,REG[0x43]        (0147)    mov   A, REG[PRS32_2_CONTROL_REG_LSB]
068C: 08       PUSH  A                  (0148)    push  A
                                        (0149) 
                                        (0150)    ;stop the PRS32
068D: 41 43 FE AND   REG[0x43],0xFE     (0151)    and   REG[PRS32_2_CONTROL_REG_LSB], ~bfCONTROL_REG_START_BIT
                                        (0152) 
                                        (0153)    ; Load the Seed value into the Seed register
0690: 52 FA    MOV   A,[X-6]            (0154)    mov   A, [X-6]
0692: 60 4E    MOV   REG[0x4E],A        (0155)    mov   reg[PRS32_2_SEED_REG_MSB], A
0694: 52 FB    MOV   A,[X-5]            (0156)    mov   A, [X-5]
0696: 60 4A    MOV   REG[0x4A],A        (0157)    mov   reg[PRS32_2_SEED_REG_ISB2], A
0698: 52 FC    MOV   A,[X-4]            (0158)    mov   A, [X-4]
069A: 60 46    MOV   REG[0x46],A        (0159)    mov   reg[PRS32_2_SEED_REG_ISB1], A
069C: 52 FD    MOV   A,[X-3]            (0160)    mov   A, [X-3]
069E: 60 42    MOV   REG[0x42],A        (0161)    mov   reg[PRS32_2_SEED_REG_LSB], A
                                        (0162) 
                                        (0163)    ; restore the start state
06A0: 18       POP   A                  (0164)    pop   A
06A1: 60 43    MOV   REG[0x43],A        (0165)    mov   REG[PRS32_2_CONTROL_REG_LSB], A
06A3: 70 3F    AND   F,0x3F             
06A5: 71 C0    OR    F,0xC0             
                                        (0166)    RAM_EPILOGUE RAM_USE_CLASS_2
06A7: 7F       RET                      (0167)    ret
                                        (0168) .ENDSECTION
                                        (0169) 
                                        (0170) .SECTION
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;  FUNCTION NAME: PRS32_2_WritePolynomial
                                        (0173) ;
                                        (0174) ;  DESCRIPTION:
                                        (0175) ;     Initializes the PRS polynomial value.
                                        (0176) ;     The PRS32 User module is stopped while the polynomial value is updated and
                                        (0177) ;     upon exit, its previous start state is restored.
                                        (0178) ;
                                        (0179) ;-----------------------------------------------------------------------------
                                        (0180) ;
                                        (0181) ;  ARGUMENTS:
                                        (0182) ;     dwPolynomial - the polynomial to load into the polynomial register
                                        (0183) ;        X register points to 4 byte dword value - MSB byte is zero.
                                        (0184) ;        Note that X points to MSB.
                                        (0185) ;
                                        (0186) ;  RETURNS: None
                                        (0187) ;
                                        (0188) ;  SIDE EFFECTS:
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195) ;    PRS32 user module is stopped while the polynomial is updated.
                                        (0196) ;
                                        (0197) ;  THEORY of OPERATION or PROCEDURE:
                                        (0198) ;     Set the polynomial value in the Polynomial register
                                        (0199) ;
                                        (0200) ;-----------------------------------------------------------------------------
                                        (0201) _PRS32_2_WritePolynomial:
                                        (0202)  PRS32_2_WritePolynomial:
                                        (0203)    RAM_PROLOGUE RAM_USE_CLASS_2
06A8: 4F       MOV   X,SP               (0204)    mov   X, SP
                                        (0205) 
                                        (0206)    ;get and save the current start state
06A9: 5D 43    MOV   A,REG[0x43]        (0207)    mov   A, REG[PRS32_2_CONTROL_REG_LSB]
06AB: 08       PUSH  A                  (0208)    push  A
                                        (0209) 
                                        (0210)    ;stop the PRS32
06AC: 41 43 FE AND   REG[0x43],0xFE     (0211)    and   REG[PRS32_2_CONTROL_REG_LSB], ~bfCONTROL_REG_START_BIT
                                        (0212) 
                                        (0213)    ; Load the polynomial into the PRS32 Polynomial register
06AF: 52 FA    MOV   A,[X-6]            (0214)    mov   A, [X-6]
06B1: 60 4D    MOV   REG[0x4D],A        (0215)    mov   reg[PRS32_2_POLY_REG_MSB], A
06B3: 52 FB    MOV   A,[X-5]            (0216)    mov   A, [X-5]
06B5: 60 49    MOV   REG[0x49],A        (0217)    mov   reg[PRS32_2_POLY_REG_ISB2], A
06B7: 52 FC    MOV   A,[X-4]            (0218)    mov   A, [X-4]
06B9: 60 45    MOV   REG[0x45],A        (0219)    mov   reg[PRS32_2_POLY_REG_ISB1], A
06BB: 52 FD    MOV   A,[X-3]            (0220)    mov   A, [X-3]
06BD: 60 41    MOV   REG[0x41],A        (0221)    mov   reg[PRS32_2_POLY_REG_LSB], A
                                        (0222) 
                                        (0223)    ; restore the start state
06BF: 18       POP   A                  (0224)    pop   A
06C0: 60 43    MOV   REG[0x43],A        (0225)    mov   REG[PRS32_2_CONTROL_REG_LSB], A
06C2: 70 3F    AND   F,0x3F             
06C4: 71 C0    OR    F,0xC0             
                                        (0226) 
                                        (0227)    RAM_EPILOGUE RAM_USE_CLASS_2
06C6: 7F       RET                      (0228)    ret
                                        (0229) .ENDSECTION
                                        (0230) 
                                        (0231) .SECTION
                                        (0232) ;-----------------------------------------------------------------------------
                                        (0233) ;  FUNCTION NAME: PRS32_2_ReadPRS
                                        (0234) ;
                                        (0235) ;  DESCRIPTION:
                                        (0236) ;     Reads the currently computed PRS polynomial function value.
                                        (0237) ;
                                        (0238) ;-----------------------------------------------------------------------------
                                        (0239) ;
                                        (0240) ;  ARGUMENTS:
                                        (0241) ;     DWORD * pdwPRSNumber - a pointer to a DWORD buffer to put the PRS computed
                                        (0242) ;        value.
                                        (0243) ;        The pointer is passed in the X register.
                                        (0244) ;        X points to the MSB of the DWORD
                                        (0245) ;
                                        (0246) ;  RETURNS:
                                        (0247) ;     The read value is placed in the data buffer pointed to by pdwPRSNumber as
                                        (0248) ;     passed in the X register.
                                        (0249) ;
                                        (0250) ;  SIDE EFFECTS:
                                        (0251) ;    The A and X registers may be modified by this or future implementations
                                        (0252) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0253) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0254) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0255) ;    functions.
                                        (0256) ;          
                                        (0257) ;    Currently only the page pointer registers listed below are modified:
                                        (0258) ;          IDX_PP
                                        (0259) ;
                                        (0260) ;     The seed value is lost.
                                        (0261) ;
                                        (0262) ;  THEORY of OPERATION or PROCEDURE:
                                        (0263) ;     1) Read the Shift register - PRS value is transferred to Seed register
                                        (0264) ;     2) Read the Seed register.
                                        (0265) ;
                                        (0266) ;-----------------------------------------------------------------------------
                                        (0267)  PRS32_2_ReadPRS:
                                        (0268) _PRS32_2_ReadPRS:
                                        (0269)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0270)    RAM_SETPAGE_IDX A 
                                        (0271) 
                                        (0272)    ;-------------
                                        (0273)    ;  MSB BYTE
                                        (0274)    ;-------------
                                        (0275)    ; Read the Shift register.  This causes the current
                                        (0276)    ;  PRS computed number to be transferred to the Seed register.
                                        (0277)    mov   A, reg[PRS32_2_SHIFT_REG_MSB]
                                        (0278) 
                                        (0279)    ; Read the PRS computed value
                                        (0280)    mov   A, reg[PRS32_2_SEED_REG_MSB]
                                        (0281)    mov   [X+0], A
                                        (0282) 
                                        (0283)    ;-------------
                                        (0284)    ;  ISB2 BYTE
                                        (0285)    ;-------------
                                        (0286)    ; Read the Shift register.  This causes the current
                                        (0287)    ;  PRS computed number to be transferred to the Seed register.
                                        (0288)    mov   A, reg[PRS32_2_SHIFT_REG_ISB2]
                                        (0289) 
                                        (0290)    ; Read the PRS computed value
                                        (0291)    mov   A, reg[PRS32_2_SEED_REG_ISB2]
                                        (0292)    mov   [X+1], A
                                        (0293) 
                                        (0294)    ;-------------
                                        (0295)    ;  ISB1 BYTE
                                        (0296)    ;-------------
                                        (0297)    ; Read the Shift register.  This causes the current
                                        (0298)    ;  PRS computed number to be transferred to the Seed register.
                                        (0299)    mov   A, reg[PRS32_2_SHIFT_REG_ISB1]
                                        (0300) 
                                        (0301)    ; Read the PRS computed value
                                        (0302)    mov   A, reg[PRS32_2_SEED_REG_ISB1]
                                        (0303)    mov   [X+2], A
                                        (0304) 
                                        (0305)    ;-------------
                                        (0306)    ;  LSB BYTE
                                        (0307)    ;-------------
                                        (0308)    ; Read the Shift register.  This causes the current
                                        (0309)    ;  PRS computed number to be transferred to the Seed register.
                                        (0310)    mov   A, reg[PRS32_2_SHIFT_REG_LSB]
                                        (0311) 
                                        (0312)    ; Read the PRS computed value
                                        (0313)    mov   A, reg[PRS32_2_SEED_REG_LSB]
                                        (0314)    mov   [X+3], A
                                        (0315) 
                                        (0316)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0317)    ret
                                        (0318) .ENDSECTION
                                        (0319) 
                                        (0320) ; End of File PRS32_2.asm
FILE: lib\prs32_1.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PRS32_1.asm
                                        (0004) ;;   Version: 3.4, Updated on 2013/5/19 at 10:44:2
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PRS32 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "PRS32_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export    PRS32_1_Start
                                        (0030) export   _PRS32_1_Start
                                        (0031) export    PRS32_1_Stop
                                        (0032) export   _PRS32_1_Stop
                                        (0033) export    PRS32_1_WriteSeed
                                        (0034) export   _PRS32_1_WriteSeed
                                        (0035) export    PRS32_1_WritePolynomial
                                        (0036) export   _PRS32_1_WritePolynomial
                                        (0037) export    PRS32_1_ReadPRS
                                        (0038) export   _PRS32_1_ReadPRS
                                        (0039) 
                                        (0040) ;-----------------------------------------------
                                        (0041) ;  Constant Definitions
                                        (0042) ;-----------------------------------------------
                                        (0043) bfCONTROL_REG_START_BIT:   equ   1        ; Control register start bit
                                        (0044) 
                                        (0045) AREA UserModules (ROM, REL)
                                        (0046) 
                                        (0047) .SECTION
                                        (0048) ;-----------------------------------------------------------------------------
                                        (0049) ;  FUNCTION NAME: PRS32_1_Start
                                        (0050) ;
                                        (0051) ;  DESCRIPTION:
                                        (0052) ;     Starts the PRS32 user module.  The PRS will begin computing the PRS
                                        (0053) ;     POLYNOMIAL when data is clocked in.
                                        (0054) ;
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;
                                        (0057) ;  ARGUMENTS: None
                                        (0058) ;
                                        (0059) ;  RETURNS:   None
                                        (0060) ;
                                        (0061) ;  SIDE EFFECTS:
                                        (0062) ;    The A and X registers may be modified by this or future implementations
                                        (0063) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0064) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0065) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0066) ;    functions.
                                        (0067) ;
                                        (0068)  PRS32_1_Start:
                                        (0069) _PRS32_1_Start:
                                        (0070)    RAM_PROLOGUE RAM_USE_CLASS_1
06C7: 43 33 01 OR    REG[0x33],0x1      (0071)    or    REG[PRS32_1_CONTROL_REG_LSB], bfCONTROL_REG_START_BIT
                                        (0072)    RAM_EPILOGUE RAM_USE_CLASS_1
06CA: 7F       RET                      (0073)    ret
                                        (0074) .ENDSECTION
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: PRS32_1_Stop
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Disables PRS32 operation.
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS: None
                                        (0086) ;
                                        (0087) ;  RETURNS:   None
                                        (0088) ;
                                        (0089) ;  SIDE EFFECTS:
                                        (0090) ;    The A and X registers may be modified by this or future implementations
                                        (0091) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0092) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0093) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0094) ;    functions.
                                        (0095) ;
                                        (0096) ;    Writing to the Seed register will cause the seed value to be latched into
                                        (0097) ;    the Shift register.
                                        (0098) ;
                                        (0099) ;  THEORY of OPERATION or PROCEDURE:
                                        (0100) ;     Clear the start bit in the Control register of the LSB block.
                                        (0101) ;
                                        (0102) ;-----------------------------------------------------------------------------
                                        (0103)  PRS32_1_Stop:
                                        (0104) _PRS32_1_Stop:
                                        (0105)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0106)    and   REG[PRS32_1_CONTROL_REG_LSB], ~bfCONTROL_REG_START_BIT
                                        (0107)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0108)    ret
                                        (0109) .ENDSECTION
                                        (0110) 
                                        (0111) .SECTION
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;  FUNCTION NAME: PRS32_1_WriteSeed
                                        (0114) ;
                                        (0115) ;  DESCRIPTION:
                                        (0116) ;     Initializes the PRS polynomial function with a starting seed value.
                                        (0117) ;     The PRS32 User module is stopped while the Seed value is updated and
                                        (0118) ;     upon exit, its previous start state is restored.
                                        (0119) ;
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;
                                        (0122) ;  ARGUMENTS:
                                        (0123) ;     DWORD dwSeedValue - the seed value to initialize the polynomial function.
                                        (0124) ;        X register points to 4 byte dword value.
                                        (0125) ;        Note that X points to MSB.
                                        (0126) ;
                                        (0127) ;  RETURNS: None
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;    The A and X registers may be modified by this or future implementations
                                        (0131) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0132) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0133) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0134) ;    functions.
                                        (0135) ;
                                        (0136) ;    PRS32 user module is stopped while the seed is updated.
                                        (0137) ;
                                        (0138) ;  THEORY of OPERATION or PROCEDURE:
                                        (0139) ;     Set the seed value in the Seed register.
                                        (0140) ;
                                        (0141) ;-----------------------------------------------------------------------------
                                        (0142) _PRS32_1_WriteSeed:
                                        (0143)  PRS32_1_WriteSeed:
                                        (0144)    RAM_PROLOGUE RAM_USE_CLASS_2
06CB: 4F       MOV   X,SP               (0145)    mov   X, SP
                                        (0146)    ;get and save the current start state
06CC: 5D 33    MOV   A,REG[0x33]        (0147)    mov   A, REG[PRS32_1_CONTROL_REG_LSB]
06CE: 08       PUSH  A                  (0148)    push  A
                                        (0149) 
                                        (0150)    ;stop the PRS32
06CF: 41 33 FE AND   REG[0x33],0xFE     (0151)    and   REG[PRS32_1_CONTROL_REG_LSB], ~bfCONTROL_REG_START_BIT
                                        (0152) 
                                        (0153)    ; Load the Seed value into the Seed register
06D2: 52 FA    MOV   A,[X-6]            (0154)    mov   A, [X-6]
06D4: 60 3E    MOV   REG[0x3E],A        (0155)    mov   reg[PRS32_1_SEED_REG_MSB], A
06D6: 52 FB    MOV   A,[X-5]            (0156)    mov   A, [X-5]
06D8: 60 3A    MOV   REG[0x3A],A        (0157)    mov   reg[PRS32_1_SEED_REG_ISB2], A
06DA: 52 FC    MOV   A,[X-4]            (0158)    mov   A, [X-4]
06DC: 60 36    MOV   REG[0x36],A        (0159)    mov   reg[PRS32_1_SEED_REG_ISB1], A
06DE: 52 FD    MOV   A,[X-3]            (0160)    mov   A, [X-3]
06E0: 60 32    MOV   REG[0x32],A        (0161)    mov   reg[PRS32_1_SEED_REG_LSB], A
                                        (0162) 
                                        (0163)    ; restore the start state
06E2: 18       POP   A                  (0164)    pop   A
06E3: 60 33    MOV   REG[0x33],A        (0165)    mov   REG[PRS32_1_CONTROL_REG_LSB], A
06E5: 70 3F    AND   F,0x3F             
06E7: 71 C0    OR    F,0xC0             
                                        (0166)    RAM_EPILOGUE RAM_USE_CLASS_2
06E9: 7F       RET                      (0167)    ret
                                        (0168) .ENDSECTION
                                        (0169) 
                                        (0170) .SECTION
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;  FUNCTION NAME: PRS32_1_WritePolynomial
                                        (0173) ;
                                        (0174) ;  DESCRIPTION:
                                        (0175) ;     Initializes the PRS polynomial value.
                                        (0176) ;     The PRS32 User module is stopped while the polynomial value is updated and
                                        (0177) ;     upon exit, its previous start state is restored.
                                        (0178) ;
                                        (0179) ;-----------------------------------------------------------------------------
                                        (0180) ;
                                        (0181) ;  ARGUMENTS:
                                        (0182) ;     dwPolynomial - the polynomial to load into the polynomial register
                                        (0183) ;        X register points to 4 byte dword value - MSB byte is zero.
                                        (0184) ;        Note that X points to MSB.
                                        (0185) ;
                                        (0186) ;  RETURNS: None
                                        (0187) ;
                                        (0188) ;  SIDE EFFECTS:
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195) ;    PRS32 user module is stopped while the polynomial is updated.
                                        (0196) ;
                                        (0197) ;  THEORY of OPERATION or PROCEDURE:
                                        (0198) ;     Set the polynomial value in the Polynomial register
                                        (0199) ;
                                        (0200) ;-----------------------------------------------------------------------------
                                        (0201) _PRS32_1_WritePolynomial:
                                        (0202)  PRS32_1_WritePolynomial:
                                        (0203)    RAM_PROLOGUE RAM_USE_CLASS_2
06EA: 4F       MOV   X,SP               (0204)    mov   X, SP
                                        (0205) 
                                        (0206)    ;get and save the current start state
06EB: 5D 33    MOV   A,REG[0x33]        (0207)    mov   A, REG[PRS32_1_CONTROL_REG_LSB]
06ED: 08       PUSH  A                  (0208)    push  A
                                        (0209) 
                                        (0210)    ;stop the PRS32
06EE: 41 33 FE AND   REG[0x33],0xFE     (0211)    and   REG[PRS32_1_CONTROL_REG_LSB], ~bfCONTROL_REG_START_BIT
                                        (0212) 
                                        (0213)    ; Load the polynomial into the PRS32 Polynomial register
06F1: 52 FA    MOV   A,[X-6]            (0214)    mov   A, [X-6]
06F3: 60 3D    MOV   REG[0x3D],A        (0215)    mov   reg[PRS32_1_POLY_REG_MSB], A
06F5: 52 FB    MOV   A,[X-5]            (0216)    mov   A, [X-5]
06F7: 60 39    MOV   REG[0x39],A        (0217)    mov   reg[PRS32_1_POLY_REG_ISB2], A
06F9: 52 FC    MOV   A,[X-4]            (0218)    mov   A, [X-4]
06FB: 60 35    MOV   REG[0x35],A        (0219)    mov   reg[PRS32_1_POLY_REG_ISB1], A
06FD: 52 FD    MOV   A,[X-3]            (0220)    mov   A, [X-3]
06FF: 60 31    MOV   REG[0x31],A        (0221)    mov   reg[PRS32_1_POLY_REG_LSB], A
                                        (0222) 
                                        (0223)    ; restore the start state
0701: 18       POP   A                  (0224)    pop   A
0702: 60 33    MOV   REG[0x33],A        (0225)    mov   REG[PRS32_1_CONTROL_REG_LSB], A
0704: 70 3F    AND   F,0x3F             
0706: 71 C0    OR    F,0xC0             
                                        (0226) 
                                        (0227)    RAM_EPILOGUE RAM_USE_CLASS_2
0708: 7F       RET                      (0228)    ret
                                        (0229) .ENDSECTION
                                        (0230) 
                                        (0231) .SECTION
                                        (0232) ;-----------------------------------------------------------------------------
                                        (0233) ;  FUNCTION NAME: PRS32_1_ReadPRS
                                        (0234) ;
                                        (0235) ;  DESCRIPTION:
                                        (0236) ;     Reads the currently computed PRS polynomial function value.
                                        (0237) ;
                                        (0238) ;-----------------------------------------------------------------------------
                                        (0239) ;
                                        (0240) ;  ARGUMENTS:
                                        (0241) ;     DWORD * pdwPRSNumber - a pointer to a DWORD buffer to put the PRS computed
                                        (0242) ;        value.
                                        (0243) ;        The pointer is passed in the X register.
                                        (0244) ;        X points to the MSB of the DWORD
                                        (0245) ;
                                        (0246) ;  RETURNS:
                                        (0247) ;     The read value is placed in the data buffer pointed to by pdwPRSNumber as
                                        (0248) ;     passed in the X register.
                                        (0249) ;
                                        (0250) ;  SIDE EFFECTS:
                                        (0251) ;    The A and X registers may be modified by this or future implementations
                                        (0252) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0253) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0254) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0255) ;    functions.
                                        (0256) ;          
                                        (0257) ;    Currently only the page pointer registers listed below are modified:
                                        (0258) ;          IDX_PP
                                        (0259) ;
                                        (0260) ;     The seed value is lost.
                                        (0261) ;
                                        (0262) ;  THEORY of OPERATION or PROCEDURE:
                                        (0263) ;     1) Read the Shift register - PRS value is transferred to Seed register
                                        (0264) ;     2) Read the Seed register.
                                        (0265) ;
                                        (0266) ;-----------------------------------------------------------------------------
                                        (0267)  PRS32_1_ReadPRS:
                                        (0268) _PRS32_1_ReadPRS:
                                        (0269)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0270)    RAM_SETPAGE_IDX A 
                                        (0271) 
                                        (0272)    ;-------------
                                        (0273)    ;  MSB BYTE
                                        (0274)    ;-------------
                                        (0275)    ; Read the Shift register.  This causes the current
                                        (0276)    ;  PRS computed number to be transferred to the Seed register.
                                        (0277)    mov   A, reg[PRS32_1_SHIFT_REG_MSB]
                                        (0278) 
                                        (0279)    ; Read the PRS computed value
                                        (0280)    mov   A, reg[PRS32_1_SEED_REG_MSB]
                                        (0281)    mov   [X+0], A
                                        (0282) 
                                        (0283)    ;-------------
                                        (0284)    ;  ISB2 BYTE
                                        (0285)    ;-------------
                                        (0286)    ; Read the Shift register.  This causes the current
                                        (0287)    ;  PRS computed number to be transferred to the Seed register.
                                        (0288)    mov   A, reg[PRS32_1_SHIFT_REG_ISB2]
                                        (0289) 
                                        (0290)    ; Read the PRS computed value
                                        (0291)    mov   A, reg[PRS32_1_SEED_REG_ISB2]
                                        (0292)    mov   [X+1], A
                                        (0293) 
                                        (0294)    ;-------------
                                        (0295)    ;  ISB1 BYTE
                                        (0296)    ;-------------
                                        (0297)    ; Read the Shift register.  This causes the current
                                        (0298)    ;  PRS computed number to be transferred to the Seed register.
                                        (0299)    mov   A, reg[PRS32_1_SHIFT_REG_ISB1]
                                        (0300) 
                                        (0301)    ; Read the PRS computed value
                                        (0302)    mov   A, reg[PRS32_1_SEED_REG_ISB1]
                                        (0303)    mov   [X+2], A
                                        (0304) 
                                        (0305)    ;-------------
                                        (0306)    ;  LSB BYTE
                                        (0307)    ;-------------
                                        (0308)    ; Read the Shift register.  This causes the current
                                        (0309)    ;  PRS computed number to be transferred to the Seed register.
                                        (0310)    mov   A, reg[PRS32_1_SHIFT_REG_LSB]
                                        (0311) 
                                        (0312)    ; Read the PRS computed value
                                        (0313)    mov   A, reg[PRS32_1_SEED_REG_LSB]
                                        (0314)    mov   [X+3], A
                                        (0315) 
                                        (0316)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0317)    ret
                                        (0318) .ENDSECTION
                                        (0319) 
                                        (0320) ; End of File PRS32_1.asm
FILE: lib\lcd_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD_1.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD_1.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_1_Start
                                        (0044) export  _LCD_1_Start
                                        (0045) export   LCD_1_Init
                                        (0046) export  _LCD_1_Init
                                        (0047) 
                                        (0048) export   LCD_1_WriteData
                                        (0049) export  _LCD_1_WriteData
                                        (0050) 
                                        (0051) export   LCD_1_Control
                                        (0052) export  _LCD_1_Control
                                        (0053) 
                                        (0054) export  LCD_1_PrString
                                        (0055) export _LCD_1_PrString
                                        (0056) 
                                        (0057) export  LCD_1_PrCString
                                        (0058) export _LCD_1_PrCString
                                        (0059) 
                                        (0060) export  LCD_1_Position
                                        (0061) export _LCD_1_Position
                                        (0062) 
                                        (0063) export  LCD_1_PrHexByte
                                        (0064) export _LCD_1_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_1_PrHexInt
                                        (0067) export _LCD_1_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_1_Delay50uTimes
                                        (0070) export _LCD_1_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_1_Delay50u
                                        (0073) export _LCD_1_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0081) export  LCD_1_InitBG
                                        (0082) export _LCD_1_InitBG
                                        (0083) 
                                        (0084) export  LCD_1_InitVBG
                                        (0085) export _LCD_1_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_1_DrawVBG and
                                        (0090) ;    LCD_1_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_1_DrawVBG
                                        (0112) export _LCD_1_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_1_DrawVBG
                                        (0117) export  LCD_1_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_1_Write_Data
                                        (0127) export  _LCD_1_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_1_Port:           equ    PRT0DR
                                        (0135) LCD_1_PortMode0:      equ    PRT0DM0
                                        (0136) LCD_1_PortMode1:      equ    PRT0DM1
                                        (0137) 
                                        (0138) LCD_1_E:              equ    10h
                                        (0139) LCD_1_RW:             equ    40h
                                        (0140) LCD_1_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_1_DATA_MASK:      equ    0Fh
                                        (0143) LCD_1_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_1_DATA_READ:      equ    ( LCD_1_E | LCD_1_RW | LCD_1_RS )
                                        (0146) LCD_1_CNTL_READ:      equ    ( LCD_1_E | LCD_1_RW )
                                        (0147) LCD_1_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_1_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_1_DISP_INC:       equ    03h
                                        (0151) LCD_1_DISP_OFF:       equ    08h
                                        (0152) LCD_1_DISP_ON:        equ    0Ch
                                        (0153) LCD_1_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_1_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_1_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_1_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_1_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_1_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_1_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_1_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_1_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_1_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_1_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_1_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_1_PrCString:
                                        (0205) _LCD_1_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0709: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
070A: 10       PUSH  X                  (0209)     push  X
070B: 28       ROMX                     (0210)     romx                               ; Get character from ROM
070C: B0 04    JNZ   0x0711             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
070E: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
070F: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0710: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0711: 90 3D    CALL  LCD_1_Write_Data|LCD_1_WriteData|_LCD_1_WriteData|_LCD_1_Write_Data(0218)     call  LCD_1_WriteData              ; Write data to LCD
0713: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0714: 18       POP   A                  (0220)     pop   A
0715: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0716: DF F2    JNC   _LCD_1_PrCString|_PRS32_1_ReadPRS|LCD_1_PrCString(0222)     jnc   .Loop_PrCString
0718: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0719: 8F EF    JMP   _LCD_1_PrCString|_PRS32_1_ReadPRS|LCD_1_PrCString(0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_1_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_1_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_1_PrHexByte:
                                        (0258) _LCD_1_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
072B: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
072C: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
072D: 67       ASR   A                  (0262)     asr   A
072E: 67       ASR   A                  (0263)     asr   A
072F: 67       ASR   A                  (0264)     asr   A
0730: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0732: FF E7    INDEX LCD_1_HEX_STR      (0266)     index LCD_1_HEX_STR                  ; Get Hex value
0734: 90 1A    CALL  LCD_1_Write_Data|LCD_1_WriteData|_LCD_1_WriteData|_LCD_1_Write_Data(0267)     call  LCD_1_WriteData              ; Write data to screen
0736: 18       POP   A                  (0268)     pop   A                            ; Restore value
0737: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0739: FF E0    INDEX LCD_1_HEX_STR      (0270)     index LCD_1_HEX_STR                  ; Get Hex value
073B: 90 13    CALL  LCD_1_Write_Data|LCD_1_WriteData|_LCD_1_WriteData|_LCD_1_Write_Data(0271)     call  LCD_1_WriteData              ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
073D: 7F       RET                      (0273)     ret
073E: 70 BF    AND   F,0xBF             
0740: 60 D3    MOV   REG[0xD3],A        
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_1_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_1_PrHexInt:
                                        (0303) _LCD_1_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0305)     swap  A,X
                                        (0306)     call  LCD_1_PrHexByte              ; Print MSB
                                        (0307)     mov   A,X                          ; Move LSB into position
                                        (0308)     call  LCD_1_PrHexByte              ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_1_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_1_PrString:
                                        (0342) _LCD_1_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0742: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0744: A0 06    JZ    0x074B             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_1_writeData is known not to modify X so no need to preserve
0746: 90 08    CALL  LCD_1_Write_Data|LCD_1_WriteData|_LCD_1_WriteData|_LCD_1_Write_Data(0349)     call  LCD_1_WriteData              ; Write data to screen
0748: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0749: 8F F8    JMP   0x0742             (0351)     jmp   .Loop_PrString               ; Go get next character
074B: 70 3F    AND   F,0x3F             
074D: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
074F: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_1_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_1_WriteData:
                                        (0382) _LCD_1_WriteData:
                                        (0383)  LCD_1_Write_Data:   ; Do not use
                                        (0384) _LCD_1_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0750: 90 65    CALL  0x07B7             (0386)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_1_Check_Ready
0752: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0753: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0754: 67       ASR   A                  (0390)     asr   A
0755: 67       ASR   A                  (0391)     asr   A
0756: 67       ASR   A                  (0392)     asr   A
0757: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0759: 90 3B    CALL  0x0796             (0394)     call  LCD_1_WDATA_Nibble           ; Write Upper nibble
075B: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
075C: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
075E: 40       NOP                      (0397)     nop
075F: 40       NOP                      (0398)     nop
0760: 40       NOP                      (0399)     nop
0761: 90 33    CALL  0x0796             (0400)     call  LCD_1_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0763: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_1_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_1_Control:
                                        (0430) _LCD_1_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0764: 90 51    CALL  0x07B7             (0432)     call  LCD_1_Check_Ready            ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_1_Check_Ready
0766: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0767: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0768: 67       ASR   A                  (0436)     asr   A
0769: 67       ASR   A                  (0437)     asr   A
076A: 67       ASR   A                  (0438)     asr   A
076B: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
076D: 90 09    CALL  0x0778             (0440)     call  LCD_1_WCNTL_Nibble           ; Write high nibble
076F: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0770: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0772: 40       NOP                      (0443)     nop
0773: 40       NOP                      (0444)     nop
0774: 40       NOP                      (0445)     nop
0775: 90 01    CALL  0x0778             (0446)     call  LCD_1_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0777: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_1_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_1_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0778: 08       PUSH  A                  (0477)     push  A
0779: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_0_Data_SHADE           ; Set CUR_PP to LCD variable address
077C: 26 00 80 AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx],0x80(0479)     and   [Port_0_Data_SHADE],~LCD_1_PORT_MASK
077F: 51 00    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx](0480)     mov   A,[Port_0_Data_SHADE]
0781: 60 00    MOV   REG[0x0],A         (0481)     mov   reg[LCD_1_Port],A                      ; Reset control lines
                                        (0482) 
0783: 18       POP   A                  (0483)     pop   A
0784: 21 0F    AND   A,0xF              (0484)     and   A,LCD_1_DATA_MASK                      ; Make sure no bogus data in MSN
0786: 29 10    OR    A,0x10             (0485)     or    A,LCD_1_E                              ; Bring "E" Enable line high
0788: 2A 00    OR    A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx](0486)     or    A,[Port_0_Data_SHADE]                  ; OR in bit 7 just
078A: 60 00    MOV   REG[0x0],A         (0487)     mov   reg[LCD_1_Port], A                     ; Write data
078C: 53 00    MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx],A(0488)     mov   [Port_0_Data_SHADE],A                  ; Keep shadow register in sync
078E: 40       NOP                      (0489)     nop
078F: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK)   ; Disable E signal and leave data on bus.
0791: 53 00    MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx],A(0491)     mov   [Port_0_Data_SHADE],A                  ; Keep shadow register in sync
0793: 60 00    MOV   REG[0x0],A         (0492)     mov   reg[LCD_1_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0795: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_1_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_1_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0796: 08       PUSH  A                  (0523)     push  A
0797: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_0_Data_SHADE          ; Set CUR_PP to LCD variable address
079A: 26 00 80 AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx],0x80(0525)     and   [Port_0_Data_SHADE],~LCD_1_PORT_MASK
079D: 2E 00 20 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx],0x20(0526)     or    [Port_0_Data_SHADE],LCD_1_RS                ; Raise RS to signify a Data Write
07A0: 51 00    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx](0527)     mov   A,[Port_0_Data_SHADE]
07A2: 60 00    MOV   REG[0x0],A         (0528)     mov   reg[LCD_1_Port],A
                                        (0529) 
07A4: 18       POP   A                  (0530)     pop   A
07A5: 21 0F    AND   A,0xF              (0531)     and   A,LCD_1_DATA_MASK                           ; Make sure no bogus data in A[7:4]
07A7: 29 30    OR    A,0x30             (0532)     or    A,(LCD_1_E | LCD_1_RS)                      ; Bring "E" Enable line high
07A9: 2A 00    OR    A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx](0533)     or    A,[Port_0_Data_SHADE]                       ; Keep shadow in sync
07AB: 60 00    MOV   REG[0x0],A         (0534)     mov   reg[LCD_1_Port], A                            ; Write data
07AD: 53 00    MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx],A(0535)     mov   [Port_0_Data_SHADE],A                       ; Keep shadow in sync
07AF: 40       NOP                      (0536)     NOP
07B0: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_1_PORT_MASK|LCD_1_DATA_MASK|LCD_1_RS)  ; Disable E signal and leave Data on bus
07B2: 53 00    MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx],A(0538)     mov   [Port_0_Data_SHADE],A                       ; keep shadow in sync
07B4: 60 00    MOV   REG[0x0],A         (0539)     mov   reg[LCD_1_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
07B6: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_1_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_1_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
07B7: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
07B8: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_0_Data_SHADE                ; Set CUR_PP to LCD variable address
07BB: 26 00 80 AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx],0x80(0573)     and   [Port_0_Data_SHADE],~LCD_1_PORT_MASK        ; Mask of all LCD bits
07BE: 51 00    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx](0574)     mov   A,[Port_0_Data_SHADE]
07C0: 60 00    MOV   REG[0x0],A         (0575)     mov   reg[LCD_1_Port],A                           ; Zero LCD port bits
                                        (0576) 
07C2: 26 03 F0 AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+3],0xF0(0577)     and   [Port_0_DriveMode_0_SHADE],~LCD_1_DATA_MASK ; Clear out LCD mode bits.
07C5: 51 03    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+3](0578)     mov   A,[Port_0_DriveMode_0_SHADE]
07C7: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
07C9: 60 00    MOV   REG[0x0],A         (0580)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for reading
07CB: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
07CD: 2E 00 40 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx],0x40(0583)     or    [Port_0_Data_SHADE],LCD_1_RW                ; Raise RW to signify Read operation
07D0: 51 00    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx](0584)     mov   A,[Port_0_Data_SHADE]
07D2: 60 00    MOV   REG[0x0],A         (0585)     mov   reg[LCD_1_Port],A
07D4: 40       NOP                      (0586)     NOP
                                        (0587) 
07D5: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
07D6: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
07D8: 2E 00 50 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx],0x50(0592)     or    [Port_0_Data_SHADE], LCD_1_CNTL_READ                  ; Raise E to start cycle
07DB: 51 00    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx](0593)     mov   A,[Port_0_Data_SHADE]
07DD: 60 00    MOV   REG[0x0],A         (0594)     mov   reg[LCD_1_Port],A
                                        (0595) 
07DF: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
07E0: 40       NOP                      (0597)     nop
07E1: 5D 00    MOV   A,REG[0x0]         (0598)     mov   A,reg[LCD_1_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
07E3: 08       PUSH  A                  (0610)     push  A
07E4: 26 00 C0 AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx],0xC0(0611)     and   [Port_0_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
07E7: 51 00    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx](0612)     mov   A,[Port_0_Data_SHADE]
07E9: 60 00    MOV   REG[0x0],A         (0613)     mov   reg[LCD_1_Port],A
                                        (0614) 
07EB: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
07EC: 40       NOP                      (0616)     nop                                    ; fastest PSoC
07ED: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
07EE: 2E 00 50 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx],0x50(0619)     or    [Port_0_Data_SHADE],LCD_1_CNTL_READ                   ; Raise E to start cycle
07F1: 51 00    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx](0620)     mov   A,[Port_0_Data_SHADE]
07F3: 60 00    MOV   REG[0x0],A         (0621)     mov   reg[LCD_1_Port],A
                                        (0622) 
07F5: 40       NOP                      (0623)     nop
07F6: 40       NOP                      (0624)     nop
                                        (0625) 
07F7: 26 00 C0 AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx],0xC0(0626)     and   [Port_0_Data_SHADE],(~LCD_1_PORT_MASK | LCD_1_RW)     ; Lower E signal
07FA: 51 00    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx](0627)     mov   A,[Port_0_Data_SHADE]
07FC: 60 00    MOV   REG[0x0],A         (0628)     mov   reg[LCD_1_Port],A
                                        (0629) 
07FE: 18       POP   A                  (0630)     pop   A
07FF: 21 08    AND   A,0x8              (0631)     and   A,LCD_1_READY_BIT                                       ; Check busy
                                        (0632) 
0801: A0 04    JZ    0x0806             (0633)     jz    .UNLOCK
0803: 79       DEC   X                  (0634)     dec   X
0804: BF D3    JNZ   0x07D8             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0806: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0807: 2E 03 7F OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+3],0x7F(0639)     or    [Port_0_DriveMode_0_SHADE],LCD_1_PORT_WRITE ; Revert Data bit to Write mode
080A: 51 03    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+3](0640)     mov   A,[Port_0_DriveMode_0_SHADE]
080C: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
080E: 60 00    MOV   REG[0x0],A         (0642)     mov   reg[LCD_1_PortMode0],A                      ; Setup LCD Port for writing
0810: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0812: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0813: 7F       RET                      (0646)     ret
0814: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_1_Start
                                        (0652) ;  FUNCTION NAME: LCD_1_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_1_Start:
                                        (0679) _LCD_1_Start:
                                        (0680)  LCD_1_Init:
                                        (0681) _LCD_1_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_0_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0817: 26 03 80 AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+3],0x80(0685)     and   [Port_0_DriveMode_0_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
081A: 2E 03 7F OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+3],0x7F(0686)     or    [Port_0_DriveMode_0_SHADE],LCD_1_PORT_WRITE           ; Set LCD port for writing
081D: 26 04 80 AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+4],0x80(0687)     and   [Port_0_DriveMode_1_SHADE],~LCD_1_PORT_MASK           ; Mask off LCD bits
                                        (0688) 
0820: 51 03    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+3](0689)     mov   A,[Port_0_DriveMode_0_SHADE]
0822: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0824: 60 00    MOV   REG[0x0],A         (0691)     mov   reg[LCD_1_PortMode0],A                                ; Setup LCD Port for writing
0826: 51 04    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+4](0692)     mov   A,[Port_0_DriveMode_1_SHADE]
0828: 60 01    MOV   REG[0x1],A         (0693)     mov   reg[LCD_1_PortMode1],A
082A: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
082C: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
082E: 90 67    CALL  _LCD_1_Delay50uTimes(0697)     call  LCD_1_Delay50uTimes
0830: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0832: 90 63    CALL  _LCD_1_Delay50uTimes(0699)     call  LCD_1_Delay50uTimes
                                        (0700) 
0834: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0836: 9F 40    CALL  0x0778             (0702)     call  LCD_1_WCNTL_Nibble
                                        (0703) 
0838: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
083A: 90 5B    CALL  _LCD_1_Delay50uTimes(0705)     call  LCD_1_Delay50uTimes
                                        (0706) 
083C: 50 03    MOV   A,0x3              (0707)     mov   A,03h
083E: 9F 38    CALL  0x0778             (0708)     call  LCD_1_WCNTL_Nibble
                                        (0709) 
0840: 90 63    CALL  _LCD_1_Delay50u    (0710)     call  LCD_1_Delay50u
0842: 90 61    CALL  _LCD_1_Delay50u    (0711)     call  LCD_1_Delay50u
0844: 90 5F    CALL  _LCD_1_Delay50u    (0712)     call  LCD_1_Delay50u
                                        (0713) 
0846: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0848: 9F 2E    CALL  0x0778             (0715)     call  LCD_1_WCNTL_Nibble
                                        (0716) 
084A: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
084C: 90 49    CALL  _LCD_1_Delay50uTimes(0718)     call  LCD_1_Delay50uTimes
                                        (0719) 
084E: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0850: 9F 26    CALL  0x0778             (0721)     call  LCD_1_WCNTL_Nibble
                                        (0722) 
0852: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0854: 90 41    CALL  _LCD_1_Delay50uTimes(0724)     call  LCD_1_Delay50uTimes
                                        (0725) 
0856: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0858: 9F 0A    CALL  _LCD_1_Control     (0727)     call  LCD_1_Control
085A: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
085C: 90 39    CALL  _LCD_1_Delay50uTimes(0729)     call  LCD_1_Delay50uTimes
                                        (0730) 
085E: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0860: 9F 02    CALL  _LCD_1_Control     (0732)     call  LCD_1_Control
0862: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0864: 90 31    CALL  _LCD_1_Delay50uTimes(0734)     call  LCD_1_Delay50uTimes
                                        (0735) 
0866: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0868: 9E FA    CALL  _LCD_1_Control     (0737)     call  LCD_1_Control
                                        (0738) 
086A: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
086C: 9E F6    CALL  _LCD_1_Control     (0740)     call  LCD_1_Control
                                        (0741) 
086E: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_1_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0870: 9E F2    CALL  _LCD_1_Control     (0743)     call  LCD_1_Control
                                        (0744) 
0872: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_1_DISP_OFF
0874: 9E EE    CALL  _LCD_1_Control     (0746)     call  LCD_1_Control
                                        (0747) 
0876: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_1_DISP_ON
0878: 9E EA    CALL  _LCD_1_Control     (0749)     call  LCD_1_Control
                                        (0750) 
087A: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_1_DISP_INC
087C: 9E E6    CALL  _LCD_1_Control     (0752)     call  LCD_1_Control
                                        (0753) 
087E: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0880: 90 15    CALL  _LCD_1_Delay50uTimes(0755)     call  LCD_1_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0882: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_1_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_1_ROW_OFFSET::
                                        (0783)      DB    LCD_1_ROW1_OFFSET, LCD_1_ROW2_OFFSET, LCD_1_ROW3_OFFSET, LCD_1_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_1_Position:
                                        (0788) _LCD_1_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0887: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0889: 10       PUSH  X                  (0791)     push  X                            ; Store COL
088A: FF F7    INDEX LCD_1_ROW_OFFSET   (0792)     index LCD_1_ROW_OFFSET ; Get ROW memory offset from table
088C: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
088D: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
088F: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0890: 9E D2    CALL  _LCD_1_Control     (0797)     call  LCD_1_Control                ; Write control byte
0892: 70 3F    AND   F,0x3F             
0894: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0896: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_1_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_1_Delay50uTimes:
                                        (0825) _LCD_1_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0897: 90 0C    CALL  _LCD_1_Delay50u    (0827)     call  LCD_1_Delay50u
0899: 78       DEC   A                  (0828)     dec   A
089A: BF FC    JNZ   _LCD_1_Delay50uTimes(0829)     jnz   LCD_1_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
089C: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_1_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_1_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_1_Delay50u:
                                        (0869)  _LCD_1_Delay50u:                      ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
08A5: 08       PUSH  A                  (0871)     push  A
08A6: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
08A8: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
08AA: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
08AC: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
08AE: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
08B0: D0 06    JNC   0x08B7             (0877)     jnc   .Delay50u_End
08B2: FF E9    INDEX LCD_1_Delay50u_Table(0878)     index LCD_1_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
08B4: 78       DEC   A                  (0880)     dec   A                              ; [4]
08B5: BF FE    JNZ   0x08B4             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
08B7: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
08B8: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_1_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_1_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_1_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_1_Position               ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_1_WriteData              ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_1_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_1_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_1_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_1_Position               ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_1_WriteData              ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_1_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_1_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_1_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_1_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_1_Control                ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_1_WriteData              ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_1_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_1_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_1_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_1_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_1_Control                ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_1_WriteData              ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_1_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_1_InitVBG:
                                        (1236) _LCD_1_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_1_Control                ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_1_WriteData              ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_1_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_1_Control                 ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_1_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_1_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_1_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_1_InitBG:
                                        (1317) _LCD_1_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_1_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_1_Control                ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_1_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_1_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_1_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_1_DISP_ON
                                        (1347)     call  LCD_1_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD_1.asm
FILE: lib\ezi2cs_1int.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: EzI2Cs_1INT.asm
                                        (0004) ;;  Version: 2.00, Updated on 2013/5/19 at 10:43:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2CFXM (Slave) Interrupt Service Routine
                                        (0008) ;;  
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) include "EzI2Cs_1.inc"
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) 
                                        (0019) 
                                        (0020) ;-----------------------------------------------
                                        (0021) ;  Global Symbols
                                        (0022) ;-----------------------------------------------
                                        (0023) 
                                        (0024) export    EzI2Cs_1_varPage      
                                        (0025) export   _EzI2Cs_1_varPage      
                                        (0026) 
                                        (0027) export    EzI2Cs_1_bState  
                                        (0028) export   _EzI2Cs_1_bState
                                        (0029) 
                                        (0030) export    EzI2Cs_1_bRAM_RWoffset
                                        (0031) export   _EzI2Cs_1_bRAM_RWoffset
                                        (0032) 
                                        (0033) export    EzI2Cs_1_bRAM_RWcntr
                                        (0034) export   _EzI2Cs_1_bRAM_RWcntr
                                        (0035) 
                                        (0036) export   _EzI2Cs_1_pRAM_Buf_Addr_LSB
                                        (0037) export    EzI2Cs_1_pRAM_Buf_Addr_LSB
                                        (0038) 
                                        (0039) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0040) export   _EzI2Cs_1_pRAM_Buf_Addr_MSB
                                        (0041) export    EzI2Cs_1_pRAM_Buf_Addr_MSB
                                        (0042) ENDIF
                                        (0043) 
                                        (0044) export   _EzI2Cs_1_bRAM_Buf_Size                                
                                        (0045) export    EzI2Cs_1_bRAM_Buf_Size    
                                        (0046) 
                                        (0047) export   _EzI2Cs_1_bRAM_Buf_WSize               
                                        (0048) export    EzI2Cs_1_bRAM_Buf_WSize  
                                        (0049) 
                                        (0050) IF (EzI2Cs_1_ROM_ENABLE)
                                        (0051) export    EzI2Cs_1_bROM_RWoffset
                                        (0052) export   _EzI2Cs_1_bROM_RWoffset
                                        (0053) 
                                        (0054) export    EzI2Cs_1_bROM_RWcntr   
                                        (0055) export   _EzI2Cs_1_bROM_RWcntr   
                                        (0056) 
                                        (0057) export   _EzI2Cs_1_pROM_Buf_Addr_LSB
                                        (0058) export    EzI2Cs_1_pROM_Buf_Addr_LSB
                                        (0059) export   _EzI2Cs_1_pROM_Buf_Addr_MSB
                                        (0060) export    EzI2Cs_1_pROM_Buf_Addr_MSB
                                        (0061) 
                                        (0062) export   _EzI2Cs_1_bROM_Buf_Size                           
                                        (0063) export    EzI2Cs_1_bROM_Buf_Size
                                        (0064) 
                                        (0065) ENDIF
                                        (0066) 
                                        (0067) export    EzI2Cs_1_bBusy_Flag  
                                        (0068) export   _EzI2Cs_1_bBusy_Flag
                                        (0069) 
                                        (0070) AREA InterruptRAM (RAM, REL, CON)
                                        (0071) 
                                        (0072) ;-----------------------------------------------
                                        (0073) ; Variable Allocation
                                        (0074) ;-----------------------------------------------
                                        (0075) 
                                        (0076) 
                                        (0077) ;; Exported variables
                                        (0078)  _EzI2Cs_1_varPage:                                ; This points to the variable page
                                        (0079)   EzI2Cs_1_varPage:          
                                        (0080) 
                                        (0081)  _EzI2Cs_1_bState:
                                        (0082)   EzI2Cs_1_bState:                           blk 1
                                        (0083) 
                                        (0084) ;; RAM space variables
                                        (0085)  _EzI2Cs_1_bRAM_RWoffset:                          ; RAM address counter.  This is reset each time
                                        (0086)   EzI2Cs_1_bRAM_RWoffset:                    blk 1 ; a read or write is initiated.
                                        (0087) 
                                        (0088)  _EzI2Cs_1_bRAM_RWcntr:                            ; RAM Read/Write counter.  Keeps track of offset 
                                        (0089)   EzI2Cs_1_bRAM_RWcntr:                      blk 1 ; during a read or write operation.  Reset to
                                        (0090)                                                       ; _bRAM_RWoffset at start of R/W command.
                                        (0091) 
                                        (0092) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0093)  _EzI2Cs_1_pRAM_Buf_Addr_MSB:                      ; Base address (MSB) to RAM buffer.  
                                        (0094)   EzI2Cs_1_pRAM_Buf_Addr_MSB:                blk 1 ; 
                                        (0095) ENDIF
                                        (0096) 
                                        (0097)  _EzI2Cs_1_pRAM_Buf_Addr_LSB:                      ; Base address (LSB) to RAM buffer.  
                                        (0098)   EzI2Cs_1_pRAM_Buf_Addr_LSB:                blk 1 ; 
                                        (0099) 
                                        (0100)  _EzI2Cs_1_bRAM_Buf_Size:                          ; Size of RAM buffer.   
                                        (0101)   EzI2Cs_1_bRAM_Buf_Size:                    blk 1 ; 
                                        (0102) 
                                        (0103)  _EzI2Cs_1_bRAM_Buf_WSize:                         ; Portion of the RAM buffer size that is writable.
                                        (0104)   EzI2Cs_1_bRAM_Buf_WSize:                   blk 1 ; 
                                        (0105) 
                                        (0106) ;; ROM space variables
                                        (0107) IF (EzI2Cs_1_ROM_ENABLE)
                                        (0108)  _EzI2Cs_1_bROM_RWoffset:                          ; ROM address counter.  This is reset each time
                                        (0109)   EzI2Cs_1_bROM_RWoffset:                    blk 1 ; a read is initiated
                                        (0110) 
                                        (0111)  _EzI2Cs_1_bROM_RWcntr:                            ; ROM read counter. Keeps track of offset 
                                        (0112)   EzI2Cs_1_bROM_RWcntr:                      blk 1 ; during a read operation.  Reset to
                                        (0113)                                                       ; _bRAM_RWoffset at start of command.
                                        (0114) 
                                        (0115)  _EzI2Cs_1_pROM_Buf_Addr_MSB:                      ; ROM address (MSB) counter. (Relative to buffer)  This
                                        (0116)   EzI2Cs_1_pROM_Buf_Addr_MSB:                blk 1 ; counter is reset each time a read is initiated.
                                        (0117) 
                                        (0118)  _EzI2Cs_1_pROM_Buf_Addr_LSB:                      ; ROM address (MSB) counter. (Relative to buffer)  This
                                        (0119)   EzI2Cs_1_pROM_Buf_Addr_LSB:                blk 1 ; counter is reset each time a read is initiated.
                                        (0120) 
                                        (0121)  _EzI2Cs_1_bROM_Buf_Size:                          ; Size of RAM buffer.                            
                                        (0122)   EzI2Cs_1_bROM_Buf_Size:                    blk 1 ; 
                                        (0123) 
                                        (0124) ENDIF
                                        (0125) 
                                        (0126) IF (EzI2Cs_1_AUTO_ADDR_CHECK^1)
                                        (0127) IF (EzI2Cs_1_DYNAMIC_ADDR) 
                                        (0128) 
                                        (0129) export    EzI2Cs_1_bAddr
                                        (0130) export   _EzI2Cs_1_bAddr 
                                        (0131) 
                                        (0132)  _EzI2Cs_1_bAddr:
                                        (0133)   EzI2Cs_1_bAddr:                            blk 1
                                        (0134) ENDIF
                                        (0135) ENDIF
                                        (0136) 
                                        (0137)  _EzI2Cs_1_bBusy_Flag:
                                        (0138)   EzI2Cs_1_bBusy_Flag:                       blk 1
                                        (0139) 
                                        (0140) ;-----------------------------------------------
                                        (0141) ;  EQUATES and TABLES
                                        (0142) ;-----------------------------------------------
                                        (0143) 
                                        (0144) ;; Bit definitions for EzI2Cs_1_bState
                                        (0145) STATE_IDLE:         equ  0x00      ; Wait for Correct Address
                                        (0146) STATE_WR_RAM_ADDR:  equ  0x02      ; Wait for Secondary address on write
                                        (0147) STATE_WR_RAM:       equ  0x04      ; Write RAM Data
                                        (0148) STATE_RD_RAM:       equ  0x06      ; Read RAM Data
                                        (0149) 
                                        (0150) STATE_WR_ROM_ADDR:  equ  0x08      ; Wait for Secondary address on write
                                        (0151) STATE_RD_ROM:       equ  0x0A      ; Read ROM Data
                                        (0152) 
                                        (0153) STATE_WR_ROM:       equ  0x0C      ; Write ROM (Not supported at this time)
                                        (0154) STATE_RESET:        equ  0x0E      ; Reset state machine
                                        (0155) 
                                        (0156) STATE_MASK:         equ  0x0E
                                        (0157) STATE_MASK2:        equ  0x0F      ; State Mask
                                        (0158) 
                                        (0159) ALT_MODE_FLAG:      equ  0x40      ; Reserved
                                        (0160) 
                                        (0161) 
                                        (0162) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0163) ;---------------------------------------------------
                                        (0164) ; Insert your custom declarations below this banner
                                        (0165) ;---------------------------------------------------
                                        (0166) 
                                        (0167) ;------------------------
                                        (0168) ;  Constant Definitions
                                        (0169) ;------------------------
                                        (0170) 
                                        (0171) 
                                        (0172) ;------------------------
                                        (0173) ; Variable Allocation
                                        (0174) ;------------------------
                                        (0175) 
                                        (0176) 
                                        (0177) ;---------------------------------------------------
                                        (0178) ; Insert your custom declarations above this banner
                                        (0179) ;---------------------------------------------------
                                        (0180) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0181) 
                                        (0182) 
                                        (0183) 
                                        (0184) 
                                        (0185) AREA UserModules (ROM, REL, CON)
                                        (0186) 
                                        (0187) export _EzI2Cs_1_ISR
                                        (0188) ;;****************************************************
                                        (0189) ;; I2C_ISR  main entry point from vector 60h
                                        (0190) ;;
                                        (0191) ;;****************************************************
                                        (0192) 
                                        (0193)  EzI2Cs_1_ISR:
                                        (0194) _EzI2Cs_1_ISR:
                                        (0195) 
08B9: 08       PUSH  A                  (0196)     push A
08BA: 10       PUSH  X                  (0197)     push X
08BB: 70 3F    AND   F,0x3F             
08BD: 71 80    OR    F,0x80             
08BF: 5D D3    MOV   A,REG[0xD3]        
08C1: 08       PUSH  A                  
08C2: 5D D0    MOV   A,REG[0xD0]        
08C4: 08       PUSH  A                  
08C5: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0198)     
                                        (0199)     ;@PSoC_UserCode_ISR_START@ (Do not change this line.)
                                        (0200)     ;---------------------------------------------------
                                        (0201)     ; Insert your custom code below this banner
                                        (0202)     ;---------------------------------------------------
                                        (0203) 
                                        (0204)     ;---------------------------------------------------
                                        (0205)     ; Insert your custom code above this banner
                                        (0206)     ;---------------------------------------------------
                                        (0207)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0208) 
                                        (0209) ;; The folling conditional code is only valid when using the
                                        (0210) ;; large memory model.
                                        (0211) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0212)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_2              ; Set Page Mode
                                        (0213)    REG_PRESERVE IDX_PP                             ; Save Index Page Pointer
                                        (0214)    REG_PRESERVE CUR_PP                             ; Save Current Page Pointer
                                        (0215)    RAM_SETPAGE_CUR  >EzI2Cs_1_varPage      ; Set the current page mode Pointer
08C8: 51 08    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+8](0216)    mov   A, [EzI2Cs_1_pRAM_Buf_Addr_MSB]   ; Set Index page mode pointer
08CA: 60 D3    MOV   REG[0xD3],A        
                                        (0217)    RAM_SETPAGE_IDX A
                                        (0218) ENDIF
                                        (0219) 
08CC: 2E 05 80 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+5],0x80(0220)     or   [EzI2Cs_1_bState],EzI2Cs_1_ANY_ACTIVITY                     ; Set Activity flag
08CF: 49 D7 08 TST   REG[0xD7],0x8      (0221)     tst  reg[EzI2Cs_1_SCR_REG],EzI2Cs_1_SCR_ADDRESS                  ; Check for address
08D2: A0 09    JZ    0x08DC             (0222)     jz   .I2C_CHECK_STOP                                             ; Go to check for Stop condition if no Address
08D4: 26 05 F0 AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+5],0xF0(0223)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bits.                       
08D7: 2E 05 00 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+5],0x0(0224)     or   [EzI2Cs_1_bState],STATE_IDLE                                ; Address flag set, change to IDLE state
08DA: 80 08    JMP   0x08E3             (0225)     jmp  .I2C_DO_STATE_MACHINE
                                        (0226) .I2C_CHECK_STOP:
                                        (0227)     ; Check for Stop condition here.  If a stop condition
                                        (0228)     ; exists, reset state machine to idle.
08DC: 49 D7 20 TST   REG[0xD7],0x20     (0229)     tst reg[EzI2Cs_1_SCR_REG],EzI2Cs_1_SCR_STOP_STATUS               ; Check for Stop condition
08DF: A0 03    JZ    0x08E3             (0230)     jz .I2C_DO_STATE_MACHINE                                            ; No Stop condition - do I2C state mashine
                                        (0231)     ; Following line was commented due to CDT#60202.
                                        (0232)     ; The stop bit is cleared by SetEzI2Cs_1_SCR macro, so the functionality related to EzI2Cs_1_bBusy_Flag is preserved.
                                        (0233)     ; and reg[EzI2Cs_1_SCR_REG],~EzI2Cs_1_SCR_STOP_STATUS            ; Clear Stop bit
08E1: 80 A8    JMP   0x098A             (0234)     jmp  I2C_STATE_RESET
                                        (0235) .I2C_DO_STATE_MACHINE:
08E3: 51 05    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+5](0236)     mov  A,[EzI2Cs_1_bState]    ; Get State
08E5: 21 0E    AND   A,0xE              (0237)     and  A,STATE_MASK                   ; Mask off invalid states
08E7: E0 01    JACC  0x08E9             (0238)     jacc I2C_STATE_JUMP_TABLE
                                        (0239) 
                                        (0240) I2C_STATE_JUMP_TABLE:
08E9: 80 11    JMP   0x08FB             (0241)     jmp  I2C_STATE_IDLE                 ; Idle state
08EB: 80 67    JMP   0x0953             (0242)     jmp  I2C_STATE_WR_RAM_ADDR              ; Wait for Address write state
08ED: 80 79    JMP   0x0967             (0243)     jmp  I2C_STATE_WR_RAM               ; 
08EF: 80 47    JMP   0x0937             (0244)     jmp  I2C_STATE_RD_RAM
                                        (0245) IF (EzI2Cs_1_ROM_ENABLE)        ; Only valid if ROM enabled
                                        (0246)     jmp  I2C_STATE_WR_ROM_ADDR
                                        (0247)     jmp  I2C_STATE_RD_ROM
                                        (0248)     jmp  I2C_STATE_WR_ROM
                                        (0249) ELSE
08F1: 80 98    JMP   0x098A             (0250)     jmp  I2C_STATE_RESET
08F3: 80 96    JMP   0x098A             (0251)     jmp  I2C_STATE_RESET
08F5: 80 94    JMP   0x098A             (0252)     jmp  I2C_STATE_RESET
                                        (0253) ENDIF
08F7: 80 92    JMP   0x098A             (0254)     jmp  I2C_STATE_RESET
                                        (0255) 
08F9: 80 99    JMP   0x0993             (0256)     jmp  EzI2Cs_1_ISR_END
                                        (0257) 
                                        (0258) 
                                        (0259)     ;            *** I2C Idle state ***
                                        (0260)     ;
                                        (0261)     ;   Sit idle until a start with address is issued.
                                        (0262)     ;   Check to see if there is an address match
                                        (0263)     ;     If address match, ACK the bus and determine next state
                                        (0264)     ;     Else NAK the transfer and return to idle state.
                                        (0265)     ;   Also check stop for condition.IF (EzI2Cs_1_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0266)     ;
                                        (0267) I2C_STATE_IDLE:                 ; Idle state
                                        (0268) 
                                        (0269) IF (EzI2Cs_1_AUTO_ADDR_CHECK^1)   ;; for CY8C28X45 chip: skip address comparison and NACK sending stage-hardware will do this for us  if AutoAddressCompare feature is enabled.
                                        (0270)                                           ;; The code in this pre-compiler directive will be executed for all chips except CY8C28X45.
                                        (0271)  IF (EzI2Cs_1_CY8C22x45)
                                        (0272)    M8C_SetBank1
                                        (0273)    tst   reg[EzI2Cs_1_ADDR_REG], EzI2Cs_1_HW_ADDR_EN
                                        (0274)    jnz   .HwAddrRecEnabled
                                        (0275)    M8C_SetBank0
                                        (0276)  ENDIF										  
                                        (0277) IF (EzI2Cs_1_DYNAMIC_ADDR)  ;; DYNAMIC ADDRESS
                                        (0278)     mov  A,reg[EzI2Cs_1_DR_REG]                                      ; Get transmitted address
                                        (0279)     and  A,EzI2Cs_1_ADDR_MASK                                        ; Mask off alt address bit and R/W bit
                                        (0280)     cmp  A,[EzI2Cs_1_bAddr]                                          ; Check for proper Address
                                        (0281)     jz   .CHK_ADDR_MODE 
                                        (0282)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_NAK )                             ; NAK Address 
                                        (0283)     jmp  EzI2Cs_1_ISR_END                                            ; Not valid Address, leave
                                        (0284) 
                                        (0285) ELSE    ;; STATIC ADDRESS
08FB: 5D D8    MOV   A,REG[0xD8]        (0286)     mov  A,reg[EzI2Cs_1_DR_REG]                                      ; Get transmitted address
08FD: 21 FE    AND   A,0xFE             (0287)     and  A,EzI2Cs_1_ADDR_MASK                                        ; Mask off alt address bit and R/W bit
08FF: 39 16    CMP   A,0x16             (0288)     cmp  A,EzI2Cs_1_SLAVE_ADDR                                       ; Check for proper Address
0901: A0 06    JZ    0x0908             (0289)     jz   .CHK_ADDR_MODE 
0903: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0290)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_NAK )                             ; NAK Address 
0906: 80 8C    JMP   0x0993             (0291)     jmp  EzI2Cs_1_ISR_END                                            ; Not valid Address, leave
                                        (0292) ENDIF
                                        (0293)  IF (EzI2Cs_1_CY8C22x45)
                                        (0294) .HwAddrRecEnabled:
                                        (0295)    M8C_SetBank0
                                        (0296)  ENDIF
                                        (0297) ENDIF
                                        (0298) 
                                        (0299) .CHK_ADDR_MODE:   ; A proper address has been detected, now determine what mode, R/W alt_addr?? 
                                        (0300) IF (EzI2Cs_1_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0301)     tst  reg[EzI2Cs_1_DR_REG],EzI2Cs_1_ALT_ADDR_BIT                  ; Check for Alt address
                                        (0302)     jnz  SERVICE_ROM_ADDR
                                        (0303) ENDIF
                                        (0304) 
                                        (0305) .STANDARD_ADDR:
0908: 49 D8 01 TST   REG[0xD8],0x1      (0306)     tst  reg[EzI2Cs_1_DR_REG],EzI2Cs_1_RD_FLAG                       ; Check for a Read operation
090B: B0 0F    JNZ   0x091B             (0307)     jnz  .PREPARE_FOR_RAM_READ
                                        (0308) 
090D: 55 0C 02 MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+12],0x2(0309)     mov [EzI2Cs_1_bBusy_Flag], EzI2Cs_1_I2C_BUSY_RAM_WRITE           ; Write transaction in process - set Busy flag to WRITE
                                        (0310) 
                                        (0311)     ; Prepare for RAM Write Address operation
0910: 26 05 F0 AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+5],0xF0(0312)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
0913: 2E 05 02 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+5],0x2(0313)     or   [EzI2Cs_1_bState],STATE_WR_RAM_ADDR                         ; Set state machine to do RAM Write
0916: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0314)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_ACK )                             ; ACK Address 
0919: 80 79    JMP   0x0993             (0315)     jmp  EzI2Cs_1_ISR_END                                     ; Base address to RAM buffer.  
                                        (0316) 
                                        (0317) .PREPARE_FOR_RAM_READ:
091B: 55 0C 01 MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+12],0x1(0318)     mov [EzI2Cs_1_bBusy_Flag], EzI2Cs_1_I2C_BUSY_RAM_READ            ; Possible read transaction in process - set Busy flag to READ
                                        (0319) 
091E: 26 05 F0 AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+5],0xF0(0320)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
0921: 2E 05 06 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+5],0x6(0321)     or   [EzI2Cs_1_bState],STATE_RD_RAM                              ; Set state machine to do RAM Read 
0924: 5F 07 06 MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+7],[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+6](0322)     mov  [EzI2Cs_1_bRAM_RWcntr],[EzI2Cs_1_bRAM_RWoffset]             ; Reset address counter to start of Offset
0927: 51 09    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+9](0323)     mov  A,[EzI2Cs_1_pRAM_Buf_Addr_LSB]                              ; Get base address
0929: 02 07    ADD   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+7](0324)     add  A,[EzI2Cs_1_bRAM_RWcntr]                                    ; Set Offset and add to base address      
092B: 5C       MOV   X,A                (0325)     mov  X,A                                                         ; Put offset in X
092C: 52 00    MOV   A,[X+0]            (0326)     mov  A,[X]                                                       ; Get first byte to transmit
092E: 60 D8    MOV   REG[0xD8],A        (0327)     mov  reg[EzI2Cs_1_DR_REG],A                               ; Base address to RAM buffer.  
0930: 76 07    INC   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+7](0328)     inc  [EzI2Cs_1_bRAM_RWcntr]                                      ; Increment RAM buffer counter to next location.
0932: 62 D7 14 MOV   REG[0xD7],0x14     
                                        (0329) 
                                        (0330)                                                                      ; ACK command and transmit first byte.
                                        (0331)     SetEzI2Cs_1_SCR (EzI2Cs_1_SCR_ACK|EzI2Cs_1_SCR_TRANSMIT)   
0935: 80 5D    JMP   0x0993             (0332)     jmp  EzI2Cs_1_ISR_END
                                        (0333) 
                                        (0334)     ;            *** I2C Read RAM state ***
                                        (0335)     ;
                                        (0336) I2C_STATE_RD_RAM:
                                        (0337)     ;@PSoC_UserCode_RAM_RD@ (Do not change this line.)
                                        (0338)     ;---------------------------------------------------
                                        (0339)     ; Insert your custom code below this banner
                                        (0340)     ;---------------------------------------------------
                                        (0341)     
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ; Insert your custom code above this banner
                                        (0344)     ;---------------------------------------------------
                                        (0345)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0346)     
0937: 51 0A    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+10](0347)     mov  A,[EzI2Cs_1_bRAM_Buf_Size]
0939: 78       DEC   A                  (0348)     dec  A
093A: 3A 07    CMP   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+7](0349)     cmp  A,[EzI2Cs_1_bRAM_RWcntr]                                    ; Check to see if out of range.
093C: C0 0F    JC    0x094C             (0350)     jc   .I2C_TRANSMIT_DATA  ; WARNING!! Bogas data will be transmitted if out of range.   
                                        (0351) 
093E: 51 09    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+9](0352)     mov  A,[EzI2Cs_1_pRAM_Buf_Addr_LSB]                              ; Get base address
0940: 02 07    ADD   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+7](0353)     add  A,[EzI2Cs_1_bRAM_RWcntr]                                    ; Set Offset and add to base address      
0942: 5C       MOV   X,A                (0354)     mov  X,A                                                         ; Put offset in X
0943: 52 00    MOV   A,[X+0]            (0355)     mov  A,[X]                                                       ; Get first byte to transmit
0945: 60 D8    MOV   REG[0xD8],A        (0356)     mov  reg[EzI2Cs_1_DR_REG],A                                      ; Write data to transmit register
0947: 76 07    INC   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+7](0357)     inc  [EzI2Cs_1_bRAM_RWcntr]                                      ; Increment RAM buffer counter to next location.
0949: 2E 05 20 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+5],0x20(0358)     or   [EzI2Cs_1_bState],EzI2Cs_1_READ_ACTIVITY                    ; Set Read Activity flag
                                        (0359) 
                                        (0360) 
                                        (0361) .I2C_TRANSMIT_DATA:     
094C: 60 D8    MOV   REG[0xD8],A        (0362)     mov  reg[EzI2Cs_1_DR_REG],A                                      ; Write data to transmit register
094E: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0363)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_TRANSMIT )                        ; ACK command and transmit first byte. 
0951: 80 41    JMP   0x0993             (0364)     jmp  EzI2Cs_1_ISR_END
                                        (0365) 
                                        (0366) 
                                        (0367)     ;            *** I2C Write RAM Address state ***
                                        (0368)     ;
                                        (0369)     ;  During this state, the RAM address offset is set.
                                        (0370) I2C_STATE_WR_RAM_ADDR:              ; Wait for Address write state
0953: 5D D8    MOV   A,REG[0xD8]        (0371)     mov  A,reg[EzI2Cs_1_DR_REG]                                      ; Get transmitted Address offset
0955: 3A 0A    CMP   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+10](0372)     cmp  A,[EzI2Cs_1_bRAM_Buf_Size]                                  ; Check if out of range.
0957: D0 2D    JNC   0x0985             (0373)     jnc  I2C_NAK_DATA                                                ; If out of range NAK address
0959: A0 2B    JZ    0x0985             (0374)     jz   I2C_NAK_DATA
                                        (0375) 
                                        (0376)     ; Address in range
095B: 53 07    MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+7],A(0377)     mov  [EzI2Cs_1_bRAM_RWcntr],A                                    ; Reset address counter with new value
095D: 53 06    MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+6],A(0378)     mov  [EzI2Cs_1_bRAM_RWoffset],A                                  ; Set offset with new value.
095F: 26 05 F0 AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+5],0xF0(0379)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
0962: 2E 05 04 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+5],0x4(0380)     or   [EzI2Cs_1_bState],STATE_WR_RAM                              ; Set state machine to do RAM Write
0965: 80 1A    JMP   0x0980             (0381)     jmp  I2C_ACK_DATA                         ; ACK the data
                                        (0382) 
                                        (0383) 
                                        (0384)     ;            *** I2C Write RAM state
                                        (0385) I2C_STATE_WR_RAM:  
                                        (0386)     ;@PSoC_UserCode_RAM_WR@ (Do not change this line.)
                                        (0387)     ;---------------------------------------------------
                                        (0388)     ; Insert your custom code below this banner
                                        (0389)     ;---------------------------------------------------
                                        (0390)     
                                        (0391)     ;---------------------------------------------------
                                        (0392)     ; Insert your custom code above this banner
                                        (0393)     ;---------------------------------------------------
                                        (0394)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0395)     
0967: 51 0B    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+11](0396)     mov  A,[EzI2Cs_1_bRAM_Buf_WSize]                                 ; Get buffer size to make sure we
0969: A0 1B    JZ    0x0985             (0397)     jz   I2C_NAK_DATA                                                ; If RAM WSize is zero, do not allow write.
096B: 78       DEC   A                  (0398)     dec  A                                                           ; are in a valid area.
096C: 3A 07    CMP   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+7](0399)     cmp  A,[EzI2Cs_1_bRAM_RWcntr]                                    ; Check to see if out of range.
096E: C0 16    JC    0x0985             (0400)     jc   I2C_NAK_DATA                                                ; If out of range NAK address
                                        (0401) 
0970: 51 09    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+9](0402)     mov  A,[EzI2Cs_1_pRAM_Buf_Addr_LSB]                              ; Get base address
0972: 02 07    ADD   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+7](0403)     add  A,[EzI2Cs_1_bRAM_RWcntr]                                    ; Set Offset and add to base address      
0974: 5C       MOV   X,A                (0404)     mov  X,A                                                         ; Put offset in X
                                        (0405) 
0975: 5D D8    MOV   A,REG[0xD8]        (0406)     mov  A,reg[EzI2Cs_1_DR_REG]                                      ; Read data to be written
0977: 54 00    MOV   [X+0],A            (0407)     mov  [X],A                                                       ; Store data in Buffer
0979: 2E 05 10 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+5],0x10(0408)     or   [EzI2Cs_1_bState],EzI2Cs_1_WRITE_ACTIVITY                   ; Set Write Activity flag
097C: 76 07    INC   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+7](0409)     inc  [EzI2Cs_1_bRAM_RWcntr]                                      ; Advance pointer to next location
097E: 80 01    JMP   0x0980             (0410)     jmp  I2C_ACK_DATA                         ; ACK the data
0980: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0411) 
                                        (0412)     
                                        (0413)     
                                        (0414) IF (EzI2Cs_1_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0415) 
                                        (0416) SERVICE_ROM_ADDR:  ; At this time only ROM Read is supported.  
                                        (0417)     tst  reg[EzI2Cs_1_DR_REG],EzI2Cs_1_RD_FLAG                       ; Check for a Read operation
                                        (0418)     jnz  PREPARE_FOR_ROM_READ
                                        (0419) 
                                        (0420)     mov [EzI2Cs_1_bBusy_Flag], EzI2Cs_1_I2C_BUSY_ROM_WRITE           ; Write transaction in process - set Busy flag to WRITE
                                        (0421)     
                                        (0422)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
                                        (0423)     or   [EzI2Cs_1_bState],STATE_WR_ROM_ADDR                         ; Set state machine to do ROM ADDR Write
                                        (0424)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_ACK )                             ; ACK Address 
                                        (0425)     jmp  EzI2Cs_1_ISR_END                                    ; Base address to RAM buffer.  
                                        (0426) 
                                        (0427)     ; Prepare for Write ROM Address.              
                                        (0428) I2C_STATE_WR_ROM_ADDR:
                                        (0429)     mov  A,reg[EzI2Cs_1_DR_REG]                                      ; Get transmitted Address offset
                                        (0430)     cmp  A,[EzI2Cs_1_bROM_Buf_Size]                                  ; Check if out of range.
                                        (0431)     jnc  I2C_NAK_DATA                                                ; If out of range NAK address
                                        (0432)     jz   I2C_NAK_DATA
                                        (0433) 
                                        (0434)     mov  [EzI2Cs_1_bROM_RWcntr],A                                    ; Reset address counter with new value
                                        (0435)     mov  [EzI2Cs_1_bROM_RWoffset],A                                  ; Set offset with new value.
                                        (0436)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
                                        (0437)     or   [EzI2Cs_1_bState],STATE_WR_ROM                              ; Set state machine to do ROM Write
                                        (0438)     jmp  I2C_ACK_DATA
                                        (0439) 
                                        (0440) I2C_STATE_WR_ROM:  // Flash command interpreter
                                        (0441)    ;@PSoC_UserCode_ROM_WR@ (Do not change this line.)
                                        (0442)    ;---------------------------------------------------
                                        (0443)    ; Insert your custom code below this banner
                                        (0444)    ;---------------------------------------------------
                                        (0445) 
                                        (0446)    ;---------------------------------------------------
                                        (0447)    ; Insert your custom code above this banner
                                        (0448)    ;---------------------------------------------------
                                        (0449)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0450) 
                                        (0451)     jnc  I2C_NAK_DATA                                                ; Write to ROM not supported.
                                        (0452) 
                                        (0453) PREPARE_FOR_ROM_READ:
                                        (0454)     mov [EzI2Cs_1_bBusy_Flag], EzI2Cs_1_I2C_BUSY_ROM_READ            ; Possible read transaction in process - set Busy flag to READ
                                        (0455)     
                                        (0456)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
                                        (0457)     or   [EzI2Cs_1_bState],STATE_RD_ROM                              ; Set state machine to do ROM Read 
                                        (0458)     mov  [EzI2Cs_1_bROM_RWcntr],[EzI2Cs_1_bROM_RWoffset]             ; Reset address counter to start of Offset
                                        (0459)     mov  X,[EzI2Cs_1_pROM_Buf_Addr_MSB]                              ; Get MSB of ROM address in X
                                        (0460)     mov  A,[EzI2Cs_1_pROM_Buf_Addr_LSB]                              ; Get LSB of ROM base address
                                        (0461)     add  A,[EzI2Cs_1_bROM_RWcntr]                                    ; Set Offset and add to base address      
                                        (0462)     jnc  .GET_ROM_VALUE
                                        (0463)     inc  X    ; Inc the MSB
                                        (0464) .GET_ROM_VALUE:
                                        (0465)     swap A,X  ; Place MSB of ROM address in A, and LSB in X for ROMX
                                        (0466)     romx      ; Get Rom value in A
                                        (0467) 
                                        (0468)     mov  reg[EzI2Cs_1_DR_REG],A                              ; Base address to RAM buffer.  
                                        (0469)     inc  [EzI2Cs_1_bROM_RWcntr]                                      ; Increment RAM buffer counter to next location.
                                        (0470) 
                                        (0471)                                                                      ; ACK command and transmit first byte.
                                        (0472)     SetEzI2Cs_1_SCR  (EzI2Cs_1_SCR_ACK|EzI2Cs_1_SCR_TRANSMIT)   
                                        (0473)     jmp  EzI2Cs_1_ISR_END
                                        (0474) 
                                        (0475) 
                                        (0476) I2C_STATE_RD_ROM:
                                        (0477)     ;@PSoC_UserCode_ROM_RD@ (Do not change this line.)
                                        (0478)     ;---------------------------------------------------
                                        (0479)     ; Insert your custom code below this banner
                                        (0480)     ;---------------------------------------------------
                                        (0481) 
                                        (0482)     ;---------------------------------------------------
                                        (0483)     ; Insert your custom code above this banner
                                        (0484)     ;---------------------------------------------------
                                        (0485)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0486) 
                                        (0487)     mov  A,[EzI2Cs_1_bROM_Buf_Size]
                                        (0488)     dec  A
                                        (0489)     cmp  A,[EzI2Cs_1_bROM_RWcntr]                                    ; Check to see if out of range.
                                        (0490)     jc   .I2C_TRANSMIT_ROM_DATA  ; WARNING!! Bogas data will be transmitted if out of range.   
                                        (0491) 
                                        (0492)     mov  X,[EzI2Cs_1_pROM_Buf_Addr_MSB]                              ; Get MSB of ROM address in X
                                        (0493)     mov  A,[EzI2Cs_1_pROM_Buf_Addr_LSB]                              ; Get LSB of ROM base address
                                        (0494)     add  A,[EzI2Cs_1_bROM_RWcntr]                                    ; Set Offset and add to base address      
                                        (0495)     jnc  .GET_ROM_VALUE
                                        (0496)     inc  X    ; Inc the MSB
                                        (0497) .GET_ROM_VALUE:
                                        (0498)     swap A,X  ; Place MSB of ROM address in A, and LSB in X for ROMX
                                        (0499)     romx      ; Get Rom value in A
                                        (0500)     mov  reg[EzI2Cs_1_DR_REG],A                              ; Base address to RAM buffer.  
                                        (0501)     inc  [EzI2Cs_1_bROM_RWcntr]                                      ; Increment RAM buffer counter to next location.
                                        (0502) 
                                        (0503) .I2C_TRANSMIT_ROM_DATA:     
                                        (0504)     mov  reg[EzI2Cs_1_DR_REG],A                                      ; Write data to transmit register
                                        (0505)     SetEzI2Cs_1_SCR  (EzI2Cs_1_SCR_TRANSMIT)                         ; ACK command and transmit first byte. 
                                        (0506)     jmp  EzI2Cs_1_ISR_END
                                        (0507) 
                                        (0508) ENDIF
                                        (0509) 
                                        (0510) ;; Generic handlers
                                        (0511) 
                                        (0512) I2C_ACK_DATA:
                                        (0513)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_ACK )                             ; ACK Data
0983: 80 0F    JMP   0x0993             (0514)     jmp  EzI2Cs_1_ISR_END
0985: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0515) 
                                        (0516) I2C_NAK_DATA:   ;; NAK data and return  !!WARNING, NOT SURE IF THIS WILL WORK
                                        (0517)     SetEzI2Cs_1_SCR ( EzI2Cs_1_SCR_NAK )                             ;  NAK Data
0988: 80 0A    JMP   0x0993             (0518)     jmp  EzI2Cs_1_ISR_END
                                        (0519) 
                                        (0520) I2C_STATE_RESET:
                                        (0521)     ;@PSoC_UserCode_I2C_RST_Start@ (Do not change this line.)
                                        (0522)     ;---------------------------------------------------
                                        (0523)     ; Insert your custom code below this banner
                                        (0524)     ;---------------------------------------------------
                                        (0525) 
                                        (0526)     ;---------------------------------------------------
                                        (0527)     ; Insert your custom code above this banner
                                        (0528)     ;---------------------------------------------------
                                        (0529)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0530) 
098A: 26 05 F0 AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+5],0xF0(0531)     and  [EzI2Cs_1_bState],~STATE_MASK2                              ; Clear State bit.                       
098D: 2E 05 00 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+5],0x0(0532)     or   [EzI2Cs_1_bState], STATE_IDLE    ; Reset State
0990: 55 0C 00 MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+12],0x0(0533)     mov [EzI2Cs_1_bBusy_Flag],EzI2Cs_1_I2C_FREE                      ; Clear Busy flag
0993: 18       POP   A                  
0994: 60 D0    MOV   REG[0xD0],A        
0996: 18       POP   A                  
0997: 60 D3    MOV   REG[0xD3],A        
                                        (0534)     ; Reset pointer buffers as well
                                        (0535)     ;@PSoC_UserCode_I2C_RST_End@ (Do not change this line.)
                                        (0536)     ;---------------------------------------------------
                                        (0537)     ; Insert your custom code below this banner
                                        (0538)     ;---------------------------------------------------
                                        (0539) 
                                        (0540)     ;---------------------------------------------------
                                        (0541)     ; Insert your custom code above this banner
                                        (0542)     ;---------------------------------------------------
                                        (0543)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0544) 
                                        (0545) EzI2Cs_1_ISR_END:
                                        (0546) 
                                        (0547) ; This conditional code is only used when using the large memory model.
                                        (0548) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0549)    REG_RESTORE CUR_PP           ; Restore Current Page Pointer
                                        (0550)    REG_RESTORE IDX_PP           ; Restore Index Page Pointer
                                        (0551) ENDIF
0999: 20       POP   X                  (0552)     pop  X
099A: 18       POP   A                  (0553)     pop  A
                                        (0554) 
099B: 7E       RETI                     (0555)     reti
FILE: lib\ezi2cs_1.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
099C: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: EzI2Cs_1.asm
099F: 71 10    OR    F,0x10             
                                        (0004) ;;  Version: 2.00, Updated on 2013/5/19 at 10:43:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: EzI2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "EzI2Cs_1.inc"
                                        (0025) include "PSoCGPIOINT.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ; include instance specific register definitions
                                        (0029) ;-----------------------------------------------
                                        (0030) 
                                        (0031) ;-----------------------------------------------
                                        (0032) ;  Global Symbols
                                        (0033) ;-----------------------------------------------
                                        (0034) ;-------------------------------------------------------------------
                                        (0035) ;  Declare the functions global for both assembler and C compiler.
                                        (0036) ;
                                        (0037) ;  Note that there are two names for each API. First name is
                                        (0038) ;  assembler reference. Name with underscore is name refence for
                                        (0039) ;  C compiler.  Calling function in C source code does not require
                                        (0040) ;  the underscore.
                                        (0041) ;-------------------------------------------------------------------
                                        (0042) 
                                        (0043) export    EzI2Cs_1_EnableInt
                                        (0044) export   _EzI2Cs_1_EnableInt
                                        (0045) export    EzI2Cs_1_ResumeInt
                                        (0046) export   _EzI2Cs_1_ResumeInt
                                        (0047) export    EzI2Cs_1_Start
                                        (0048) export   _EzI2Cs_1_Start
                                        (0049) 
                                        (0050) export    EzI2Cs_1_DisableInt
                                        (0051) export   _EzI2Cs_1_DisableInt
                                        (0052) export    EzI2Cs_1_Stop
                                        (0053) export   _EzI2Cs_1_Stop
                                        (0054) export    EzI2Cs_1_DisableSlave
                                        (0055) export   _EzI2Cs_1_DisableSlave
                                        (0056) export    EzI2Cs_1_SetRamBuffer
                                        (0057) export   _EzI2Cs_1_SetRamBuffer
                                        (0058) export    EzI2Cs_1_GetAddr
                                        (0059) export   _EzI2Cs_1_GetAddr
                                        (0060) export    EzI2Cs_1_GetActivity
                                        (0061) export   _EzI2Cs_1_GetActivity
                                        (0062) 
                                        (0063) 
                                        (0064) IF (EzI2Cs_1_DYNAMIC_ADDR | EzI2Cs_1_AUTO_ADDR_CHECK) ;; Enable this function if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0065) export    EzI2Cs_1_SetAddr
                                        (0066) export   _EzI2Cs_1_SetAddr
                                        (0067) ENDIF
                                        (0068) 
                                        (0069) IF (EzI2Cs_1_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0070) export    EzI2Cs_1_SetRomBuffer
                                        (0071) export   _EzI2Cs_1_SetRomBuffer
                                        (0072) ENDIF
                                        (0073) 
                                        (0074) IF (EzI2Cs_1_CY8C22x45)
                                        (0075) export    EzI2Cs_1_EnableHWAddrCheck
                                        (0076) export   _EzI2Cs_1_EnableHWAddrCheck
                                        (0077) export    EzI2Cs_1_DisableHWAddrCheck
                                        (0078) export   _EzI2Cs_1_DisableHWAddrCheck
                                        (0079) ENDIF
                                        (0080) 
                                        (0081) 
                                        (0082) AREA UserModules (ROM, REL, CON)
                                        (0083) 
                                        (0084) .SECTION
                                        (0085) 
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;  FUNCTION NAME: EzI2Cs_1_Start
                                        (0088) ;
                                        (0089) ;  DESCRIPTION:
                                        (0090) ;   Initialize the EzI2Cs_1 I2C bus interface.
                                        (0091) ;
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;
                                        (0094) ;  ARGUMENTS:
                                        (0095) ;
                                        (0096) ;  RETURNS: none
                                        (0097) ;
                                        (0098) ;  SIDE EFFECTS:
                                        (0099) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0100) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0101) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0102) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0103) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0104) ;          
                                        (0105) ;    Page Pointer Registers Modified: 
                                        (0106) ;          CUR_PP
                                        (0107) ;
                                        (0108) ;  THEORY of OPERATION or PROCEDURE:
                                        (0109) ;
                                        (0110) 
                                        (0111)  EzI2Cs_1_Start:
                                        (0112) _EzI2Cs_1_Start:
                                        (0113) 
                                        (0114)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0115)    RAM_SETPAGE_CUR >EzI2Cs_1_varPage
                                        (0116)    
                                        (0117) IF (EzI2Cs_1_DYNAMIC_ADDR)  ;; DYNAMIC ADDRESS
                                        (0118) IF (EzI2Cs_1_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the EzI2Cs_1_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0119)    mov  [EzI2Cs_1_bAddr],EzI2Cs_1_SLAVE_ADDR
                                        (0120) ENDIF   
                                        (0121) ENDIF
                                        (0122) IF (EzI2Cs_1_CY8C22x45)
                                        (0123)    M8C_SetBank1
                                        (0124)    mov   reg[EzI2Cs_1_ADDR_REG], (EzI2Cs_1_SLAVE_ADDR>>1)
                                        (0125)    M8C_SetBank0
                                        (0126) ENDIF
                                        (0127) 
                                        (0128)    M8C_SetBank1 ;The SDA and SCL pins are setting to Hi-z drive mode
09A1: 41 04 5F AND   REG[0x4],0x5F      (0129)    and reg[EzI2Cs_1SDA_DriveMode_0_ADDR],~(EzI2Cs_1SDA_MASK|EzI2Cs_1SCL_MASK)
09A4: 43 05 A0 OR    REG[0x5],0xA0      (0130)    or  reg[EzI2Cs_1SDA_DriveMode_1_ADDR], (EzI2Cs_1SDA_MASK|EzI2Cs_1SCL_MASK)
09A7: 70 EF    AND   F,0xEF             
                                        (0131)    M8C_SetBank0
09A9: 43 07 A0 OR    REG[0x7],0xA0      (0132)    or  reg[EzI2Cs_1SDA_DriveMode_2_ADDR], (EzI2Cs_1SDA_MASK|EzI2Cs_1SCL_MASK)
                                        (0133) 
09AC: 55 05 00 MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+5],0x0(0134)    mov  [EzI2Cs_1_bState],0x00    ;; Make sure state machine is initialized
09AF: 55 0C 00 MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+12],0x0(0135)    mov [EzI2Cs_1_bBusy_Flag],EzI2Cs_1_I2C_FREE ;; Clear Busy flag
                                        (0136) 
09B2: 90 1B    CALL  _EzI2Cs_1_EnableInt(0137)    call EzI2Cs_1_EnableInt
09B4: 90 20    CALL  0x09D6             (0138)    call EzI2Cs_1_EnableSlave
                                        (0139) 
09B6: 40       NOP                      (0140)    nop
09B7: 40       NOP                      (0141)    nop
09B8: 40       NOP                      (0142)    nop
09B9: 40       NOP                      (0143)    nop
09BA: 40       NOP                      (0144)    nop
                                        (0145)    
09BB: 50 00    MOV   A,0x0              (0146)    mov A, 0
09BD: 53 06    MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+6],A(0147)    mov [EzI2Cs_1_bRAM_RWoffset], A
09BF: 71 10    OR    F,0x10             
                                        (0148) IF (EzI2Cs_1_ROM_ENABLE)
                                        (0149)    mov [EzI2Cs_1_bROM_RWoffset], A
                                        (0150) ENDIF
                                        (0151)    
                                        (0152)    M8C_SetBank1 ;The SDA and SCL pins are restored to Open Drain Low drive mode
09C1: 43 04 A0 OR    REG[0x4],0xA0      (0153)    or reg[EzI2Cs_1SDA_DriveMode_0_ADDR], (EzI2Cs_1SDA_MASK|EzI2Cs_1SCL_MASK)
09C4: 43 05 A0 OR    REG[0x5],0xA0      (0154)    or reg[EzI2Cs_1SDA_DriveMode_1_ADDR], (EzI2Cs_1SDA_MASK|EzI2Cs_1SCL_MASK)
09C7: 70 EF    AND   F,0xEF             
                                        (0155)    M8C_SetBank0
09C9: 43 07 A0 OR    REG[0x7],0xA0      (0156)    or reg[EzI2Cs_1SDA_DriveMode_2_ADDR], (EzI2Cs_1SDA_MASK|EzI2Cs_1SCL_MASK)
                                        (0157) 
                                        (0158)    RAM_EPILOGUE RAM_USE_CLASS_4
09CC: 7F       RET                      (0159)    ret
                                        (0160) 
                                        (0161) .ENDSECTION
                                        (0162) 
                                        (0163) IF (EzI2Cs_1_DYNAMIC_ADDR | EzI2Cs_1_AUTO_ADDR_CHECK) ;; Enable this function if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0164) .SECTION
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;  FUNCTION NAME: EzI2Cs_1_SetAddr(BYTE bAddr)
                                        (0167) ;
                                        (0168) ;  DESCRIPTION:
                                        (0169) ;   Set the I2C slave address for the EzI2Cs_1 I2C bus interface.
                                        (0170) ;
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;
                                        (0173) ;  ARGUMENTS:
                                        (0174) ;      A =>  Slave address
                                        (0175) ;
                                        (0176) ;  RETURNS: none
                                        (0177) ;
                                        (0178) ;  SIDE EFFECTS;    
                                        (0179) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0180) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0181) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0182) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0183) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0184) ;          
                                        (0185) ;    Page Pointer Registers Modified: 
                                        (0186) ;          CUR_PP
                                        (0187) ;
                                        (0188) ;  THEORY of OPERATION or PROCEDURE:
                                        (0189) ;
                                        (0190) 
                                        (0191)  EzI2Cs_1_SetAddr:
                                        (0192) _EzI2Cs_1_SetAddr:
                                        (0193)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0194) IF (EzI2Cs_1_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the EzI2Cs_1_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0195)    RAM_SETPAGE_CUR >EzI2Cs_1_bAddr
                                        (0196)  IF (EzI2Cs_1_CY8C22x45)
                                        (0197)    and   A, ~EzI2Cs_1_HW_ADDR_EN
                                        (0198)    M8C_SetBank1
                                        (0199)    mov   reg[EzI2Cs_1_ADDR_REG], A
                                        (0200)    M8C_SetBank0
                                        (0201)  ENDIF
                                        (0202)    asl   A
                                        (0203)    mov   [EzI2Cs_1_bAddr],A
                                        (0204) ELSE                          ;; write to the ADDR register instead
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0206)    and  A, ~EzI2Cs_1_HW_ADDR_MASK	; verify address value
                                        (0207)    mov  X, SP
                                        (0208)    push A                                   ; store address value
                                        (0209)    M8C_SetBank1               ;; Set Bank 1
                                        (0210)    mov  A, reg[EzI2Cs_1_ADDR_REG]   ; get value from address register
                                        (0211)    and  A, EzI2Cs_1_HW_ADDR_MASK    ; define highest bit
                                        (0212)    or   A, [X]                              ; form address value 	
                                        (0213)    mov  reg[EzI2Cs_1_ADDR_REG], A   ; set new address value to register
                                        (0214)    M8C_SetBank0               ;; Set Bank 0
                                        (0215)    pop  A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0217) ENDIF
                                        (0218)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0219)    ret
                                        (0220) 
                                        (0221) .ENDSECTION
                                        (0222) ENDIF
                                        (0223) 
                                        (0224) .SECTION
                                        (0225) ;-----------------------------------------------------------------------------
                                        (0226) ;  FUNCTION NAME:BYTE EzI2Cs_1_GetActivity(void)
                                        (0227) ;
                                        (0228) ;  DESCRIPTION:
                                        (0229) ;    Return a non-zero value if the I2C hardware has seen activity on the bus.
                                        (0230) ;    The activity flag will be cleared if set when calling this function.
                                        (0231) ;
                                        (0232) ;-----------------------------------------------------------------------------
                                        (0233) ;
                                        (0234) ;  ARGUMENTS:  none
                                        (0235) ;
                                        (0236) ;  RETURNS: 
                                        (0237) ;    BYTE  non-zero = Activity
                                        (0238) ;          zero     = No Activity
                                        (0239) ;
                                        (0240) ;  SIDE EFFECTS;    
                                        (0241) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0242) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0243) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0244) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0245) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0246) ;          
                                        (0247) ;    Page Pointer Registers Modified: 
                                        (0248) ;          CUR_PP
                                        (0249) ;
                                        (0250) ;  THEORY of OPERATION or PROCEDURE:
                                        (0251) ;
                                        (0252) 
                                        (0253)  EzI2Cs_1_GetActivity:
                                        (0254) _EzI2Cs_1_GetActivity:
                                        (0255)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0256)    RAM_SETPAGE_CUR >EzI2Cs_1_bState
                                        (0257)    mov   A,[EzI2Cs_1_bState]
                                        (0258)    and   A,EzI2Cs_1_ACTIVITY_MASK         ; Mask off activity bits
                                        (0259)    and   [EzI2Cs_1_bState],~EzI2Cs_1_ACTIVITY_MASK ; Clear system activity bits
                                        (0260) 
                                        (0261) EzI2Cs_1_GetActivity_End:
                                        (0262)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0263)    ret
                                        (0264) 
                                        (0265) .ENDSECTION
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME: BYTE EzI2Cs_1_GetAddr(Void)
                                        (0270) ;
                                        (0271) ;  DESCRIPTION:
                                        (0272) ;   Get the I2C slave address for the EzI2Cs_1 I2C bus interface.
                                        (0273) ;
                                        (0274) ;-----------------------------------------------------------------------------
                                        (0275) ;
                                        (0276) ;  ARGUMENTS: none
                                        (0277) ;
                                        (0278) ;  RETURNS: none
                                        (0279) ;
                                        (0280) ;  SIDE EFFECTS;    
                                        (0281) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0282) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0283) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0284) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0285) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0286) ;          
                                        (0287) ;    Page Pointer Registers Modified: 
                                        (0288) ;          CUR_PP
                                        (0289) ;
                                        (0290) ;
                                        (0291) ;  THEORY of OPERATION or PROCEDURE:
                                        (0292) ;
                                        (0293) 
                                        (0294)  EzI2Cs_1_GetAddr:
                                        (0295) _EzI2Cs_1_GetAddr:
                                        (0296) 
                                        (0297) IF (EzI2Cs_1_DYNAMIC_ADDR | EzI2Cs_1_AUTO_ADDR_CHECK) ;; if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0298)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0299) IF (EzI2Cs_1_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the EzI2Cs_1_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0300)    RAM_SETPAGE_CUR >EzI2Cs_1_bAddr
                                        (0301)    mov   A,[EzI2Cs_1_bAddr]
                                        (0302)    asr   A                          ; Shift Addr to right to drop RW bit.
                                        (0303) ELSE                          ;; read the address from ADDR register instead
                                        (0304)    M8C_SetBank1               ;; Set Bank 1 
                                        (0305)    mov A, reg[EzI2Cs_1_ADDR_REG]
                                        (0306)    M8C_SetBank0               ;; Set Bank 0
                                        (0307) ENDIF
                                        (0308)    and   A, 0x7f              ; Mask off bogus MSb
                                        (0309)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0310) ELSE
                                        (0311)    mov   A,0xb            
                                        (0312) ENDIF
                                        (0313)    ret
                                        (0314) 
                                        (0315) .ENDSECTION
                                        (0316) 
                                        (0317) 
                                        (0318) 
                                        (0319) .SECTION
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;  FUNCTION NAME: EzI2Cs_1_EnableInt
                                        (0322) ;  FUNCTION NAME: EzI2Cs_1_ResumeInt
                                        (0323) ;  DESCRIPTION:
                                        (0324) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0325) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0326) ;	  EzI2Cs_1_ResumeInt performs the enable int function without fist clearing
                                        (0327) ;     pending interrupts.
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;
                                        (0330) ;  ARGUMENTS: none
                                        (0331) ;
                                        (0332) ;  RETURNS: none
                                        (0333) ;
                                        (0334) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0335) ;
                                        (0336) ;  THEORY of OPERATION or PROCEDURE:
                                        (0337) ;
                                        (0338)  EzI2Cs_1_ResumeInt:
                                        (0339) _EzI2Cs_1_ResumeInt:
                                        (0340)    RAM_PROLOGUE RAM_USE_CLASS_1
09CD: 80 04    JMP   0x09D2             (0341)    jmp   ResumeEntry
09CF: 62 DD FE MOV   REG[0xDD],0xFE     
09D2: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0342) 
                                        (0343)  EzI2Cs_1_EnableInt:
                                        (0344) _EzI2Cs_1_EnableInt:
                                        (0345)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0346)    ;first clear any pending interrupts
                                        (0347)    M8C_ClearIntFlag INT_CLR3, EzI2Cs_1_INT_MASK   
                                        (0348) ResumeEntry:
                                        (0349)    M8C_EnableIntMask EzI2Cs_1_INT_REG, EzI2Cs_1_INT_MASK
                                        (0350)    RAM_EPILOGUE RAM_USE_CLASS_1
09D5: 7F       RET                      (0351)    ret
                                        (0352) 
                                        (0353) .ENDSECTION
                                        (0354) 
                                        (0355) .SECTION
                                        (0356) ;-----------------------------------------------------------------------------
                                        (0357) ;  FUNCTION NAME: EzI2Cs_1_EnableSlave
                                        (0358) ;
                                        (0359) ;  DESCRIPTION:
                                        (0360) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0361) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0362) ;
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS: none
                                        (0366) ;
                                        (0367) ;  RETURNS: none
                                        (0368) ;
                                        (0369) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0370) ;
                                        (0371) ;  THEORY of OPERATION or PROCEDURE:
                                        (0372) ;
                                        (0373) 
                                        (0374)  EzI2Cs_1_EnableSlave:
                                        (0375) _EzI2Cs_1_EnableSlave:
                                        (0376) 
                                        (0377)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0378)     
                                        (0379)     IF (EzI2Cs_1_CY8C27XXXA_ID) ;; Enable this code if we have CY8C27XXXA chip ID
                                        (0380)     ; Save original CPU clock speed
                                        (0381)     M8C_SetBank1          ; Set Bank 1 
                                        (0382)     mov  A,reg[OSC_CR0]   ; Get current configuration of OSC_CR0 (Bank 1)
                                        (0383)     push A                ; Save OSC_CR0 configuration
                                        (0384)     and  A,0xF8           ; Mask off CPU speed
                                        (0385)     or   A,0x05           ; Set clock to 750KHz
                                        (0386)     mov  reg[OSC_CR0],A   ; Write new value to OSC_CR0 (Bank 1)
                                        (0387)     M8C_SetBank0          ; Back to Bank 0
                                        (0388)     ENDIF 
                                        (0389)     ; Enable I2C Slave
                                        (0390)     IF(EzI2Cs_1_USED_I2C_BLOCK)
                                        (0391)     M8C_SetBank1
                                        (0392)     or   reg[EzI2Cs_1_CFG_REG],(EzI2Cs_1_CFG_Slave_EN | EzI2Cs_1_CFG_BUS_ERROR_IE | EzI2Cs_1_CFG_STOP_IE)
                                        (0393)     M8C_SetBank0
                                        (0394)     ELSE
09D6: 43 D6 31 OR    REG[0xD6],0x31     (0395)     or   reg[EzI2Cs_1_CFG_REG],(EzI2Cs_1_CFG_Slave_EN | EzI2Cs_1_CFG_BUS_ERROR_IE | EzI2Cs_1_CFG_STOP_IE)
                                        (0396)     ENDIF
                                        (0397)     IF (EzI2Cs_1_CY8C27XXXA_ID) ;; Enable this code if we have CY8C27XXXA chip ID    
                                        (0398)     ; Restore original CPU clock speed
                                        (0399)     pop  A
                                        (0400)     M8C_SetBank1          ; Set Bank 1
                                        (0401)     mov  reg[OSC_CR0],A   ; Restore
                                        (0402)     M8C_SetBank0          ; Back to Bank 0
                                        (0403)     ENDIF    
                                        (0404)     RAM_EPILOGUE RAM_USE_CLASS_1
09D9: 7F       RET                      (0405)     ret
09DA: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0406) 
                                        (0407) .ENDSECTION
                                        (0408) 
                                        (0409) .SECTION
                                        (0410) ;-----------------------------------------------------------------------------
                                        (0411) ;  FUNCTION NAME: EzI2Cs_1_DisableInt
                                        (0412) ;  FUNCTION NAME: EzI2Cs_1_Stop
                                        (0413) ;
                                        (0414) ;  DESCRIPTION:
                                        (0415) ;     Disables EzI2Cs_1 slave by disabling SDA interrupt
                                        (0416) ;
                                        (0417) ;-----------------------------------------------------------------------------
                                        (0418) ;
                                        (0419) ;  ARGUMENTS: none
                                        (0420) ;
                                        (0421) ;  RETURNS: none
                                        (0422) ;
                                        (0423) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0424) ;
                                        (0425) ;  THEORY of OPERATION or PROCEDURE:
                                        (0426) ;
                                        (0427) 
                                        (0428)  EzI2Cs_1_Stop:
                                        (0429) _EzI2Cs_1_Stop:
                                        (0430)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0431) 
                                        (0432)    M8C_DisableIntMask EzI2Cs_1_INT_REG, EzI2Cs_1_INT_MASK
                                        (0433)    IF(EzI2Cs_1_USED_I2C_BLOCK)
                                        (0434)    M8C_SetBank1
                                        (0435)    and  reg[EzI2Cs_1_CFG_REG],~EzI2Cs_1_CFG_Slave_EN
                                        (0436)    M8C_SetBank0
                                        (0437)    ELSE
                                        (0438)    and  reg[EzI2Cs_1_CFG_REG],~EzI2Cs_1_CFG_Slave_EN
                                        (0439)    ENDIF
                                        (0440)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0441)    ret
                                        (0442) 
                                        (0443) .ENDSECTION
                                        (0444) 
                                        (0445) 
                                        (0446) 
                                        (0447) .SECTION
                                        (0448) ;-----------------------------------------------------------------------------
                                        (0449) ;  FUNCTION NAME: EzI2Cs_1_DisableInt
                                        (0450) ;  FUNCTION NAME: EzI2Cs_1_Stop
                                        (0451) ;
                                        (0452) ;  DESCRIPTION:
                                        (0453) ;     Disables EzI2Cs_1 slave by disabling SDA interrupt
                                        (0454) ;
                                        (0455) ;-----------------------------------------------------------------------------
                                        (0456) ;
                                        (0457) ;  ARGUMENTS: none
                                        (0458) ;
                                        (0459) ;  RETURNS: none
                                        (0460) ;
                                        (0461) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0462) ;
                                        (0463) ;  THEORY of OPERATION or PROCEDURE:
                                        (0464) ;
                                        (0465) 
                                        (0466)  EzI2Cs_1_DisableInt:
                                        (0467) _EzI2Cs_1_DisableInt:
                                        (0468)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0469)    M8C_DisableIntMask EzI2Cs_1_INT_REG, EzI2Cs_1_INT_MASK
                                        (0470)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0471)    ret
                                        (0472) 
                                        (0473) .ENDSECTION
                                        (0474) 
                                        (0475) .SECTION
                                        (0476) ;-----------------------------------------------------------------------------
                                        (0477) ;  FUNCTION NAME: EzI2Cs_1_DisableSlave
                                        (0478) ;
                                        (0479) ;  DESCRIPTION:
                                        (0480) ;     Disables EzI2Cs_1 slave by disabling SDA interrupt
                                        (0481) ;
                                        (0482) ;-----------------------------------------------------------------------------
                                        (0483) ;
                                        (0484) ;  ARGUMENTS: none
                                        (0485) ;
                                        (0486) ;  RETURNS: none
                                        (0487) ;
                                        (0488) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0489) ;
                                        (0490) ;  THEORY of OPERATION or PROCEDURE:
                                        (0491) ;
                                        (0492) 
                                        (0493)  EzI2Cs_1_DisableSlave:
                                        (0494) _EzI2Cs_1_DisableSlave:
                                        (0495)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0496)    IF(EzI2Cs_1_USED_I2C_BLOCK)
                                        (0497)    M8C_SetBank1
                                        (0498)    and  reg[EzI2Cs_1_CFG_REG],~EzI2Cs_1_CFG_Slave_EN
                                        (0499)    M8C_SetBank0
                                        (0500)    ELSE
                                        (0501)    and  reg[EzI2Cs_1_CFG_REG],~EzI2Cs_1_CFG_Slave_EN
                                        (0502)    ENDIF
                                        (0503)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0504)    ret
                                        (0505) 
                                        (0506) .ENDSECTION
                                        (0507) 
                                        (0508) .SECTION
                                        (0509) ;-----------------------------------------------------------------------------
                                        (0510) ;  FUNCTION NAME: 
                                        (0511) ;          void EzI2Cs_1_SetRamBuffer(BYTE bSize, BYTE bRWboundry, BYTE * pAddr)
                                        (0512) ;
                                        (0513) ;  DESCRIPTION:
                                        (0514) ;     Sets the location and size of the I2C RAM buffer.          
                                        (0515) ;
                                        (0516) ;-----------------------------------------------------------------------------
                                        (0517) ;
                                        (0518) ;  ARGUMENTS: 
                                        (0519) ;     [SP-3] =>  Size of data structure
                                        (0520) ;     [SP-4] =>  R/W boundary of (Must be less than or equal to size.)
                                        (0521) ;     [SP-5] =>  LSB of data pointer
                                        (0522) ;     [SP-6] =>  MSB of data pointer (Only used for large memory model)
                                        (0523) ;
                                        (0524) ;  RETURNS: none
                                        (0525) ;
                                        (0526) ;  SIDE EFFECTS;    
                                        (0527) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0528) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0529) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0530) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0531) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0532) ;          
                                        (0533) ;    Page Pointer Registers Modified: 
                                        (0534) ;          CUR_PP
                                        (0535) ;
                                        (0536) ;  THEORY of OPERATION or PROCEDURE:
                                        (0537) ;
                                        (0538) 
                                        (0539) ; Stack offset constants
                                        (0540) RAMBUF_SIZE:   equ  -3   ; Stack position for data structure size.
                                        (0541) RW_SIZE:       equ  -4   ; Stack position for R/W area size.       
                                        (0542) RAMPTR_LSB:    equ  -5   ; Stack position for RAM pointer LSB.   
                                        (0543) RAMPTR_MSB:    equ  -6   ; Stack position for RAM pointer MSB.   
                                        (0544) 
                                        (0545)  EzI2Cs_1_SetRamBuffer:
                                        (0546) _EzI2Cs_1_SetRamBuffer:
                                        (0547) 
                                        (0548)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0549)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0550)     RAM_SETPAGE_CUR >EzI2Cs_1_bRAM_Buf_Size     ; Set page to global var page.
                                        (0551)                                                         ; All these globals should be
                                        (0552)                                                         ; on the same page.          
09DD: 4F       MOV   X,SP               (0553)     mov   X,SP
09DE: 52 FD    MOV   A,[X-3]            (0554)     mov   A,[X+RAMBUF_SIZE]
09E0: 53 0A    MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+10],A(0555)     mov   [EzI2Cs_1_bRAM_Buf_Size],A         ; Store the buffer size
                                        (0556) 
09E2: 52 FC    MOV   A,[X-4]            (0557)     mov   A,[X+RW_SIZE]                            ; Store R/W boundary             
09E4: 53 0B    MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+11],A(0558)     mov   [EzI2Cs_1_bRAM_Buf_WSize],A        ; 
                                        (0559)     
09E6: 52 FB    MOV   A,[X-5]            (0560)     mov   A,[X+RAMPTR_LSB]                         ; Store only LSB of data pointer
09E8: 53 09    MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+9],A(0561)     mov   [EzI2Cs_1_pRAM_Buf_Addr_LSB],A     ; 
                                        (0562) 
                                        (0563) IF (SYSTEM_LARGE_MEMORY_MODEL)                             ; Only worry about the address MSB
                                        (0564)                                                            ; if in the large memory Model
09EA: 52 FA    MOV   A,[X-6]            (0565)     mov   A,[X+RAMPTR_MSB]                         ; Store only MSB of data pointer
09EC: 53 08    MOV   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+8],A(0566)     mov   [EzI2Cs_1_pRAM_Buf_Addr_MSB],A     ; 
09EE: 70 3F    AND   F,0x3F             
09F0: 71 C0    OR    F,0xC0             
                                        (0567) ENDIF
                                        (0568) 
                                        (0569)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0570)     RAM_EPILOGUE RAM_USE_CLASS_4
09F2: 7F       RET                      (0571)     ret
                                        (0572) 
                                        (0573) .ENDSECTION
                                        (0574) 
                                        (0575) IF (EzI2Cs_1_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0576) .SECTION
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;  FUNCTION NAME: 
                                        (0579) ;          void EzI2Cs_1_SetRomBuffer(BYTE bSize, BYTE * pAddr)
                                        (0580) ;
                                        (0581) ;  DESCRIPTION:
                                        (0582) ;     Sets the location and size of the I2C ROM buffer.          
                                        (0583) ;
                                        (0584) ;-----------------------------------------------------------------------------
                                        (0585) ;
                                        (0586) ;  ARGUMENTS: 
                                        (0587) ;     [SP-3] =>  Size of data const data structure
                                        (0588) ;     [SP-4] =>  LSB of data pointer
                                        (0589) ;     [SP-5] =>  MSB of data pointer (Only used for large memory model)
                                        (0590) ;
                                        (0591) ;  RETURNS: none
                                        (0592) ;
                                        (0593) ;  SIDE EFFECTS;    
                                        (0594) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0595) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0596) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0597) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0598) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0599) ;          
                                        (0600) ;    Page Pointer Registers Modified: 
                                        (0601) ;          CUR_PP
                                        (0602) ;
                                        (0603) ;  THEORY of OPERATION or PROCEDURE:
                                        (0604) ;
                                        (0605) 
                                        (0606) ; Stack offset constants
                                        (0607) ROMBUF_SIZE:   equ  -3   ; Stack position for data structure size.
                                        (0608) ROMPTR_LSB:    equ  -4   ; Stack position for ROM pointer LSB.   
                                        (0609) ROMPTR_MSB:    equ  -5   ; Stack position for ROM pointer MSB.   
                                        (0610) 
                                        (0611)  EzI2Cs_1_SetRomBuffer:
                                        (0612) _EzI2Cs_1_SetRomBuffer:
                                        (0613) 
                                        (0614)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0615)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0616)     RAM_SETPAGE_CUR >EzI2Cs_1_bROM_Buf_Size     ; Set page to global var page.
                                        (0617)                                                         ; All these globals should be
                                        (0618)                                                         ; on the same page.          
                                        (0619)     mov   X,SP
                                        (0620)     mov   A,[X+ROMBUF_SIZE]
                                        (0621)     mov   [EzI2Cs_1_bROM_Buf_Size],A         ; Store the buffer size
                                        (0622) 
                                        (0623)     mov   A,[X+ROMPTR_LSB]                         ; Store LSB of data pointer
                                        (0624)     mov   [EzI2Cs_1_pROM_Buf_Addr_LSB],A     ; 
                                        (0625)     mov   A,[X+ROMPTR_MSB]                         ; Store MSB of data pointer
                                        (0626)     mov   [EzI2Cs_1_pROM_Buf_Addr_MSB],A     ; 
                                        (0627)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0628)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0629)     ret
                                        (0630) 
                                        (0631) .ENDSECTION
                                        (0632) ENDIF
                                        (0633) 
                                        (0634) IF (EzI2Cs_1_CY8C22x45)
                                        (0635)  .SECTION
                                        (0636) ;-----------------------------------------------------------------------------
                                        (0637) ;  FUNCTION NAME: void  EzI2Cs_1_EnableHWAddrCheck(void)
                                        (0638) ;
                                        (0639) ;  DESCRIPTION:
                                        (0640) ;   Set respective bit to engage the HardWare Address Recognition 
                                        (0641) ;   feature in I2C slave block.
                                        (0642) ;
                                        (0643) ;-----------------------------------------------------------------------------
                                        (0644) ;
                                        (0645) ;  ARGUMENTS: none
                                        (0646) ;
                                        (0647) ;  RETURNS: none
                                        (0648) ;
                                        (0649) ;  SIDE EFFECTS:
                                        (0650) ;    If the HardWare Address Recognition feature is enabled, the ROM registers reading does not work.
                                        (0651) ;    The HardWare Address Recognition feature should be disabled for using ROM registers.
                                        (0652) ;
                                        (0653) ;    The A and X registers may be modified by this or future implementations
                                        (0654) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0655) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0656) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0657) ;    functions.
                                        (0658) ;
                                        (0659)  EzI2Cs_1_EnableHWAddrCheck:
                                        (0660) _EzI2Cs_1_EnableHWAddrCheck:
                                        (0661)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0662)    M8C_SetBank1
                                        (0663)    or    reg[EzI2Cs_1_ADDR_REG], EzI2Cs_1_HW_ADDR_EN
                                        (0664)    M8C_SetBank0
                                        (0665)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0666)    ret
                                        (0667) .ENDSECTION
                                        (0668) 
                                        (0669) .SECTION
                                        (0670) ;-----------------------------------------------------------------------------
                                        (0671) ;  FUNCTION NAME: void  EzI2Cs_1_DisableHWAddrCheck(void)
                                        (0672) ;
                                        (0673) ;  DESCRIPTION:
                                        (0674) ;   Clear respective bit to disengage the HardWare Address Recognition 
                                        (0675) ;   feature in I2C slave block.
                                        (0676) ;
                                        (0677) ;-----------------------------------------------------------------------------
                                        (0678) ;
                                        (0679) ;  ARGUMENTS: none
                                        (0680) ;
                                        (0681) ;  RETURNS: none
                                        (0682) ;
                                        (0683) ;  SIDE EFFECTS:
                                        (0684) ;    The A and X registers may be modified by this or future implementations
                                        (0685) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0686) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0687) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0688) ;    functions.
                                        (0689) ;
                                        (0690)  EzI2Cs_1_DisableHWAddrCheck:
                                        (0691) _EzI2Cs_1_DisableHWAddrCheck:
                                        (0692)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0693)    M8C_SetBank1
                                        (0694)    and   reg[EzI2Cs_1_ADDR_REG], ~EzI2Cs_1_HW_ADDR_EN
                                        (0695)    M8C_SetBank0
                                        (0696)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0697)    ret
                                        (0698) .ENDSECTION
                                        (0699) ENDIF
                                        (0700) 
                                        (0701) ; End of File EzI2Cs_1.asm
FILE: C:\Users\hikari\DOCUME~1\PSOCDE~1.4PR\CATCHR~1\CATCHR~1\CATCHR~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) #include <stdio.h>
(0009) 
(0010) #define I2CIO_WRITE		0x80
(0011) #define I2CIO_READ		0x40
(0012) #define I2CIO_UPDATE	0x20
(0013) 
(0014) #define STOP_X	0x01
(0015) #define STOP_Y	0x02
(0016) #define STOP_Z	0x04
(0017) 
(0018) #define POLY_1	0xE0000200
(0019) #define POLY_2	0xE0000200
(0020) #define POLY_3	0xE0000200
(0021) 
(0022) #define STOPTIME 100
(0023) #define BYTETODWRD 16843009
(0024) 
(0025) #define bitSet(a, b)	((a) |= (b))
(0026) #define bitClear(a, b)	((a) &= ~(b))
(0027) #define bitCheck(a, b)	(((a) & (b)) ? TRUE : FALSE)
(0028) 
(0029) #define I2CIO_SetWriteFlag()	bitSet(MBM_1_MyMailbox.Inbox.InboxFlag, I2CIO_WRITE)
(0030) #define I2CIO_ClearWriteFlag()	bitClear(MBM_1_MyMailbox.Inbox.InboxFlag, I2CIO_WRITE)
(0031) #define I2CIO_CheckWriteFlag()	bitCheck(MBM_1_MyMailbox.Outbox.OutboxFlag, I2CIO_WRITE)
(0032) 
(0033) #define I2CIO_SetReadFlag()		bitSet(MBM_1_MyMailbox.Outbox.OutboxFlag, I2CIO_READ)
(0034) #define I2CIO_ClearReadFlag()	bitClear(MBM_1_MyMailbox.Outbox.OutboxFlag, I2CIO_READ)	
(0035) #define I2CIO_CheckReadFlag() 	bitCheck(MBM_1_MyMailbox.Inbox.InboxFlag, I2CIO_READ)
(0036) 
(0037) #define I2CIO_SetUpdateFlag()	bitSet(MBM_1_MyMailbox.Inbox.InboxFlag, I2CIO_UPDATE)
(0038) #define I2CIO_ClearUpdateFlag()	bitClear(MBM_1_MyMailbox.Outbox.OutboxFlag, I2CIO_UPDATE)
(0039) #define I2CIO_CheckUpdateFlag()	bitCheck(MBM_1_MyMailbox.Outbox.OutboxFlag, I2CIO_UPDATE)
(0040) 
(0041) MBM_1_Outbox OutboxBuff = {0};
(0042) MBM_1_Inbox InboxBuff = {0};
(0043) 
(0044) WORD ct = 0;
(0045) 
(0046) void main(void)
(0047) {
__UserModules_end|__text_start|_main|_main:
    09F3: 10       PUSH  X
    09F4: 4F       MOV   X,SP
    09F5: 38 06    ADD   SP,0x6
(0048) 	M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
    09F7: 71 01    OR    F,0x1
(0049) 	// Insert your main routine code here.
(0050) 	
(0051) 	LCD_1_Start();
    09F9: 10       PUSH  X
    09FA: 7C 08 14 LCALL _LCD_1_Start|_LCD_1_Init|LCD_1_Init
(0052) 	LCD_1_Position(0, 0);
    09FD: 50 00    MOV   A,0x0
    09FF: 57 00    MOV   X,0x0
    0A01: 7C 08 87 LCALL _LCD_1_Position
    0A04: 20       POP   X
(0053) 	cprintf("PSoC Start");
    0A05: 50 02    MOV   A,0x2
    0A07: 08       PUSH  A
    0A08: 50 03    MOV   A,0x3
    0A0A: 08       PUSH  A
    0A0B: 7C 45 09 LCALL _cprintf
    0A0E: 38 FE    ADD   SP,0xFE
(0054) 	
(0055) 	MBM_1_InitializeMailbox();
    0A10: 7C 24 C4 LCALL _MBM_1_InitializeMailbox
(0056) 	MBM_1_pMyMailbox = &MBM_1_MyMailbox;
    0A13: 62 D0 00 MOV   REG[0xD0],0x0
    0A16: 55 6D 26 MOV   [MBM_1_pMyMailbox+1],0x26
    0A19: 55 6C 00 MOV   [MBM_1_pMyMailbox],0x0
(0057) 	
(0058) 	EzI2Cs_1_SetRamBuffer(sizeof (MBM_1_MyMailbox), INBOXFLAG + 1, (BYTE *)MBM_1_pMyMailbox);
    0A1C: 10       PUSH  X
    0A1D: 51 6C    MOV   A,[MBM_1_pMyMailbox]
    0A1F: 08       PUSH  A
    0A20: 51 6D    MOV   A,[MBM_1_pMyMailbox+1]
    0A22: 08       PUSH  A
    0A23: 50 11    MOV   A,0x11
    0A25: 08       PUSH  A
    0A26: 50 15    MOV   A,0x15
    0A28: 08       PUSH  A
    0A29: 7C 09 DA LCALL _EzI2Cs_1_DisableSlave|_EzI2Cs_1_Stop|_EzI2Cs_1_SetRamBuffer|EzI2Cs_1_SetRamBuffer|_EzI2Cs_1_DisableInt
    0A2C: 38 FC    ADD   SP,0xFC
(0059) 	EzI2Cs_1_Start();
    0A2E: 7C 09 9C LCALL _EzI2Cs_1_Start
(0060) 	EzI2Cs_1_ResumeInt();
    0A31: 7C 09 CD LCALL _EzI2Cs_1_GetActivity|_EzI2Cs_1_GetAddr|EzI2Cs_1_ResumeInt|_EzI2Cs_1_ResumeInt
(0061) 	
(0062) 	LCD_1_Position(1, 0);
    0A34: 57 00    MOV   X,0x0
    0A36: 50 01    MOV   A,0x1
    0A38: 7C 08 87 LCALL _LCD_1_Position
    0A3B: 20       POP   X
(0063) 	cprintf("I2C Start");
    0A3C: 50 01    MOV   A,0x1
    0A3E: 08       PUSH  A
    0A3F: 50 F9    MOV   A,0xF9
    0A41: 08       PUSH  A
    0A42: 7C 45 09 LCALL _cprintf
    0A45: 38 FE    ADD   SP,0xFE
(0064) 	
(0065) 	PRS32_1_WritePolynomial(POLY_1);
    0A47: 10       PUSH  X
    0A48: 50 E0    MOV   A,0xE0
    0A4A: 08       PUSH  A
    0A4B: 50 00    MOV   A,0x0
    0A4D: 08       PUSH  A
    0A4E: 50 02    MOV   A,0x2
    0A50: 08       PUSH  A
    0A51: 50 00    MOV   A,0x0
    0A53: 08       PUSH  A
    0A54: 7C 06 EA LCALL _PRS32_1_WritePolynomial
    0A57: 38 FC    ADD   SP,0xFC
(0066) 	PRS32_1_WriteSeed(0);
    0A59: 50 00    MOV   A,0x0
    0A5B: 08       PUSH  A
    0A5C: 08       PUSH  A
    0A5D: 08       PUSH  A
    0A5E: 08       PUSH  A
    0A5F: 7C 06 CB LCALL _PRS32_1_WriteSeed|_PRS32_1_Stop
    0A62: 38 FC    ADD   SP,0xFC
(0067) 	PRS32_1_Start();
    0A64: 7C 06 C7 LCALL PRS32_1_Start|_PRS32_2_ReadPRS|_PRS32_1_Start
(0068) 	
(0069) 	PRS32_2_WritePolynomial(POLY_2);
    0A67: 50 E0    MOV   A,0xE0
    0A69: 08       PUSH  A
    0A6A: 50 00    MOV   A,0x0
    0A6C: 08       PUSH  A
    0A6D: 50 02    MOV   A,0x2
    0A6F: 08       PUSH  A
    0A70: 50 00    MOV   A,0x0
    0A72: 08       PUSH  A
    0A73: 7C 06 A8 LCALL _PRS32_2_WritePolynomial
    0A76: 38 FC    ADD   SP,0xFC
(0070) 	PRS32_2_WriteSeed(0);
    0A78: 50 00    MOV   A,0x0
    0A7A: 08       PUSH  A
    0A7B: 08       PUSH  A
    0A7C: 08       PUSH  A
    0A7D: 08       PUSH  A
    0A7E: 7C 06 89 LCALL _PRS32_2_WriteSeed|_PRS32_2_Stop
    0A81: 38 FC    ADD   SP,0xFC
(0071) 	PRS32_2_Start();
    0A83: 7C 06 85 LCALL _PRS32_2_Start|_PRS32_3_ReadPRS|PRS32_2_Start
(0072) 	
(0073) 	PRS32_3_WritePolynomial(POLY_3);
    0A86: 50 E0    MOV   A,0xE0
    0A88: 08       PUSH  A
    0A89: 50 00    MOV   A,0x0
    0A8B: 08       PUSH  A
    0A8C: 50 02    MOV   A,0x2
    0A8E: 08       PUSH  A
    0A8F: 50 00    MOV   A,0x0
    0A91: 08       PUSH  A
    0A92: 7C 06 66 LCALL _PRS32_3_WritePolynomial
    0A95: 38 FC    ADD   SP,0xFC
(0074) 	PRS32_3_WriteSeed(0);
    0A97: 50 00    MOV   A,0x0
    0A99: 08       PUSH  A
    0A9A: 08       PUSH  A
    0A9B: 08       PUSH  A
    0A9C: 08       PUSH  A
    0A9D: 7C 06 47 LCALL _PRS32_3_WriteSeed|_PRS32_3_Stop
    0AA0: 38 FC    ADD   SP,0xFC
(0075) 	PRS32_3_Start();
    0AA2: 7C 06 43 LCALL _Timer8_1_WritePeriod|bTimer8_1_CaptureCounter|bTimer8_1_ReadTimer|_Timer8_1_bReadTimer|_bTimer8_1_ReadCompareValue|_bTimer8_1_ReadCounter|_bTimer8_1_ReadTimer|_Timer8_1_bReadCompareValue|_Timer8_1_WriteCompareValue|_Timer8_1_bReadTimerSaveCV|PRS32_3_Start|...
(0076) 	
(0077) 	Timer8_1_Start();
    0AA5: 7C 06 3F LCALL _Timer8_1_Start
(0078) 	Timer8_1_EnableInt();
    0AA8: 7C 06 37 LCALL _Timer8_1_EnableInt
(0079) 	
(0080) 	LCD_1_Position(0, 0);
    0AAB: 50 00    MOV   A,0x0
    0AAD: 57 00    MOV   X,0x0
    0AAF: 7C 08 87 LCALL _LCD_1_Position
    0AB2: 20       POP   X
(0081) 	cprintf("Motor Start");
    0AB3: 50 01    MOV   A,0x1
    0AB5: 08       PUSH  A
    0AB6: 50 ED    MOV   A,0xED
    0AB8: 08       PUSH  A
    0AB9: 7C 45 09 LCALL _cprintf
    0ABC: 38 FE    ADD   SP,0xFE
(0082) 	
(0083) 	LCD_1_Position(0, 0);
    0ABE: 10       PUSH  X
    0ABF: 50 00    MOV   A,0x0
    0AC1: 57 00    MOV   X,0x0
    0AC3: 7C 08 87 LCALL _LCD_1_Position
    0AC6: 20       POP   X
(0084) 	cprintf("BF Xs Ys Zs time");
    0AC7: 50 01    MOV   A,0x1
    0AC9: 08       PUSH  A
    0ACA: 50 DC    MOV   A,0xDC
    0ACC: 08       PUSH  A
    0ACD: 7C 45 09 LCALL _cprintf
    0AD0: 38 FE    ADD   SP,0xFE
    0AD2: 81 7F    JMP   0x0C52
(0085) 	
(0086) 	while (TRUE)
(0087) 	{
(0088) 		//I2C Read 
(0089) 		if (I2CIO_CheckUpdateFlag())
    0AD4: 62 D0 00 MOV   REG[0xD0],0x0
    0AD7: 47 28 20 TST   [MBM_1_MyMailbox+2],0x20
    0ADA: A0 09    JZ    0x0AE4
    0ADC: 56 01 01 MOV   [X+1],0x1
    0ADF: 56 00 00 MOV   [X+0],0x0
    0AE2: 80 07    JMP   0x0AEA
    0AE4: 56 01 00 MOV   [X+1],0x0
    0AE7: 56 00 00 MOV   [X+0],0x0
    0AEA: 3D 00 00 CMP   [X+0],0x0
    0AED: B0 06    JNZ   0x0AF4
    0AEF: 3D 01 00 CMP   [X+1],0x0
    0AF2: A0 59    JZ    0x0B4C
(0090) 		{
(0091) 			Timer8_1_DisableInt();
    0AF4: 10       PUSH  X
    0AF5: 7C 06 3B LCALL _Timer8_1_DisableInt
    0AF8: 20       POP   X
(0092) 			I2CIO_SetReadFlag();
    0AF9: 62 D0 00 MOV   REG[0xD0],0x0
    0AFC: 2E 28 40 OR    [MBM_1_MyMailbox+2],0x40
(0093) 			while (I2CIO_CheckWriteFlag());
    0AFF: 62 D0 00 MOV   REG[0xD0],0x0
    0B02: 47 28 80 TST   [MBM_1_MyMailbox+2],0x80
    0B05: A0 09    JZ    0x0B0F
    0B07: 56 03 01 MOV   [X+3],0x1
    0B0A: 56 02 00 MOV   [X+2],0x0
    0B0D: 80 07    JMP   0x0B15
    0B0F: 56 03 00 MOV   [X+3],0x0
    0B12: 56 02 00 MOV   [X+2],0x0
    0B15: 3D 02 00 CMP   [X+2],0x0
    0B18: BF E6    JNZ   0x0AFF
    0B1A: 3D 03 00 CMP   [X+3],0x0
    0B1D: BF E1    JNZ   0x0AFF
(0094) 			OutboxBuff = MBM_1_MyMailbox.Outbox;
    0B1F: 62 D0 00 MOV   REG[0xD0],0x0
    0B22: 55 48 28 MOV   [__r1],0x28
    0B25: 55 49 00 MOV   [__r0],0x0
    0B28: 55 46 59 MOV   [__r3],0x59
    0B2B: 55 47 00 MOV   [__r2],0x0
    0B2E: 51 49    MOV   A,[__r0]
    0B30: 60 D4    MOV   REG[0xD4],A
    0B32: 51 47    MOV   A,[__r2]
    0B34: 60 D5    MOV   REG[0xD5],A
    0B36: 10       PUSH  X
    0B37: 57 0E    MOV   X,0xE
    0B39: 62 D0 00 MOV   REG[0xD0],0x0
    0B3C: 3E 48    MVI   A,[__r1]
    0B3E: 3F 46    MVI   [__r3],A
    0B40: 79       DEC   X
    0B41: BF F7    JNZ   0x0B39
    0B43: 20       POP   X
    0B44: 26 28 9F AND   [MBM_1_MyMailbox+2],0x9F
(0095) 			I2CIO_ClearUpdateFlag();
(0096) 			I2CIO_ClearReadFlag();
(0097) 			Timer8_1_EnableInt();
    0B47: 10       PUSH  X
    0B48: 7C 06 37 LCALL _Timer8_1_EnableInt
    0B4B: 20       POP   X
(0098) 		}
(0099) 		
(0100) 		//I2C Write
(0101) 		if (bitCheck(InboxBuff.InboxFlag, I2CIO_UPDATE))
    0B4C: 62 D0 00 MOV   REG[0xD0],0x0
    0B4F: 47 67 20 TST   [InboxBuff],0x20
    0B52: A0 09    JZ    0x0B5C
    0B54: 56 03 01 MOV   [X+3],0x1
    0B57: 56 02 00 MOV   [X+2],0x0
    0B5A: 80 07    JMP   0x0B62
    0B5C: 56 03 00 MOV   [X+3],0x0
    0B5F: 56 02 00 MOV   [X+2],0x0
    0B62: 3D 02 00 CMP   [X+2],0x0
    0B65: B0 06    JNZ   0x0B6C
    0B67: 3D 03 00 CMP   [X+3],0x0
    0B6A: A0 63    JZ    0x0BCE
(0102) 		{
(0103) 			Timer8_1_DisableInt();
    0B6C: 10       PUSH  X
    0B6D: 7C 06 3B LCALL _Timer8_1_DisableInt
    0B70: 20       POP   X
(0104) 			I2CIO_SetWriteFlag();
    0B71: 62 D0 00 MOV   REG[0xD0],0x0
    0B74: 2E 36 80 OR    [MBM_1_MyMailbox+16],0x80
(0105) 			while (I2CIO_CheckReadFlag());
    0B77: 62 D0 00 MOV   REG[0xD0],0x0
    0B7A: 47 36 40 TST   [MBM_1_MyMailbox+16],0x40
    0B7D: A0 09    JZ    0x0B87
    0B7F: 56 05 01 MOV   [X+5],0x1
    0B82: 56 04 00 MOV   [X+4],0x0
    0B85: 80 07    JMP   0x0B8D
    0B87: 56 05 00 MOV   [X+5],0x0
    0B8A: 56 04 00 MOV   [X+4],0x0
    0B8D: 3D 04 00 CMP   [X+4],0x0
    0B90: BF E6    JNZ   0x0B77
    0B92: 3D 05 00 CMP   [X+5],0x0
    0B95: BF E1    JNZ   0x0B77
(0106) 			InboxBuff.InboxFlag = MBM_1_MyMailbox.Inbox.InboxFlag;
    0B97: 62 D0 00 MOV   REG[0xD0],0x0
    0B9A: 51 36    MOV   A,[MBM_1_MyMailbox+16]
    0B9C: 53 67    MOV   [InboxBuff],A
    0B9E: 55 48 67 MOV   [__r1],0x67
    0BA1: 55 49 00 MOV   [__r0],0x0
    0BA4: 55 46 36 MOV   [__r3],0x36
    0BA7: 55 47 00 MOV   [__r2],0x0
    0BAA: 51 49    MOV   A,[__r0]
    0BAC: 60 D4    MOV   REG[0xD4],A
    0BAE: 51 47    MOV   A,[__r2]
    0BB0: 60 D5    MOV   REG[0xD5],A
    0BB2: 10       PUSH  X
    0BB3: 57 05    MOV   X,0x5
    0BB5: 62 D0 00 MOV   REG[0xD0],0x0
    0BB8: 3E 48    MVI   A,[__r1]
    0BBA: 3F 46    MVI   [__r3],A
    0BBC: 79       DEC   X
    0BBD: BF F7    JNZ   0x0BB5
    0BBF: 20       POP   X
    0BC0: 2E 36 20 OR    [MBM_1_MyMailbox+16],0x20
(0107) 			MBM_1_MyMailbox.Inbox = InboxBuff;
(0108) 			I2CIO_SetUpdateFlag();
(0109) 			I2CIO_ClearWriteFlag();
    0BC3: 26 36 7F AND   [MBM_1_MyMailbox+16],0x7F
    0BC6: 55 67 00 MOV   [InboxBuff],0x0
(0110) 			InboxBuff.InboxFlag = 0;
(0111) 			Timer8_1_EnableInt();
    0BC9: 10       PUSH  X
    0BCA: 7C 06 37 LCALL _Timer8_1_EnableInt
    0BCD: 20       POP   X
(0112) 		}
(0113) 		
(0114) 		LCD_1_Position(0, 0);
    0BCE: 10       PUSH  X
    0BCF: 50 00    MOV   A,0x0
    0BD1: 57 00    MOV   X,0x0
    0BD3: 7C 08 87 LCALL _LCD_1_Position
    0BD6: 20       POP   X
(0115) 		cprintf(
    0BD7: 62 D0 00 MOV   REG[0xD0],0x0
    0BDA: 51 5D    MOV   A,[OutboxBuff+4]
    0BDC: 53 48    MOV   [__r1],A
    0BDE: 50 00    MOV   A,0x0
    0BE0: 08       PUSH  A
    0BE1: 51 48    MOV   A,[__r1]
    0BE3: 08       PUSH  A
    0BE4: 51 5C    MOV   A,[OutboxBuff+3]
    0BE6: 53 48    MOV   [__r1],A
    0BE8: 50 00    MOV   A,0x0
    0BEA: 08       PUSH  A
    0BEB: 51 48    MOV   A,[__r1]
    0BED: 08       PUSH  A
    0BEE: 51 5B    MOV   A,[OutboxBuff+2]
    0BF0: 53 48    MOV   [__r1],A
    0BF2: 50 00    MOV   A,0x0
    0BF4: 08       PUSH  A
    0BF5: 51 48    MOV   A,[__r1]
    0BF7: 08       PUSH  A
    0BF8: 51 5A    MOV   A,[OutboxBuff+1]
    0BFA: 53 48    MOV   [__r1],A
    0BFC: 50 00    MOV   A,0x0
    0BFE: 08       PUSH  A
    0BFF: 51 48    MOV   A,[__r1]
    0C01: 08       PUSH  A
    0C02: 50 01    MOV   A,0x1
    0C04: 08       PUSH  A
    0C05: 50 BF    MOV   A,0xBF
    0C07: 08       PUSH  A
    0C08: 7C 45 09 LCALL _cprintf
    0C0B: 38 F6    ADD   SP,0xF6
(0116) 			"B%02X X%02X Y%02X Z%02X time",
(0117) 			OutboxBuff.TBrakeFlag,
(0118) 			OutboxBuff.X_trs,
(0119) 			OutboxBuff.Y_trs,
(0120) 			OutboxBuff.Z_trs);
(0121) 		
(0122) 		LCD_1_Position(1, 0);
    0C0D: 10       PUSH  X
    0C0E: 57 00    MOV   X,0x0
    0C10: 50 01    MOV   A,0x1
    0C12: 7C 08 87 LCALL _LCD_1_Position
    0C15: 20       POP   X
(0123) 		cprintf(
    0C16: 62 D0 00 MOV   REG[0xD0],0x0
    0C19: 51 6E    MOV   A,[ct]
    0C1B: 08       PUSH  A
    0C1C: 51 6F    MOV   A,[ct+1]
    0C1E: 08       PUSH  A
    0C1F: 51 6B    MOV   A,[InboxBuff+4]
    0C21: 53 48    MOV   [__r1],A
    0C23: 50 00    MOV   A,0x0
    0C25: 08       PUSH  A
    0C26: 51 48    MOV   A,[__r1]
    0C28: 08       PUSH  A
    0C29: 51 6A    MOV   A,[InboxBuff+3]
    0C2B: 53 48    MOV   [__r1],A
    0C2D: 50 00    MOV   A,0x0
    0C2F: 08       PUSH  A
    0C30: 51 48    MOV   A,[__r1]
    0C32: 08       PUSH  A
    0C33: 51 69    MOV   A,[InboxBuff+2]
    0C35: 53 48    MOV   [__r1],A
    0C37: 50 00    MOV   A,0x0
    0C39: 08       PUSH  A
    0C3A: 51 48    MOV   A,[__r1]
    0C3C: 08       PUSH  A
    0C3D: 51 68    MOV   A,[InboxBuff+1]
    0C3F: 53 48    MOV   [__r1],A
    0C41: 50 00    MOV   A,0x0
    0C43: 08       PUSH  A
    0C44: 51 48    MOV   A,[__r1]
    0C46: 08       PUSH  A
    0C47: 50 01    MOV   A,0x1
    0C49: 08       PUSH  A
    0C4A: 50 A2    MOV   A,0xA2
    0C4C: 08       PUSH  A
    0C4D: 7C 45 09 LCALL _cprintf
    0C50: 38 F4    ADD   SP,0xF4
(0124) 			"B%02X X%02X Y%02X Z%02X %04X",
(0125) 			InboxBuff.CBrakeFlag,
(0126) 			InboxBuff.X_crs,
(0127) 			InboxBuff.Y_crs,
(0128) 			InboxBuff.Z_crs,
(0129) 			ct);
(0130) 	}
    0C52: 8E 81    JMP   0x0AD4
    0C54: 38 FA    ADD   SP,0xFA
    0C56: 20       POP   X
    0C57: 8F FF    JMP   0x0C57
(0131) }
(0132) 
(0133) #define STOP	0x00
(0134) #define CW		0x01
(0135) #define CCW		0x03
(0136) 
(0137) #pragma interrupt_handler _Timer8_1_ISR
(0138) void _Timer8_1_ISR(void)
(0139) {
__Timer8_1_ISR:
  pz                   --> X+4
  tmpz                 --> X+2
  py                   --> X+4
  tmpy                 --> X+2
  px                   --> X+4
  tmpx                 --> X+2
    0C59: 71 C0    OR    F,0xC0
    0C5B: 08       PUSH  A
    0C5C: 5D D0    MOV   A,REG[0xD0]
    0C5E: 08       PUSH  A
    0C5F: 5D D3    MOV   A,REG[0xD3]
    0C61: 08       PUSH  A
    0C62: 5D D4    MOV   A,REG[0xD4]
    0C64: 08       PUSH  A
    0C65: 5D D5    MOV   A,REG[0xD5]
    0C67: 08       PUSH  A
    0C68: 62 D0 00 MOV   REG[0xD0],0x0
    0C6B: 51 49    MOV   A,[__r0]
    0C6D: 08       PUSH  A
    0C6E: 51 48    MOV   A,[__r1]
    0C70: 08       PUSH  A
    0C71: 51 47    MOV   A,[__r2]
    0C73: 08       PUSH  A
    0C74: 51 46    MOV   A,[__r3]
    0C76: 08       PUSH  A
    0C77: 51 45    MOV   A,[__r4]
    0C79: 08       PUSH  A
    0C7A: 51 44    MOV   A,[__r5]
    0C7C: 08       PUSH  A
    0C7D: 51 43    MOV   A,[__r6]
    0C7F: 08       PUSH  A
    0C80: 51 42    MOV   A,[__r7]
    0C82: 08       PUSH  A
    0C83: 51 41    MOV   A,[__r8]
    0C85: 08       PUSH  A
    0C86: 51 40    MOV   A,[__r9]
    0C88: 08       PUSH  A
    0C89: 51 3F    MOV   A,[__r10]
    0C8B: 08       PUSH  A
    0C8C: 51 3E    MOV   A,[__r11]
    0C8E: 08       PUSH  A
    0C8F: 51 3D    MOV   A,[__rX]
    0C91: 08       PUSH  A
    0C92: 51 3C    MOV   A,[__rY]
    0C94: 08       PUSH  A
    0C95: 51 3B    MOV   A,[__rZ]
    0C97: 08       PUSH  A
    0C98: 10       PUSH  X
    0C99: 4F       MOV   X,SP
    0C9A: 38 08    ADD   SP,0x8
    0C9C: 3C 7E 00 CMP   [ct+16],0x0
    0C9F: B3 23    JNZ   0x0FC3
    0CA1: 47 5A 01 TST   [OutboxBuff+1],0x1
    0CA4: A0 09    JZ    0x0CAE
    0CA6: 56 01 01 MOV   [X+1],0x1
    0CA9: 56 00 00 MOV   [X+0],0x0
    0CAC: 80 07    JMP   0x0CB4
    0CAE: 56 01 00 MOV   [X+1],0x0
    0CB1: 56 00 00 MOV   [X+0],0x0
    0CB4: 3D 00 00 CMP   [X+0],0x0
    0CB7: B0 06    JNZ   0x0CBE
    0CB9: 3D 01 00 CMP   [X+1],0x0
    0CBC: A0 84    JZ    0x0D41
(0140) 	static BYTE rdx = STOP;
(0141) 	static BYTE rdy = STOP;
(0142) 	static BYTE rdz = STOP;
(0143) 	
(0144) 	static INT pwm_x = 0;
(0145) 	static INT pwm_y = 0;
(0146) 	static INT pwm_z = 0;
(0147) 	
(0148) 	static INT ix = 0;
(0149) 	static INT iy = 0;
(0150) 	static INT iz = 0;
(0151) 	
(0152) 	static BYTE countx = 0;
(0153) 	static BYTE county = 0;
(0154) 	static BYTE countz = 0;
(0155) 	
(0156) 	static BYTE sw = 0;
(0157) 	
(0158) 	if (sw == 0)
(0159) 	{
(0160) 		//X motor
(0161) 		if (bitCheck(OutboxBuff.TBrakeFlag, STOP_X))
(0162) 		{
(0163) 			if (countx < STOPTIME)
    0CBE: 62 D0 00 MOV   REG[0xD0],0x0
    0CC1: 3C 82 64 CMP   [ct+20],0x64
    0CC4: D0 62    JNC   0x0D27
    0CC6: 47 68 01 TST   [InboxBuff+1],0x1
    0CC9: A0 09    JZ    0x0CD3
    0CCB: 56 03 01 MOV   [X+3],0x1
    0CCE: 56 02 00 MOV   [X+2],0x0
    0CD1: 80 07    JMP   0x0CD9
    0CD3: 56 03 00 MOV   [X+3],0x0
    0CD6: 56 02 00 MOV   [X+2],0x0
    0CD9: 3D 02 00 CMP   [X+2],0x0
    0CDC: B0 43    JNZ   0x0D20
    0CDE: 3D 03 00 CMP   [X+3],0x0
    0CE1: B0 3E    JNZ   0x0D20
(0164) 			{
(0165) 				if (!bitCheck(InboxBuff.CBrakeFlag, STOP_X))
(0166) 				{
(0167) 					//xah off
(0168) 					bitClear(XAH_DataShadow, XAH_MASK);
    0CE3: 62 D0 00 MOV   REG[0xD0],0x0
    0CE6: 26 01 F7 AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1],0xF7
(0169) 					XAH_Data_ADDR = XAH_DataShadow;
    0CE9: 51 01    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1]
    0CEB: 60 04    MOV   REG[0x4],A
(0170) 					//xbh off
(0171) 					bitClear(XBH_DataShadow, XBH_MASK);
    0CED: 26 01 EF AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1],0xEF
(0172) 					XBH_Data_ADDR = XBH_DataShadow;
    0CF0: 51 01    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1]
    0CF2: 60 04    MOV   REG[0x4],A
(0173) 					//xal off
(0174) 					bitClear(XAL_DataShadow, XAL_MASK);
    0CF4: 26 01 FB AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1],0xFB
(0175) 					XAL_Data_ADDR = XAL_DataShadow;
    0CF7: 51 01    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1]
    0CF9: 60 04    MOV   REG[0x4],A
(0176) 					bitClear(XAL_GlobalSelect_ADDR, XAL_MASK);
    0CFB: 41 06 FB AND   REG[0x6],0xFB
(0177) 					//xbl off
(0178) 					bitClear(XBL_DataShadow, XBL_MASK);
    0CFE: 26 01 BF AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1],0xBF
(0179) 					XBL_Data_ADDR = XBL_DataShadow;
    0D01: 51 01    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1]
    0D03: 60 04    MOV   REG[0x4],A
(0180) 					bitClear(XBL_GlobalSelect_ADDR, XBL_MASK);
    0D05: 41 06 BF AND   REG[0x6],0xBF
    0D08: 2E 68 01 OR    [InboxBuff+1],0x1
    0D0B: 55 71 00 MOV   [ct+3],0x0
    0D0E: 55 70 00 MOV   [ct+2],0x0
    0D11: 55 77 00 MOV   [ct+9],0x0
    0D14: 55 76 00 MOV   [ct+8],0x0
    0D17: 55 69 00 MOV   [InboxBuff+2],0x0
    0D1A: 55 81 00 MOV   [ct+19],0x0
    0D1D: 2E 67 20 OR    [InboxBuff],0x20
(0181) 					
(0182) 					bitSet(InboxBuff.CBrakeFlag, STOP_X);
(0183) 					pwm_x = 0;
(0184) 					ix = 0;
(0185) 					InboxBuff.X_crs = 0;
(0186) 					rdx = STOP;
(0187) 					bitSet(InboxBuff.InboxFlag, I2CIO_UPDATE);
(0188) 				}
(0189) 				countx++;
    0D20: 62 D0 00 MOV   REG[0xD0],0x0
    0D23: 76 82    INC   [ct+20]
(0190) 			}
    0D25: 82 96    JMP   0x0FBC
(0191) 			else if (countx == STOPTIME)
    0D27: 62 D0 00 MOV   REG[0xD0],0x0
    0D2A: 3C 82 64 CMP   [ct+20],0x64
    0D2D: B2 8E    JNZ   0x0FBC
    0D2F: 2E 01 04 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1],0x4
(0192) 			{
(0193) 				//xal on
(0194) 				bitSet(XAL_DataShadow, XAL_MASK);
(0195) 				XAL_Data_ADDR = XAL_DataShadow;
    0D32: 51 01    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1]
    0D34: 60 04    MOV   REG[0x4],A
(0196) 				//xbl on
(0197) 				bitSet(XBL_DataShadow, XBL_MASK);
    0D36: 2E 01 40 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1],0x40
(0198) 				XBL_Data_ADDR = XBL_DataShadow;
    0D39: 51 01    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1]
    0D3B: 60 04    MOV   REG[0x4],A
    0D3D: 76 82    INC   [ct+20]
(0199) 				
(0200) 				countx++;
(0201) 			}
(0202) 			
(0203) 		}
    0D3F: 82 7C    JMP   0x0FBC
(0204) 		else
(0205) 		{
(0206) 			INT px = ((CHAR)OutboxBuff.X_trs - pwm_x);
    0D41: 62 D0 00 MOV   REG[0xD0],0x0
    0D44: 51 5B    MOV   A,[OutboxBuff+2]
    0D46: 53 48    MOV   [__r1],A
    0D48: 55 49 00 MOV   [__r0],0x0
    0D4B: 47 48 80 TST   [__r1],0x80
    0D4E: A0 04    JZ    0x0D53
    0D50: 55 49 FF MOV   [__r0],0xFF
    0D53: 62 D0 00 MOV   REG[0xD0],0x0
    0D56: 51 48    MOV   A,[__r1]
    0D58: 12 71    SUB   A,[ct+3]
    0D5A: 54 05    MOV   [X+5],A
    0D5C: 51 49    MOV   A,[__r0]
    0D5E: 1A 70    SBB   A,[ct+2]
    0D60: 54 04    MOV   [X+4],A
(0207) 			INT tmpx = 0;
    0D62: 56 03 00 MOV   [X+3],0x0
FILE: C:\Users\hikari\DOCUME~1\PSOCDE~1.4PR\CATCHR~1\CATCHR~1\CATCHR~1\main.c
(0213) 				countx = 0;
    0E58: 62 D0 00 MOV   REG[0xD0],0x0
    0E5B: 55 82 00 MOV   [ct+20],0x0
    0E5E: 26 68 FE AND   [InboxBuff+1],0xFE
(0214) 				bitClear(InboxBuff.CBrakeFlag, STOP_X);
(0215) 			}
(0216) 			
(0217) 			if (pwm_x > 127)
    0E61: 62 D0 00 MOV   REG[0xD0],0x0
    0E64: 50 7F    MOV   A,0x7F
    0E66: 12 71    SUB   A,[ct+3]
    0E68: 51 70    MOV   A,[ct+2]
    0E6A: 31 80    XOR   A,0x80
    0E6C: 53 3D    MOV   [__rX],A
    0E6E: 50 80    MOV   A,0x80
    0E70: 1A 3D    SBB   A,[__rX]
    0E72: D0 09    JNC   0x0E7C
(0218) 				tmpx = 127;
    0E74: 56 03 7F MOV   [X+3],0x7F
    0E77: 56 02 00 MOV   [X+2],0x0
    0E7A: 80 23    JMP   0x0E9E
(0219) 			else if (pwm_x < -128)
    0E7C: 62 D0 00 MOV   REG[0xD0],0x0
    0E7F: 51 71    MOV   A,[ct+3]
    0E81: 11 80    SUB   A,0x80
    0E83: 51 70    MOV   A,[ct+2]
    0E85: 31 80    XOR   A,0x80
    0E87: 19 7F    SBB   A,0x7F
    0E89: D0 09    JNC   0x0E93
(0220) 				tmpx = -128;
    0E8B: 56 03 80 MOV   [X+3],0x80
    0E8E: 56 02 FF MOV   [X+2],0xFF
    0E91: 80 0C    JMP   0x0E9E
(0221) 			else
(0222) 				tmpx = pwm_x;
    0E93: 62 D0 00 MOV   REG[0xD0],0x0
    0E96: 51 71    MOV   A,[ct+3]
    0E98: 54 03    MOV   [X+3],A
    0E9A: 51 70    MOV   A,[ct+2]
    0E9C: 54 02    MOV   [X+2],A
(0223) 			
(0224) 			//rotation cw
(0225) 			if (tmpx >= 0)
    0E9E: 52 03    MOV   A,[X+3]
    0EA0: 11 00    SUB   A,0x0
    0EA2: 52 02    MOV   A,[X+2]
    0EA4: 31 80    XOR   A,0x80
    0EA6: 19 80    SBB   A,0x80
    0EA8: C0 6B    JC    0x0F14
(0226) 			{
(0227) 				if (rdx != CW)
    0EAA: 62 D0 00 MOV   REG[0xD0],0x0
    0EAD: 3C 81 01 CMP   [ct+19],0x1
    0EB0: A0 1F    JZ    0x0ED0
    0EB2: 26 01 F7 AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1],0xF7
(0228) 				{
(0229) 					//xah off
(0230) 					bitClear(XAH_DataShadow, XAH_MASK);
(0231) 					XAH_Data_ADDR = XAH_DataShadow;
    0EB5: 51 01    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1]
    0EB7: 60 04    MOV   REG[0x4],A
(0232) 					//xbh on
(0233) 					bitSet(XBH_DataShadow, XBH_MASK);
    0EB9: 2E 01 10 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1],0x10
(0234) 					XBH_Data_ADDR = XBH_DataShadow;
    0EBC: 51 01    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1]
    0EBE: 60 04    MOV   REG[0x4],A
(0235) 					//xbl off
(0236) 					bitClear(XBL_DataShadow, XBL_MASK);
    0EC0: 26 01 BF AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1],0xBF
(0237) 					XBL_Data_ADDR = XBL_DataShadow;
    0EC3: 51 01    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1]
    0EC5: 60 04    MOV   REG[0x4],A
(0238) 					bitClear(XBL_GlobalSelect_ADDR, XBL_MASK);
    0EC7: 41 06 BF AND   REG[0x6],0xBF
(0239) 					//xal pwm on
(0240) 					bitSet(XAL_GlobalSelect_ADDR, XAL_MASK);
    0ECA: 43 06 04 OR    REG[0x6],0x4
    0ECD: 55 81 01 MOV   [ct+19],0x1
(0241) 					
(0242) 					rdx = CW;
(0243) 				}
(0244) 				
(0245) 				InboxBuff.X_crs = (BYTE)(tmpx * 2 + 1);
    0ED0: 62 D0 00 MOV   REG[0xD0],0x0
    0ED3: 52 03    MOV   A,[X+3]
    0ED5: 53 48    MOV   [__r1],A
    0ED7: 65 48    ASL   [__r1]
    0ED9: 06 48 01 ADD   [__r1],0x1
    0EDC: 51 48    MOV   A,[__r1]
    0EDE: 53 69    MOV   [InboxBuff+2],A
(0246) 				PRS32_1_WriteSeed(BYTETODWRD * (DWORD)InboxBuff.X_crs);
    0EE0: 51 69    MOV   A,[InboxBuff+2]
    0EE2: 53 46    MOV   [__r3],A
    0EE4: 50 00    MOV   A,0x0
    0EE6: 08       PUSH  A
    0EE7: 08       PUSH  A
    0EE8: 08       PUSH  A
    0EE9: 51 46    MOV   A,[__r3]
    0EEB: 08       PUSH  A
    0EEC: 50 01    MOV   A,0x1
    0EEE: 08       PUSH  A
    0EEF: 08       PUSH  A
    0EF0: 08       PUSH  A
    0EF1: 08       PUSH  A
    0EF2: 7C 2A 1D LCALL 0x2A1D
    0EF5: 38 FC    ADD   SP,0xFC
    0EF7: 18       POP   A
    0EF8: 53 46    MOV   [__r3],A
    0EFA: 18       POP   A
    0EFB: 53 47    MOV   [__r2],A
    0EFD: 18       POP   A
    0EFE: 53 48    MOV   [__r1],A
    0F00: 18       POP   A
    0F01: 10       PUSH  X
    0F02: 08       PUSH  A
    0F03: 51 48    MOV   A,[__r1]
    0F05: 08       PUSH  A
    0F06: 51 47    MOV   A,[__r2]
    0F08: 08       PUSH  A
    0F09: 51 46    MOV   A,[__r3]
    0F0B: 08       PUSH  A
    0F0C: 7C 06 CB LCALL _PRS32_1_WriteSeed|_PRS32_1_Stop
    0F0F: 38 FC    ADD   SP,0xFC
    0F11: 20       POP   X
(0247) 			}
    0F12: 80 A3    JMP   0x0FB6
(0248) 			//rotation ccw
(0249) 			else
(0250) 			{
(0251) 				if (rdx != CCW)
    0F14: 62 D0 00 MOV   REG[0xD0],0x0
    0F17: 3C 81 03 CMP   [ct+19],0x3
    0F1A: A0 1F    JZ    0x0F3A
    0F1C: 26 01 EF AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1],0xEF
(0252) 				{
(0253) 					//xbh off
(0254) 					bitClear(XBH_DataShadow, XBH_MASK);
(0255) 					XBH_Data_ADDR = XBH_DataShadow;
    0F1F: 51 01    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1]
    0F21: 60 04    MOV   REG[0x4],A
(0256) 					//xah on
(0257) 					bitSet(XAH_DataShadow, XAH_MASK);
    0F23: 2E 01 08 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1],0x8
(0258) 					XAH_Data_ADDR = XAH_DataShadow;
    0F26: 51 01    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1]
    0F28: 60 04    MOV   REG[0x4],A
(0259) 					//xal off
(0260) 					bitClear(XAL_DataShadow, XAL_MASK);
    0F2A: 26 01 FB AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1],0xFB
(0261) 					XAL_Data_ADDR = XAL_DataShadow;
    0F2D: 51 01    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+1]
    0F2F: 60 04    MOV   REG[0x4],A
(0262) 					bitClear(XAL_GlobalSelect_ADDR, XAL_MASK);
    0F31: 41 06 FB AND   REG[0x6],0xFB
(0263) 					//xbl pwm on
(0264) 					bitSet(XBL_GlobalSelect_ADDR, XBL_MASK);
    0F34: 43 06 40 OR    REG[0x6],0x40
    0F37: 55 81 03 MOV   [ct+19],0x3
(0265) 					
(0266) 					rdx = CCW;
(0267) 				}
(0268) 				
(0269) 				InboxBuff.X_crs = (BYTE)(tmpx * (-2) - 1);
    0F3A: 62 D0 00 MOV   REG[0xD0],0x0
    0F3D: 52 03    MOV   A,[X+3]
    0F3F: 53 48    MOV   [__r1],A
    0F41: 52 02    MOV   A,[X+2]
    0F43: 53 49    MOV   [__r0],A
    0F45: 55 46 FE MOV   [__r3],0xFE
    0F48: 55 47 FF MOV   [__r2],0xFF
    0F4B: 55 3D 00 MOV   [__rX],0x0
    0F4E: 55 3C 00 MOV   [__rY],0x0
    0F51: 3C 47 00 CMP   [__r2],0x0
    0F54: B0 06    JNZ   0x0F5B
    0F56: 3C 46 00 CMP   [__r3],0x0
    0F59: A0 1A    JZ    0x0F74
    0F5B: 70 FB    AND   F,0xFB
    0F5D: 6E 47    RRC   [__r2]
    0F5F: 6E 46    RRC   [__r3]
    0F61: D0 0C    JNC   0x0F6E
    0F63: 62 D0 00 MOV   REG[0xD0],0x0
    0F66: 51 48    MOV   A,[__r1]
    0F68: 04 3D    ADD   [__rX],A
    0F6A: 51 49    MOV   A,[__r0]
    0F6C: 0C 3C    ADC   [__rY],A
    0F6E: 65 48    ASL   [__r1]
    0F70: 6B 49    RLC   [__r0]
    0F72: 8F DE    JMP   0x0F51
    0F74: 5F 48 3D MOV   [__r1],[__rX]
    0F77: 5F 49 3C MOV   [__r0],[__rY]
    0F7A: 62 D0 00 MOV   REG[0xD0],0x0
    0F7D: 16 48 01 SUB   [__r1],0x1
    0F80: 51 48    MOV   A,[__r1]
    0F82: 53 69    MOV   [InboxBuff+2],A
(0270) 				PRS32_1_WriteSeed(BYTETODWRD * (DWORD)InboxBuff.X_crs);
    0F84: 51 69    MOV   A,[InboxBuff+2]
    0F86: 53 46    MOV   [__r3],A
    0F88: 50 00    MOV   A,0x0
    0F8A: 08       PUSH  A
    0F8B: 08       PUSH  A
    0F8C: 08       PUSH  A
    0F8D: 51 46    MOV   A,[__r3]
    0F8F: 08       PUSH  A
    0F90: 50 01    MOV   A,0x1
    0F92: 08       PUSH  A
    0F93: 08       PUSH  A
    0F94: 08       PUSH  A
    0F95: 08       PUSH  A
    0F96: 7C 2A 1D LCALL 0x2A1D
    0F99: 38 FC    ADD   SP,0xFC
    0F9B: 18       POP   A
    0F9C: 53 46    MOV   [__r3],A
    0F9E: 18       POP   A
    0F9F: 53 47    MOV   [__r2],A
    0FA1: 18       POP   A
    0FA2: 53 48    MOV   [__r1],A
    0FA4: 18       POP   A
    0FA5: 10       PUSH  X
    0FA6: 08       PUSH  A
    0FA7: 51 48    MOV   A,[__r1]
    0FA9: 08       PUSH  A
    0FAA: 51 47    MOV   A,[__r2]
    0FAC: 08       PUSH  A
    0FAD: 51 46    MOV   A,[__r3]
    0FAF: 08       PUSH  A
    0FB0: 7C 06 CB LCALL _PRS32_1_WriteSeed|_PRS32_1_Stop
    0FB3: 38 FC    ADD   SP,0xFC
    0FB5: 20       POP   X
(0271) 			}
(0272) 			
(0273) 			bitSet(InboxBuff.InboxFlag, I2CIO_UPDATE);
    0FB6: 62 D0 00 MOV   REG[0xD0],0x0
    0FB9: 2E 67 20 OR    [InboxBuff],0x20
(0274) 		}
(0275) 		//end X
(0276) 		sw++;
    0FBC: 62 D0 00 MOV   REG[0xD0],0x0
    0FBF: 76 7E    INC   [ct+16]
(0277) 	}
    0FC1: 86 4F    JMP   0x1611
(0278) 	
(0279) 	else if (sw == 1)
    0FC3: 62 D0 00 MOV   REG[0xD0],0x0
    0FC6: 3C 7E 01 CMP   [ct+16],0x1
    0FC9: B3 23    JNZ   0x12ED
    0FCB: 47 5A 02 TST   [OutboxBuff+1],0x2
    0FCE: A0 09    JZ    0x0FD8
    0FD0: 56 01 01 MOV   [X+1],0x1
    0FD3: 56 00 00 MOV   [X+0],0x0
    0FD6: 80 07    JMP   0x0FDE
    0FD8: 56 01 00 MOV   [X+1],0x0
    0FDB: 56 00 00 MOV   [X+0],0x0
    0FDE: 3D 00 00 CMP   [X+0],0x0
    0FE1: B0 06    JNZ   0x0FE8
    0FE3: 3D 01 00 CMP   [X+1],0x0
    0FE6: A0 84    JZ    0x106B
(0280) 	{
(0281) 		//Y motor
(0282) 		if (bitCheck(OutboxBuff.TBrakeFlag, STOP_Y))
(0283) 		{
(0284) 			if (county < STOPTIME)
    0FE8: 62 D0 00 MOV   REG[0xD0],0x0
    0FEB: 3C 7C 64 CMP   [ct+14],0x64
    0FEE: D0 62    JNC   0x1051
    0FF0: 47 68 02 TST   [InboxBuff+1],0x2
    0FF3: A0 09    JZ    0x0FFD
    0FF5: 56 03 01 MOV   [X+3],0x1
    0FF8: 56 02 00 MOV   [X+2],0x0
    0FFB: 80 07    JMP   0x1003
    0FFD: 56 03 00 MOV   [X+3],0x0
    1000: 56 02 00 MOV   [X+2],0x0
    1003: 3D 02 00 CMP   [X+2],0x0
    1006: B0 43    JNZ   0x104A
    1008: 3D 03 00 CMP   [X+3],0x0
    100B: B0 3E    JNZ   0x104A
(0285) 			{
(0286) 				if (!bitCheck(InboxBuff.CBrakeFlag, STOP_Y))
(0287) 				{
(0288) 					//yah off
(0289) 					bitClear(YAH_DataShadow, YAH_MASK);
    100D: 62 D0 00 MOV   REG[0xD0],0x0
    1010: 26 02 FE AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0xFE
(0290) 					YAH_Data_ADDR = YAH_DataShadow;
    1013: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    1015: 60 08    MOV   REG[0x8],A
(0291) 					//ybh off
(0292) 					bitClear(YBH_DataShadow, YBH_MASK);
    1017: 26 02 F7 AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0xF7
(0293) 					YBH_Data_ADDR = YBH_DataShadow;
    101A: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    101C: 60 08    MOV   REG[0x8],A
(0294) 					//yal off
(0295) 					bitClear(YAL_DataShadow, YAL_MASK);
    101E: 26 02 FD AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0xFD
(0296) 					YAL_Data_ADDR = YAL_DataShadow;
    1021: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    1023: 60 08    MOV   REG[0x8],A
(0297) 					bitClear(YAL_GlobalSelect_ADDR, YAL_MASK);
    1025: 41 0A FD AND   REG[0xA],0xFD
(0298) 					//ybl off
(0299) 					bitClear(YBL_DataShadow, YBL_MASK);
    1028: 26 02 DF AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0xDF
(0300) 					YBL_Data_ADDR = YBL_DataShadow;
    102B: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    102D: 60 08    MOV   REG[0x8],A
(0301) 					bitClear(YBL_GlobalSelect_ADDR, YBL_MASK);
    102F: 41 0A DF AND   REG[0xA],0xDF
    1032: 2E 68 02 OR    [InboxBuff+1],0x2
    1035: 55 73 00 MOV   [ct+5],0x0
    1038: 55 72 00 MOV   [ct+4],0x0
    103B: 55 79 00 MOV   [ct+11],0x0
    103E: 55 78 00 MOV   [ct+10],0x0
    1041: 55 6A 00 MOV   [InboxBuff+3],0x0
    1044: 55 80 00 MOV   [ct+18],0x0
    1047: 2E 67 20 OR    [InboxBuff],0x20
(0302) 					
(0303) 					bitSet(InboxBuff.CBrakeFlag, STOP_Y);
(0304) 					pwm_y = 0;
(0305) 					iy = 0;
(0306) 					InboxBuff.Y_crs = 0;
(0307) 					rdy = STOP;
(0308) 					bitSet(InboxBuff.InboxFlag, I2CIO_UPDATE);
(0309) 				}
(0310) 				county++;
    104A: 62 D0 00 MOV   REG[0xD0],0x0
    104D: 76 7C    INC   [ct+14]
(0311) 			}
    104F: 82 96    JMP   0x12E6
(0312) 			else if (county == STOPTIME)
    1051: 62 D0 00 MOV   REG[0xD0],0x0
    1054: 3C 7C 64 CMP   [ct+14],0x64
    1057: B2 8E    JNZ   0x12E6
    1059: 2E 02 02 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0x2
(0313) 			{
(0314) 				//yal on
(0315) 				bitSet(YAL_DataShadow, YAL_MASK);
(0316) 				YAL_Data_ADDR = YAL_DataShadow;
    105C: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    105E: 60 08    MOV   REG[0x8],A
(0317) 				//ybl on
(0318) 				bitSet(YBL_DataShadow, YBL_MASK);
    1060: 2E 02 20 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0x20
(0319) 				YBL_Data_ADDR = YBL_DataShadow;
    1063: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    1065: 60 08    MOV   REG[0x8],A
    1067: 76 7C    INC   [ct+14]
(0320) 				
(0321) 				county++;
(0322) 			}
(0323) 			
(0324) 		}
    1069: 82 7C    JMP   0x12E6
(0325) 		else
(0326) 		{
(0327) 			INT py = ((CHAR)OutboxBuff.Y_trs - pwm_y);
    106B: 62 D0 00 MOV   REG[0xD0],0x0
    106E: 51 5C    MOV   A,[OutboxBuff+3]
    1070: 53 48    MOV   [__r1],A
    1072: 55 49 00 MOV   [__r0],0x0
    1075: 47 48 80 TST   [__r1],0x80
    1078: A0 04    JZ    0x107D
    107A: 55 49 FF MOV   [__r0],0xFF
    107D: 62 D0 00 MOV   REG[0xD0],0x0
    1080: 51 48    MOV   A,[__r1]
    1082: 12 73    SUB   A,[ct+5]
    1084: 54 05    MOV   [X+5],A
    1086: 51 49    MOV   A,[__r0]
    1088: 1A 72    SBB   A,[ct+4]
    108A: 54 04    MOV   [X+4],A
(0328) 			INT tmpy = 0;
    108C: 56 03 00 MOV   [X+3],0x0
FILE: C:\Users\hikari\DOCUME~1\PSOCDE~1.4PR\CATCHR~1\CATCHR~1\CATCHR~1\main.c
(0334) 				county = 0;
    1182: 62 D0 00 MOV   REG[0xD0],0x0
    1185: 55 7C 00 MOV   [ct+14],0x0
    1188: 26 68 FD AND   [InboxBuff+1],0xFD
(0335) 				bitClear(InboxBuff.CBrakeFlag, STOP_Y);
(0336) 			}
(0337) 			
(0338) 			if (pwm_y > 127)
    118B: 62 D0 00 MOV   REG[0xD0],0x0
    118E: 50 7F    MOV   A,0x7F
    1190: 12 73    SUB   A,[ct+5]
    1192: 51 72    MOV   A,[ct+4]
    1194: 31 80    XOR   A,0x80
    1196: 53 3D    MOV   [__rX],A
    1198: 50 80    MOV   A,0x80
    119A: 1A 3D    SBB   A,[__rX]
    119C: D0 09    JNC   0x11A6
(0339) 				tmpy = 127;
    119E: 56 03 7F MOV   [X+3],0x7F
    11A1: 56 02 00 MOV   [X+2],0x0
    11A4: 80 23    JMP   0x11C8
(0340) 			else if (pwm_y < -128)
    11A6: 62 D0 00 MOV   REG[0xD0],0x0
    11A9: 51 73    MOV   A,[ct+5]
    11AB: 11 80    SUB   A,0x80
    11AD: 51 72    MOV   A,[ct+4]
    11AF: 31 80    XOR   A,0x80
    11B1: 19 7F    SBB   A,0x7F
    11B3: D0 09    JNC   0x11BD
(0341) 				tmpy = -128;
    11B5: 56 03 80 MOV   [X+3],0x80
    11B8: 56 02 FF MOV   [X+2],0xFF
    11BB: 80 0C    JMP   0x11C8
(0342) 			else
(0343) 				tmpy = pwm_y;
    11BD: 62 D0 00 MOV   REG[0xD0],0x0
    11C0: 51 73    MOV   A,[ct+5]
    11C2: 54 03    MOV   [X+3],A
    11C4: 51 72    MOV   A,[ct+4]
    11C6: 54 02    MOV   [X+2],A
(0344) 			
(0345) 			//rotation cw
(0346) 			if (tmpy >= 0)
    11C8: 52 03    MOV   A,[X+3]
    11CA: 11 00    SUB   A,0x0
    11CC: 52 02    MOV   A,[X+2]
    11CE: 31 80    XOR   A,0x80
    11D0: 19 80    SBB   A,0x80
    11D2: C0 6B    JC    0x123E
(0347) 			{
(0348) 				if (rdy != CW)
    11D4: 62 D0 00 MOV   REG[0xD0],0x0
    11D7: 3C 80 01 CMP   [ct+18],0x1
    11DA: A0 1F    JZ    0x11FA
    11DC: 26 02 FE AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0xFE
(0349) 				{
(0350) 					//yah off
(0351) 					bitClear(YAH_DataShadow, YAH_MASK);
(0352) 					YAH_Data_ADDR = YAH_DataShadow;
    11DF: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    11E1: 60 08    MOV   REG[0x8],A
(0353) 					//ybh on
(0354) 					bitSet(YBH_DataShadow, YBH_MASK);
    11E3: 2E 02 08 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0x8
(0355) 					YBH_Data_ADDR = YBH_DataShadow;
    11E6: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    11E8: 60 08    MOV   REG[0x8],A
(0356) 					//ybl off
(0357) 					bitClear(YBL_DataShadow, YBL_MASK);
    11EA: 26 02 DF AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0xDF
(0358) 					YBL_Data_ADDR = YBL_DataShadow;
    11ED: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    11EF: 60 08    MOV   REG[0x8],A
(0359) 					bitClear(YBL_GlobalSelect_ADDR, YBL_MASK);
    11F1: 41 0A DF AND   REG[0xA],0xDF
(0360) 					//yal pwm on
(0361) 					bitSet(YAL_GlobalSelect_ADDR, YAL_MASK);
    11F4: 43 0A 02 OR    REG[0xA],0x2
    11F7: 55 80 01 MOV   [ct+18],0x1
(0362) 					
(0363) 					rdy = CW;
(0364) 				}
(0365) 				
(0366) 				InboxBuff.Y_crs = (BYTE)(tmpy * 2 + 1);
    11FA: 62 D0 00 MOV   REG[0xD0],0x0
    11FD: 52 03    MOV   A,[X+3]
    11FF: 53 48    MOV   [__r1],A
    1201: 65 48    ASL   [__r1]
    1203: 06 48 01 ADD   [__r1],0x1
    1206: 51 48    MOV   A,[__r1]
    1208: 53 6A    MOV   [InboxBuff+3],A
(0367) 				PRS32_2_WriteSeed(BYTETODWRD * (DWORD)InboxBuff.Y_crs);
    120A: 51 6A    MOV   A,[InboxBuff+3]
    120C: 53 46    MOV   [__r3],A
    120E: 50 00    MOV   A,0x0
    1210: 08       PUSH  A
    1211: 08       PUSH  A
    1212: 08       PUSH  A
    1213: 51 46    MOV   A,[__r3]
    1215: 08       PUSH  A
    1216: 50 01    MOV   A,0x1
    1218: 08       PUSH  A
    1219: 08       PUSH  A
    121A: 08       PUSH  A
    121B: 08       PUSH  A
    121C: 7C 2A 1D LCALL 0x2A1D
    121F: 38 FC    ADD   SP,0xFC
    1221: 18       POP   A
    1222: 53 46    MOV   [__r3],A
    1224: 18       POP   A
    1225: 53 47    MOV   [__r2],A
    1227: 18       POP   A
    1228: 53 48    MOV   [__r1],A
    122A: 18       POP   A
    122B: 10       PUSH  X
    122C: 08       PUSH  A
    122D: 51 48    MOV   A,[__r1]
    122F: 08       PUSH  A
    1230: 51 47    MOV   A,[__r2]
    1232: 08       PUSH  A
    1233: 51 46    MOV   A,[__r3]
    1235: 08       PUSH  A
    1236: 7C 06 89 LCALL _PRS32_2_WriteSeed|_PRS32_2_Stop
    1239: 38 FC    ADD   SP,0xFC
    123B: 20       POP   X
(0368) 			}
    123C: 80 A3    JMP   0x12E0
(0369) 			//rotation ccw
(0370) 			else
(0371) 			{
(0372) 				if (rdy != CCW)
    123E: 62 D0 00 MOV   REG[0xD0],0x0
    1241: 3C 80 03 CMP   [ct+18],0x3
    1244: A0 1F    JZ    0x1264
    1246: 26 02 F7 AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0xF7
(0373) 				{
(0374) 					//ybh off
(0375) 					bitClear(YBH_DataShadow, YBH_MASK);
(0376) 					YBH_Data_ADDR = YBH_DataShadow;
    1249: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    124B: 60 08    MOV   REG[0x8],A
(0377) 					//yah on
(0378) 					bitSet(YAH_DataShadow, YAH_MASK);
    124D: 2E 02 01 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0x1
(0379) 					YAH_Data_ADDR = YAH_DataShadow;
    1250: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    1252: 60 08    MOV   REG[0x8],A
(0380) 					//yal off
(0381) 					bitClear(YAL_DataShadow, YAL_MASK);
    1254: 26 02 FD AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0xFD
(0382) 					YAL_Data_ADDR = YAL_DataShadow;
    1257: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    1259: 60 08    MOV   REG[0x8],A
(0383) 					bitClear(YAL_GlobalSelect_ADDR, YAL_MASK);
    125B: 41 0A FD AND   REG[0xA],0xFD
(0384) 					//ybl pwm on
(0385) 					bitSet(YBL_GlobalSelect_ADDR, YBL_MASK);
    125E: 43 0A 20 OR    REG[0xA],0x20
    1261: 55 80 03 MOV   [ct+18],0x3
(0386) 					
(0387) 					rdy = CCW;
(0388) 				}
(0389) 				
(0390) 				InboxBuff.Y_crs = (BYTE)(tmpy * (-2) - 1);
    1264: 62 D0 00 MOV   REG[0xD0],0x0
    1267: 52 03    MOV   A,[X+3]
    1269: 53 48    MOV   [__r1],A
    126B: 52 02    MOV   A,[X+2]
    126D: 53 49    MOV   [__r0],A
    126F: 55 46 FE MOV   [__r3],0xFE
    1272: 55 47 FF MOV   [__r2],0xFF
    1275: 55 3D 00 MOV   [__rX],0x0
    1278: 55 3C 00 MOV   [__rY],0x0
    127B: 3C 47 00 CMP   [__r2],0x0
    127E: B0 06    JNZ   0x1285
    1280: 3C 46 00 CMP   [__r3],0x0
    1283: A0 1A    JZ    0x129E
    1285: 70 FB    AND   F,0xFB
    1287: 6E 47    RRC   [__r2]
    1289: 6E 46    RRC   [__r3]
    128B: D0 0C    JNC   0x1298
    128D: 62 D0 00 MOV   REG[0xD0],0x0
    1290: 51 48    MOV   A,[__r1]
    1292: 04 3D    ADD   [__rX],A
    1294: 51 49    MOV   A,[__r0]
    1296: 0C 3C    ADC   [__rY],A
    1298: 65 48    ASL   [__r1]
    129A: 6B 49    RLC   [__r0]
    129C: 8F DE    JMP   0x127B
    129E: 5F 48 3D MOV   [__r1],[__rX]
    12A1: 5F 49 3C MOV   [__r0],[__rY]
    12A4: 62 D0 00 MOV   REG[0xD0],0x0
    12A7: 16 48 01 SUB   [__r1],0x1
    12AA: 51 48    MOV   A,[__r1]
    12AC: 53 6A    MOV   [InboxBuff+3],A
(0391) 				PRS32_2_WriteSeed(BYTETODWRD * (DWORD)InboxBuff.Y_crs);
    12AE: 51 6A    MOV   A,[InboxBuff+3]
    12B0: 53 46    MOV   [__r3],A
    12B2: 50 00    MOV   A,0x0
    12B4: 08       PUSH  A
    12B5: 08       PUSH  A
    12B6: 08       PUSH  A
    12B7: 51 46    MOV   A,[__r3]
    12B9: 08       PUSH  A
    12BA: 50 01    MOV   A,0x1
    12BC: 08       PUSH  A
    12BD: 08       PUSH  A
    12BE: 08       PUSH  A
    12BF: 08       PUSH  A
    12C0: 7C 2A 1D LCALL 0x2A1D
    12C3: 38 FC    ADD   SP,0xFC
    12C5: 18       POP   A
    12C6: 53 46    MOV   [__r3],A
    12C8: 18       POP   A
    12C9: 53 47    MOV   [__r2],A
    12CB: 18       POP   A
    12CC: 53 48    MOV   [__r1],A
    12CE: 18       POP   A
    12CF: 10       PUSH  X
    12D0: 08       PUSH  A
    12D1: 51 48    MOV   A,[__r1]
    12D3: 08       PUSH  A
    12D4: 51 47    MOV   A,[__r2]
    12D6: 08       PUSH  A
    12D7: 51 46    MOV   A,[__r3]
    12D9: 08       PUSH  A
    12DA: 7C 06 89 LCALL _PRS32_2_WriteSeed|_PRS32_2_Stop
    12DD: 38 FC    ADD   SP,0xFC
    12DF: 20       POP   X
(0392) 			}
(0393) 			
(0394) 			bitSet(InboxBuff.InboxFlag, I2CIO_UPDATE);
    12E0: 62 D0 00 MOV   REG[0xD0],0x0
    12E3: 2E 67 20 OR    [InboxBuff],0x20
(0395) 		}
(0396) 		//end Y
(0397) 		sw++;
    12E6: 62 D0 00 MOV   REG[0xD0],0x0
    12E9: 76 7E    INC   [ct+16]
(0398) 	}
    12EB: 83 25    JMP   0x1611
(0399) 	
(0400) 	else
(0401) 	{
(0402) 		//Z motor
(0403) 		if (bitCheck(OutboxBuff.TBrakeFlag, STOP_Z))
    12ED: 62 D0 00 MOV   REG[0xD0],0x0
    12F0: 47 5A 04 TST   [OutboxBuff+1],0x4
    12F3: A0 09    JZ    0x12FD
    12F5: 56 01 01 MOV   [X+1],0x1
    12F8: 56 00 00 MOV   [X+0],0x0
    12FB: 80 07    JMP   0x1303
    12FD: 56 01 00 MOV   [X+1],0x0
    1300: 56 00 00 MOV   [X+0],0x0
    1303: 3D 00 00 CMP   [X+0],0x0
    1306: B0 06    JNZ   0x130D
    1308: 3D 01 00 CMP   [X+1],0x0
    130B: A0 84    JZ    0x1390
(0404) 		{
(0405) 			if (countz < STOPTIME)
    130D: 62 D0 00 MOV   REG[0xD0],0x0
    1310: 3C 7D 64 CMP   [ct+15],0x64
    1313: D0 62    JNC   0x1376
    1315: 47 68 04 TST   [InboxBuff+1],0x4
    1318: A0 09    JZ    0x1322
    131A: 56 03 01 MOV   [X+3],0x1
    131D: 56 02 00 MOV   [X+2],0x0
    1320: 80 07    JMP   0x1328
    1322: 56 03 00 MOV   [X+3],0x0
    1325: 56 02 00 MOV   [X+2],0x0
    1328: 3D 02 00 CMP   [X+2],0x0
    132B: B0 43    JNZ   0x136F
    132D: 3D 03 00 CMP   [X+3],0x0
    1330: B0 3E    JNZ   0x136F
(0406) 			{
(0407) 				if (!bitCheck(InboxBuff.CBrakeFlag, STOP_Z))
(0408) 				{
(0409) 					//zah off
(0410) 					bitClear(ZAH_DataShadow, ZAH_MASK);
    1332: 62 D0 00 MOV   REG[0xD0],0x0
    1335: 26 02 FB AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0xFB
(0411) 					ZAH_Data_ADDR = ZAH_DataShadow;
    1338: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    133A: 60 08    MOV   REG[0x8],A
(0412) 					//zbh off
(0413) 					bitClear(ZBH_DataShadow, ZBH_MASK);
    133C: 26 02 BF AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0xBF
(0414) 					ZBH_Data_ADDR = ZBH_DataShadow;
    133F: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    1341: 60 08    MOV   REG[0x8],A
(0415) 					//zal off
(0416) 					bitClear(ZAL_DataShadow, ZAL_MASK);
    1343: 26 02 7F AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0x7F
(0417) 					ZAL_Data_ADDR = ZAL_DataShadow;
    1346: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    1348: 60 08    MOV   REG[0x8],A
(0418) 					bitClear(ZAL_GlobalSelect_ADDR, ZAL_MASK);
    134A: 41 0A 7F AND   REG[0xA],0x7F
    134D: 26 00 7F AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx],0x7F
(0419) 					//zbl off
(0420) 					bitClear(ZBL_DataShadow, ZBL_MASK);
(0421) 					ZBL_Data_ADDR = ZBL_DataShadow;
    1350: 51 00    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx]
    1352: 60 00    MOV   REG[0x0],A
(0422) 					bitClear(ZBL_GlobalSelect_ADDR, ZBL_MASK);
    1354: 41 02 7F AND   REG[0x2],0x7F
    1357: 2E 68 04 OR    [InboxBuff+1],0x4
    135A: 55 75 00 MOV   [ct+7],0x0
    135D: 55 74 00 MOV   [ct+6],0x0
    1360: 55 7B 00 MOV   [ct+13],0x0
    1363: 55 7A 00 MOV   [ct+12],0x0
    1366: 55 6B 00 MOV   [InboxBuff+4],0x0
    1369: 55 7F 00 MOV   [ct+17],0x0
    136C: 2E 67 20 OR    [InboxBuff],0x20
(0423) 					
(0424) 					bitSet(InboxBuff.CBrakeFlag, STOP_Z);
(0425) 					pwm_z = 0;
(0426) 					iz = 0;
(0427) 					InboxBuff.Z_crs = 0;
(0428) 					rdz = STOP;
(0429) 					bitSet(InboxBuff.InboxFlag, I2CIO_UPDATE);
(0430) 				}
(0431) 				countz++;
    136F: 62 D0 00 MOV   REG[0xD0],0x0
    1372: 76 7D    INC   [ct+15]
(0432) 			}
    1374: 82 96    JMP   0x160B
(0433) 			else if (countz == STOPTIME)
    1376: 62 D0 00 MOV   REG[0xD0],0x0
    1379: 3C 7D 64 CMP   [ct+15],0x64
    137C: B2 8E    JNZ   0x160B
    137E: 2E 02 80 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0x80
(0434) 			{
(0435) 				//zal on
(0436) 				bitSet(ZAL_DataShadow, ZAL_MASK);
(0437) 				ZAL_Data_ADDR = ZAL_DataShadow;
    1381: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    1383: 60 08    MOV   REG[0x8],A
    1385: 2E 00 80 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx],0x80
(0438) 				//zbl on
(0439) 				bitSet(ZBL_DataShadow, ZBL_MASK);
(0440) 				ZBL_Data_ADDR = ZBL_DataShadow;
    1388: 51 00    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx]
    138A: 60 00    MOV   REG[0x0],A
    138C: 76 7D    INC   [ct+15]
(0441) 				
(0442) 				countz++;
(0443) 			}
(0444) 			
(0445) 		}
    138E: 82 7C    JMP   0x160B
(0446) 		else
(0447) 		{
(0448) 			INT pz = ((CHAR)OutboxBuff.Z_trs - pwm_z);
    1390: 62 D0 00 MOV   REG[0xD0],0x0
    1393: 51 5D    MOV   A,[OutboxBuff+4]
    1395: 53 48    MOV   [__r1],A
    1397: 55 49 00 MOV   [__r0],0x0
    139A: 47 48 80 TST   [__r1],0x80
    139D: A0 04    JZ    0x13A2
    139F: 55 49 FF MOV   [__r0],0xFF
    13A2: 62 D0 00 MOV   REG[0xD0],0x0
    13A5: 51 48    MOV   A,[__r1]
    13A7: 12 75    SUB   A,[ct+7]
    13A9: 54 05    MOV   [X+5],A
    13AB: 51 49    MOV   A,[__r0]
    13AD: 1A 74    SBB   A,[ct+6]
    13AF: 54 04    MOV   [X+4],A
(0449) 			INT tmpz = 0;
    13B1: 56 03 00 MOV   [X+3],0x0
FILE: C:\Users\hikari\DOCUME~1\PSOCDE~1.4PR\CATCHR~1\CATCHR~1\CATCHR~1\main.c
(0455) 				countz = 0;
    14A7: 62 D0 00 MOV   REG[0xD0],0x0
    14AA: 55 7D 00 MOV   [ct+15],0x0
    14AD: 26 68 FB AND   [InboxBuff+1],0xFB
(0456) 				bitClear(InboxBuff.CBrakeFlag, STOP_Z);
(0457) 			}
(0458) 			
(0459) 			if (pwm_z > 127)
    14B0: 62 D0 00 MOV   REG[0xD0],0x0
    14B3: 50 7F    MOV   A,0x7F
    14B5: 12 75    SUB   A,[ct+7]
    14B7: 51 74    MOV   A,[ct+6]
    14B9: 31 80    XOR   A,0x80
    14BB: 53 3D    MOV   [__rX],A
    14BD: 50 80    MOV   A,0x80
    14BF: 1A 3D    SBB   A,[__rX]
    14C1: D0 09    JNC   0x14CB
(0460) 				tmpz = 127;
    14C3: 56 03 7F MOV   [X+3],0x7F
    14C6: 56 02 00 MOV   [X+2],0x0
    14C9: 80 23    JMP   0x14ED
(0461) 			else if (pwm_z < -128)
    14CB: 62 D0 00 MOV   REG[0xD0],0x0
    14CE: 51 75    MOV   A,[ct+7]
    14D0: 11 80    SUB   A,0x80
    14D2: 51 74    MOV   A,[ct+6]
    14D4: 31 80    XOR   A,0x80
    14D6: 19 7F    SBB   A,0x7F
    14D8: D0 09    JNC   0x14E2
(0462) 				tmpz = -128;
    14DA: 56 03 80 MOV   [X+3],0x80
    14DD: 56 02 FF MOV   [X+2],0xFF
    14E0: 80 0C    JMP   0x14ED
(0463) 			else
(0464) 				tmpz = pwm_z;
    14E2: 62 D0 00 MOV   REG[0xD0],0x0
    14E5: 51 75    MOV   A,[ct+7]
    14E7: 54 03    MOV   [X+3],A
    14E9: 51 74    MOV   A,[ct+6]
    14EB: 54 02    MOV   [X+2],A
(0465) 			
(0466) 			//rotation cw
(0467) 			if (tmpz >= 0)
    14ED: 52 03    MOV   A,[X+3]
    14EF: 11 00    SUB   A,0x0
    14F1: 52 02    MOV   A,[X+2]
    14F3: 31 80    XOR   A,0x80
    14F5: 19 80    SBB   A,0x80
    14F7: C0 6B    JC    0x1563
(0468) 			{
(0469) 				if (rdz != CW)
    14F9: 62 D0 00 MOV   REG[0xD0],0x0
    14FC: 3C 7F 01 CMP   [ct+17],0x1
    14FF: A0 1F    JZ    0x151F
    1501: 26 02 FB AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0xFB
(0470) 				{
(0471) 					//zah off
(0472) 					bitClear(ZAH_DataShadow, ZAH_MASK);
(0473) 					ZAH_Data_ADDR = ZAH_DataShadow;
    1504: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    1506: 60 08    MOV   REG[0x8],A
(0474) 					//zbh on
(0475) 					bitSet(ZBH_DataShadow, ZBH_MASK);
    1508: 2E 02 40 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0x40
(0476) 					ZBH_Data_ADDR = ZBH_DataShadow;
    150B: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    150D: 60 08    MOV   REG[0x8],A
    150F: 26 00 7F AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx],0x7F
(0477) 					//zbl off
(0478) 					bitClear(ZBL_DataShadow, ZBL_MASK);
(0479) 					ZBL_Data_ADDR = ZBL_DataShadow;
    1512: 51 00    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx]
    1514: 60 00    MOV   REG[0x0],A
(0480) 					bitClear(ZBL_GlobalSelect_ADDR, ZBL_MASK);
    1516: 41 02 7F AND   REG[0x2],0x7F
(0481) 					//zal pwm on
(0482) 					bitSet(ZAL_GlobalSelect_ADDR, ZAL_MASK);
    1519: 43 0A 80 OR    REG[0xA],0x80
    151C: 55 7F 01 MOV   [ct+17],0x1
(0483) 					
(0484) 					rdz = CW;
(0485) 				}
(0486) 				
(0487) 				InboxBuff.Z_crs = (BYTE)(tmpz * 2 + 1);
    151F: 62 D0 00 MOV   REG[0xD0],0x0
    1522: 52 03    MOV   A,[X+3]
    1524: 53 48    MOV   [__r1],A
    1526: 65 48    ASL   [__r1]
    1528: 06 48 01 ADD   [__r1],0x1
    152B: 51 48    MOV   A,[__r1]
    152D: 53 6B    MOV   [InboxBuff+4],A
(0488) 				PRS32_3_WriteSeed(BYTETODWRD * (DWORD)InboxBuff.Z_crs);
    152F: 51 6B    MOV   A,[InboxBuff+4]
    1531: 53 46    MOV   [__r3],A
    1533: 50 00    MOV   A,0x0
    1535: 08       PUSH  A
    1536: 08       PUSH  A
    1537: 08       PUSH  A
    1538: 51 46    MOV   A,[__r3]
    153A: 08       PUSH  A
    153B: 50 01    MOV   A,0x1
    153D: 08       PUSH  A
    153E: 08       PUSH  A
    153F: 08       PUSH  A
    1540: 08       PUSH  A
    1541: 7C 2A 1D LCALL 0x2A1D
    1544: 38 FC    ADD   SP,0xFC
    1546: 18       POP   A
    1547: 53 46    MOV   [__r3],A
    1549: 18       POP   A
    154A: 53 47    MOV   [__r2],A
    154C: 18       POP   A
    154D: 53 48    MOV   [__r1],A
    154F: 18       POP   A
    1550: 10       PUSH  X
    1551: 08       PUSH  A
    1552: 51 48    MOV   A,[__r1]
    1554: 08       PUSH  A
    1555: 51 47    MOV   A,[__r2]
    1557: 08       PUSH  A
    1558: 51 46    MOV   A,[__r3]
    155A: 08       PUSH  A
    155B: 7C 06 47 LCALL _PRS32_3_WriteSeed|_PRS32_3_Stop
    155E: 38 FC    ADD   SP,0xFC
    1560: 20       POP   X
(0489) 			}
    1561: 80 A3    JMP   0x1605
(0490) 			//rotation ccw
(0491) 			else
(0492) 			{
(0493) 				if (rdz != CCW)
    1563: 62 D0 00 MOV   REG[0xD0],0x0
    1566: 3C 7F 03 CMP   [ct+17],0x3
    1569: A0 1F    JZ    0x1589
    156B: 26 02 BF AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0xBF
(0494) 				{
(0495) 					//zbh off
(0496) 					bitClear(ZBH_DataShadow, ZBH_MASK);
(0497) 					ZBH_Data_ADDR = ZBH_DataShadow;
    156E: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    1570: 60 08    MOV   REG[0x8],A
(0498) 					//zah on
(0499) 					bitSet(ZAH_DataShadow, ZAH_MASK);
    1572: 2E 02 04 OR    [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0x4
(0500) 					ZAH_Data_ADDR = ZAH_DataShadow;
    1575: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    1577: 60 08    MOV   REG[0x8],A
(0501) 					//zal off
(0502) 					bitClear(ZAL_DataShadow, ZAL_MASK);
    1579: 26 02 7F AND   [sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2],0x7F
(0503) 					ZAL_Data_ADDR = ZAL_DataShadow;
    157C: 51 02    MOV   A,[sw|countz|county|countx|iz|iy|ix|pwm_z|pwm_y|pwm_x|rdz|rdy|rdx+2]
    157E: 60 08    MOV   REG[0x8],A
(0504) 					bitClear(ZAL_GlobalSelect_ADDR, ZAL_MASK);
    1580: 41 0A 7F AND   REG[0xA],0x7F
(0505) 					//zbl pwm on
(0506) 					bitSet(ZBL_GlobalSelect_ADDR, ZBL_MASK);
    1583: 43 02 80 OR    REG[0x2],0x80
    1586: 55 7F 03 MOV   [ct+17],0x3
(0507) 					
(0508) 					rdz = CCW;
(0509) 				}
(0510) 				
(0511) 				InboxBuff.Z_crs = (BYTE)(tmpz * (-2) - 1);
    1589: 62 D0 00 MOV   REG[0xD0],0x0
    158C: 52 03    MOV   A,[X+3]
    158E: 53 48    MOV   [__r1],A
    1590: 52 02    MOV   A,[X+2]
    1592: 53 49    MOV   [__r0],A
    1594: 55 46 FE MOV   [__r3],0xFE
    1597: 55 47 FF MOV   [__r2],0xFF
    159A: 55 3D 00 MOV   [__rX],0x0
    159D: 55 3C 00 MOV   [__rY],0x0
    15A0: 3C 47 00 CMP   [__r2],0x0
    15A3: B0 06    JNZ   0x15AA
    15A5: 3C 46 00 CMP   [__r3],0x0
    15A8: A0 1A    JZ    0x15C3
    15AA: 70 FB    AND   F,0xFB
    15AC: 6E 47    RRC   [__r2]
    15AE: 6E 46    RRC   [__r3]
    15B0: D0 0C    JNC   0x15BD
    15B2: 62 D0 00 MOV   REG[0xD0],0x0
    15B5: 51 48    MOV   A,[__r1]
    15B7: 04 3D    ADD   [__rX],A
    15B9: 51 49    MOV   A,[__r0]
    15BB: 0C 3C    ADC   [__rY],A
    15BD: 65 48    ASL   [__r1]
    15BF: 6B 49    RLC   [__r0]
    15C1: 8F DE    JMP   0x15A0
    15C3: 5F 48 3D MOV   [__r1],[__rX]
    15C6: 5F 49 3C MOV   [__r0],[__rY]
    15C9: 62 D0 00 MOV   REG[0xD0],0x0
    15CC: 16 48 01 SUB   [__r1],0x1
    15CF: 51 48    MOV   A,[__r1]
    15D1: 53 6B    MOV   [InboxBuff+4],A
(0512) 				PRS32_3_WriteSeed(BYTETODWRD * (DWORD)InboxBuff.Z_crs);
    15D3: 51 6B    MOV   A,[InboxBuff+4]
    15D5: 53 46    MOV   [__r3],A
    15D7: 50 00    MOV   A,0x0
    15D9: 08       PUSH  A
    15DA: 08       PUSH  A
    15DB: 08       PUSH  A
    15DC: 51 46    MOV   A,[__r3]
    15DE: 08       PUSH  A
    15DF: 50 01    MOV   A,0x1
    15E1: 08       PUSH  A
    15E2: 08       PUSH  A
    15E3: 08       PUSH  A
    15E4: 08       PUSH  A
    15E5: 7C 2A 1D LCALL 0x2A1D
    15E8: 38 FC    ADD   SP,0xFC
    15EA: 18       POP   A
    15EB: 53 46    MOV   [__r3],A
    15ED: 18       POP   A
    15EE: 53 47    MOV   [__r2],A
    15F0: 18       POP   A
    15F1: 53 48    MOV   [__r1],A
    15F3: 18       POP   A
    15F4: 10       PUSH  X
    15F5: 08       PUSH  A
    15F6: 51 48    MOV   A,[__r1]
    15F8: 08       PUSH  A
    15F9: 51 47    MOV   A,[__r2]
    15FB: 08       PUSH  A
    15FC: 51 46    MOV   A,[__r3]
    15FE: 08       PUSH  A
    15FF: 7C 06 47 LCALL _PRS32_3_WriteSeed|_PRS32_3_Stop
    1602: 38 FC    ADD   SP,0xFC
    1604: 20       POP   X
(0513) 			}
(0514) 			
(0515) 			bitSet(InboxBuff.InboxFlag, I2CIO_UPDATE);
    1605: 62 D0 00 MOV   REG[0xD0],0x0
    1608: 2E 67 20 OR    [InboxBuff],0x20
(0516) 		}
(0517) 		//end Z
(0518) 		sw = 0;
    160B: 62 D0 00 MOV   REG[0xD0],0x0
    160E: 55 7E 00 MOV   [ct+16],0x0
(0519) 	}
(0520) 	
(0521) 	ct++;
    1611: 62 D0 00 MOV   REG[0xD0],0x0
    1614: 76 6F    INC   [ct+1]
    1616: 0E 6E 00 ADC   [ct],0x0
    1619: 38 F8    ADD   SP,0xF8
    161B: 20       POP   X
    161C: 18       POP   A
    161D: 53 3B    MOV   [__rZ],A
    161F: 18       POP   A
    1620: 53 3C    MOV   [__rY],A
    1622: 18       POP   A
    1623: 53 3D    MOV   [__rX],A
    1625: 18       POP   A
    1626: 53 3E    MOV   [__r11],A
    1628: 18       POP   A
    1629: 53 3F    MOV   [__r10],A
    162B: 18       POP   A
    162C: 53 40    MOV   [__r9],A
    162E: 18       POP   A
    162F: 53 41    MOV   [__r8],A
    1631: 18       POP   A
    1632: 53 42    MOV   [__r7],A
    1634: 18       POP   A
    1635: 53 43    MOV   [__r6],A
    1637: 18       POP   A
    1638: 53 44    MOV   [__r5],A
    163A: 18       POP   A
    163B: 53 45    MOV   [__r4],A
    163D: 18       POP   A
    163E: 53 46    MOV   [__r3],A
    1640: 18       POP   A
    1641: 53 47    MOV   [__r2],A
    1643: 18       POP   A
    1644: 53 48    MOV   [__r1],A
    1646: 18       POP   A
    1647: 53 49    MOV   [__r0],A
    1649: 18       POP   A
    164A: 60 D5    MOV   REG[0xD5],A
    164C: 18       POP   A
    164D: 60 D4    MOV   REG[0xD4],A
    164F: 18       POP   A
    1650: 60 D3    MOV   REG[0xD3],A
    1652: 18       POP   A
    1653: 60 D0    MOV   REG[0xD0],A
    1655: 18       POP   A
    1656: 7E       RETI  
(0522) }
(0523) 
(0524) int putchar(char c)
(0525) {
_putchar:
  str                  --> X+0
  c                    --> X-4
    1657: 10       PUSH  X
    1658: 4F       MOV   X,SP
    1659: 38 02    ADD   SP,0x2
(0526) 	char str[2] = {0};
    165B: 62 D0 00 MOV   REG[0xD0],0x0
    165E: 55 48 A0 MOV   [__r1],0xA0
    1661: 55 49 01 MOV   [__r0],0x1
    1664: 5A 46    MOV   [__r3],X
    1666: 62 D5 07 MOV   REG[0xD5],0x7
    1669: 10       PUSH  X
    166A: 55 3D 00 MOV   [__rX],0x0
    166D: 51 49    MOV   A,[__r0]
    166F: 58 48    MOV   X,[__r1]
    1671: 08       PUSH  A
    1672: 28       ROMX  
    1673: 62 D0 00 MOV   REG[0xD0],0x0
    1676: 3F 46    MVI   [__r3],A
    1678: 18       POP   A
    1679: 75       INC   X
    167A: 09 00    ADC   A,0x0
    167C: 76 3D    INC   [__rX]
    167E: 3C 3D 02 CMP   [__rX],0x2
    1681: BF EF    JNZ   0x1671
    1683: 20       POP   X
(0527) 	str[0] = c;
    1684: 52 FC    MOV   A,[X-4]
    1686: 54 00    MOV   [X+0],A
(0528) 	LCD_1_PrString(str);
    1688: 10       PUSH  X
    1689: 50 07    MOV   A,0x7
    168B: 08       PUSH  A
    168C: 18       POP   A
    168D: 7C 07 3E LCALL _LCD_1_PrHexInt|LCD_1_PrString|_LCD_1_PrString
    1690: 20       POP   X
(0529) 	return c;
    1691: 62 D0 00 MOV   REG[0xD0],0x0
    1694: 52 FC    MOV   A,[X-4]
    1696: 53 48    MOV   [__r1],A
    1698: 55 49 00 MOV   [__r0],0x0
    169B: 38 FE    ADD   SP,0xFE
    169D: 20       POP   X
    169E: 7F       RET   
FILE: C:\Users\hikari\DOCUME~1\PSOCDE~1.4PR\CATCHR~1\CATCHR~1\CATCHR~1\lib\mbm_1.c
(0001) //*****************************************************************************
(0002) //*****************************************************************************
(0003) //  FILENAME: MBM_1.c
(0004) //  Version: 1.1, Updated on 2013/5/19 at 10:43:55
(0005) //  Generated by PSoC Designer 5.4.2946
(0006) //
(0007) //  DESCRIPTION: MBM_1 User Module C Language implementation file
(0008) //-----------------------------------------------------------------------------
(0009) //  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
(0010) //*****************************************************************************
(0011) //*****************************************************************************
(0012) 
(0013) #include "MBM_1.h"
(0014) 
(0015) // ---------------------------------------------------------------------------
(0016) //
(0017) // MBM_1_InitializeMailbox() - initializes mailbox
(0018) //
(0019) // arguments: 
(0020) //      pointer mailbox to initialize
(0021) //
(0022) // ---------------------------------------------------------------------------
(0023) void MBM_1_InitializeMailbox(void)
(0024) {
(0025)     // initialize flags
(0026)     MBM_1_MyMailbox.MailboxConfig0 &= ~MBM_1_BUSY ;             // clear busy flag
_MBM_1_InitializeMailbox:
    24C4: 62 D0 00 MOV   REG[0xD0],0x0
    24C7: 26 26 3F AND   [MBM_1_MyMailbox],0x3F
(0027)     MBM_1_MyMailbox.MailboxConfig0 &= ~MBM_1_DIRTY ;            // clear dirty flag
(0028)     // set mailbox size as identifier
(0029)     MBM_1_MyMailbox.MailboxConfig0 = sizeof(MBM_1_MyMailbox) ;           
    24CA: 55 26 15 MOV   [MBM_1_MyMailbox],0x15
    24CD: 7F       RET   
(0030) }
(0031) 
(0032) // ---------------------------------------------------------------------------
(0033) //
(0034) // MBM_1_SetBusyFlag() - sets BUSY flag for mailbox.
(0035) //
(0036) // arguments: 
(0037) //      pointer mailbox where the BUSY flag needs to be set
(0038) //
(0039) // ---------------------------------------------------------------------------
(0040) void MBM_1_SetBusyFlag(void)
(0041) {
_MBM_1_SetBusyFlag:
    24CE: 2E 26 80 OR    [MBM_1_MyMailbox],0x80
    24D1: 7F       RET   
(0042)     MBM_1_MyMailbox.MailboxConfig0 |= MBM_1_BUSY ;        /* Set busy flag. */
(0043) }
(0044) 
(0045) // ---------------------------------------------------------------------------
(0046) //
(0047) // MBM_1_ClearBusyFlag() - clears BUSY flag in desired mailbox.
(0048) //
(0049) // arguments: 
(0050) //      pointer mailbox where the BUSY flag needs to be cleared
(0051) //
(0052) // ---------------------------------------------------------------------------
(0053) void MBM_1_ClearBusyFlag(void)
(0054) {
_MBM_1_ClearBusyFlag:
    24D2: 26 26 7F AND   [MBM_1_MyMailbox],0x7F
    24D5: 7F       RET   
(0055)    MBM_1_MyMailbox.MailboxConfig0 &= ~MBM_1_BUSY ;        /* Set busy flag. */
(0056) }
(0057) 
(0058) // ---------------------------------------------------------------------------
(0059) //
(0060) // MBM_1_CheckDirtyFlag() - checks for DIRTY flag in desired mailbox.
(0061) //
(0062) // arguments: 
(0063) //      pointer mailbox where the check for DIRTY flag needs to be done
(0064) //
(0065) // ---------------------------------------------------------------------------
(0066) BYTE MBM_1_CheckDirtyFlag(void)
(0067) {
_MBM_1_CheckDirtyFlag:
    24D6: 47 26 40 TST   [MBM_1_MyMailbox],0x40
    24D9: A0 05    JZ    0x24DF
    24DB: 50 01    MOV   A,0x1
    24DD: 80 06    JMP   0x24E4
(0068)     if(MBM_1_MyMailbox.MailboxConfig0 & MBM_1_DIRTY)
(0069) 		return TRUE;
(0070) 	else
(0071) 		return FALSE;
    24DF: 62 D0 00 MOV   REG[0xD0],0x0
(0072) }
(0073) 
(0074) // ---------------------------------------------------------------------------
(0075) // MBM_1 global mailbox variable in RAM and pointer to this mailbox
(0076) // ---------------------------------------------------------------------------
(0077) MBM_1_Mailbox MBM_1_MyMailbox;
(0078) MBM_1_Mailbox* MBM_1_pMyMailbox;
    24E2: 50 00    MOV   A,0x0
    24E4: 7F       RET   
_strlenLMM:
    2AA3: 62 D0 00 MOV   REG[0xD0],0x0
    2AA6: 10       PUSH  X
    2AA7: 4F       MOV   X,SP
    2AA8: 52 FB    MOV   A,[X-5]
    2AAA: 60 D4    MOV   REG[0xD4],A
    2AAC: 80 03    JMP   0x2AB0
_strlen:
    2AAE: 10       PUSH  X
    2AAF: 4F       MOV   X,SP
    2AB0: 55 48 00 MOV   [__r1],0x0
    2AB3: 55 49 00 MOV   [__r0],0x0
    2AB6: 52 FC    MOV   A,[X-4]
    2AB8: 53 47    MOV   [__r2],A
    2ABA: 3E 47    MVI   A,[__r2]
    2ABC: 39 00    CMP   A,0x0
    2ABE: A0 08    JZ    0x2AC7
    2AC0: 76 48    INC   [__r1]
    2AC2: 0E 49 00 ADC   [__r0],0x0
    2AC5: 8F F4    JMP   0x2ABA
    2AC7: 20       POP   X
    2AC8: 7F       RET   
_cstrlenLMM:
    2AC9: 62 D0 00 MOV   REG[0xD0],0x0
_cstrlen:
    2ACC: 10       PUSH  X
    2ACD: 4F       MOV   X,SP
    2ACE: 55 48 00 MOV   [__r1],0x0
    2AD1: 55 49 00 MOV   [__r0],0x0
    2AD4: 10       PUSH  X
    2AD5: 52 FB    MOV   A,[X-5]
    2AD7: 59 FC    MOV   X,[X-4]
    2AD9: 28       ROMX  
    2ADA: 20       POP   X
    2ADB: 39 00    CMP   A,0x0
    2ADD: A0 0D    JZ    0x2AEB
    2ADF: 76 48    INC   [__r1]
    2AE1: 0E 49 00 ADC   [__r0],0x0
    2AE4: 77 FC    INC   [X-4]
    2AE6: 0F FB 00 ADC   [X-5],0x0
    2AE9: 8F EA    JMP   0x2AD4
    2AEB: 20       POP   X
    2AEC: 7F       RET   
__plcall:
    2AED: 53 3D    MOV   [__rX],A
    2AEF: 28       ROMX  
    2AF0: 08       PUSH  A
    2AF1: 51 3D    MOV   A,[__rX]
    2AF3: 75       INC   X
    2AF4: 09 00    ADC   A,0x0
    2AF6: 28       ROMX  
    2AF7: 08       PUSH  A
    2AF8: 7F       RET   
_itoa:
    2AF9: 10       PUSH  X
    2AFA: 4F       MOV   X,SP
    2AFB: 38 09    ADD   SP,0x9
    2AFD: 52 FA    MOV   A,[X-6]
    2AFF: 54 03    MOV   [X+3],A
    2B01: 52 F9    MOV   A,[X-7]
    2B03: 54 02    MOV   [X+2],A
    2B05: 3D F9 00 CMP   [X-7],0x0
    2B08: B0 2F    JNZ   0x2B38
    2B0A: 3D FA 00 CMP   [X-6],0x0
    2B0D: B0 2A    JNZ   0x2B38
    2B0F: 62 D0 00 MOV   REG[0xD0],0x0
    2B12: 52 FC    MOV   A,[X-4]
    2B14: 53 48    MOV   [__r1],A
    2B16: 52 FB    MOV   A,[X-5]
    2B18: 60 D5    MOV   REG[0xD5],A
    2B1A: 50 30    MOV   A,0x30
    2B1C: 3F 48    MVI   [__r1],A
    2B1E: 52 FC    MOV   A,[X-4]
    2B20: 01 01    ADD   A,0x1
    2B22: 53 48    MOV   [__r1],A
    2B24: 52 FB    MOV   A,[X-5]
    2B26: 09 00    ADC   A,0x0
    2B28: 60 D5    MOV   REG[0xD5],A
    2B2A: 50 00    MOV   A,0x0
    2B2C: 3F 48    MVI   [__r1],A
    2B2E: 52 FC    MOV   A,[X-4]
    2B30: 53 48    MOV   [__r1],A
    2B32: 52 FB    MOV   A,[X-5]
    2B34: 53 49    MOV   [__r0],A
    2B36: 81 97    JMP   0x2CCE
    2B38: 52 FA    MOV   A,[X-6]
    2B3A: 11 00    SUB   A,0x0
    2B3C: 52 F9    MOV   A,[X-7]
    2B3E: 31 80    XOR   A,0x80
    2B40: 19 80    SBB   A,0x80
    2B42: D0 29    JNC   0x2B6C
    2B44: 3D F7 00 CMP   [X-9],0x0
    2B47: B0 24    JNZ   0x2B6C
    2B49: 3D F8 0A CMP   [X-8],0xA
    2B4C: B0 1F    JNZ   0x2B6C
    2B4E: 56 06 01 MOV   [X+6],0x1
    2B51: 62 D0 00 MOV   REG[0xD0],0x0
    2B54: 52 03    MOV   A,[X+3]
    2B56: 73       CPL   A
    2B57: 53 48    MOV   [__r1],A
    2B59: 52 02    MOV   A,[X+2]
    2B5B: 73       CPL   A
    2B5C: 53 49    MOV   [__r0],A
    2B5E: 51 48    MOV   A,[__r1]
    2B60: 01 01    ADD   A,0x1
    2B62: 54 03    MOV   [X+3],A
    2B64: 51 49    MOV   A,[__r0]
    2B66: 09 00    ADC   A,0x0
    2B68: 54 02    MOV   [X+2],A
    2B6A: 80 04    JMP   0x2B6F
    2B6C: 56 06 00 MOV   [X+6],0x0
    2B6F: 52 FC    MOV   A,[X-4]
    2B71: 54 01    MOV   [X+1],A
    2B73: 52 FB    MOV   A,[X-5]
    2B75: 54 00    MOV   [X+0],A
    2B77: 62 D0 00 MOV   REG[0xD0],0x0
    2B7A: 52 F7    MOV   A,[X-9]
    2B7C: 08       PUSH  A
    2B7D: 52 F8    MOV   A,[X-8]
    2B7F: 08       PUSH  A
    2B80: 52 02    MOV   A,[X+2]
    2B82: 08       PUSH  A
    2B83: 52 03    MOV   A,[X+3]
    2B85: 08       PUSH  A
    2B86: 7C 25 33 LCALL 0x2533
    2B89: 38 FE    ADD   SP,0xFE
    2B8B: 18       POP   A
    2B8C: 53 48    MOV   [__r1],A
    2B8E: 18       POP   A
    2B8F: 53 49    MOV   [__r0],A
    2B91: 51 48    MOV   A,[__r1]
    2B93: 54 08    MOV   [X+8],A
    2B95: 51 49    MOV   A,[__r0]
    2B97: 54 07    MOV   [X+7],A
    2B99: 50 09    MOV   A,0x9
    2B9B: 13 08    SUB   A,[X+8]
    2B9D: 52 07    MOV   A,[X+7]
    2B9F: 31 80    XOR   A,0x80
    2BA1: 53 3D    MOV   [__rX],A
    2BA3: 50 80    MOV   A,0x80
    2BA5: 1A 3D    SBB   A,[__rX]
    2BA7: C0 28    JC    0x2BD0
    2BA9: 62 D0 00 MOV   REG[0xD0],0x0
    2BAC: 52 01    MOV   A,[X+1]
    2BAE: 53 48    MOV   [__r1],A
    2BB0: 52 00    MOV   A,[X+0]
    2BB2: 53 49    MOV   [__r0],A
    2BB4: 51 48    MOV   A,[__r1]
    2BB6: 01 01    ADD   A,0x1
    2BB8: 54 01    MOV   [X+1],A
    2BBA: 51 49    MOV   A,[__r0]
    2BBC: 09 00    ADC   A,0x0
    2BBE: 54 00    MOV   [X+0],A
    2BC0: 52 08    MOV   A,[X+8]
    2BC2: 01 30    ADD   A,0x30
    2BC4: 53 47    MOV   [__r2],A
    2BC6: 51 49    MOV   A,[__r0]
    2BC8: 60 D5    MOV   REG[0xD5],A
    2BCA: 51 47    MOV   A,[__r2]
    2BCC: 3F 48    MVI   [__r1],A
    2BCE: 80 26    JMP   0x2BF5
    2BD0: 62 D0 00 MOV   REG[0xD0],0x0
    2BD3: 52 01    MOV   A,[X+1]
    2BD5: 53 48    MOV   [__r1],A
    2BD7: 52 00    MOV   A,[X+0]
    2BD9: 53 49    MOV   [__r0],A
    2BDB: 51 48    MOV   A,[__r1]
    2BDD: 01 01    ADD   A,0x1
    2BDF: 54 01    MOV   [X+1],A
    2BE1: 51 49    MOV   A,[__r0]
    2BE3: 09 00    ADC   A,0x0
    2BE5: 54 00    MOV   [X+0],A
    2BE7: 52 08    MOV   A,[X+8]
    2BE9: 01 57    ADD   A,0x57
    2BEB: 53 47    MOV   [__r2],A
    2BED: 51 49    MOV   A,[__r0]
    2BEF: 60 D5    MOV   REG[0xD5],A
    2BF1: 51 47    MOV   A,[__r2]
    2BF3: 3F 48    MVI   [__r1],A
    2BF5: 52 F7    MOV   A,[X-9]
    2BF7: 08       PUSH  A
    2BF8: 52 F8    MOV   A,[X-8]
    2BFA: 08       PUSH  A
    2BFB: 52 02    MOV   A,[X+2]
    2BFD: 08       PUSH  A
    2BFE: 52 03    MOV   A,[X+3]
    2C00: 08       PUSH  A
    2C01: 62 D0 00 MOV   REG[0xD0],0x0
    2C04: 7C 25 33 LCALL 0x2533
    2C07: 18       POP   A
    2C08: 54 03    MOV   [X+3],A
    2C0A: 18       POP   A
    2C0B: 54 02    MOV   [X+2],A
    2C0D: 38 FE    ADD   SP,0xFE
    2C0F: 3D 02 00 CMP   [X+2],0x0
    2C12: BF 64    JNZ   0x2B77
    2C14: 3D 03 00 CMP   [X+3],0x0
    2C17: BF 5F    JNZ   0x2B77
    2C19: 3D 06 00 CMP   [X+6],0x0
    2C1C: A0 20    JZ    0x2C3D
    2C1E: 62 D0 00 MOV   REG[0xD0],0x0
    2C21: 52 01    MOV   A,[X+1]
    2C23: 53 48    MOV   [__r1],A
    2C25: 52 00    MOV   A,[X+0]
    2C27: 53 49    MOV   [__r0],A
    2C29: 51 48    MOV   A,[__r1]
    2C2B: 01 01    ADD   A,0x1
    2C2D: 54 01    MOV   [X+1],A
    2C2F: 51 49    MOV   A,[__r0]
    2C31: 09 00    ADC   A,0x0
    2C33: 54 00    MOV   [X+0],A
    2C35: 51 49    MOV   A,[__r0]
    2C37: 60 D5    MOV   REG[0xD5],A
    2C39: 50 2D    MOV   A,0x2D
    2C3B: 3F 48    MVI   [__r1],A
    2C3D: 62 D0 00 MOV   REG[0xD0],0x0
    2C40: 52 01    MOV   A,[X+1]
    2C42: 53 48    MOV   [__r1],A
    2C44: 52 00    MOV   A,[X+0]
    2C46: 53 49    MOV   [__r0],A
    2C48: 51 48    MOV   A,[__r1]
    2C4A: 01 FF    ADD   A,0xFF
    2C4C: 54 01    MOV   [X+1],A
    2C4E: 51 49    MOV   A,[__r0]
    2C50: 09 FF    ADC   A,0xFF
    2C52: 54 00    MOV   [X+0],A
    2C54: 51 49    MOV   A,[__r0]
    2C56: 60 D5    MOV   REG[0xD5],A
    2C58: 50 00    MOV   A,0x0
    2C5A: 3F 48    MVI   [__r1],A
    2C5C: 52 FC    MOV   A,[X-4]
    2C5E: 54 05    MOV   [X+5],A
    2C60: 52 FB    MOV   A,[X-5]
    2C62: 54 04    MOV   [X+4],A
    2C64: 80 54    JMP   0x2CB9
    2C66: 62 D0 00 MOV   REG[0xD0],0x0
    2C69: 52 05    MOV   A,[X+5]
    2C6B: 53 48    MOV   [__r1],A
    2C6D: 52 04    MOV   A,[X+4]
    2C6F: 60 D4    MOV   REG[0xD4],A
    2C71: 3E 48    MVI   A,[__r1]
    2C73: 54 06    MOV   [X+6],A
    2C75: 52 05    MOV   A,[X+5]
    2C77: 53 48    MOV   [__r1],A
    2C79: 52 04    MOV   A,[X+4]
    2C7B: 53 49    MOV   [__r0],A
    2C7D: 51 48    MOV   A,[__r1]
    2C7F: 01 01    ADD   A,0x1
    2C81: 54 05    MOV   [X+5],A
    2C83: 51 49    MOV   A,[__r0]
    2C85: 09 00    ADC   A,0x0
    2C87: 54 04    MOV   [X+4],A
    2C89: 52 01    MOV   A,[X+1]
    2C8B: 53 46    MOV   [__r3],A
    2C8D: 52 00    MOV   A,[X+0]
    2C8F: 60 D4    MOV   REG[0xD4],A
    2C91: 3E 46    MVI   A,[__r3]
    2C93: 53 47    MOV   [__r2],A
    2C95: 51 49    MOV   A,[__r0]
    2C97: 60 D5    MOV   REG[0xD5],A
    2C99: 51 47    MOV   A,[__r2]
    2C9B: 3F 48    MVI   [__r1],A
    2C9D: 52 01    MOV   A,[X+1]
    2C9F: 53 48    MOV   [__r1],A
    2CA1: 52 00    MOV   A,[X+0]
    2CA3: 53 49    MOV   [__r0],A
    2CA5: 51 48    MOV   A,[__r1]
    2CA7: 01 FF    ADD   A,0xFF
    2CA9: 54 01    MOV   [X+1],A
    2CAB: 51 49    MOV   A,[__r0]
    2CAD: 09 FF    ADC   A,0xFF
    2CAF: 54 00    MOV   [X+0],A
    2CB1: 51 49    MOV   A,[__r0]
    2CB3: 60 D5    MOV   REG[0xD5],A
    2CB5: 52 06    MOV   A,[X+6]
    2CB7: 3F 48    MVI   [__r1],A
    2CB9: 52 05    MOV   A,[X+5]
    2CBB: 13 01    SUB   A,[X+1]
    2CBD: 52 04    MOV   A,[X+4]
    2CBF: 1B 00    SBB   A,[X+0]
    2CC1: CF A4    JC    0x2C66
    2CC3: 62 D0 00 MOV   REG[0xD0],0x0
    2CC6: 52 FC    MOV   A,[X-4]
    2CC8: 53 48    MOV   [__r1],A
    2CCA: 52 FB    MOV   A,[X-5]
    2CCC: 53 49    MOV   [__r0],A
    2CCE: 38 F7    ADD   SP,0xF7
    2CD0: 20       POP   X
    2CD1: 7F       RET   
_ltoa:
    2CD2: 10       PUSH  X
    2CD3: 4F       MOV   X,SP
    2CD4: 38 0B    ADD   SP,0xB
    2CD6: 52 F7    MOV   A,[X-9]
    2CD8: 54 02    MOV   [X+2],A
    2CDA: 52 F8    MOV   A,[X-8]
    2CDC: 54 03    MOV   [X+3],A
    2CDE: 52 F9    MOV   A,[X-7]
    2CE0: 54 04    MOV   [X+4],A
    2CE2: 52 FA    MOV   A,[X-6]
    2CE4: 54 05    MOV   [X+5],A
    2CE6: 3D F7 00 CMP   [X-9],0x0
    2CE9: B0 39    JNZ   0x2D23
    2CEB: 3D F8 00 CMP   [X-8],0x0
    2CEE: B0 34    JNZ   0x2D23
    2CF0: 3D F9 00 CMP   [X-7],0x0
    2CF3: B0 2F    JNZ   0x2D23
    2CF5: 3D FA 00 CMP   [X-6],0x0
    2CF8: B0 2A    JNZ   0x2D23
    2CFA: 62 D0 00 MOV   REG[0xD0],0x0
    2CFD: 52 FC    MOV   A,[X-4]
    2CFF: 53 48    MOV   [__r1],A
    2D01: 52 FB    MOV   A,[X-5]
    2D03: 60 D5    MOV   REG[0xD5],A
    2D05: 50 30    MOV   A,0x30
    2D07: 3F 48    MVI   [__r1],A
    2D09: 52 FC    MOV   A,[X-4]
    2D0B: 01 01    ADD   A,0x1
    2D0D: 53 48    MOV   [__r1],A
    2D0F: 52 FB    MOV   A,[X-5]
    2D11: 09 00    ADC   A,0x0
    2D13: 60 D5    MOV   REG[0xD5],A
    2D15: 50 00    MOV   A,0x0
    2D17: 3F 48    MVI   [__r1],A
    2D19: 52 FC    MOV   A,[X-4]
    2D1B: 53 48    MOV   [__r1],A
    2D1D: 52 FB    MOV   A,[X-5]
    2D1F: 53 49    MOV   [__r0],A
    2D21: 82 25    JMP   0x2F47
    2D23: 52 FA    MOV   A,[X-6]
    2D25: 11 00    SUB   A,0x0
    2D27: 52 F9    MOV   A,[X-7]
    2D29: 19 00    SBB   A,0x0
    2D2B: 52 F8    MOV   A,[X-8]
    2D2D: 19 00    SBB   A,0x0
    2D2F: 52 F7    MOV   A,[X-9]
    2D31: 31 80    XOR   A,0x80
    2D33: 19 80    SBB   A,0x80
    2D35: D0 3B    JNC   0x2D71
    2D37: 3D F5 00 CMP   [X-11],0x0
    2D3A: B0 36    JNZ   0x2D71
    2D3C: 3D F6 0A CMP   [X-10],0xA
    2D3F: B0 31    JNZ   0x2D71
    2D41: 56 08 01 MOV   [X+8],0x1
    2D44: 62 D0 00 MOV   REG[0xD0],0x0
    2D47: 52 02    MOV   A,[X+2]
    2D49: 73       CPL   A
    2D4A: 53 49    MOV   [__r0],A
    2D4C: 52 03    MOV   A,[X+3]
    2D4E: 73       CPL   A
    2D4F: 53 48    MOV   [__r1],A
    2D51: 52 04    MOV   A,[X+4]
    2D53: 73       CPL   A
    2D54: 53 47    MOV   [__r2],A
    2D56: 52 05    MOV   A,[X+5]
    2D58: 73       CPL   A
    2D59: 01 01    ADD   A,0x1
    2D5B: 54 05    MOV   [X+5],A
    2D5D: 51 47    MOV   A,[__r2]
    2D5F: 09 00    ADC   A,0x0
    2D61: 54 04    MOV   [X+4],A
    2D63: 51 48    MOV   A,[__r1]
    2D65: 09 00    ADC   A,0x0
    2D67: 54 03    MOV   [X+3],A
    2D69: 51 49    MOV   A,[__r0]
    2D6B: 09 00    ADC   A,0x0
    2D6D: 54 02    MOV   [X+2],A
    2D6F: 80 04    JMP   0x2D74
    2D71: 56 08 00 MOV   [X+8],0x0
    2D74: 52 FC    MOV   A,[X-4]
    2D76: 54 01    MOV   [X+1],A
    2D78: 52 FB    MOV   A,[X-5]
    2D7A: 54 00    MOV   [X+0],A
    2D7C: 62 D0 00 MOV   REG[0xD0],0x0
    2D7F: 52 F6    MOV   A,[X-10]
    2D81: 53 46    MOV   [__r3],A
    2D83: 52 F5    MOV   A,[X-11]
    2D85: 53 47    MOV   [__r2],A
    2D87: 47 47 80 TST   [__r2],0x80
    2D8A: A0 09    JZ    0x2D94
    2D8C: 55 48 FF MOV   [__r1],0xFF
    2D8F: 55 49 FF MOV   [__r0],0xFF
    2D92: 80 0A    JMP   0x2D9D
    2D94: 62 D0 00 MOV   REG[0xD0],0x0
    2D97: 55 48 00 MOV   [__r1],0x0
    2D9A: 55 49 00 MOV   [__r0],0x0
    2D9D: 62 D0 00 MOV   REG[0xD0],0x0
    2DA0: 51 49    MOV   A,[__r0]
    2DA2: 08       PUSH  A
    2DA3: 51 48    MOV   A,[__r1]
    2DA5: 08       PUSH  A
    2DA6: 51 47    MOV   A,[__r2]
    2DA8: 08       PUSH  A
    2DA9: 51 46    MOV   A,[__r3]
    2DAB: 08       PUSH  A
    2DAC: 52 02    MOV   A,[X+2]
    2DAE: 08       PUSH  A
    2DAF: 52 03    MOV   A,[X+3]
    2DB1: 08       PUSH  A
    2DB2: 52 04    MOV   A,[X+4]
    2DB4: 08       PUSH  A
    2DB5: 52 05    MOV   A,[X+5]
    2DB7: 08       PUSH  A
    2DB8: 7C 25 3E LCALL 0x253E
    2DBB: 38 FC    ADD   SP,0xFC
    2DBD: 18       POP   A
    2DBE: 53 46    MOV   [__r3],A
    2DC0: 18       POP   A
    2DC1: 53 47    MOV   [__r2],A
    2DC3: 18       POP   A
    2DC4: 18       POP   A
    2DC5: 51 46    MOV   A,[__r3]
    2DC7: 53 48    MOV   [__r1],A
    2DC9: 51 47    MOV   A,[__r2]
    2DCB: 53 49    MOV   [__r0],A
    2DCD: 51 48    MOV   A,[__r1]
    2DCF: 54 0A    MOV   [X+10],A
    2DD1: 51 49    MOV   A,[__r0]
    2DD3: 54 09    MOV   [X+9],A
    2DD5: 50 09    MOV   A,0x9
    2DD7: 13 0A    SUB   A,[X+10]
    2DD9: 52 09    MOV   A,[X+9]
    2DDB: 31 80    XOR   A,0x80
    2DDD: 53 3D    MOV   [__rX],A
    2DDF: 50 80    MOV   A,0x80
    2DE1: 1A 3D    SBB   A,[__rX]
    2DE3: C0 28    JC    0x2E0C
    2DE5: 62 D0 00 MOV   REG[0xD0],0x0
    2DE8: 52 01    MOV   A,[X+1]
    2DEA: 53 48    MOV   [__r1],A
    2DEC: 52 00    MOV   A,[X+0]
    2DEE: 53 49    MOV   [__r0],A
    2DF0: 51 48    MOV   A,[__r1]
    2DF2: 01 01    ADD   A,0x1
    2DF4: 54 01    MOV   [X+1],A
    2DF6: 51 49    MOV   A,[__r0]
    2DF8: 09 00    ADC   A,0x0
    2DFA: 54 00    MOV   [X+0],A
    2DFC: 52 0A    MOV   A,[X+10]
    2DFE: 01 30    ADD   A,0x30
    2E00: 53 47    MOV   [__r2],A
    2E02: 51 49    MOV   A,[__r0]
    2E04: 60 D5    MOV   REG[0xD5],A
    2E06: 51 47    MOV   A,[__r2]
    2E08: 3F 48    MVI   [__r1],A
    2E0A: 80 26    JMP   0x2E31
    2E0C: 62 D0 00 MOV   REG[0xD0],0x0
    2E0F: 52 01    MOV   A,[X+1]
    2E11: 53 48    MOV   [__r1],A
    2E13: 52 00    MOV   A,[X+0]
    2E15: 53 49    MOV   [__r0],A
    2E17: 51 48    MOV   A,[__r1]
    2E19: 01 01    ADD   A,0x1
    2E1B: 54 01    MOV   [X+1],A
    2E1D: 51 49    MOV   A,[__r0]
    2E1F: 09 00    ADC   A,0x0
    2E21: 54 00    MOV   [X+0],A
    2E23: 52 0A    MOV   A,[X+10]
    2E25: 01 57    ADD   A,0x57
    2E27: 53 47    MOV   [__r2],A
    2E29: 51 49    MOV   A,[__r0]
    2E2B: 60 D5    MOV   REG[0xD5],A
    2E2D: 51 47    MOV   A,[__r2]
    2E2F: 3F 48    MVI   [__r1],A
    2E31: 62 D0 00 MOV   REG[0xD0],0x0
    2E34: 52 F6    MOV   A,[X-10]
    2E36: 53 46    MOV   [__r3],A
    2E38: 52 F5    MOV   A,[X-11]
    2E3A: 53 47    MOV   [__r2],A
    2E3C: 47 47 80 TST   [__r2],0x80
    2E3F: A0 09    JZ    0x2E49
    2E41: 55 48 FF MOV   [__r1],0xFF
    2E44: 55 49 FF MOV   [__r0],0xFF
    2E47: 80 0A    JMP   0x2E52
    2E49: 62 D0 00 MOV   REG[0xD0],0x0
    2E4C: 55 48 00 MOV   [__r1],0x0
    2E4F: 55 49 00 MOV   [__r0],0x0
    2E52: 62 D0 00 MOV   REG[0xD0],0x0
    2E55: 51 49    MOV   A,[__r0]
    2E57: 08       PUSH  A
    2E58: 51 48    MOV   A,[__r1]
    2E5A: 08       PUSH  A
    2E5B: 51 47    MOV   A,[__r2]
    2E5D: 08       PUSH  A
    2E5E: 51 46    MOV   A,[__r3]
    2E60: 08       PUSH  A
    2E61: 52 02    MOV   A,[X+2]
    2E63: 08       PUSH  A
    2E64: 52 03    MOV   A,[X+3]
    2E66: 08       PUSH  A
    2E67: 52 04    MOV   A,[X+4]
    2E69: 08       PUSH  A
    2E6A: 52 05    MOV   A,[X+5]
    2E6C: 08       PUSH  A
    2E6D: 7C 25 3E LCALL 0x253E
    2E70: 18       POP   A
    2E71: 54 05    MOV   [X+5],A
    2E73: 18       POP   A
    2E74: 54 04    MOV   [X+4],A
    2E76: 18       POP   A
    2E77: 54 03    MOV   [X+3],A
    2E79: 18       POP   A
    2E7A: 54 02    MOV   [X+2],A
    2E7C: 38 FC    ADD   SP,0xFC
    2E7E: 3D 02 00 CMP   [X+2],0x0
    2E81: BE FA    JNZ   0x2D7C
    2E83: 3D 03 00 CMP   [X+3],0x0
    2E86: BE F5    JNZ   0x2D7C
    2E88: 3D 04 00 CMP   [X+4],0x0
    2E8B: BE F0    JNZ   0x2D7C
    2E8D: 3D 05 00 CMP   [X+5],0x0
    2E90: BE EB    JNZ   0x2D7C
    2E92: 3D 08 00 CMP   [X+8],0x0
    2E95: A0 20    JZ    0x2EB6
    2E97: 62 D0 00 MOV   REG[0xD0],0x0
    2E9A: 52 01    MOV   A,[X+1]
    2E9C: 53 48    MOV   [__r1],A
    2E9E: 52 00    MOV   A,[X+0]
    2EA0: 53 49    MOV   [__r0],A
    2EA2: 51 48    MOV   A,[__r1]
    2EA4: 01 01    ADD   A,0x1
    2EA6: 54 01    MOV   [X+1],A
    2EA8: 51 49    MOV   A,[__r0]
    2EAA: 09 00    ADC   A,0x0
    2EAC: 54 00    MOV   [X+0],A
    2EAE: 51 49    MOV   A,[__r0]
    2EB0: 60 D5    MOV   REG[0xD5],A
    2EB2: 50 2D    MOV   A,0x2D
    2EB4: 3F 48    MVI   [__r1],A
    2EB6: 62 D0 00 MOV   REG[0xD0],0x0
    2EB9: 52 01    MOV   A,[X+1]
    2EBB: 53 48    MOV   [__r1],A
    2EBD: 52 00    MOV   A,[X+0]
    2EBF: 53 49    MOV   [__r0],A
    2EC1: 51 48    MOV   A,[__r1]
    2EC3: 01 FF    ADD   A,0xFF
    2EC5: 54 01    MOV   [X+1],A
    2EC7: 51 49    MOV   A,[__r0]
    2EC9: 09 FF    ADC   A,0xFF
    2ECB: 54 00    MOV   [X+0],A
    2ECD: 51 49    MOV   A,[__r0]
    2ECF: 60 D5    MOV   REG[0xD5],A
    2ED1: 50 00    MOV   A,0x0
    2ED3: 3F 48    MVI   [__r1],A
    2ED5: 52 FC    MOV   A,[X-4]
    2ED7: 54 07    MOV   [X+7],A
    2ED9: 52 FB    MOV   A,[X-5]
    2EDB: 54 06    MOV   [X+6],A
    2EDD: 80 54    JMP   0x2F32
    2EDF: 62 D0 00 MOV   REG[0xD0],0x0
    2EE2: 52 07    MOV   A,[X+7]
    2EE4: 53 48    MOV   [__r1],A
    2EE6: 52 06    MOV   A,[X+6]
    2EE8: 60 D4    MOV   REG[0xD4],A
    2EEA: 3E 48    MVI   A,[__r1]
    2EEC: 54 08    MOV   [X+8],A
    2EEE: 52 07    MOV   A,[X+7]
    2EF0: 53 48    MOV   [__r1],A
    2EF2: 52 06    MOV   A,[X+6]
    2EF4: 53 49    MOV   [__r0],A
    2EF6: 51 48    MOV   A,[__r1]
    2EF8: 01 01    ADD   A,0x1
    2EFA: 54 07    MOV   [X+7],A
    2EFC: 51 49    MOV   A,[__r0]
    2EFE: 09 00    ADC   A,0x0
    2F00: 54 06    MOV   [X+6],A
    2F02: 52 01    MOV   A,[X+1]
    2F04: 53 46    MOV   [__r3],A
    2F06: 52 00    MOV   A,[X+0]
    2F08: 60 D4    MOV   REG[0xD4],A
    2F0A: 3E 46    MVI   A,[__r3]
    2F0C: 53 47    MOV   [__r2],A
    2F0E: 51 49    MOV   A,[__r0]
    2F10: 60 D5    MOV   REG[0xD5],A
    2F12: 51 47    MOV   A,[__r2]
    2F14: 3F 48    MVI   [__r1],A
    2F16: 52 01    MOV   A,[X+1]
    2F18: 53 48    MOV   [__r1],A
    2F1A: 52 00    MOV   A,[X+0]
    2F1C: 53 49    MOV   [__r0],A
    2F1E: 51 48    MOV   A,[__r1]
    2F20: 01 FF    ADD   A,0xFF
    2F22: 54 01    MOV   [X+1],A
    2F24: 51 49    MOV   A,[__r0]
    2F26: 09 FF    ADC   A,0xFF
    2F28: 54 00    MOV   [X+0],A
    2F2A: 51 49    MOV   A,[__r0]
    2F2C: 60 D5    MOV   REG[0xD5],A
    2F2E: 52 08    MOV   A,[X+8]
    2F30: 3F 48    MVI   [__r1],A
    2F32: 52 07    MOV   A,[X+7]
    2F34: 13 01    SUB   A,[X+1]
    2F36: 52 06    MOV   A,[X+6]
    2F38: 1B 00    SBB   A,[X+0]
    2F3A: CF A4    JC    0x2EDF
    2F3C: 62 D0 00 MOV   REG[0xD0],0x0
    2F3F: 52 FC    MOV   A,[X-4]
    2F41: 53 48    MOV   [__r1],A
    2F43: 52 FB    MOV   A,[X-5]
    2F45: 53 49    MOV   [__r0],A
    2F47: 38 F5    ADD   SP,0xF5
    2F49: 20       POP   X
    2F4A: 7F       RET   
_ultoa:
    2F4B: 10       PUSH  X
    2F4C: 4F       MOV   X,SP
    2F4D: 38 07    ADD   SP,0x7
    2F4F: 52 FC    MOV   A,[X-4]
    2F51: 54 01    MOV   [X+1],A
    2F53: 52 FB    MOV   A,[X-5]
    2F55: 54 00    MOV   [X+0],A
    2F57: 62 D0 00 MOV   REG[0xD0],0x0
    2F5A: 52 F6    MOV   A,[X-10]
    2F5C: 53 46    MOV   [__r3],A
    2F5E: 52 F5    MOV   A,[X-11]
    2F60: 53 47    MOV   [__r2],A
    2F62: 47 47 80 TST   [__r2],0x80
    2F65: A0 09    JZ    0x2F6F
    2F67: 55 48 FF MOV   [__r1],0xFF
    2F6A: 55 49 FF MOV   [__r0],0xFF
    2F6D: 80 0A    JMP   0x2F78
    2F6F: 62 D0 00 MOV   REG[0xD0],0x0
    2F72: 55 48 00 MOV   [__r1],0x0
    2F75: 55 49 00 MOV   [__r0],0x0
    2F78: 62 D0 00 MOV   REG[0xD0],0x0
    2F7B: 51 49    MOV   A,[__r0]
    2F7D: 08       PUSH  A
    2F7E: 51 48    MOV   A,[__r1]
    2F80: 08       PUSH  A
    2F81: 51 47    MOV   A,[__r2]
    2F83: 08       PUSH  A
    2F84: 51 46    MOV   A,[__r3]
    2F86: 08       PUSH  A
    2F87: 52 F7    MOV   A,[X-9]
    2F89: 08       PUSH  A
    2F8A: 52 F8    MOV   A,[X-8]
    2F8C: 08       PUSH  A
    2F8D: 52 F9    MOV   A,[X-7]
    2F8F: 08       PUSH  A
    2F90: 52 FA    MOV   A,[X-6]
    2F92: 08       PUSH  A
    2F93: 7C 25 3E LCALL 0x253E
    2F96: 38 FC    ADD   SP,0xFC
    2F98: 18       POP   A
    2F99: 53 46    MOV   [__r3],A
    2F9B: 18       POP   A
    2F9C: 53 47    MOV   [__r2],A
    2F9E: 18       POP   A
    2F9F: 18       POP   A
    2FA0: 51 46    MOV   A,[__r3]
    2FA2: 53 48    MOV   [__r1],A
    2FA4: 51 47    MOV   A,[__r2]
    2FA6: 53 49    MOV   [__r0],A
    2FA8: 51 48    MOV   A,[__r1]
    2FAA: 54 06    MOV   [X+6],A
    2FAC: 51 49    MOV   A,[__r0]
    2FAE: 54 05    MOV   [X+5],A
    2FB0: 50 09    MOV   A,0x9
    2FB2: 13 06    SUB   A,[X+6]
    2FB4: 52 05    MOV   A,[X+5]
    2FB6: 31 80    XOR   A,0x80
    2FB8: 53 3D    MOV   [__rX],A
    2FBA: 50 80    MOV   A,0x80
    2FBC: 1A 3D    SBB   A,[__rX]
    2FBE: C0 28    JC    0x2FE7
    2FC0: 62 D0 00 MOV   REG[0xD0],0x0
    2FC3: 52 01    MOV   A,[X+1]
    2FC5: 53 48    MOV   [__r1],A
    2FC7: 52 00    MOV   A,[X+0]
    2FC9: 53 49    MOV   [__r0],A
    2FCB: 51 48    MOV   A,[__r1]
    2FCD: 01 01    ADD   A,0x1
    2FCF: 54 01    MOV   [X+1],A
    2FD1: 51 49    MOV   A,[__r0]
    2FD3: 09 00    ADC   A,0x0
    2FD5: 54 00    MOV   [X+0],A
    2FD7: 52 06    MOV   A,[X+6]
    2FD9: 01 30    ADD   A,0x30
    2FDB: 53 47    MOV   [__r2],A
    2FDD: 51 49    MOV   A,[__r0]
    2FDF: 60 D5    MOV   REG[0xD5],A
    2FE1: 51 47    MOV   A,[__r2]
    2FE3: 3F 48    MVI   [__r1],A
    2FE5: 80 26    JMP   0x300C
    2FE7: 62 D0 00 MOV   REG[0xD0],0x0
    2FEA: 52 01    MOV   A,[X+1]
    2FEC: 53 48    MOV   [__r1],A
    2FEE: 52 00    MOV   A,[X+0]
    2FF0: 53 49    MOV   [__r0],A
    2FF2: 51 48    MOV   A,[__r1]
    2FF4: 01 01    ADD   A,0x1
    2FF6: 54 01    MOV   [X+1],A
    2FF8: 51 49    MOV   A,[__r0]
    2FFA: 09 00    ADC   A,0x0
    2FFC: 54 00    MOV   [X+0],A
    2FFE: 52 06    MOV   A,[X+6]
    3000: 01 57    ADD   A,0x57
    3002: 53 47    MOV   [__r2],A
    3004: 51 49    MOV   A,[__r0]
    3006: 60 D5    MOV   REG[0xD5],A
    3008: 51 47    MOV   A,[__r2]
    300A: 3F 48    MVI   [__r1],A
    300C: 62 D0 00 MOV   REG[0xD0],0x0
    300F: 52 F6    MOV   A,[X-10]
    3011: 53 46    MOV   [__r3],A
    3013: 52 F5    MOV   A,[X-11]
    3015: 53 47    MOV   [__r2],A
    3017: 47 47 80 TST   [__r2],0x80
    301A: A0 09    JZ    0x3024
    301C: 55 48 FF MOV   [__r1],0xFF
    301F: 55 49 FF MOV   [__r0],0xFF
    3022: 80 0A    JMP   0x302D
    3024: 62 D0 00 MOV   REG[0xD0],0x0
    3027: 55 48 00 MOV   [__r1],0x0
    302A: 55 49 00 MOV   [__r0],0x0
    302D: 62 D0 00 MOV   REG[0xD0],0x0
    3030: 51 49    MOV   A,[__r0]
    3032: 08       PUSH  A
    3033: 51 48    MOV   A,[__r1]
    3035: 08       PUSH  A
    3036: 51 47    MOV   A,[__r2]
    3038: 08       PUSH  A
    3039: 51 46    MOV   A,[__r3]
    303B: 08       PUSH  A
    303C: 52 F7    MOV   A,[X-9]
    303E: 08       PUSH  A
    303F: 52 F8    MOV   A,[X-8]
    3041: 08       PUSH  A
    3042: 52 F9    MOV   A,[X-7]
    3044: 08       PUSH  A
    3045: 52 FA    MOV   A,[X-6]
    3047: 08       PUSH  A
    3048: 7C 25 3E LCALL 0x253E
    304B: 18       POP   A
    304C: 54 FA    MOV   [X-6],A
    304E: 18       POP   A
    304F: 54 F9    MOV   [X-7],A
    3051: 18       POP   A
    3052: 54 F8    MOV   [X-8],A
    3054: 18       POP   A
    3055: 54 F7    MOV   [X-9],A
    3057: 38 FC    ADD   SP,0xFC
    3059: 3D F7 00 CMP   [X-9],0x0
    305C: BE FA    JNZ   0x2F57
    305E: 3D F8 00 CMP   [X-8],0x0
    3061: BE F5    JNZ   0x2F57
    3063: 3D F9 00 CMP   [X-7],0x0
    3066: BE F0    JNZ   0x2F57
    3068: 3D FA 00 CMP   [X-6],0x0
    306B: BE EB    JNZ   0x2F57
    306D: 62 D0 00 MOV   REG[0xD0],0x0
    3070: 52 01    MOV   A,[X+1]
    3072: 53 48    MOV   [__r1],A
    3074: 52 00    MOV   A,[X+0]
    3076: 53 49    MOV   [__r0],A
    3078: 51 48    MOV   A,[__r1]
    307A: 01 FF    ADD   A,0xFF
    307C: 54 01    MOV   [X+1],A
    307E: 51 49    MOV   A,[__r0]
    3080: 09 FF    ADC   A,0xFF
    3082: 54 00    MOV   [X+0],A
    3084: 51 49    MOV   A,[__r0]
    3086: 60 D5    MOV   REG[0xD5],A
    3088: 50 00    MOV   A,0x0
    308A: 3F 48    MVI   [__r1],A
    308C: 52 FC    MOV   A,[X-4]
    308E: 54 03    MOV   [X+3],A
    3090: 52 FB    MOV   A,[X-5]
    3092: 54 02    MOV   [X+2],A
    3094: 80 54    JMP   0x30E9
    3096: 62 D0 00 MOV   REG[0xD0],0x0
    3099: 52 03    MOV   A,[X+3]
    309B: 53 48    MOV   [__r1],A
    309D: 52 02    MOV   A,[X+2]
    309F: 60 D4    MOV   REG[0xD4],A
    30A1: 3E 48    MVI   A,[__r1]
    30A3: 54 04    MOV   [X+4],A
    30A5: 52 03    MOV   A,[X+3]
    30A7: 53 48    MOV   [__r1],A
    30A9: 52 02    MOV   A,[X+2]
    30AB: 53 49    MOV   [__r0],A
    30AD: 51 48    MOV   A,[__r1]
    30AF: 01 01    ADD   A,0x1
    30B1: 54 03    MOV   [X+3],A
    30B3: 51 49    MOV   A,[__r0]
    30B5: 09 00    ADC   A,0x0
    30B7: 54 02    MOV   [X+2],A
    30B9: 52 01    MOV   A,[X+1]
    30BB: 53 46    MOV   [__r3],A
    30BD: 52 00    MOV   A,[X+0]
    30BF: 60 D4    MOV   REG[0xD4],A
    30C1: 3E 46    MVI   A,[__r3]
    30C3: 53 47    MOV   [__r2],A
    30C5: 51 49    MOV   A,[__r0]
    30C7: 60 D5    MOV   REG[0xD5],A
    30C9: 51 47    MOV   A,[__r2]
    30CB: 3F 48    MVI   [__r1],A
    30CD: 52 01    MOV   A,[X+1]
    30CF: 53 48    MOV   [__r1],A
    30D1: 52 00    MOV   A,[X+0]
    30D3: 53 49    MOV   [__r0],A
    30D5: 51 48    MOV   A,[__r1]
    30D7: 01 FF    ADD   A,0xFF
    30D9: 54 01    MOV   [X+1],A
    30DB: 51 49    MOV   A,[__r0]
    30DD: 09 FF    ADC   A,0xFF
    30DF: 54 00    MOV   [X+0],A
    30E1: 51 49    MOV   A,[__r0]
    30E3: 60 D5    MOV   REG[0xD5],A
    30E5: 52 04    MOV   A,[X+4]
    30E7: 3F 48    MVI   [__r1],A
    30E9: 52 03    MOV   A,[X+3]
    30EB: 13 01    SUB   A,[X+1]
    30ED: 52 02    MOV   A,[X+2]
    30EF: 1B 00    SBB   A,[X+0]
    30F1: CF A4    JC    0x3096
    30F3: 62 D0 00 MOV   REG[0xD0],0x0
    30F6: 52 FC    MOV   A,[X-4]
    30F8: 53 48    MOV   [__r1],A
    30FA: 52 FB    MOV   A,[X-5]
    30FC: 53 49    MOV   [__r0],A
    30FE: 38 F9    ADD   SP,0xF9
    3100: 20       POP   X
    3101: 7F       RET   
_utoa:
    3102: 10       PUSH  X
    3103: 4F       MOV   X,SP
    3104: 38 07    ADD   SP,0x7
    3106: 52 FC    MOV   A,[X-4]
    3108: 54 01    MOV   [X+1],A
    310A: 52 FB    MOV   A,[X-5]
    310C: 54 00    MOV   [X+0],A
    310E: 62 D0 00 MOV   REG[0xD0],0x0
    3111: 52 F7    MOV   A,[X-9]
    3113: 08       PUSH  A
    3114: 52 F8    MOV   A,[X-8]
    3116: 08       PUSH  A
    3117: 52 F9    MOV   A,[X-7]
    3119: 08       PUSH  A
    311A: 52 FA    MOV   A,[X-6]
    311C: 08       PUSH  A
    311D: 7C 25 33 LCALL 0x2533
    3120: 38 FE    ADD   SP,0xFE
    3122: 18       POP   A
    3123: 53 48    MOV   [__r1],A
    3125: 18       POP   A
    3126: 53 49    MOV   [__r0],A
    3128: 51 48    MOV   A,[__r1]
    312A: 54 06    MOV   [X+6],A
    312C: 51 49    MOV   A,[__r0]
    312E: 54 05    MOV   [X+5],A
    3130: 50 09    MOV   A,0x9
    3132: 13 06    SUB   A,[X+6]
    3134: 52 05    MOV   A,[X+5]
    3136: 31 80    XOR   A,0x80
    3138: 53 3D    MOV   [__rX],A
    313A: 50 80    MOV   A,0x80
    313C: 1A 3D    SBB   A,[__rX]
    313E: C0 28    JC    0x3167
    3140: 62 D0 00 MOV   REG[0xD0],0x0
    3143: 52 01    MOV   A,[X+1]
    3145: 53 48    MOV   [__r1],A
    3147: 52 00    MOV   A,[X+0]
    3149: 53 49    MOV   [__r0],A
    314B: 51 48    MOV   A,[__r1]
    314D: 01 01    ADD   A,0x1
    314F: 54 01    MOV   [X+1],A
    3151: 51 49    MOV   A,[__r0]
    3153: 09 00    ADC   A,0x0
    3155: 54 00    MOV   [X+0],A
    3157: 52 06    MOV   A,[X+6]
    3159: 01 30    ADD   A,0x30
    315B: 53 47    MOV   [__r2],A
    315D: 51 49    MOV   A,[__r0]
    315F: 60 D5    MOV   REG[0xD5],A
    3161: 51 47    MOV   A,[__r2]
    3163: 3F 48    MVI   [__r1],A
    3165: 80 26    JMP   0x318C
    3167: 62 D0 00 MOV   REG[0xD0],0x0
    316A: 52 01    MOV   A,[X+1]
    316C: 53 48    MOV   [__r1],A
    316E: 52 00    MOV   A,[X+0]
    3170: 53 49    MOV   [__r0],A
    3172: 51 48    MOV   A,[__r1]
    3174: 01 01    ADD   A,0x1
    3176: 54 01    MOV   [X+1],A
    3178: 51 49    MOV   A,[__r0]
    317A: 09 00    ADC   A,0x0
    317C: 54 00    MOV   [X+0],A
    317E: 52 06    MOV   A,[X+6]
    3180: 01 57    ADD   A,0x57
    3182: 53 47    MOV   [__r2],A
    3184: 51 49    MOV   A,[__r0]
    3186: 60 D5    MOV   REG[0xD5],A
    3188: 51 47    MOV   A,[__r2]
    318A: 3F 48    MVI   [__r1],A
    318C: 52 F7    MOV   A,[X-9]
    318E: 08       PUSH  A
    318F: 52 F8    MOV   A,[X-8]
    3191: 08       PUSH  A
    3192: 52 F9    MOV   A,[X-7]
    3194: 08       PUSH  A
    3195: 52 FA    MOV   A,[X-6]
    3197: 08       PUSH  A
    3198: 62 D0 00 MOV   REG[0xD0],0x0
    319B: 7C 25 33 LCALL 0x2533
    319E: 18       POP   A
    319F: 54 FA    MOV   [X-6],A
    31A1: 18       POP   A
    31A2: 54 F9    MOV   [X-7],A
    31A4: 38 FE    ADD   SP,0xFE
    31A6: 3D F9 00 CMP   [X-7],0x0
    31A9: BF 64    JNZ   0x310E
    31AB: 3D FA 00 CMP   [X-6],0x0
    31AE: BF 5F    JNZ   0x310E
    31B0: 62 D0 00 MOV   REG[0xD0],0x0
    31B3: 52 01    MOV   A,[X+1]
    31B5: 53 48    MOV   [__r1],A
    31B7: 52 00    MOV   A,[X+0]
    31B9: 53 49    MOV   [__r0],A
    31BB: 51 48    MOV   A,[__r1]
    31BD: 01 FF    ADD   A,0xFF
    31BF: 54 01    MOV   [X+1],A
    31C1: 51 49    MOV   A,[__r0]
    31C3: 09 FF    ADC   A,0xFF
    31C5: 54 00    MOV   [X+0],A
    31C7: 51 49    MOV   A,[__r0]
    31C9: 60 D5    MOV   REG[0xD5],A
    31CB: 50 00    MOV   A,0x0
    31CD: 3F 48    MVI   [__r1],A
    31CF: 52 FC    MOV   A,[X-4]
    31D1: 54 03    MOV   [X+3],A
    31D3: 52 FB    MOV   A,[X-5]
    31D5: 54 02    MOV   [X+2],A
    31D7: 80 54    JMP   0x322C
    31D9: 62 D0 00 MOV   REG[0xD0],0x0
    31DC: 52 03    MOV   A,[X+3]
    31DE: 53 48    MOV   [__r1],A
    31E0: 52 02    MOV   A,[X+2]
    31E2: 60 D4    MOV   REG[0xD4],A
    31E4: 3E 48    MVI   A,[__r1]
    31E6: 54 04    MOV   [X+4],A
    31E8: 52 03    MOV   A,[X+3]
    31EA: 53 48    MOV   [__r1],A
    31EC: 52 02    MOV   A,[X+2]
    31EE: 53 49    MOV   [__r0],A
    31F0: 51 48    MOV   A,[__r1]
    31F2: 01 01    ADD   A,0x1
    31F4: 54 03    MOV   [X+3],A
    31F6: 51 49    MOV   A,[__r0]
    31F8: 09 00    ADC   A,0x0
    31FA: 54 02    MOV   [X+2],A
    31FC: 52 01    MOV   A,[X+1]
    31FE: 53 46    MOV   [__r3],A
    3200: 52 00    MOV   A,[X+0]
    3202: 60 D4    MOV   REG[0xD4],A
    3204: 3E 46    MVI   A,[__r3]
    3206: 53 47    MOV   [__r2],A
    3208: 51 49    MOV   A,[__r0]
    320A: 60 D5    MOV   REG[0xD5],A
    320C: 51 47    MOV   A,[__r2]
    320E: 3F 48    MVI   [__r1],A
    3210: 52 01    MOV   A,[X+1]
    3212: 53 48    MOV   [__r1],A
    3214: 52 00    MOV   A,[X+0]
    3216: 53 49    MOV   [__r0],A
    3218: 51 48    MOV   A,[__r1]
    321A: 01 FF    ADD   A,0xFF
    321C: 54 01    MOV   [X+1],A
    321E: 51 49    MOV   A,[__r0]
    3220: 09 FF    ADC   A,0xFF
    3222: 54 00    MOV   [X+0],A
    3224: 51 49    MOV   A,[__r0]
    3226: 60 D5    MOV   REG[0xD5],A
    3228: 52 04    MOV   A,[X+4]
    322A: 3F 48    MVI   [__r1],A
    322C: 52 03    MOV   A,[X+3]
    322E: 13 01    SUB   A,[X+1]
    3230: 52 02    MOV   A,[X+2]
    3232: 1B 00    SBB   A,[X+0]
    3234: CF A4    JC    0x31D9
    3236: 62 D0 00 MOV   REG[0xD0],0x0
    3239: 52 FC    MOV   A,[X-4]
    323B: 53 48    MOV   [__r1],A
    323D: 52 FB    MOV   A,[X-5]
    323F: 53 49    MOV   [__r0],A
    3241: 38 F9    ADD   SP,0xF9
    3243: 20       POP   X
    3244: 7F       RET   
_ftoa:
    3245: 10       PUSH  X
    3246: 4F       MOV   X,SP
    3247: 38 16    ADD   SP,0x16
    3249: 62 D0 00 MOV   REG[0xD0],0x0
    324C: 52 F8    MOV   A,[X-8]
    324E: 53 48    MOV   [__r1],A
    3250: 52 F7    MOV   A,[X-9]
    3252: 60 D5    MOV   REG[0xD5],A
    3254: 50 00    MOV   A,0x0
    3256: 3F 48    MVI   [__r1],A
    3258: 3F 48    MVI   [__r1],A
    325A: 08       PUSH  A
    325B: 08       PUSH  A
    325C: 08       PUSH  A
    325D: 08       PUSH  A
    325E: 52 F9    MOV   A,[X-7]
    3260: 08       PUSH  A
    3261: 52 FA    MOV   A,[X-6]
    3263: 08       PUSH  A
    3264: 52 FB    MOV   A,[X-5]
    3266: 08       PUSH  A
    3267: 52 FC    MOV   A,[X-4]
    3269: 08       PUSH  A
    326A: 7C 26 FC LCALL 0x26FC
    326D: 38 F8    ADD   SP,0xF8
    326F: 39 00    CMP   A,0x0
    3271: B0 18    JNZ   0x328A
    3273: 62 D0 00 MOV   REG[0xD0],0x0
    3276: 55 4A 30 MOV   [0x4A],0x30
    3279: 55 4B 2E MOV   [0x4B],0x2E
    327C: 55 4C 30 MOV   [0x4C],0x30
    327F: 55 4D 00 MOV   [0x4D],0x0
    3282: 55 48 4A MOV   [__r1],0x4A
    3285: 55 49 00 MOV   [__r0],0x0
    3288: 83 FE    JMP   0x3687
    328A: 52 F9    MOV   A,[X-7]
    328C: 54 06    MOV   [X+6],A
    328E: 52 FA    MOV   A,[X-6]
    3290: 54 07    MOV   [X+7],A
    3292: 52 FB    MOV   A,[X-5]
    3294: 54 08    MOV   [X+8],A
    3296: 52 FC    MOV   A,[X-4]
    3298: 54 09    MOV   [X+9],A
    329A: 62 D0 00 MOV   REG[0xD0],0x0
    329D: 52 06    MOV   A,[X+6]
    329F: 53 49    MOV   [__r0],A
    32A1: 52 07    MOV   A,[X+7]
    32A3: 53 48    MOV   [__r1],A
    32A5: 52 08    MOV   A,[X+8]
    32A7: 53 47    MOV   [__r2],A
    32A9: 52 09    MOV   A,[X+9]
    32AB: 53 46    MOV   [__r3],A
    32AD: 50 17    MOV   A,0x17
    32AF: 62 D0 00 MOV   REG[0xD0],0x0
    32B2: 68 49    ASR   [__r0]
    32B4: 6E 48    RRC   [__r1]
    32B6: 6E 47    RRC   [__r2]
    32B8: 6E 46    RRC   [__r3]
    32BA: 78       DEC   A
    32BB: BF F3    JNZ   0x32AF
    32BD: 51 46    MOV   A,[__r3]
    32BF: 11 7F    SUB   A,0x7F
    32C1: 54 0B    MOV   [X+11],A
    32C3: 50 00    MOV   A,0x0
    32C5: 19 00    SBB   A,0x0
    32C7: 54 0A    MOV   [X+10],A
    32C9: 52 09    MOV   A,[X+9]
    32CB: 53 46    MOV   [__r3],A
    32CD: 52 08    MOV   A,[X+8]
    32CF: 53 47    MOV   [__r2],A
    32D1: 52 07    MOV   A,[X+7]
    32D3: 53 48    MOV   [__r1],A
    32D5: 52 06    MOV   A,[X+6]
    32D7: 21 00    AND   A,0x0
    32D9: 53 49    MOV   [__r0],A
    32DB: 51 46    MOV   A,[__r3]
    32DD: 54 13    MOV   [X+19],A
    32DF: 51 47    MOV   A,[__r2]
    32E1: 54 12    MOV   [X+18],A
    32E3: 51 48    MOV   A,[__r1]
    32E5: 29 80    OR    A,0x80
    32E7: 54 11    MOV   [X+17],A
    32E9: 51 49    MOV   A,[__r0]
    32EB: 54 10    MOV   [X+16],A
    32ED: 56 02 00 MOV   [X+2],0x0
    32F0: 56 03 00 MOV   [X+3],0x0
    32F3: 56 04 00 MOV   [X+4],0x0
    32F6: 56 05 00 MOV   [X+5],0x0
    32F9: 56 0C 00 MOV   [X+12],0x0
    32FC: 56 0D 00 MOV   [X+13],0x0
    32FF: 56 0E 00 MOV   [X+14],0x0
    3302: 56 0F 00 MOV   [X+15],0x0
    3305: 52 0B    MOV   A,[X+11]
    3307: 11 1F    SUB   A,0x1F
    3309: 52 0A    MOV   A,[X+10]
    330B: 31 80    XOR   A,0x80
    330D: 19 80    SBB   A,0x80
    330F: C0 19    JC    0x3329
    3311: 52 F8    MOV   A,[X-8]
    3313: 53 48    MOV   [__r1],A
    3315: 52 F7    MOV   A,[X-9]
    3317: 60 D5    MOV   REG[0xD5],A
    3319: 50 FF    MOV   A,0xFF
    331B: 3F 48    MVI   [__r1],A
    331D: 50 FE    MOV   A,0xFE
    331F: 3F 48    MVI   [__r1],A
    3321: 55 48 00 MOV   [__r1],0x0
    3324: 55 49 00 MOV   [__r0],0x0
    3327: 83 5F    JMP   0x3687
    3329: 52 0B    MOV   A,[X+11]
    332B: 11 E9    SUB   A,0xE9
    332D: 52 0A    MOV   A,[X+10]
    332F: 31 80    XOR   A,0x80
    3331: 19 7F    SBB   A,0x7F
    3333: D0 1A    JNC   0x334E
    3335: 62 D0 00 MOV   REG[0xD0],0x0
    3338: 52 F8    MOV   A,[X-8]
    333A: 53 48    MOV   [__r1],A
    333C: 52 F7    MOV   A,[X-9]
    333E: 60 D5    MOV   REG[0xD5],A
    3340: 50 FF    MOV   A,0xFF
    3342: 3F 48    MVI   [__r1],A
    3344: 3F 48    MVI   [__r1],A
    3346: 55 48 00 MOV   [__r1],0x0
    3349: 55 49 00 MOV   [__r0],0x0
    334C: 83 3A    JMP   0x3687
    334E: 52 0B    MOV   A,[X+11]
    3350: 11 17    SUB   A,0x17
    3352: 52 0A    MOV   A,[X+10]
    3354: 31 80    XOR   A,0x80
    3356: 19 80    SBB   A,0x80
    3358: C0 43    JC    0x339C
    335A: 62 D0 00 MOV   REG[0xD0],0x0
    335D: 52 0B    MOV   A,[X+11]
    335F: 11 17    SUB   A,0x17
    3361: 53 48    MOV   [__r1],A
    3363: 52 10    MOV   A,[X+16]
    3365: 53 45    MOV   [__r4],A
    3367: 52 11    MOV   A,[X+17]
    3369: 53 44    MOV   [__r5],A
    336B: 52 12    MOV   A,[X+18]
    336D: 53 43    MOV   [__r6],A
    336F: 52 13    MOV   A,[X+19]
    3371: 53 42    MOV   [__r7],A
    3373: 51 48    MOV   A,[__r1]
    3375: 21 1F    AND   A,0x1F
    3377: A0 0F    JZ    0x3387
    3379: 62 D0 00 MOV   REG[0xD0],0x0
    337C: 65 42    ASL   [__r7]
    337E: 6B 43    RLC   [__r6]
    3380: 6B 44    RLC   [__r5]
    3382: 6B 45    RLC   [__r4]
    3384: 78       DEC   A
    3385: BF F3    JNZ   0x3379
    3387: 62 D0 00 MOV   REG[0xD0],0x0
    338A: 51 45    MOV   A,[__r4]
    338C: 54 0C    MOV   [X+12],A
    338E: 51 44    MOV   A,[__r5]
    3390: 54 0D    MOV   [X+13],A
    3392: 51 43    MOV   A,[__r6]
    3394: 54 0E    MOV   [X+14],A
    3396: 51 42    MOV   A,[__r7]
    3398: 54 0F    MOV   [X+15],A
    339A: 80 D0    JMP   0x346B
    339C: 52 0B    MOV   A,[X+11]
    339E: 11 00    SUB   A,0x0
    33A0: 52 0A    MOV   A,[X+10]
    33A2: 31 80    XOR   A,0x80
    33A4: 19 80    SBB   A,0x80
    33A6: C0 7F    JC    0x3426
    33A8: 62 D0 00 MOV   REG[0xD0],0x0
    33AB: 50 17    MOV   A,0x17
    33AD: 13 0B    SUB   A,[X+11]
    33AF: 53 48    MOV   [__r1],A
    33B1: 52 10    MOV   A,[X+16]
    33B3: 53 45    MOV   [__r4],A
    33B5: 52 11    MOV   A,[X+17]
    33B7: 53 44    MOV   [__r5],A
    33B9: 52 12    MOV   A,[X+18]
    33BB: 53 43    MOV   [__r6],A
    33BD: 52 13    MOV   A,[X+19]
    33BF: 53 42    MOV   [__r7],A
    33C1: 51 48    MOV   A,[__r1]
    33C3: 21 1F    AND   A,0x1F
    33C5: A0 0F    JZ    0x33D5
    33C7: 62 D0 00 MOV   REG[0xD0],0x0
    33CA: 68 45    ASR   [__r4]
    33CC: 6E 44    RRC   [__r5]
    33CE: 6E 43    RRC   [__r6]
    33D0: 6E 42    RRC   [__r7]
    33D2: 78       DEC   A
    33D3: BF F3    JNZ   0x33C7
    33D5: 62 D0 00 MOV   REG[0xD0],0x0
    33D8: 51 45    MOV   A,[__r4]
    33DA: 54 0C    MOV   [X+12],A
    33DC: 51 44    MOV   A,[__r5]
    33DE: 54 0D    MOV   [X+13],A
    33E0: 51 43    MOV   A,[__r6]
    33E2: 54 0E    MOV   [X+14],A
    33E4: 51 42    MOV   A,[__r7]
    33E6: 54 0F    MOV   [X+15],A
    33E8: 52 0B    MOV   A,[X+11]
    33EA: 01 01    ADD   A,0x1
    33EC: 53 48    MOV   [__r1],A
    33EE: 52 10    MOV   A,[X+16]
    33F0: 53 45    MOV   [__r4],A
    33F2: 52 11    MOV   A,[X+17]
    33F4: 53 44    MOV   [__r5],A
    33F6: 52 12    MOV   A,[X+18]
    33F8: 53 43    MOV   [__r6],A
    33FA: 52 13    MOV   A,[X+19]
    33FC: 53 42    MOV   [__r7],A
    33FE: 51 48    MOV   A,[__r1]
    3400: 21 1F    AND   A,0x1F
    3402: A0 0F    JZ    0x3412
    3404: 62 D0 00 MOV   REG[0xD0],0x0
    3407: 65 42    ASL   [__r7]
    3409: 6B 43    RLC   [__r6]
    340B: 6B 44    RLC   [__r5]
    340D: 6B 45    RLC   [__r4]
    340F: 78       DEC   A
    3410: BF F3    JNZ   0x3404
    3412: 62 D0 00 MOV   REG[0xD0],0x0
    3415: 51 42    MOV   A,[__r7]
    3417: 54 05    MOV   [X+5],A
    3419: 51 43    MOV   A,[__r6]
    341B: 54 04    MOV   [X+4],A
    341D: 51 44    MOV   A,[__r5]
    341F: 54 03    MOV   [X+3],A
    3421: 56 02 00 MOV   [X+2],0x0
    3424: 80 46    JMP   0x346B
    3426: 62 D0 00 MOV   REG[0xD0],0x0
    3429: 52 0B    MOV   A,[X+11]
    342B: 01 01    ADD   A,0x1
    342D: 73       CPL   A
    342E: 11 FF    SUB   A,0xFF
    3430: 53 48    MOV   [__r1],A
    3432: 52 13    MOV   A,[X+19]
    3434: 53 42    MOV   [__r7],A
    3436: 52 12    MOV   A,[X+18]
    3438: 53 43    MOV   [__r6],A
    343A: 52 11    MOV   A,[X+17]
    343C: 53 44    MOV   [__r5],A
    343E: 52 10    MOV   A,[X+16]
    3440: 21 00    AND   A,0x0
    3442: 53 45    MOV   [__r4],A
    3444: 51 48    MOV   A,[__r1]
    3446: 21 1F    AND   A,0x1F
    3448: A0 0F    JZ    0x3458
    344A: 62 D0 00 MOV   REG[0xD0],0x0
    344D: 68 45    ASR   [__r4]
    344F: 6E 44    RRC   [__r5]
    3451: 6E 43    RRC   [__r6]
    3453: 6E 42    RRC   [__r7]
    3455: 78       DEC   A
    3456: BF F3    JNZ   0x344A
    3458: 62 D0 00 MOV   REG[0xD0],0x0
    345B: 51 45    MOV   A,[__r4]
    345D: 54 02    MOV   [X+2],A
    345F: 51 44    MOV   A,[__r5]
    3461: 54 03    MOV   [X+3],A
    3463: 51 43    MOV   A,[__r6]
    3465: 54 04    MOV   [X+4],A
    3467: 51 42    MOV   A,[__r7]
    3469: 54 05    MOV   [X+5],A
    346B: 56 01 4A MOV   [X+1],0x4A
    346E: 56 00 00 MOV   [X+0],0x0
    3471: 52 09    MOV   A,[X+9]
    3473: 11 00    SUB   A,0x0
    3475: 52 08    MOV   A,[X+8]
    3477: 19 00    SBB   A,0x0
    3479: 52 07    MOV   A,[X+7]
    347B: 19 00    SBB   A,0x0
    347D: 52 06    MOV   A,[X+6]
    347F: 31 80    XOR   A,0x80
    3481: 19 80    SBB   A,0x80
    3483: D0 20    JNC   0x34A4
    3485: 62 D0 00 MOV   REG[0xD0],0x0
    3488: 52 01    MOV   A,[X+1]
    348A: 53 48    MOV   [__r1],A
    348C: 52 00    MOV   A,[X+0]
    348E: 53 49    MOV   [__r0],A
    3490: 51 48    MOV   A,[__r1]
    3492: 01 01    ADD   A,0x1
    3494: 54 01    MOV   [X+1],A
    3496: 51 49    MOV   A,[__r0]
    3498: 09 00    ADC   A,0x0
    349A: 54 00    MOV   [X+0],A
    349C: 51 49    MOV   A,[__r0]
    349E: 60 D5    MOV   REG[0xD5],A
    34A0: 50 2D    MOV   A,0x2D
    34A2: 3F 48    MVI   [__r1],A
    34A4: 3D 0C 00 CMP   [X+12],0x0
    34A7: B0 31    JNZ   0x34D9
    34A9: 3D 0D 00 CMP   [X+13],0x0
    34AC: B0 2C    JNZ   0x34D9
    34AE: 3D 0E 00 CMP   [X+14],0x0
    34B1: B0 27    JNZ   0x34D9
    34B3: 3D 0F 00 CMP   [X+15],0x0
    34B6: B0 22    JNZ   0x34D9
    34B8: 62 D0 00 MOV   REG[0xD0],0x0
    34BB: 52 01    MOV   A,[X+1]
    34BD: 53 48    MOV   [__r1],A
    34BF: 52 00    MOV   A,[X+0]
    34C1: 53 49    MOV   [__r0],A
    34C3: 51 48    MOV   A,[__r1]
    34C5: 01 01    ADD   A,0x1
    34C7: 54 01    MOV   [X+1],A
    34C9: 51 49    MOV   A,[__r0]
    34CB: 09 00    ADC   A,0x0
    34CD: 54 00    MOV   [X+0],A
    34CF: 51 49    MOV   A,[__r0]
    34D1: 60 D5    MOV   REG[0xD5],A
    34D3: 50 30    MOV   A,0x30
    34D5: 3F 48    MVI   [__r1],A
    34D7: 80 36    JMP   0x350E
    34D9: 50 00    MOV   A,0x0
    34DB: 08       PUSH  A
    34DC: 50 0A    MOV   A,0xA
    34DE: 08       PUSH  A
    34DF: 52 0C    MOV   A,[X+12]
    34E1: 08       PUSH  A
    34E2: 52 0D    MOV   A,[X+13]
    34E4: 08       PUSH  A
    34E5: 52 0E    MOV   A,[X+14]
    34E7: 08       PUSH  A
    34E8: 52 0F    MOV   A,[X+15]
    34EA: 08       PUSH  A
    34EB: 52 00    MOV   A,[X+0]
    34ED: 08       PUSH  A
    34EE: 52 01    MOV   A,[X+1]
    34F0: 08       PUSH  A
    34F1: 7C 2C D2 LCALL _ltoa
    34F4: 38 F8    ADD   SP,0xF8
    34F6: 80 06    JMP   0x34FD
    34F8: 77 01    INC   [X+1]
    34FA: 0F 00 00 ADC   [X+0],0x0
    34FD: 62 D0 00 MOV   REG[0xD0],0x0
    3500: 52 01    MOV   A,[X+1]
    3502: 53 48    MOV   [__r1],A
    3504: 52 00    MOV   A,[X+0]
    3506: 60 D4    MOV   REG[0xD4],A
    3508: 3E 48    MVI   A,[__r1]
    350A: 39 00    CMP   A,0x0
    350C: BF EB    JNZ   0x34F8
    350E: 62 D0 00 MOV   REG[0xD0],0x0
    3511: 52 01    MOV   A,[X+1]
    3513: 53 48    MOV   [__r1],A
    3515: 52 00    MOV   A,[X+0]
    3517: 53 49    MOV   [__r0],A
    3519: 51 48    MOV   A,[__r1]
    351B: 01 01    ADD   A,0x1
    351D: 54 01    MOV   [X+1],A
    351F: 51 49    MOV   A,[__r0]
    3521: 09 00    ADC   A,0x0
    3523: 54 00    MOV   [X+0],A
    3525: 51 49    MOV   A,[__r0]
    3527: 60 D5    MOV   REG[0xD5],A
    3529: 50 2E    MOV   A,0x2E
    352B: 3F 48    MVI   [__r1],A
    352D: 3D 02 00 CMP   [X+2],0x0
    3530: B0 2E    JNZ   0x355F
    3532: 3D 03 00 CMP   [X+3],0x0
    3535: B0 29    JNZ   0x355F
    3537: 3D 04 00 CMP   [X+4],0x0
    353A: B0 24    JNZ   0x355F
    353C: 3D 05 00 CMP   [X+5],0x0
    353F: B0 1F    JNZ   0x355F
    3541: 52 01    MOV   A,[X+1]
    3543: 53 48    MOV   [__r1],A
    3545: 52 00    MOV   A,[X+0]
    3547: 53 49    MOV   [__r0],A
    3549: 51 48    MOV   A,[__r1]
    354B: 01 01    ADD   A,0x1
    354D: 54 01    MOV   [X+1],A
    354F: 51 49    MOV   A,[__r0]
    3551: 09 00    ADC   A,0x0
    3553: 54 00    MOV   [X+0],A
    3555: 51 49    MOV   A,[__r0]
    3557: 60 D5    MOV   REG[0xD5],A
    3559: 50 30    MOV   A,0x30
    355B: 3F 48    MVI   [__r1],A
    355D: 81 14    JMP   0x3672
    355F: 62 D0 00 MOV   REG[0xD0],0x0
    3562: 52 01    MOV   A,[X+1]
    3564: 11 4A    SUB   A,0x4A
    3566: 53 48    MOV   [__r1],A
    3568: 52 00    MOV   A,[X+0]
    356A: 19 00    SBB   A,0x0
    356C: 53 49    MOV   [__r0],A
    356E: 50 0F    MOV   A,0xF
    3570: 12 48    SUB   A,[__r1]
    3572: 53 48    MOV   [__r1],A
    3574: 50 00    MOV   A,0x0
    3576: 1A 49    SBB   A,[__r0]
    3578: 53 49    MOV   [__r0],A
    357A: 16 48 01 SUB   [__r1],0x1
    357D: 1E 49 00 SBB   [__r0],0x0
    3580: 51 48    MOV   A,[__r1]
    3582: 54 15    MOV   [X+21],A
    3584: 50 07    MOV   A,0x7
    3586: 3B 15    CMP   A,[X+21]
    3588: D0 04    JNC   0x358D
    358A: 56 15 07 MOV   [X+21],0x7
    358D: 56 14 00 MOV   [X+20],0x0
    3590: 80 A5    JMP   0x3636
    3592: 62 D0 00 MOV   REG[0xD0],0x0
    3595: 52 02    MOV   A,[X+2]
    3597: 53 49    MOV   [__r0],A
    3599: 52 03    MOV   A,[X+3]
    359B: 53 48    MOV   [__r1],A
    359D: 52 04    MOV   A,[X+4]
    359F: 53 47    MOV   [__r2],A
    35A1: 52 05    MOV   A,[X+5]
    35A3: 53 46    MOV   [__r3],A
    35A5: 65 46    ASL   [__r3]
    35A7: 6B 47    RLC   [__r2]
    35A9: 6B 48    RLC   [__r1]
    35AB: 6B 49    RLC   [__r0]
    35AD: 52 02    MOV   A,[X+2]
    35AF: 53 45    MOV   [__r4],A
    35B1: 52 03    MOV   A,[X+3]
    35B3: 53 44    MOV   [__r5],A
    35B5: 52 04    MOV   A,[X+4]
    35B7: 53 43    MOV   [__r6],A
    35B9: 52 05    MOV   A,[X+5]
    35BB: 53 42    MOV   [__r7],A
    35BD: 50 03    MOV   A,0x3
    35BF: 62 D0 00 MOV   REG[0xD0],0x0
    35C2: 65 42    ASL   [__r7]
    35C4: 6B 43    RLC   [__r6]
    35C6: 6B 44    RLC   [__r5]
    35C8: 6B 45    RLC   [__r4]
    35CA: 78       DEC   A
    35CB: BF F3    JNZ   0x35BF
    35CD: 51 42    MOV   A,[__r7]
    35CF: 02 46    ADD   A,[__r3]
    35D1: 54 05    MOV   [X+5],A
    35D3: 51 43    MOV   A,[__r6]
    35D5: 0A 47    ADC   A,[__r2]
    35D7: 54 04    MOV   [X+4],A
    35D9: 51 44    MOV   A,[__r5]
    35DB: 0A 48    ADC   A,[__r1]
    35DD: 54 03    MOV   [X+3],A
    35DF: 51 45    MOV   A,[__r4]
    35E1: 0A 49    ADC   A,[__r0]
    35E3: 54 02    MOV   [X+2],A
    35E5: 52 01    MOV   A,[X+1]
    35E7: 53 48    MOV   [__r1],A
    35E9: 52 00    MOV   A,[X+0]
    35EB: 53 49    MOV   [__r0],A
    35ED: 51 48    MOV   A,[__r1]
    35EF: 01 01    ADD   A,0x1
    35F1: 54 01    MOV   [X+1],A
    35F3: 51 49    MOV   A,[__r0]
    35F5: 09 00    ADC   A,0x0
    35F7: 54 00    MOV   [X+0],A
    35F9: 52 02    MOV   A,[X+2]
    35FB: 53 45    MOV   [__r4],A
    35FD: 52 03    MOV   A,[X+3]
    35FF: 53 44    MOV   [__r5],A
    3601: 52 04    MOV   A,[X+4]
    3603: 53 43    MOV   [__r6],A
    3605: 52 05    MOV   A,[X+5]
    3607: 53 42    MOV   [__r7],A
    3609: 50 18    MOV   A,0x18
    360B: 62 D0 00 MOV   REG[0xD0],0x0
    360E: 68 45    ASR   [__r4]
    3610: 6E 44    RRC   [__r5]
    3612: 6E 43    RRC   [__r6]
    3614: 6E 42    RRC   [__r7]
    3616: 78       DEC   A
    3617: BF F3    JNZ   0x360B
    3619: 06 42 30 ADD   [__r7],0x30
    361C: 0E 43 00 ADC   [__r6],0x0
    361F: 0E 44 00 ADC   [__r5],0x0
    3622: 0E 45 00 ADC   [__r4],0x0
    3625: 51 42    MOV   A,[__r7]
    3627: 53 47    MOV   [__r2],A
    3629: 51 49    MOV   A,[__r0]
    362B: 60 D5    MOV   REG[0xD5],A
    362D: 51 47    MOV   A,[__r2]
    362F: 3F 48    MVI   [__r1],A
    3631: 27 02 00 AND   [X+2],0x0
    3634: 77 14    INC   [X+20]
    3636: 52 14    MOV   A,[X+20]
    3638: 3B 15    CMP   A,[X+21]
    363A: CF 57    JC    0x3592
    363C: 07 01 FF ADD   [X+1],0xFF
    363F: 0F 00 FF ADC   [X+0],0xFF
    3642: 80 07    JMP   0x364A
    3644: 07 01 FF ADD   [X+1],0xFF
    3647: 0F 00 FF ADC   [X+0],0xFF
    364A: 62 D0 00 MOV   REG[0xD0],0x0
    364D: 52 01    MOV   A,[X+1]
    364F: 53 48    MOV   [__r1],A
    3651: 52 00    MOV   A,[X+0]
    3653: 60 D4    MOV   REG[0xD4],A
    3655: 3E 48    MVI   A,[__r1]
    3657: 39 30    CMP   A,0x30
    3659: B0 13    JNZ   0x366D
    365B: 52 01    MOV   A,[X+1]
    365D: 01 FF    ADD   A,0xFF
    365F: 53 48    MOV   [__r1],A
    3661: 52 00    MOV   A,[X+0]
    3663: 09 FF    ADC   A,0xFF
    3665: 60 D4    MOV   REG[0xD4],A
    3667: 3E 48    MVI   A,[__r1]
    3669: 39 2E    CMP   A,0x2E
    366B: BF D8    JNZ   0x3644
    366D: 77 01    INC   [X+1]
    366F: 0F 00 00 ADC   [X+0],0x0
    3672: 62 D0 00 MOV   REG[0xD0],0x0
    3675: 52 01    MOV   A,[X+1]
    3677: 53 48    MOV   [__r1],A
    3679: 52 00    MOV   A,[X+0]
    367B: 60 D5    MOV   REG[0xD5],A
    367D: 50 00    MOV   A,0x0
    367F: 3F 48    MVI   [__r1],A
    3681: 55 48 4A MOV   [__r1],0x4A
    3684: 55 49 00 MOV   [__r0],0x0
    3687: 38 EA    ADD   SP,0xEA
    3689: 20       POP   X
    368A: 7F       RET   
_isdigit:
    368B: 10       PUSH  X
    368C: 4F       MOV   X,SP
    368D: 62 D0 00 MOV   REG[0xD0],0x0
    3690: 52 FC    MOV   A,[X-4]
    3692: 01 21    ADD   A,0x21
    3694: 53 48    MOV   [__r1],A
    3696: 52 FB    MOV   A,[X-5]
    3698: 09 02    ADC   A,0x2
    369A: 10       PUSH  X
    369B: 58 48    MOV   X,[__r1]
    369D: 28       ROMX  
    369E: 20       POP   X
    369F: 53 48    MOV   [__r1],A
    36A1: 55 49 00 MOV   [__r0],0x0
    36A4: 26 48 04 AND   [__r1],0x4
    36A7: 26 49 00 AND   [__r0],0x0
    36AA: 20       POP   X
    36AB: 7F       RET   
_islower:
    36AC: 10       PUSH  X
    36AD: 4F       MOV   X,SP
    36AE: 62 D0 00 MOV   REG[0xD0],0x0
    36B1: 52 FC    MOV   A,[X-4]
    36B3: 01 21    ADD   A,0x21
    36B5: 53 48    MOV   [__r1],A
    36B7: 52 FB    MOV   A,[X-5]
    36B9: 09 02    ADC   A,0x2
    36BB: 10       PUSH  X
    36BC: 58 48    MOV   X,[__r1]
    36BE: 28       ROMX  
    36BF: 20       POP   X
    36C0: 53 48    MOV   [__r1],A
    36C2: 55 49 00 MOV   [__r0],0x0
    36C5: 26 48 02 AND   [__r1],0x2
    36C8: 26 49 00 AND   [__r0],0x0
    36CB: 20       POP   X
    36CC: 7F       RET   
_isspace:
    36CD: 10       PUSH  X
    36CE: 4F       MOV   X,SP
    36CF: 62 D0 00 MOV   REG[0xD0],0x0
    36D2: 52 FC    MOV   A,[X-4]
    36D4: 01 21    ADD   A,0x21
    36D6: 53 48    MOV   [__r1],A
    36D8: 52 FB    MOV   A,[X-5]
    36DA: 09 02    ADC   A,0x2
    36DC: 10       PUSH  X
    36DD: 58 48    MOV   X,[__r1]
    36DF: 28       ROMX  
    36E0: 20       POP   X
    36E1: 53 48    MOV   [__r1],A
    36E3: 55 49 00 MOV   [__r0],0x0
    36E6: 26 48 10 AND   [__r1],0x10
    36E9: 26 49 00 AND   [__r0],0x0
    36EC: 20       POP   X
    36ED: 7F       RET   
_toupper:
    36EE: 10       PUSH  X
    36EF: 4F       MOV   X,SP
    36F0: 52 FB    MOV   A,[X-5]
    36F2: 08       PUSH  A
    36F3: 52 FC    MOV   A,[X-4]
    36F5: 08       PUSH  A
    36F6: 7C 36 AC LCALL _islower
    36F9: 38 FE    ADD   SP,0xFE
    36FB: 62 D0 00 MOV   REG[0xD0],0x0
    36FE: 3C 49 00 CMP   [__r0],0x0
    3701: B0 06    JNZ   0x3708
    3703: 3C 48 00 CMP   [__r1],0x0
    3706: A0 18    JZ    0x371F
    3708: 62 D0 00 MOV   REG[0xD0],0x0
    370B: 52 FC    MOV   A,[X-4]
    370D: 11 61    SUB   A,0x61
    370F: 53 48    MOV   [__r1],A
    3711: 52 FB    MOV   A,[X-5]
    3713: 19 00    SBB   A,0x0
    3715: 53 49    MOV   [__r0],A
    3717: 06 48 41 ADD   [__r1],0x41
    371A: 0E 49 00 ADC   [__r0],0x0
    371D: 80 0C    JMP   0x372A
    371F: 62 D0 00 MOV   REG[0xD0],0x0
    3722: 52 FC    MOV   A,[X-4]
    3724: 53 48    MOV   [__r1],A
    3726: 52 FB    MOV   A,[X-5]
    3728: 53 49    MOV   [__r0],A
    372A: 20       POP   X
    372B: 7F       RET   
    372C: 10       PUSH  X
    372D: 4F       MOV   X,SP
    372E: 38 02    ADD   SP,0x2
    3730: 3D F9 FF CMP   [X-7],0xFF
    3733: B0 0E    JNZ   0x3742
    3735: 3D FA FE CMP   [X-6],0xFE
    3738: B0 09    JNZ   0x3742
    373A: 56 01 21 MOV   [X+1],0x21
    373D: 56 00 03 MOV   [X+0],0x3
    3740: 80 19    JMP   0x375A
    3742: 3D F9 FF CMP   [X-7],0xFF
    3745: B0 0E    JNZ   0x3754
    3747: 3D FA FF CMP   [X-6],0xFF
    374A: B0 09    JNZ   0x3754
    374C: 56 01 3C MOV   [X+1],0x3C
    374F: 56 00 03 MOV   [X+0],0x3
    3752: 80 07    JMP   0x375A
    3754: 56 01 59 MOV   [X+1],0x59
    3757: 56 00 03 MOV   [X+0],0x3
    375A: 62 D0 00 MOV   REG[0xD0],0x0
    375D: 52 01    MOV   A,[X+1]
    375F: 53 48    MOV   [__r1],A
    3761: 52 00    MOV   A,[X+0]
    3763: 53 49    MOV   [__r0],A
    3765: 38 FE    ADD   SP,0xFE
    3767: 20       POP   X
    3768: 7F       RET   
__FormatFP_1:
    3769: 10       PUSH  X
    376A: 4F       MOV   X,SP
    376B: 38 31    ADD   SP,0x31
    376D: 56 23 FF MOV   [X+35],0xFF
    3770: 56 22 FF MOV   [X+34],0xFF
    3773: 56 06 FF MOV   [X+6],0xFF
    3776: 56 05 FF MOV   [X+5],0xFF
    3779: 56 10 FF MOV   [X+16],0xFF
    377C: 56 0F FF MOV   [X+15],0xFF
    377F: 56 0C FF MOV   [X+12],0xFF
    3782: 56 0B FF MOV   [X+11],0xFF
    3785: 56 1F FF MOV   [X+31],0xFF
    3788: 56 1E FF MOV   [X+30],0xFF
    378B: 56 13 FF MOV   [X+19],0xFF
    378E: 56 12 FF MOV   [X+18],0xFF
    3791: 56 16 00 MOV   [X+22],0x0
    3794: 56 15 00 MOV   [X+21],0x0
    3797: 56 29 FF MOV   [X+41],0xFF
    379A: 56 28 00 MOV   [X+40],0x0
    379D: 56 25 00 MOV   [X+37],0x0
    37A0: 56 24 00 MOV   [X+36],0x0
    37A3: 56 0E 00 MOV   [X+14],0x0
    37A6: 56 0D 00 MOV   [X+13],0x0
    37A9: 56 14 20 MOV   [X+20],0x20
    37AC: 56 19 20 MOV   [X+25],0x20
    37AF: 56 2C 65 MOV   [X+44],0x65
    37B2: 50 14    MOV   A,0x14
    37B4: 13 F2    SUB   A,[X-14]
    37B6: 52 F1    MOV   A,[X-15]
    37B8: 31 80    XOR   A,0x80
    37BA: 62 D0 00 MOV   REG[0xD0],0x0
    37BD: 53 3D    MOV   [__rX],A
    37BF: 50 80    MOV   A,0x80
    37C1: 1A 3D    SBB   A,[__rX]
    37C3: D0 07    JNC   0x37CB
    37C5: 56 F2 14 MOV   [X-14],0x14
    37C8: 56 F1 00 MOV   [X-15],0x0
    37CB: 50 14    MOV   A,0x14
    37CD: 13 F0    SUB   A,[X-16]
    37CF: 52 EF    MOV   A,[X-17]
    37D1: 31 80    XOR   A,0x80
    37D3: 62 D0 00 MOV   REG[0xD0],0x0
    37D6: 53 3D    MOV   [__rX],A
    37D8: 50 80    MOV   A,0x80
    37DA: 1A 3D    SBB   A,[__rX]
    37DC: D0 07    JNC   0x37E4
    37DE: 56 F0 14 MOV   [X-16],0x14
    37E1: 56 EF 00 MOV   [X-17],0x0
    37E4: 3D F9 00 CMP   [X-7],0x0
    37E7: B0 06    JNZ   0x37EE
    37E9: 3D FA 00 CMP   [X-6],0x0
    37EC: A1 36    JZ    0x3923
    37EE: 3D F9 00 CMP   [X-7],0x0
    37F1: B0 06    JNZ   0x37F8
    37F3: 3D FA 01 CMP   [X-6],0x1
    37F6: A0 24    JZ    0x381B
    37F8: 3D F9 00 CMP   [X-7],0x0
    37FB: B0 06    JNZ   0x3802
    37FD: 3D FA 02 CMP   [X-6],0x2
    3800: A0 17    JZ    0x3818
    3802: 3D F9 00 CMP   [X-7],0x0
    3805: B0 06    JNZ   0x380C
    3807: 3D FA 03 CMP   [X-6],0x3
    380A: A0 1B    JZ    0x3826
    380C: 3D F9 00 CMP   [X-7],0x0
    380F: B0 06    JNZ   0x3816
    3811: 3D FA 04 CMP   [X-6],0x4
    3814: A0 0E    JZ    0x3823
    3816: 81 0C    JMP   0x3923
    3818: 56 2C 45 MOV   [X+44],0x45
    381B: 56 0E 01 MOV   [X+14],0x1
    381E: 56 0D 00 MOV   [X+13],0x0
    3821: 81 01    JMP   0x3923
    3823: 56 2C 45 MOV   [X+44],0x45
    3826: 52 F5    MOV   A,[X-11]
    3828: 54 2D    MOV   [X+45],A
    382A: 52 F6    MOV   A,[X-10]
    382C: 54 2E    MOV   [X+46],A
    382E: 52 F7    MOV   A,[X-9]
    3830: 54 2F    MOV   [X+47],A
    3832: 52 F8    MOV   A,[X-8]
    3834: 54 30    MOV   [X+48],A
    3836: 50 00    MOV   A,0x0
    3838: 08       PUSH  A
    3839: 08       PUSH  A
    383A: 08       PUSH  A
    383B: 08       PUSH  A
    383C: 52 F5    MOV   A,[X-11]
    383E: 08       PUSH  A
    383F: 52 F6    MOV   A,[X-10]
    3841: 08       PUSH  A
    3842: 52 F7    MOV   A,[X-9]
    3844: 08       PUSH  A
    3845: 52 F8    MOV   A,[X-8]
    3847: 08       PUSH  A
    3848: 62 D0 00 MOV   REG[0xD0],0x0
    384B: 7C 26 FC LCALL 0x26FC
    384E: 38 F8    ADD   SP,0xF8
    3850: 39 00    CMP   A,0x0
    3852: A0 2C    JZ    0x387F
    3854: 39 01    CMP   A,0x1
    3856: A0 28    JZ    0x387F
    3858: 52 F5    MOV   A,[X-11]
    385A: 08       PUSH  A
    385B: 52 F6    MOV   A,[X-10]
    385D: 08       PUSH  A
    385E: 52 F7    MOV   A,[X-9]
    3860: 08       PUSH  A
    3861: 52 F8    MOV   A,[X-8]
    3863: 08       PUSH  A
    3864: 50 BF    MOV   A,0xBF
    3866: 08       PUSH  A
    3867: 50 80    MOV   A,0x80
    3869: 08       PUSH  A
    386A: 50 00    MOV   A,0x0
    386C: 08       PUSH  A
    386D: 08       PUSH  A
    386E: 7C 28 37 LCALL 0x2837
    3871: 18       POP   A
    3872: 54 30    MOV   [X+48],A
    3874: 18       POP   A
    3875: 54 2F    MOV   [X+47],A
    3877: 18       POP   A
    3878: 54 2E    MOV   [X+46],A
    387A: 18       POP   A
    387B: 54 2D    MOV   [X+45],A
    387D: 38 FC    ADD   SP,0xFC
    387F: 56 1A 3F MOV   [X+26],0x3F
    3882: 56 1B 80 MOV   [X+27],0x80
    3885: 56 1C 00 MOV   [X+28],0x0
    3888: 56 1D 00 MOV   [X+29],0x0
    388B: 56 01 00 MOV   [X+1],0x0
    388E: 56 00 00 MOV   [X+0],0x0
    3891: 80 30    JMP   0x38C2
    3893: 52 1A    MOV   A,[X+26]
    3895: 08       PUSH  A
    3896: 52 1B    MOV   A,[X+27]
    3898: 08       PUSH  A
    3899: 52 1C    MOV   A,[X+28]
    389B: 08       PUSH  A
    389C: 52 1D    MOV   A,[X+29]
    389E: 08       PUSH  A
    389F: 50 41    MOV   A,0x41
    38A1: 08       PUSH  A
    38A2: 50 20    MOV   A,0x20
    38A4: 08       PUSH  A
    38A5: 50 00    MOV   A,0x0
    38A7: 08       PUSH  A
    38A8: 08       PUSH  A
    38A9: 62 D0 00 MOV   REG[0xD0],0x0
    38AC: 7C 28 37 LCALL 0x2837
    38AF: 18       POP   A
    38B0: 54 1D    MOV   [X+29],A
    38B2: 18       POP   A
    38B3: 54 1C    MOV   [X+28],A
    38B5: 18       POP   A
    38B6: 54 1B    MOV   [X+27],A
    38B8: 18       POP   A
    38B9: 54 1A    MOV   [X+26],A
    38BB: 38 FC    ADD   SP,0xFC
    38BD: 77 01    INC   [X+1]
    38BF: 0F 00 00 ADC   [X+0],0x0
    38C2: 52 01    MOV   A,[X+1]
    38C4: 13 F0    SUB   A,[X-16]
    38C6: 52 EF    MOV   A,[X-17]
    38C8: 31 80    XOR   A,0x80
    38CA: 62 D0 00 MOV   REG[0xD0],0x0
    38CD: 53 3D    MOV   [__rX],A
    38CF: 52 00    MOV   A,[X+0]
    38D1: 31 80    XOR   A,0x80
    38D3: 1A 3D    SBB   A,[__rX]
    38D5: CF BD    JC    0x3893
    38D7: 50 38    MOV   A,0x38
    38D9: 08       PUSH  A
    38DA: 50 D1    MOV   A,0xD1
    38DC: 08       PUSH  A
    38DD: 50 B7    MOV   A,0xB7
    38DF: 08       PUSH  A
    38E0: 50 17    MOV   A,0x17
    38E2: 08       PUSH  A
    38E3: 52 2D    MOV   A,[X+45]
    38E5: 08       PUSH  A
    38E6: 52 2E    MOV   A,[X+46]
    38E8: 08       PUSH  A
    38E9: 52 2F    MOV   A,[X+47]
    38EB: 08       PUSH  A
    38EC: 52 30    MOV   A,[X+48]
    38EE: 08       PUSH  A
    38EF: 7C 26 FC LCALL 0x26FC
    38F2: 38 F8    ADD   SP,0xF8
    38F4: 39 FF    CMP   A,0xFF
    38F6: A0 26    JZ    0x391D
    38F8: 52 1A    MOV   A,[X+26]
    38FA: 08       PUSH  A
    38FB: 52 1B    MOV   A,[X+27]
    38FD: 08       PUSH  A
    38FE: 52 1C    MOV   A,[X+28]
    3900: 08       PUSH  A
    3901: 52 1D    MOV   A,[X+29]
    3903: 08       PUSH  A
    3904: 52 2D    MOV   A,[X+45]
    3906: 08       PUSH  A
    3907: 52 2E    MOV   A,[X+46]
    3909: 08       PUSH  A
    390A: 52 2F    MOV   A,[X+47]
    390C: 08       PUSH  A
    390D: 52 30    MOV   A,[X+48]
    390F: 08       PUSH  A
    3910: 7C 26 FC LCALL 0x26FC
    3913: 38 F8    ADD   SP,0xF8
    3915: 39 00    CMP   A,0x0
    3917: A0 0B    JZ    0x3923
    3919: 39 01    CMP   A,0x1
    391B: B0 07    JNZ   0x3923
    391D: 56 0E 01 MOV   [X+14],0x1
    3920: 56 0D 00 MOV   [X+13],0x0
    3923: 62 D0 00 MOV   REG[0xD0],0x0
    3926: 52 F4    MOV   A,[X-12]
    3928: 21 10    AND   A,0x10
    392A: 53 48    MOV   [__r1],A
    392C: 52 F3    MOV   A,[X-13]
    392E: 21 00    AND   A,0x0
    3930: 39 00    CMP   A,0x0
    3932: B0 06    JNZ   0x3939
    3934: 3C 48 00 CMP   [__r1],0x0
    3937: A0 04    JZ    0x393C
    3939: 56 14 30 MOV   [X+20],0x30
    393C: 52 14    MOV   A,[X+20]
    393E: 54 11    MOV   [X+17],A
    3940: 62 D0 00 MOV   REG[0xD0],0x0
    3943: 52 F4    MOV   A,[X-12]
    3945: 21 08    AND   A,0x8
    3947: 53 48    MOV   [__r1],A
    3949: 52 F3    MOV   A,[X-13]
    394B: 21 00    AND   A,0x0
    394D: 39 00    CMP   A,0x0
    394F: B0 06    JNZ   0x3956
    3951: 3C 48 00 CMP   [__r1],0x0
    3954: A0 04    JZ    0x3959
    3956: 56 11 2B MOV   [X+17],0x2B
    3959: 3D 0D 00 CMP   [X+13],0x0
    395C: B0 06    JNZ   0x3963
    395E: 3D 0E 00 CMP   [X+14],0x0
    3961: A0 2D    JZ    0x398F
    3963: 62 D0 00 MOV   REG[0xD0],0x0
    3966: 5A 48    MOV   [__r1],X
    3968: 06 48 2A ADD   [__r1],0x2A
    396B: 50 07    MOV   A,0x7
    396D: 08       PUSH  A
    396E: 51 48    MOV   A,[__r1]
    3970: 08       PUSH  A
    3971: 52 F5    MOV   A,[X-11]
    3973: 08       PUSH  A
    3974: 52 F6    MOV   A,[X-10]
    3976: 08       PUSH  A
    3977: 52 F7    MOV   A,[X-9]
    3979: 08       PUSH  A
    397A: 52 F8    MOV   A,[X-8]
    397C: 08       PUSH  A
    397D: 7C 32 45 LCALL _ftoa
    3980: 38 FA    ADD   SP,0xFA
    3982: 62 D0 00 MOV   REG[0xD0],0x0
    3985: 51 48    MOV   A,[__r1]
    3987: 54 0A    MOV   [X+10],A
    3989: 51 49    MOV   A,[__r0]
    398B: 54 09    MOV   [X+9],A
    398D: 81 15    JMP   0x3AA3
    398F: 56 1A 3F MOV   [X+26],0x3F
    3992: 56 1B 00 MOV   [X+27],0x0
    3995: 56 1C 00 MOV   [X+28],0x0
    3998: 56 1D 00 MOV   [X+29],0x0
    399B: 56 01 00 MOV   [X+1],0x0
    399E: 56 00 00 MOV   [X+0],0x0
    39A1: 80 30    JMP   0x39D2
    39A3: 50 41    MOV   A,0x41
    39A5: 08       PUSH  A
    39A6: 50 20    MOV   A,0x20
    39A8: 08       PUSH  A
    39A9: 50 00    MOV   A,0x0
    39AB: 08       PUSH  A
    39AC: 08       PUSH  A
    39AD: 52 1A    MOV   A,[X+26]
    39AF: 08       PUSH  A
    39B0: 52 1B    MOV   A,[X+27]
    39B2: 08       PUSH  A
    39B3: 52 1C    MOV   A,[X+28]
    39B5: 08       PUSH  A
    39B6: 52 1D    MOV   A,[X+29]
    39B8: 08       PUSH  A
    39B9: 62 D0 00 MOV   REG[0xD0],0x0
    39BC: 7C 27 59 LCALL 0x2759
    39BF: 18       POP   A
    39C0: 54 1D    MOV   [X+29],A
    39C2: 18       POP   A
    39C3: 54 1C    MOV   [X+28],A
    39C5: 18       POP   A
    39C6: 54 1B    MOV   [X+27],A
    39C8: 18       POP   A
    39C9: 54 1A    MOV   [X+26],A
    39CB: 38 FC    ADD   SP,0xFC
    39CD: 77 01    INC   [X+1]
    39CF: 0F 00 00 ADC   [X+0],0x0
    39D2: 52 01    MOV   A,[X+1]
    39D4: 13 F0    SUB   A,[X-16]
    39D6: 52 EF    MOV   A,[X-17]
    39D8: 31 80    XOR   A,0x80
    39DA: 62 D0 00 MOV   REG[0xD0],0x0
    39DD: 53 3D    MOV   [__rX],A
    39DF: 52 00    MOV   A,[X+0]
    39E1: 31 80    XOR   A,0x80
    39E3: 1A 3D    SBB   A,[__rX]
    39E5: CF BD    JC    0x39A3
    39E7: 50 00    MOV   A,0x0
    39E9: 08       PUSH  A
    39EA: 08       PUSH  A
    39EB: 08       PUSH  A
    39EC: 08       PUSH  A
    39ED: 52 F5    MOV   A,[X-11]
    39EF: 08       PUSH  A
    39F0: 52 F6    MOV   A,[X-10]
    39F2: 08       PUSH  A
    39F3: 52 F7    MOV   A,[X-9]
    39F5: 08       PUSH  A
    39F6: 52 F8    MOV   A,[X-8]
    39F8: 08       PUSH  A
    39F9: 7C 26 FC LCALL 0x26FC
    39FC: 38 F8    ADD   SP,0xF8
    39FE: 39 00    CMP   A,0x0
    3A00: A0 53    JZ    0x3A54
    3A02: 39 01    CMP   A,0x1
    3A04: A0 4F    JZ    0x3A54
    3A06: 5A 48    MOV   [__r1],X
    3A08: 06 48 2A ADD   [__r1],0x2A
    3A0B: 50 07    MOV   A,0x7
    3A0D: 08       PUSH  A
    3A0E: 51 48    MOV   A,[__r1]
    3A10: 08       PUSH  A
    3A11: 52 1A    MOV   A,[X+26]
    3A13: 08       PUSH  A
    3A14: 52 1B    MOV   A,[X+27]
    3A16: 08       PUSH  A
    3A17: 52 1C    MOV   A,[X+28]
    3A19: 08       PUSH  A
    3A1A: 52 1D    MOV   A,[X+29]
    3A1C: 08       PUSH  A
    3A1D: 52 F5    MOV   A,[X-11]
    3A1F: 08       PUSH  A
    3A20: 52 F6    MOV   A,[X-10]
    3A22: 08       PUSH  A
    3A23: 52 F7    MOV   A,[X-9]
    3A25: 08       PUSH  A
    3A26: 52 F8    MOV   A,[X-8]
    3A28: 08       PUSH  A
    3A29: 7C 29 5C LCALL 0x295C
    3A2C: 18       POP   A
    3A2D: 53 46    MOV   [__r3],A
    3A2F: 18       POP   A
    3A30: 53 47    MOV   [__r2],A
    3A32: 18       POP   A
    3A33: 53 48    MOV   [__r1],A
    3A35: 18       POP   A
    3A36: 38 FC    ADD   SP,0xFC
    3A38: 08       PUSH  A
    3A39: 51 48    MOV   A,[__r1]
    3A3B: 08       PUSH  A
    3A3C: 51 47    MOV   A,[__r2]
    3A3E: 08       PUSH  A
    3A3F: 51 46    MOV   A,[__r3]
    3A41: 08       PUSH  A
    3A42: 7C 32 45 LCALL _ftoa
    3A45: 38 FA    ADD   SP,0xFA
    3A47: 62 D0 00 MOV   REG[0xD0],0x0
    3A4A: 51 48    MOV   A,[__r1]
    3A4C: 54 0A    MOV   [X+10],A
    3A4E: 51 49    MOV   A,[__r0]
    3A50: 54 09    MOV   [X+9],A
    3A52: 80 50    JMP   0x3AA3
    3A54: 62 D0 00 MOV   REG[0xD0],0x0
    3A57: 5A 48    MOV   [__r1],X
    3A59: 06 48 2A ADD   [__r1],0x2A
    3A5C: 50 07    MOV   A,0x7
    3A5E: 08       PUSH  A
    3A5F: 51 48    MOV   A,[__r1]
    3A61: 08       PUSH  A
    3A62: 52 1A    MOV   A,[X+26]
    3A64: 08       PUSH  A
    3A65: 52 1B    MOV   A,[X+27]
    3A67: 08       PUSH  A
    3A68: 52 1C    MOV   A,[X+28]
    3A6A: 08       PUSH  A
    3A6B: 52 1D    MOV   A,[X+29]
    3A6D: 08       PUSH  A
    3A6E: 52 F5    MOV   A,[X-11]
    3A70: 08       PUSH  A
    3A71: 52 F6    MOV   A,[X-10]
    3A73: 08       PUSH  A
    3A74: 52 F7    MOV   A,[X-9]
    3A76: 08       PUSH  A
    3A77: 52 F8    MOV   A,[X-8]
    3A79: 08       PUSH  A
    3A7A: 7C 26 03 LCALL 0x2603
    3A7D: 18       POP   A
    3A7E: 53 46    MOV   [__r3],A
    3A80: 18       POP   A
    3A81: 53 47    MOV   [__r2],A
    3A83: 18       POP   A
    3A84: 53 48    MOV   [__r1],A
    3A86: 18       POP   A
    3A87: 38 FC    ADD   SP,0xFC
    3A89: 08       PUSH  A
    3A8A: 51 48    MOV   A,[__r1]
    3A8C: 08       PUSH  A
    3A8D: 51 47    MOV   A,[__r2]
    3A8F: 08       PUSH  A
    3A90: 51 46    MOV   A,[__r3]
    3A92: 08       PUSH  A
    3A93: 7C 32 45 LCALL _ftoa
    3A96: 38 FA    ADD   SP,0xFA
    3A98: 62 D0 00 MOV   REG[0xD0],0x0
    3A9B: 51 48    MOV   A,[__r1]
    3A9D: 54 0A    MOV   [X+10],A
    3A9F: 51 49    MOV   A,[__r0]
    3AA1: 54 09    MOV   [X+9],A
    3AA3: 3D 2A 00 CMP   [X+42],0x0
    3AA6: B0 06    JNZ   0x3AAD
    3AA8: 3D 2B 00 CMP   [X+43],0x0
    3AAB: A0 14    JZ    0x3AC0
    3AAD: 52 2A    MOV   A,[X+42]
    3AAF: 08       PUSH  A
    3AB0: 52 2B    MOV   A,[X+43]
    3AB2: 08       PUSH  A
    3AB3: 52 FB    MOV   A,[X-5]
    3AB5: 08       PUSH  A
    3AB6: 52 FC    MOV   A,[X-4]
    3AB8: 08       PUSH  A
    3AB9: 9C 71    CALL  0x372C
    3ABB: 38 FC    ADD   SP,0xFC
    3ABD: 7D 45 05 LJMP  0x4505
    3AC0: 56 01 00 MOV   [X+1],0x0
    3AC3: 56 00 00 MOV   [X+0],0x0
    3AC6: 3D 0D 00 CMP   [X+13],0x0
    3AC9: B0 35    JNZ   0x3AFF
    3ACB: 3D 0E 00 CMP   [X+14],0x0
    3ACE: B0 30    JNZ   0x3AFF
    3AD0: 52 06    MOV   A,[X+6]
    3AD2: 11 00    SUB   A,0x0
    3AD4: 52 05    MOV   A,[X+5]
    3AD6: 31 80    XOR   A,0x80
    3AD8: 19 80    SBB   A,0x80
    3ADA: C0 24    JC    0x3AFF
    3ADC: 62 D0 00 MOV   REG[0xD0],0x0
    3ADF: 52 01    MOV   A,[X+1]
    3AE1: 13 06    SUB   A,[X+6]
    3AE3: 53 48    MOV   [__r1],A
    3AE5: 52 00    MOV   A,[X+0]
    3AE7: 1B 05    SBB   A,[X+5]
    3AE9: 53 49    MOV   [__r0],A
    3AEB: 52 F0    MOV   A,[X-16]
    3AED: 12 48    SUB   A,[__r1]
    3AEF: 51 49    MOV   A,[__r0]
    3AF1: 31 80    XOR   A,0x80
    3AF3: 53 3D    MOV   [__rX],A
    3AF5: 52 EF    MOV   A,[X-17]
    3AF7: 31 80    XOR   A,0x80
    3AF9: 1A 3D    SBB   A,[__rX]
    3AFB: D0 03    JNC   0x3AFF
    3AFD: 80 C5    JMP   0x3BC3
    3AFF: 62 D0 00 MOV   REG[0xD0],0x0
    3B02: 52 01    MOV   A,[X+1]
    3B04: 03 0A    ADD   A,[X+10]
    3B06: 53 48    MOV   [__r1],A
    3B08: 52 00    MOV   A,[X+0]
    3B0A: 0B 09    ADC   A,[X+9]
    3B0C: 60 D4    MOV   REG[0xD4],A
    3B0E: 3E 48    MVI   A,[__r1]
    3B10: 54 04    MOV   [X+4],A
    3B12: 3D 04 30 CMP   [X+4],0x30
    3B15: C0 7A    JC    0x3B90
    3B17: 50 39    MOV   A,0x39
    3B19: 3B 04    CMP   A,[X+4]
    3B1B: C0 74    JC    0x3B90
    3B1D: 52 01    MOV   A,[X+1]
    3B1F: 54 23    MOV   [X+35],A
    3B21: 52 00    MOV   A,[X+0]
    3B23: 54 22    MOV   [X+34],A
    3B25: 50 30    MOV   A,0x30
    3B27: 3B 04    CMP   A,[X+4]
    3B29: D0 15    JNC   0x3B3F
    3B2B: 52 1F    MOV   A,[X+31]
    3B2D: 11 00    SUB   A,0x0
    3B2F: 52 1E    MOV   A,[X+30]
    3B31: 31 80    XOR   A,0x80
    3B33: 19 80    SBB   A,0x80
    3B35: D0 09    JNC   0x3B3F
    3B37: 52 01    MOV   A,[X+1]
    3B39: 54 1F    MOV   [X+31],A
    3B3B: 52 00    MOV   A,[X+0]
    3B3D: 54 1E    MOV   [X+30],A
    3B3F: 52 06    MOV   A,[X+6]
    3B41: 11 00    SUB   A,0x0
    3B43: 52 05    MOV   A,[X+5]
    3B45: 31 80    XOR   A,0x80
    3B47: 19 80    SBB   A,0x80
    3B49: D0 2C    JNC   0x3B76
    3B4B: 52 0C    MOV   A,[X+12]
    3B4D: 11 00    SUB   A,0x0
    3B4F: 52 0B    MOV   A,[X+11]
    3B51: 31 80    XOR   A,0x80
    3B53: 19 80    SBB   A,0x80
    3B55: D0 0F    JNC   0x3B65
    3B57: 50 30    MOV   A,0x30
    3B59: 3B 04    CMP   A,[X+4]
    3B5B: D0 09    JNC   0x3B65
    3B5D: 52 01    MOV   A,[X+1]
    3B5F: 54 0C    MOV   [X+12],A
    3B61: 52 00    MOV   A,[X+0]
    3B63: 54 0B    MOV   [X+11],A
    3B65: 52 0C    MOV   A,[X+12]
    3B67: 11 00    SUB   A,0x0
    3B69: 52 0B    MOV   A,[X+11]
    3B6B: 31 80    XOR   A,0x80
    3B6D: 19 80    SBB   A,0x80
    3B6F: C0 06    JC    0x3B76
    3B71: 77 16    INC   [X+22]
    3B73: 0F 15 00 ADC   [X+21],0x0
    3B76: 52 06    MOV   A,[X+6]
    3B78: 11 00    SUB   A,0x0
    3B7A: 52 05    MOV   A,[X+5]
    3B7C: 31 80    XOR   A,0x80
    3B7E: 19 80    SBB   A,0x80
    3B80: C0 0F    JC    0x3B90
    3B82: 50 30    MOV   A,0x30
    3B84: 3B 04    CMP   A,[X+4]
    3B86: D0 09    JNC   0x3B90
    3B88: 52 01    MOV   A,[X+1]
    3B8A: 54 13    MOV   [X+19],A
    3B8C: 52 00    MOV   A,[X+0]
    3B8E: 54 12    MOV   [X+18],A
    3B90: 3D 04 2E CMP   [X+4],0x2E
    3B93: B0 09    JNZ   0x3B9D
    3B95: 52 01    MOV   A,[X+1]
    3B97: 54 06    MOV   [X+6],A
    3B99: 52 00    MOV   A,[X+0]
    3B9B: 54 05    MOV   [X+5],A
    3B9D: 3D 04 2D CMP   [X+4],0x2D
    3BA0: B0 0A    JNZ   0x3BAB
    3BA2: 56 25 01 MOV   [X+37],0x1
    3BA5: 56 24 00 MOV   [X+36],0x0
    3BA8: 56 11 2D MOV   [X+17],0x2D
    3BAB: 3D 04 00 CMP   [X+4],0x0
    3BAE: B0 03    JNZ   0x3BB2
    3BB0: 80 12    JMP   0x3BC3
    3BB2: 77 01    INC   [X+1]
    3BB4: 0F 00 00 ADC   [X+0],0x0
    3BB7: 52 01    MOV   A,[X+1]
    3BB9: 11 14    SUB   A,0x14
    3BBB: 52 00    MOV   A,[X+0]
    3BBD: 31 80    XOR   A,0x80
    3BBF: 19 80    SBB   A,0x80
    3BC1: CF 04    JC    0x3AC6
    3BC3: 52 06    MOV   A,[X+6]
    3BC5: 11 00    SUB   A,0x0
    3BC7: 52 05    MOV   A,[X+5]
    3BC9: 31 80    XOR   A,0x80
    3BCB: 19 80    SBB   A,0x80
    3BCD: D0 1B    JNC   0x3BE9
    3BCF: 52 23    MOV   A,[X+35]
    3BD1: 01 01    ADD   A,0x1
    3BD3: 54 10    MOV   [X+16],A
    3BD5: 52 22    MOV   A,[X+34]
    3BD7: 09 00    ADC   A,0x0
    3BD9: 54 0F    MOV   [X+15],A
    3BDB: 52 10    MOV   A,[X+16]
    3BDD: 01 01    ADD   A,0x1
    3BDF: 54 21    MOV   [X+33],A
    3BE1: 52 0F    MOV   A,[X+15]
    3BE3: 09 00    ADC   A,0x0
    3BE5: 54 20    MOV   [X+32],A
    3BE7: 80 2F    JMP   0x3C17
    3BE9: 52 06    MOV   A,[X+6]
    3BEB: 54 10    MOV   [X+16],A
    3BED: 52 05    MOV   A,[X+5]
    3BEF: 54 0F    MOV   [X+15],A
    3BF1: 52 13    MOV   A,[X+19]
    3BF3: 11 00    SUB   A,0x0
    3BF5: 52 12    MOV   A,[X+18]
    3BF7: 31 80    XOR   A,0x80
    3BF9: 19 80    SBB   A,0x80
    3BFB: D0 0F    JNC   0x3C0B
    3BFD: 52 10    MOV   A,[X+16]
    3BFF: 01 01    ADD   A,0x1
    3C01: 54 21    MOV   [X+33],A
    3C03: 52 0F    MOV   A,[X+15]
    3C05: 09 00    ADC   A,0x0
    3C07: 54 20    MOV   [X+32],A
    3C09: 80 0D    JMP   0x3C17
    3C0B: 52 13    MOV   A,[X+19]
    3C0D: 01 01    ADD   A,0x1
    3C0F: 54 21    MOV   [X+33],A
    3C11: 52 12    MOV   A,[X+18]
    3C13: 09 00    ADC   A,0x0
    3C15: 54 20    MOV   [X+32],A
    3C17: 52 0C    MOV   A,[X+12]
    3C19: 11 00    SUB   A,0x0
    3C1B: 52 0B    MOV   A,[X+11]
    3C1D: 31 80    XOR   A,0x80
    3C1F: 19 80    SBB   A,0x80
    3C21: D0 0D    JNC   0x3C2F
    3C23: 52 10    MOV   A,[X+16]
    3C25: 11 01    SUB   A,0x1
    3C27: 54 0C    MOV   [X+12],A
    3C29: 52 0F    MOV   A,[X+15]
    3C2B: 19 00    SBB   A,0x0
    3C2D: 54 0B    MOV   [X+11],A
    3C2F: 3D 0D 00 CMP   [X+13],0x0
    3C32: B0 06    JNZ   0x3C39
    3C34: 3D 0E 00 CMP   [X+14],0x0
    3C37: A5 6C    JZ    0x41A4
    3C39: 52 1F    MOV   A,[X+31]
    3C3B: 11 00    SUB   A,0x0
    3C3D: 52 1E    MOV   A,[X+30]
    3C3F: 31 80    XOR   A,0x80
    3C41: 19 80    SBB   A,0x80
    3C43: D0 09    JNC   0x3C4D
    3C45: 52 0C    MOV   A,[X+12]
    3C47: 54 1F    MOV   [X+31],A
    3C49: 52 0B    MOV   A,[X+11]
    3C4B: 54 1E    MOV   [X+30],A
    3C4D: 56 01 00 MOV   [X+1],0x0
    3C50: 56 00 00 MOV   [X+0],0x0
    3C53: 52 11    MOV   A,[X+17]
    3C55: 3B 14    CMP   A,[X+20]
    3C57: A0 28    JZ    0x3C80
    3C59: 62 D0 00 MOV   REG[0xD0],0x0
    3C5C: 52 01    MOV   A,[X+1]
    3C5E: 53 48    MOV   [__r1],A
    3C60: 52 00    MOV   A,[X+0]
    3C62: 53 49    MOV   [__r0],A
    3C64: 51 48    MOV   A,[__r1]
    3C66: 01 01    ADD   A,0x1
    3C68: 54 01    MOV   [X+1],A
    3C6A: 51 49    MOV   A,[__r0]
    3C6C: 09 00    ADC   A,0x0
    3C6E: 54 00    MOV   [X+0],A
    3C70: 52 FC    MOV   A,[X-4]
    3C72: 04 48    ADD   [__r1],A
    3C74: 52 FB    MOV   A,[X-5]
    3C76: 0C 49    ADC   [__r0],A
    3C78: 51 49    MOV   A,[__r0]
    3C7A: 60 D5    MOV   REG[0xD5],A
    3C7C: 52 11    MOV   A,[X+17]
    3C7E: 3F 48    MVI   [__r1],A
    3C80: 62 D0 00 MOV   REG[0xD0],0x0
    3C83: 52 01    MOV   A,[X+1]
    3C85: 53 48    MOV   [__r1],A
    3C87: 52 00    MOV   A,[X+0]
    3C89: 53 49    MOV   [__r0],A
    3C8B: 51 48    MOV   A,[__r1]
    3C8D: 01 01    ADD   A,0x1
    3C8F: 54 01    MOV   [X+1],A
    3C91: 51 49    MOV   A,[__r0]
    3C93: 09 00    ADC   A,0x0
    3C95: 54 00    MOV   [X+0],A
    3C97: 52 1F    MOV   A,[X+31]
    3C99: 03 0A    ADD   A,[X+10]
    3C9B: 53 46    MOV   [__r3],A
    3C9D: 52 1E    MOV   A,[X+30]
    3C9F: 0B 09    ADC   A,[X+9]
    3CA1: 60 D4    MOV   REG[0xD4],A
    3CA3: 3E 46    MVI   A,[__r3]
    3CA5: 53 47    MOV   [__r2],A
    3CA7: 52 FC    MOV   A,[X-4]
    3CA9: 04 48    ADD   [__r1],A
    3CAB: 52 FB    MOV   A,[X-5]
    3CAD: 0C 49    ADC   [__r0],A
    3CAF: 51 49    MOV   A,[__r0]
    3CB1: 60 D5    MOV   REG[0xD5],A
    3CB3: 51 47    MOV   A,[__r2]
    3CB5: 3F 48    MVI   [__r1],A
    3CB7: 52 01    MOV   A,[X+1]
    3CB9: 03 FC    ADD   A,[X-4]
    3CBB: 53 48    MOV   [__r1],A
    3CBD: 52 00    MOV   A,[X+0]
    3CBF: 0B FB    ADC   A,[X-5]
    3CC1: 60 D5    MOV   REG[0xD5],A
    3CC3: 50 2E    MOV   A,0x2E
    3CC5: 3F 48    MVI   [__r1],A
    3CC7: 50 00    MOV   A,0x0
    3CC9: 13 F0    SUB   A,[X-16]
    3CCB: 52 EF    MOV   A,[X-17]
    3CCD: 31 80    XOR   A,0x80
    3CCF: 53 3D    MOV   [__rX],A
    3CD1: 50 80    MOV   A,0x80
    3CD3: 1A 3D    SBB   A,[__rX]
    3CD5: D0 06    JNC   0x3CDC
    3CD7: 77 01    INC   [X+1]
    3CD9: 0F 00 00 ADC   [X+0],0x0
    3CDC: 52 1F    MOV   A,[X+31]
    3CDE: 01 01    ADD   A,0x1
    3CE0: 54 03    MOV   [X+3],A
    3CE2: 52 1E    MOV   A,[X+30]
    3CE4: 09 00    ADC   A,0x0
    3CE6: 54 02    MOV   [X+2],A
    3CE8: 56 08 00 MOV   [X+8],0x0
    3CEB: 56 07 00 MOV   [X+7],0x0
    3CEE: 80 A9    JMP   0x3D98
    3CF0: 52 02    MOV   A,[X+2]
    3CF2: 3B 0F    CMP   A,[X+15]
    3CF4: B0 07    JNZ   0x3CFC
    3CF6: 52 03    MOV   A,[X+3]
    3CF8: 3B 10    CMP   A,[X+16]
    3CFA: A0 98    JZ    0x3D93
    3CFC: 52 03    MOV   A,[X+3]
    3CFE: 13 21    SUB   A,[X+33]
    3D00: 52 20    MOV   A,[X+32]
    3D02: 31 80    XOR   A,0x80
    3D04: 62 D0 00 MOV   REG[0xD0],0x0
    3D07: 53 3D    MOV   [__rX],A
    3D09: 52 02    MOV   A,[X+2]
    3D0B: 31 80    XOR   A,0x80
    3D0D: 1A 3D    SBB   A,[__rX]
    3D0F: D0 37    JNC   0x3D47
    3D11: 52 01    MOV   A,[X+1]
    3D13: 53 48    MOV   [__r1],A
    3D15: 52 00    MOV   A,[X+0]
    3D17: 53 49    MOV   [__r0],A
    3D19: 51 48    MOV   A,[__r1]
    3D1B: 01 01    ADD   A,0x1
    3D1D: 54 01    MOV   [X+1],A
    3D1F: 51 49    MOV   A,[__r0]
    3D21: 09 00    ADC   A,0x0
    3D23: 54 00    MOV   [X+0],A
    3D25: 52 03    MOV   A,[X+3]
    3D27: 03 0A    ADD   A,[X+10]
    3D29: 53 46    MOV   [__r3],A
    3D2B: 52 02    MOV   A,[X+2]
    3D2D: 0B 09    ADC   A,[X+9]
    3D2F: 60 D4    MOV   REG[0xD4],A
    3D31: 3E 46    MVI   A,[__r3]
    3D33: 53 47    MOV   [__r2],A
    3D35: 52 FC    MOV   A,[X-4]
    3D37: 04 48    ADD   [__r1],A
    3D39: 52 FB    MOV   A,[X-5]
    3D3B: 0C 49    ADC   [__r0],A
    3D3D: 51 49    MOV   A,[__r0]
    3D3F: 60 D5    MOV   REG[0xD5],A
    3D41: 51 47    MOV   A,[__r2]
    3D43: 3F 48    MVI   [__r1],A
    3D45: 80 48    JMP   0x3D8E
    3D47: 62 D0 00 MOV   REG[0xD0],0x0
    3D4A: 52 F4    MOV   A,[X-12]
    3D4C: 21 01    AND   A,0x1
    3D4E: 53 48    MOV   [__r1],A
    3D50: 52 F3    MOV   A,[X-13]
    3D52: 21 00    AND   A,0x0
    3D54: 39 00    CMP   A,0x0
    3D56: B0 10    JNZ   0x3D67
    3D58: 3C 48 00 CMP   [__r1],0x0
    3D5B: B0 0B    JNZ   0x3D67
    3D5D: 3D 07 00 CMP   [X+7],0x0
    3D60: B0 58    JNZ   0x3DB9
    3D62: 3D 08 00 CMP   [X+8],0x0
    3D65: B0 53    JNZ   0x3DB9
    3D67: 62 D0 00 MOV   REG[0xD0],0x0
    3D6A: 52 01    MOV   A,[X+1]
    3D6C: 53 48    MOV   [__r1],A
    3D6E: 52 00    MOV   A,[X+0]
    3D70: 53 49    MOV   [__r0],A
    3D72: 51 48    MOV   A,[__r1]
    3D74: 01 01    ADD   A,0x1
    3D76: 54 01    MOV   [X+1],A
    3D78: 51 49    MOV   A,[__r0]
    3D7A: 09 00    ADC   A,0x0
    3D7C: 54 00    MOV   [X+0],A
    3D7E: 52 FC    MOV   A,[X-4]
    3D80: 04 48    ADD   [__r1],A
    3D82: 52 FB    MOV   A,[X-5]
    3D84: 0C 49    ADC   [__r0],A
    3D86: 51 49    MOV   A,[__r0]
    3D88: 60 D5    MOV   REG[0xD5],A
    3D8A: 50 30    MOV   A,0x30
    3D8C: 3F 48    MVI   [__r1],A
    3D8E: 77 08    INC   [X+8]
    3D90: 0F 07 00 ADC   [X+7],0x0
    3D93: 77 03    INC   [X+3]
    3D95: 0F 02 00 ADC   [X+2],0x0
    3D98: 52 08    MOV   A,[X+8]
    3D9A: 13 F0    SUB   A,[X-16]
    3D9C: 52 EF    MOV   A,[X-17]
    3D9E: 31 80    XOR   A,0x80
    3DA0: 62 D0 00 MOV   REG[0xD0],0x0
    3DA3: 53 3D    MOV   [__rX],A
    3DA5: 52 07    MOV   A,[X+7]
    3DA7: 31 80    XOR   A,0x80
    3DA9: 1A 3D    SBB   A,[__rX]
    3DAB: D0 0D    JNC   0x3DB9
    3DAD: 52 01    MOV   A,[X+1]
    3DAF: 11 0E    SUB   A,0xE
    3DB1: 52 00    MOV   A,[X+0]
    3DB3: 31 80    XOR   A,0x80
    3DB5: 19 80    SBB   A,0x80
    3DB7: CF 38    JC    0x3CF0
    3DB9: 52 01    MOV   A,[X+1]
    3DBB: 11 01    SUB   A,0x1
    3DBD: 54 08    MOV   [X+8],A
    3DBF: 52 00    MOV   A,[X+0]
    3DC1: 19 00    SBB   A,0x0
    3DC3: 54 07    MOV   [X+7],A
    3DC5: 3D EF 00 CMP   [X-17],0x0
    3DC8: B0 0E    JNZ   0x3DD7
    3DCA: 3D F0 00 CMP   [X-16],0x0
    3DCD: B0 09    JNZ   0x3DD7
    3DCF: 52 01    MOV   A,[X+1]
    3DD1: 54 08    MOV   [X+8],A
    3DD3: 52 00    MOV   A,[X+0]
    3DD5: 54 07    MOV   [X+7],A
    3DD7: 62 D0 00 MOV   REG[0xD0],0x0
    3DDA: 52 10    MOV   A,[X+16]
    3DDC: 13 1F    SUB   A,[X+31]
    3DDE: 53 48    MOV   [__r1],A
    3DE0: 52 0F    MOV   A,[X+15]
    3DE2: 1B 1E    SBB   A,[X+30]
    3DE4: 53 49    MOV   [__r0],A
    3DE6: 51 48    MOV   A,[__r1]
    3DE8: 11 01    SUB   A,0x1
    3DEA: 54 29    MOV   [X+41],A
    3DEC: 51 49    MOV   A,[__r0]
    3DEE: 19 00    SBB   A,0x0
    3DF0: 54 28    MOV   [X+40],A
    3DF2: 52 03    MOV   A,[X+3]
    3DF4: 13 21    SUB   A,[X+33]
    3DF6: 52 20    MOV   A,[X+32]
    3DF8: 31 80    XOR   A,0x80
    3DFA: 53 3D    MOV   [__rX],A
    3DFC: 52 02    MOV   A,[X+2]
    3DFE: 31 80    XOR   A,0x80
    3E00: 1A 3D    SBB   A,[__rX]
    3E02: D0 18    JNC   0x3E1B
    3E04: 52 03    MOV   A,[X+3]
    3E06: 03 0A    ADD   A,[X+10]
    3E08: 53 48    MOV   [__r1],A
    3E0A: 52 02    MOV   A,[X+2]
    3E0C: 0B 09    ADC   A,[X+9]
    3E0E: 60 D4    MOV   REG[0xD4],A
    3E10: 3E 48    MVI   A,[__r1]
    3E12: 39 2E    CMP   A,0x2E
    3E14: B0 06    JNZ   0x3E1B
    3E16: 77 03    INC   [X+3]
    3E18: 0F 02 00 ADC   [X+2],0x0
    3E1B: 52 03    MOV   A,[X+3]
    3E1D: 13 21    SUB   A,[X+33]
    3E1F: 52 20    MOV   A,[X+32]
    3E21: 31 80    XOR   A,0x80
    3E23: 62 D0 00 MOV   REG[0xD0],0x0
    3E26: 53 3D    MOV   [__rX],A
    3E28: 52 02    MOV   A,[X+2]
    3E2A: 31 80    XOR   A,0x80
    3E2C: 1A 3D    SBB   A,[__rX]
    3E2E: D1 4B    JNC   0x3F7A
    3E30: 52 03    MOV   A,[X+3]
    3E32: 03 0A    ADD   A,[X+10]
    3E34: 53 48    MOV   [__r1],A
    3E36: 52 02    MOV   A,[X+2]
    3E38: 0B 09    ADC   A,[X+9]
    3E3A: 60 D4    MOV   REG[0xD4],A
    3E3C: 3E 48    MVI   A,[__r1]
    3E3E: 53 48    MOV   [__r1],A
    3E40: 55 49 00 MOV   [__r0],0x0
    3E43: 11 35    SUB   A,0x35
    3E45: 50 00    MOV   A,0x0
    3E47: 31 80    XOR   A,0x80
    3E49: 19 80    SBB   A,0x80
    3E4B: C1 2E    JC    0x3F7A
    3E4D: 50 39    MOV   A,0x39
    3E4F: 12 48    SUB   A,[__r1]
    3E51: 51 49    MOV   A,[__r0]
    3E53: 31 80    XOR   A,0x80
    3E55: 53 3D    MOV   [__rX],A
    3E57: 50 80    MOV   A,0x80
    3E59: 1A 3D    SBB   A,[__rX]
    3E5B: C1 1E    JC    0x3F7A
    3E5D: 81 10    JMP   0x3F6E
    3E5F: 62 D0 00 MOV   REG[0xD0],0x0
    3E62: 52 08    MOV   A,[X+8]
    3E64: 03 FC    ADD   A,[X-4]
    3E66: 53 48    MOV   [__r1],A
    3E68: 52 07    MOV   A,[X+7]
    3E6A: 0B FB    ADC   A,[X-5]
    3E6C: 60 D4    MOV   REG[0xD4],A
    3E6E: 3E 48    MVI   A,[__r1]
    3E70: 53 48    MOV   [__r1],A
    3E72: 55 49 00 MOV   [__r0],0x0
    3E75: 11 30    SUB   A,0x30
    3E77: 50 00    MOV   A,0x0
    3E79: 31 80    XOR   A,0x80
    3E7B: 19 80    SBB   A,0x80
    3E7D: C0 32    JC    0x3EB0
    3E7F: 50 38    MOV   A,0x38
    3E81: 12 48    SUB   A,[__r1]
    3E83: 51 49    MOV   A,[__r0]
    3E85: 31 80    XOR   A,0x80
    3E87: 53 3D    MOV   [__rX],A
    3E89: 50 80    MOV   A,0x80
    3E8B: 1A 3D    SBB   A,[__rX]
    3E8D: C0 22    JC    0x3EB0
    3E8F: 52 08    MOV   A,[X+8]
    3E91: 03 FC    ADD   A,[X-4]
    3E93: 53 48    MOV   [__r1],A
    3E95: 52 07    MOV   A,[X+7]
    3E97: 0B FB    ADC   A,[X-5]
    3E99: 53 49    MOV   [__r0],A
    3E9B: 60 D4    MOV   REG[0xD4],A
    3E9D: 3E 48    MVI   A,[__r1]
    3E9F: 7A 48    DEC   [__r1]
    3EA1: 53 47    MOV   [__r2],A
    3EA3: 06 47 01 ADD   [__r2],0x1
    3EA6: 51 49    MOV   A,[__r0]
    3EA8: 60 D5    MOV   REG[0xD5],A
    3EAA: 51 47    MOV   A,[__r2]
    3EAC: 3F 48    MVI   [__r1],A
    3EAE: 80 CB    JMP   0x3F7A
    3EB0: 62 D0 00 MOV   REG[0xD0],0x0
    3EB3: 52 08    MOV   A,[X+8]
    3EB5: 03 FC    ADD   A,[X-4]
    3EB7: 53 48    MOV   [__r1],A
    3EB9: 52 07    MOV   A,[X+7]
    3EBB: 0B FB    ADC   A,[X-5]
    3EBD: 60 D4    MOV   REG[0xD4],A
    3EBF: 3E 48    MVI   A,[__r1]
    3EC1: 39 2E    CMP   A,0x2E
    3EC3: B0 80    JNZ   0x3F44
    3EC5: 7B 08    DEC   [X+8]
    3EC7: 1F 07 00 SBB   [X+7],0x0
    3ECA: 52 08    MOV   A,[X+8]
    3ECC: 03 FC    ADD   A,[X-4]
    3ECE: 53 48    MOV   [__r1],A
    3ED0: 52 07    MOV   A,[X+7]
    3ED2: 0B FB    ADC   A,[X-5]
    3ED4: 60 D4    MOV   REG[0xD4],A
    3ED6: 3E 48    MVI   A,[__r1]
    3ED8: 53 48    MOV   [__r1],A
    3EDA: 55 49 00 MOV   [__r0],0x0
    3EDD: 11 30    SUB   A,0x30
    3EDF: 50 00    MOV   A,0x0
    3EE1: 31 80    XOR   A,0x80
    3EE3: 19 80    SBB   A,0x80
    3EE5: C0 32    JC    0x3F18
    3EE7: 50 38    MOV   A,0x38
    3EE9: 12 48    SUB   A,[__r1]
    3EEB: 51 49    MOV   A,[__r0]
    3EED: 31 80    XOR   A,0x80
    3EEF: 53 3D    MOV   [__rX],A
    3EF1: 50 80    MOV   A,0x80
    3EF3: 1A 3D    SBB   A,[__rX]
    3EF5: C0 22    JC    0x3F18
    3EF7: 52 08    MOV   A,[X+8]
    3EF9: 03 FC    ADD   A,[X-4]
    3EFB: 53 48    MOV   [__r1],A
    3EFD: 52 07    MOV   A,[X+7]
    3EFF: 0B FB    ADC   A,[X-5]
    3F01: 53 49    MOV   [__r0],A
    3F03: 60 D4    MOV   REG[0xD4],A
    3F05: 3E 48    MVI   A,[__r1]
    3F07: 7A 48    DEC   [__r1]
    3F09: 53 47    MOV   [__r2],A
    3F0B: 06 47 01 ADD   [__r2],0x1
    3F0E: 51 49    MOV   A,[__r0]
    3F10: 60 D5    MOV   REG[0xD5],A
    3F12: 51 47    MOV   A,[__r2]
    3F14: 3F 48    MVI   [__r1],A
    3F16: 80 63    JMP   0x3F7A
    3F18: 62 D0 00 MOV   REG[0xD0],0x0
    3F1B: 52 08    MOV   A,[X+8]
    3F1D: 03 FC    ADD   A,[X-4]
    3F1F: 53 48    MOV   [__r1],A
    3F21: 52 07    MOV   A,[X+7]
    3F23: 0B FB    ADC   A,[X-5]
    3F25: 60 D4    MOV   REG[0xD4],A
    3F27: 3E 48    MVI   A,[__r1]
    3F29: 39 39    CMP   A,0x39
    3F2B: B0 18    JNZ   0x3F44
    3F2D: 52 08    MOV   A,[X+8]
    3F2F: 03 FC    ADD   A,[X-4]
    3F31: 53 48    MOV   [__r1],A
    3F33: 52 07    MOV   A,[X+7]
    3F35: 0B FB    ADC   A,[X-5]
    3F37: 60 D5    MOV   REG[0xD5],A
    3F39: 50 31    MOV   A,0x31
    3F3B: 3F 48    MVI   [__r1],A
    3F3D: 77 29    INC   [X+41]
    3F3F: 0F 28 00 ADC   [X+40],0x0
    3F42: 80 37    JMP   0x3F7A
    3F44: 62 D0 00 MOV   REG[0xD0],0x0
    3F47: 52 08    MOV   A,[X+8]
    3F49: 03 FC    ADD   A,[X-4]
    3F4B: 53 48    MOV   [__r1],A
    3F4D: 52 07    MOV   A,[X+7]
    3F4F: 0B FB    ADC   A,[X-5]
    3F51: 60 D4    MOV   REG[0xD4],A
    3F53: 3E 48    MVI   A,[__r1]
    3F55: 39 39    CMP   A,0x39
    3F57: B0 11    JNZ   0x3F69
    3F59: 52 08    MOV   A,[X+8]
    3F5B: 03 FC    ADD   A,[X-4]
    3F5D: 53 48    MOV   [__r1],A
    3F5F: 52 07    MOV   A,[X+7]
    3F61: 0B FB    ADC   A,[X-5]
    3F63: 60 D5    MOV   REG[0xD5],A
    3F65: 50 30    MOV   A,0x30
    3F67: 3F 48    MVI   [__r1],A
    3F69: 7B 08    DEC   [X+8]
    3F6B: 1F 07 00 SBB   [X+7],0x0
    3F6E: 52 08    MOV   A,[X+8]
    3F70: 11 00    SUB   A,0x0
    3F72: 52 07    MOV   A,[X+7]
    3F74: 31 80    XOR   A,0x80
    3F76: 19 80    SBB   A,0x80
    3F78: DE E6    JNC   0x3E5F
    3F7A: 62 D0 00 MOV   REG[0xD0],0x0
    3F7D: 52 01    MOV   A,[X+1]
    3F7F: 53 48    MOV   [__r1],A
    3F81: 52 00    MOV   A,[X+0]
    3F83: 53 49    MOV   [__r0],A
    3F85: 51 48    MOV   A,[__r1]
    3F87: 01 01    ADD   A,0x1
    3F89: 54 01    MOV   [X+1],A
    3F8B: 51 49    MOV   A,[__r0]
    3F8D: 09 00    ADC   A,0x0
    3F8F: 54 00    MOV   [X+0],A
    3F91: 52 FC    MOV   A,[X-4]
    3F93: 04 48    ADD   [__r1],A
    3F95: 52 FB    MOV   A,[X-5]
    3F97: 0C 49    ADC   [__r0],A
    3F99: 51 49    MOV   A,[__r0]
    3F9B: 60 D5    MOV   REG[0xD5],A
    3F9D: 52 2C    MOV   A,[X+44]
    3F9F: 3F 48    MVI   [__r1],A
    3FA1: 52 29    MOV   A,[X+41]
    3FA3: 11 00    SUB   A,0x0
    3FA5: 52 28    MOV   A,[X+40]
    3FA7: 31 80    XOR   A,0x80
    3FA9: 19 80    SBB   A,0x80
    3FAB: D0 2F    JNC   0x3FDB
    3FAD: 52 01    MOV   A,[X+1]
    3FAF: 53 48    MOV   [__r1],A
    3FB1: 52 00    MOV   A,[X+0]
    3FB3: 53 49    MOV   [__r0],A
    3FB5: 51 48    MOV   A,[__r1]
    3FB7: 01 01    ADD   A,0x1
    3FB9: 54 01    MOV   [X+1],A
    3FBB: 51 49    MOV   A,[__r0]
    3FBD: 09 00    ADC   A,0x0
    3FBF: 54 00    MOV   [X+0],A
    3FC1: 52 FC    MOV   A,[X-4]
    3FC3: 04 48    ADD   [__r1],A
    3FC5: 52 FB    MOV   A,[X-5]
    3FC7: 0C 49    ADC   [__r0],A
    3FC9: 51 49    MOV   A,[__r0]
    3FCB: 60 D5    MOV   REG[0xD5],A
    3FCD: 50 2D    MOV   A,0x2D
    3FCF: 3F 48    MVI   [__r1],A
    3FD1: 52 29    MOV   A,[X+41]
    3FD3: 73       CPL   A
    3FD4: 54 29    MOV   [X+41],A
    3FD6: 52 28    MOV   A,[X+40]
    3FD8: 73       CPL   A
    3FD9: 54 28    MOV   [X+40],A
    3FDB: 50 00    MOV   A,0x0
    3FDD: 08       PUSH  A
    3FDE: 50 0A    MOV   A,0xA
    3FE0: 08       PUSH  A
    3FE1: 52 28    MOV   A,[X+40]
    3FE3: 08       PUSH  A
    3FE4: 52 29    MOV   A,[X+41]
    3FE6: 08       PUSH  A
    3FE7: 62 D0 00 MOV   REG[0xD0],0x0
    3FEA: 52 01    MOV   A,[X+1]
    3FEC: 03 FC    ADD   A,[X-4]
    3FEE: 53 48    MOV   [__r1],A
    3FF0: 52 00    MOV   A,[X+0]
    3FF2: 0B FB    ADC   A,[X-5]
    3FF4: 08       PUSH  A
    3FF5: 51 48    MOV   A,[__r1]
    3FF7: 08       PUSH  A
    3FF8: 7C 2A F9 LCALL _itoa
    3FFB: 38 FA    ADD   SP,0xFA
    3FFD: 56 01 00 MOV   [X+1],0x0
    4000: 56 00 00 MOV   [X+0],0x0
    4003: 62 D0 00 MOV   REG[0xD0],0x0
    4006: 52 01    MOV   A,[X+1]
    4008: 03 FC    ADD   A,[X-4]
    400A: 53 48    MOV   [__r1],A
    400C: 52 00    MOV   A,[X+0]
    400E: 0B FB    ADC   A,[X-5]
    4010: 60 D4    MOV   REG[0xD4],A
    4012: 3E 48    MVI   A,[__r1]
    4014: 39 00    CMP   A,0x0
    4016: B0 0B    JNZ   0x4022
    4018: 52 01    MOV   A,[X+1]
    401A: 54 18    MOV   [X+24],A
    401C: 52 00    MOV   A,[X+0]
    401E: 54 17    MOV   [X+23],A
    4020: 80 12    JMP   0x4033
    4022: 77 01    INC   [X+1]
    4024: 0F 00 00 ADC   [X+0],0x0
    4027: 52 01    MOV   A,[X+1]
    4029: 11 14    SUB   A,0x14
    402B: 52 00    MOV   A,[X+0]
    402D: 31 80    XOR   A,0x80
    402F: 19 80    SBB   A,0x80
    4031: CF D1    JC    0x4003
    4033: 62 D0 00 MOV   REG[0xD0],0x0
    4036: 52 F4    MOV   A,[X-12]
    4038: 21 04    AND   A,0x4
    403A: 53 48    MOV   [__r1],A
    403C: 52 F3    MOV   A,[X-13]
    403E: 21 00    AND   A,0x0
    4040: 39 00    CMP   A,0x0
    4042: B0 06    JNZ   0x4049
    4044: 3C 48 00 CMP   [__r1],0x0
    4047: A0 6B    JZ    0x40B3
    4049: 52 18    MOV   A,[X+24]
    404B: 13 F2    SUB   A,[X-14]
    404D: 52 F1    MOV   A,[X-15]
    404F: 31 80    XOR   A,0x80
    4051: 62 D0 00 MOV   REG[0xD0],0x0
    4054: 53 3D    MOV   [__rX],A
    4056: 52 17    MOV   A,[X+23]
    4058: 31 80    XOR   A,0x80
    405A: 1A 3D    SBB   A,[__rX]
    405C: D4 9D    JNC   0x44FA
    405E: 52 18    MOV   A,[X+24]
    4060: 54 03    MOV   [X+3],A
    4062: 52 17    MOV   A,[X+23]
    4064: 54 02    MOV   [X+2],A
    4066: 80 19    JMP   0x4080
    4068: 62 D0 00 MOV   REG[0xD0],0x0
    406B: 52 03    MOV   A,[X+3]
    406D: 03 FC    ADD   A,[X-4]
    406F: 53 48    MOV   [__r1],A
    4071: 52 02    MOV   A,[X+2]
    4073: 0B FB    ADC   A,[X-5]
    4075: 60 D5    MOV   REG[0xD5],A
    4077: 52 19    MOV   A,[X+25]
    4079: 3F 48    MVI   [__r1],A
    407B: 77 03    INC   [X+3]
    407D: 0F 02 00 ADC   [X+2],0x0
    4080: 52 03    MOV   A,[X+3]
    4082: 13 F2    SUB   A,[X-14]
    4084: 52 F1    MOV   A,[X-15]
    4086: 31 80    XOR   A,0x80
    4088: 62 D0 00 MOV   REG[0xD0],0x0
    408B: 53 3D    MOV   [__rX],A
    408D: 52 02    MOV   A,[X+2]
    408F: 31 80    XOR   A,0x80
    4091: 1A 3D    SBB   A,[__rX]
    4093: CF D4    JC    0x4068
    4095: 52 F2    MOV   A,[X-14]
    4097: 11 01    SUB   A,0x1
    4099: 53 48    MOV   [__r1],A
    409B: 52 F1    MOV   A,[X-15]
    409D: 19 00    SBB   A,0x0
    409F: 53 49    MOV   [__r0],A
    40A1: 52 FC    MOV   A,[X-4]
    40A3: 04 48    ADD   [__r1],A
    40A5: 52 FB    MOV   A,[X-5]
    40A7: 0C 49    ADC   [__r0],A
    40A9: 51 49    MOV   A,[__r0]
    40AB: 60 D5    MOV   REG[0xD5],A
    40AD: 50 00    MOV   A,0x0
    40AF: 3F 48    MVI   [__r1],A
    40B1: 84 48    JMP   0x44FA
    40B3: 52 18    MOV   A,[X+24]
    40B5: 13 F2    SUB   A,[X-14]
    40B7: 52 F1    MOV   A,[X-15]
    40B9: 31 80    XOR   A,0x80
    40BB: 62 D0 00 MOV   REG[0xD0],0x0
    40BE: 53 3D    MOV   [__rX],A
    40C0: 52 17    MOV   A,[X+23]
    40C2: 31 80    XOR   A,0x80
    40C4: 1A 3D    SBB   A,[__rX]
    40C6: D4 33    JNC   0x44FA
    40C8: 52 18    MOV   A,[X+24]
    40CA: 54 03    MOV   [X+3],A
    40CC: 52 17    MOV   A,[X+23]
    40CE: 54 02    MOV   [X+2],A
    40D0: 80 3D    JMP   0x410E
    40D2: 62 D0 00 MOV   REG[0xD0],0x0
    40D5: 52 03    MOV   A,[X+3]
    40D7: 03 FC    ADD   A,[X-4]
    40D9: 53 48    MOV   [__r1],A
    40DB: 52 02    MOV   A,[X+2]
    40DD: 0B FB    ADC   A,[X-5]
    40DF: 60 D4    MOV   REG[0xD4],A
    40E1: 3E 48    MVI   A,[__r1]
    40E3: 53 49    MOV   [__r0],A
    40E5: 52 03    MOV   A,[X+3]
    40E7: 03 F2    ADD   A,[X-14]
    40E9: 53 46    MOV   [__r3],A
    40EB: 52 02    MOV   A,[X+2]
    40ED: 0B F1    ADC   A,[X-15]
    40EF: 53 47    MOV   [__r2],A
    40F1: 52 18    MOV   A,[X+24]
    40F3: 14 46    SUB   [__r3],A
    40F5: 52 17    MOV   A,[X+23]
    40F7: 1C 47    SBB   [__r2],A
    40F9: 52 FC    MOV   A,[X-4]
    40FB: 04 46    ADD   [__r3],A
    40FD: 52 FB    MOV   A,[X-5]
    40FF: 0C 47    ADC   [__r2],A
    4101: 51 47    MOV   A,[__r2]
    4103: 60 D5    MOV   REG[0xD5],A
    4105: 51 49    MOV   A,[__r0]
    4107: 3F 46    MVI   [__r3],A
    4109: 7B 03    DEC   [X+3]
    410B: 1F 02 00 SBB   [X+2],0x0
    410E: 52 03    MOV   A,[X+3]
    4110: 11 00    SUB   A,0x0
    4112: 52 02    MOV   A,[X+2]
    4114: 31 80    XOR   A,0x80
    4116: 19 80    SBB   A,0x80
    4118: DF B9    JNC   0x40D2
    411A: 62 D0 00 MOV   REG[0xD0],0x0
    411D: 52 F2    MOV   A,[X-14]
    411F: 13 18    SUB   A,[X+24]
    4121: 53 48    MOV   [__r1],A
    4123: 52 F1    MOV   A,[X-15]
    4125: 1B 17    SBB   A,[X+23]
    4127: 53 49    MOV   [__r0],A
    4129: 51 48    MOV   A,[__r1]
    412B: 11 01    SUB   A,0x1
    412D: 54 03    MOV   [X+3],A
    412F: 51 49    MOV   A,[__r0]
    4131: 19 00    SBB   A,0x0
    4133: 54 02    MOV   [X+2],A
    4135: 80 19    JMP   0x414F
    4137: 62 D0 00 MOV   REG[0xD0],0x0
    413A: 52 03    MOV   A,[X+3]
    413C: 03 FC    ADD   A,[X-4]
    413E: 53 48    MOV   [__r1],A
    4140: 52 02    MOV   A,[X+2]
    4142: 0B FB    ADC   A,[X-5]
    4144: 60 D5    MOV   REG[0xD5],A
    4146: 52 14    MOV   A,[X+20]
    4148: 3F 48    MVI   [__r1],A
    414A: 7B 03    DEC   [X+3]
    414C: 1F 02 00 SBB   [X+2],0x0
    414F: 52 03    MOV   A,[X+3]
    4151: 11 00    SUB   A,0x0
    4153: 52 02    MOV   A,[X+2]
    4155: 31 80    XOR   A,0x80
    4157: 19 80    SBB   A,0x80
    4159: DF DD    JNC   0x4137
    415B: 62 D0 00 MOV   REG[0xD0],0x0
    415E: 52 F4    MOV   A,[X-12]
    4160: 21 10    AND   A,0x10
    4162: 53 48    MOV   [__r1],A
    4164: 52 F3    MOV   A,[X-13]
    4166: 21 00    AND   A,0x0
    4168: 39 00    CMP   A,0x0
    416A: B0 06    JNZ   0x4171
    416C: 3C 48 00 CMP   [__r1],0x0
    416F: A3 8A    JZ    0x44FA
    4171: 52 11    MOV   A,[X+17]
    4173: 3B 14    CMP   A,[X+20]
    4175: A3 84    JZ    0x44FA
    4177: 62 D0 00 MOV   REG[0xD0],0x0
    417A: 52 FC    MOV   A,[X-4]
    417C: 53 48    MOV   [__r1],A
    417E: 52 FB    MOV   A,[X-5]
    4180: 60 D5    MOV   REG[0xD5],A
    4182: 52 11    MOV   A,[X+17]
    4184: 3F 48    MVI   [__r1],A
    4186: 52 F2    MOV   A,[X-14]
    4188: 13 18    SUB   A,[X+24]
    418A: 53 48    MOV   [__r1],A
    418C: 52 F1    MOV   A,[X-15]
    418E: 1B 17    SBB   A,[X+23]
    4190: 53 49    MOV   [__r0],A
    4192: 52 FC    MOV   A,[X-4]
    4194: 04 48    ADD   [__r1],A
    4196: 52 FB    MOV   A,[X-5]
    4198: 0C 49    ADC   [__r0],A
    419A: 51 49    MOV   A,[__r0]
    419C: 60 D5    MOV   REG[0xD5],A
    419E: 52 14    MOV   A,[X+20]
    41A0: 3F 48    MVI   [__r1],A
    41A2: 83 57    JMP   0x44FA
    41A4: 62 D0 00 MOV   REG[0xD0],0x0
    41A7: 52 F4    MOV   A,[X-12]
    41A9: 21 01    AND   A,0x1
    41AB: 53 48    MOV   [__r1],A
    41AD: 52 F3    MOV   A,[X-13]
    41AF: 21 00    AND   A,0x0
    41B1: 39 00    CMP   A,0x0
    41B3: B0 06    JNZ   0x41BA
    41B5: 3C 48 00 CMP   [__r1],0x0
    41B8: A0 3C    JZ    0x41F5
    41BA: 62 D0 00 MOV   REG[0xD0],0x0
    41BD: 52 10    MOV   A,[X+16]
    41BF: 03 F0    ADD   A,[X-16]
    41C1: 53 48    MOV   [__r1],A
    41C3: 52 0F    MOV   A,[X+15]
    41C5: 0B EF    ADC   A,[X-17]
    41C7: 53 49    MOV   [__r0],A
    41C9: 51 48    MOV   A,[__r1]
    41CB: 13 21    SUB   A,[X+33]
    41CD: 52 20    MOV   A,[X+32]
    41CF: 31 80    XOR   A,0x80
    41D1: 53 3D    MOV   [__rX],A
    41D3: 51 49    MOV   A,[__r0]
    41D5: 31 80    XOR   A,0x80
    41D7: 1A 3D    SBB   A,[__rX]
    41D9: C0 3E    JC    0x4218
    41DB: 52 10    MOV   A,[X+16]
    41DD: 03 F0    ADD   A,[X-16]
    41DF: 53 48    MOV   [__r1],A
    41E1: 52 0F    MOV   A,[X+15]
    41E3: 0B EF    ADC   A,[X-17]
    41E5: 53 49    MOV   [__r0],A
    41E7: 51 48    MOV   A,[__r1]
    41E9: 01 01    ADD   A,0x1
    41EB: 54 21    MOV   [X+33],A
    41ED: 51 49    MOV   A,[__r0]
    41EF: 09 00    ADC   A,0x0
    41F1: 54 20    MOV   [X+32],A
    41F3: 80 24    JMP   0x4218
    41F5: 62 D0 00 MOV   REG[0xD0],0x0
    41F8: 52 10    MOV   A,[X+16]
    41FA: 01 01    ADD   A,0x1
    41FC: 53 48    MOV   [__r1],A
    41FE: 52 0F    MOV   A,[X+15]
    4200: 09 00    ADC   A,0x0
    4202: 53 49    MOV   [__r0],A
    4204: 52 20    MOV   A,[X+32]
    4206: 3A 49    CMP   A,[__r0]
    4208: B0 0F    JNZ   0x4218
    420A: 52 21    MOV   A,[X+33]
    420C: 3A 48    CMP   A,[__r1]
    420E: B0 09    JNZ   0x4218
    4210: 52 10    MOV   A,[X+16]
    4212: 54 21    MOV   [X+33],A
    4214: 52 0F    MOV   A,[X+15]
    4216: 54 20    MOV   [X+32],A
    4218: 50 14    MOV   A,0x14
    421A: 13 21    SUB   A,[X+33]
    421C: 52 20    MOV   A,[X+32]
    421E: 31 80    XOR   A,0x80
    4220: 62 D0 00 MOV   REG[0xD0],0x0
    4223: 53 3D    MOV   [__rX],A
    4225: 50 80    MOV   A,0x80
    4227: 1A 3D    SBB   A,[__rX]
    4229: D0 07    JNC   0x4231
    422B: 56 21 14 MOV   [X+33],0x14
    422E: 56 20 00 MOV   [X+32],0x0
    4231: 52 21    MOV   A,[X+33]
    4233: 13 0C    SUB   A,[X+12]
    4235: 54 18    MOV   [X+24],A
    4237: 52 20    MOV   A,[X+32]
    4239: 1B 0B    SBB   A,[X+11]
    423B: 54 17    MOV   [X+23],A
    423D: 52 11    MOV   A,[X+17]
    423F: 3B 14    CMP   A,[X+20]
    4241: A0 06    JZ    0x4248
    4243: 77 18    INC   [X+24]
    4245: 0F 17 00 ADC   [X+23],0x0
    4248: 52 F2    MOV   A,[X-14]
    424A: 13 18    SUB   A,[X+24]
    424C: 52 17    MOV   A,[X+23]
    424E: 31 80    XOR   A,0x80
    4250: 62 D0 00 MOV   REG[0xD0],0x0
    4253: 53 3D    MOV   [__rX],A
    4255: 52 F1    MOV   A,[X-15]
    4257: 31 80    XOR   A,0x80
    4259: 1A 3D    SBB   A,[__rX]
    425B: D0 09    JNC   0x4265
    425D: 52 18    MOV   A,[X+24]
    425F: 54 F2    MOV   [X-14],A
    4261: 52 17    MOV   A,[X+23]
    4263: 54 F1    MOV   [X-15],A
    4265: 50 14    MOV   A,0x14
    4267: 13 F2    SUB   A,[X-14]
    4269: 52 F1    MOV   A,[X-15]
    426B: 31 80    XOR   A,0x80
    426D: 62 D0 00 MOV   REG[0xD0],0x0
    4270: 53 3D    MOV   [__rX],A
    4272: 50 80    MOV   A,0x80
    4274: 1A 3D    SBB   A,[__rX]
    4276: D0 07    JNC   0x427E
    4278: 56 F2 14 MOV   [X-14],0x14
    427B: 56 F1 00 MOV   [X-15],0x0
    427E: 50 14    MOV   A,0x14
    4280: 13 18    SUB   A,[X+24]
    4282: 52 17    MOV   A,[X+23]
    4284: 31 80    XOR   A,0x80
    4286: 62 D0 00 MOV   REG[0xD0],0x0
    4289: 53 3D    MOV   [__rX],A
    428B: 50 80    MOV   A,0x80
    428D: 1A 3D    SBB   A,[__rX]
    428F: D0 07    JNC   0x4297
    4291: 56 18 14 MOV   [X+24],0x14
    4294: 56 17 00 MOV   [X+23],0x0
    4297: 62 D0 00 MOV   REG[0xD0],0x0
    429A: 52 F4    MOV   A,[X-12]
    429C: 21 04    AND   A,0x4
    429E: 53 48    MOV   [__r1],A
    42A0: 52 F3    MOV   A,[X-13]
    42A2: 21 00    AND   A,0x0
    42A4: 39 00    CMP   A,0x0
    42A6: B0 12    JNZ   0x42B9
    42A8: 3C 48 00 CMP   [__r1],0x0
    42AB: B0 0D    JNZ   0x42B9
    42AD: 52 F1    MOV   A,[X-15]
    42AF: 3B 17    CMP   A,[X+23]
    42B1: B0 2A    JNZ   0x42DC
    42B3: 52 F2    MOV   A,[X-14]
    42B5: 3B 18    CMP   A,[X+24]
    42B7: B0 24    JNZ   0x42DC
    42B9: 56 27 00 MOV   [X+39],0x0
    42BC: 56 26 00 MOV   [X+38],0x0
    42BF: 52 11    MOV   A,[X+17]
    42C1: 3B 14    CMP   A,[X+20]
    42C3: A0 9B    JZ    0x435F
    42C5: 62 D0 00 MOV   REG[0xD0],0x0
    42C8: 52 FC    MOV   A,[X-4]
    42CA: 53 48    MOV   [__r1],A
    42CC: 52 FB    MOV   A,[X-5]
    42CE: 60 D5    MOV   REG[0xD5],A
    42D0: 52 11    MOV   A,[X+17]
    42D2: 3F 48    MVI   [__r1],A
    42D4: 56 27 01 MOV   [X+39],0x1
    42D7: 56 26 00 MOV   [X+38],0x0
    42DA: 80 84    JMP   0x435F
    42DC: 52 F2    MOV   A,[X-14]
    42DE: 13 18    SUB   A,[X+24]
    42E0: 54 27    MOV   [X+39],A
    42E2: 52 F1    MOV   A,[X-15]
    42E4: 1B 17    SBB   A,[X+23]
    42E6: 54 26    MOV   [X+38],A
    42E8: 56 03 00 MOV   [X+3],0x0
    42EB: 56 02 00 MOV   [X+2],0x0
    42EE: 80 19    JMP   0x4308
    42F0: 62 D0 00 MOV   REG[0xD0],0x0
    42F3: 52 03    MOV   A,[X+3]
    42F5: 03 FC    ADD   A,[X-4]
    42F7: 53 48    MOV   [__r1],A
    42F9: 52 02    MOV   A,[X+2]
    42FB: 0B FB    ADC   A,[X-5]
    42FD: 60 D5    MOV   REG[0xD5],A
    42FF: 52 14    MOV   A,[X+20]
    4301: 3F 48    MVI   [__r1],A
    4303: 77 03    INC   [X+3]
    4305: 0F 02 00 ADC   [X+2],0x0
    4308: 52 27    MOV   A,[X+39]
    430A: 13 03    SUB   A,[X+3]
    430C: 52 02    MOV   A,[X+2]
    430E: 31 80    XOR   A,0x80
    4310: 62 D0 00 MOV   REG[0xD0],0x0
    4313: 53 3D    MOV   [__rX],A
    4315: 52 26    MOV   A,[X+38]
    4317: 31 80    XOR   A,0x80
    4319: 1A 3D    SBB   A,[__rX]
    431B: DF D4    JNC   0x42F0
    431D: 52 11    MOV   A,[X+17]
    431F: 3B 14    CMP   A,[X+20]
    4321: A0 3D    JZ    0x435F
    4323: 52 F4    MOV   A,[X-12]
    4325: 21 10    AND   A,0x10
    4327: 53 48    MOV   [__r1],A
    4329: 52 F3    MOV   A,[X-13]
    432B: 21 00    AND   A,0x0
    432D: 39 00    CMP   A,0x0
    432F: B0 06    JNZ   0x4336
    4331: 3C 48 00 CMP   [__r1],0x0
    4334: A0 12    JZ    0x4347
    4336: 62 D0 00 MOV   REG[0xD0],0x0
    4339: 52 FC    MOV   A,[X-4]
    433B: 53 48    MOV   [__r1],A
    433D: 52 FB    MOV   A,[X-5]
    433F: 60 D5    MOV   REG[0xD5],A
    4341: 52 11    MOV   A,[X+17]
    4343: 3F 48    MVI   [__r1],A
    4345: 80 14    JMP   0x435A
    4347: 62 D0 00 MOV   REG[0xD0],0x0
    434A: 52 27    MOV   A,[X+39]
    434C: 03 FC    ADD   A,[X-4]
    434E: 53 48    MOV   [__r1],A
    4350: 52 26    MOV   A,[X+38]
    4352: 0B FB    ADC   A,[X-5]
    4354: 60 D5    MOV   REG[0xD5],A
    4356: 52 11    MOV   A,[X+17]
    4358: 3F 48    MVI   [__r1],A
    435A: 77 27    INC   [X+39]
    435C: 0F 26 00 ADC   [X+38],0x0
    435F: 52 27    MOV   A,[X+39]
    4361: 54 03    MOV   [X+3],A
    4363: 52 26    MOV   A,[X+38]
    4365: 54 02    MOV   [X+2],A
    4367: 3D 15 00 CMP   [X+21],0x0
    436A: B0 1E    JNZ   0x4389
    436C: 3D 16 00 CMP   [X+22],0x0
    436F: B0 19    JNZ   0x4389
    4371: 62 D0 00 MOV   REG[0xD0],0x0
    4374: 52 03    MOV   A,[X+3]
    4376: 03 FC    ADD   A,[X-4]
    4378: 53 48    MOV   [__r1],A
    437A: 52 02    MOV   A,[X+2]
    437C: 0B FB    ADC   A,[X-5]
    437E: 60 D5    MOV   REG[0xD5],A
    4380: 50 30    MOV   A,0x30
    4382: 3F 48    MVI   [__r1],A
    4384: 77 03    INC   [X+3]
    4386: 0F 02 00 ADC   [X+2],0x0
    4389: 56 01 00 MOV   [X+1],0x0
    438C: 56 00 00 MOV   [X+0],0x0
    438F: 80 3A    JMP   0x43CA
    4391: 62 D0 00 MOV   REG[0xD0],0x0
    4394: 52 01    MOV   A,[X+1]
    4396: 03 0A    ADD   A,[X+10]
    4398: 53 48    MOV   [__r1],A
    439A: 52 00    MOV   A,[X+0]
    439C: 0B 09    ADC   A,[X+9]
    439E: 53 49    MOV   [__r0],A
    43A0: 52 0C    MOV   A,[X+12]
    43A2: 02 48    ADD   A,[__r1]
    43A4: 53 48    MOV   [__r1],A
    43A6: 52 0B    MOV   A,[X+11]
    43A8: 0A 49    ADC   A,[__r0]
    43AA: 60 D4    MOV   REG[0xD4],A
    43AC: 3E 48    MVI   A,[__r1]
    43AE: 53 49    MOV   [__r0],A
    43B0: 52 03    MOV   A,[X+3]
    43B2: 03 FC    ADD   A,[X-4]
    43B4: 53 46    MOV   [__r3],A
    43B6: 52 02    MOV   A,[X+2]
    43B8: 0B FB    ADC   A,[X-5]
    43BA: 60 D5    MOV   REG[0xD5],A
    43BC: 51 49    MOV   A,[__r0]
    43BE: 3F 46    MVI   [__r3],A
    43C0: 77 03    INC   [X+3]
    43C2: 0F 02 00 ADC   [X+2],0x0
    43C5: 77 01    INC   [X+1]
    43C7: 0F 00 00 ADC   [X+0],0x0
    43CA: 52 01    MOV   A,[X+1]
    43CC: 13 16    SUB   A,[X+22]
    43CE: 52 15    MOV   A,[X+21]
    43D0: 31 80    XOR   A,0x80
    43D2: 62 D0 00 MOV   REG[0xD0],0x0
    43D5: 53 3D    MOV   [__rX],A
    43D7: 52 00    MOV   A,[X+0]
    43D9: 31 80    XOR   A,0x80
    43DB: 1A 3D    SBB   A,[__rX]
    43DD: CF B3    JC    0x4391
    43DF: 52 10    MOV   A,[X+16]
    43E1: 13 21    SUB   A,[X+33]
    43E3: 52 20    MOV   A,[X+32]
    43E5: 31 80    XOR   A,0x80
    43E7: 53 3D    MOV   [__rX],A
    43E9: 52 0F    MOV   A,[X+15]
    43EB: 31 80    XOR   A,0x80
    43ED: 1A 3D    SBB   A,[__rX]
    43EF: D0 16    JNC   0x4406
    43F1: 52 03    MOV   A,[X+3]
    43F3: 03 FC    ADD   A,[X-4]
    43F5: 53 48    MOV   [__r1],A
    43F7: 52 02    MOV   A,[X+2]
    43F9: 0B FB    ADC   A,[X-5]
    43FB: 60 D5    MOV   REG[0xD5],A
    43FD: 50 2E    MOV   A,0x2E
    43FF: 3F 48    MVI   [__r1],A
    4401: 77 03    INC   [X+3]
    4403: 0F 02 00 ADC   [X+2],0x0
    4406: 56 01 00 MOV   [X+1],0x0
    4409: 56 00 00 MOV   [X+0],0x0
    440C: 80 8D    JMP   0x449A
    440E: 62 D0 00 MOV   REG[0xD0],0x0
    4411: 52 13    MOV   A,[X+19]
    4413: 13 06    SUB   A,[X+6]
    4415: 53 48    MOV   [__r1],A
    4417: 52 12    MOV   A,[X+18]
    4419: 1B 05    SBB   A,[X+5]
    441B: 53 49    MOV   [__r0],A
    441D: 52 01    MOV   A,[X+1]
    441F: 12 48    SUB   A,[__r1]
    4421: 51 49    MOV   A,[__r0]
    4423: 31 80    XOR   A,0x80
    4425: 53 3D    MOV   [__rX],A
    4427: 52 00    MOV   A,[X+0]
    4429: 31 80    XOR   A,0x80
    442B: 1A 3D    SBB   A,[__rX]
    442D: D0 39    JNC   0x4467
    442F: 52 01    MOV   A,[X+1]
    4431: 03 0A    ADD   A,[X+10]
    4433: 53 48    MOV   [__r1],A
    4435: 52 00    MOV   A,[X+0]
    4437: 0B 09    ADC   A,[X+9]
    4439: 53 49    MOV   [__r0],A
    443B: 52 06    MOV   A,[X+6]
    443D: 02 48    ADD   A,[__r1]
    443F: 53 48    MOV   [__r1],A
    4441: 52 05    MOV   A,[X+5]
    4443: 0A 49    ADC   A,[__r0]
    4445: 53 49    MOV   [__r0],A
    4447: 06 48 01 ADD   [__r1],0x1
    444A: 0E 49 00 ADC   [__r0],0x0
    444D: 51 49    MOV   A,[__r0]
    444F: 60 D4    MOV   REG[0xD4],A
    4451: 3E 48    MVI   A,[__r1]
    4453: 53 49    MOV   [__r0],A
    4455: 52 03    MOV   A,[X+3]
    4457: 03 FC    ADD   A,[X-4]
    4459: 53 46    MOV   [__r3],A
    445B: 52 02    MOV   A,[X+2]
    445D: 0B FB    ADC   A,[X-5]
    445F: 60 D5    MOV   REG[0xD5],A
    4461: 51 49    MOV   A,[__r0]
    4463: 3F 46    MVI   [__r3],A
    4465: 80 2A    JMP   0x4490
    4467: 62 D0 00 MOV   REG[0xD0],0x0
    446A: 52 F4    MOV   A,[X-12]
    446C: 21 01    AND   A,0x1
    446E: 53 48    MOV   [__r1],A
    4470: 52 F3    MOV   A,[X-13]
    4472: 21 00    AND   A,0x0
    4474: 39 00    CMP   A,0x0
    4476: B0 06    JNZ   0x447D
    4478: 3C 48 00 CMP   [__r1],0x0
    447B: A0 59    JZ    0x44D5
    447D: 62 D0 00 MOV   REG[0xD0],0x0
    4480: 52 03    MOV   A,[X+3]
    4482: 03 FC    ADD   A,[X-4]
    4484: 53 48    MOV   [__r1],A
    4486: 52 02    MOV   A,[X+2]
    4488: 0B FB    ADC   A,[X-5]
    448A: 60 D5    MOV   REG[0xD5],A
    448C: 50 30    MOV   A,0x30
    448E: 3F 48    MVI   [__r1],A
    4490: 77 03    INC   [X+3]
    4492: 0F 02 00 ADC   [X+2],0x0
    4495: 77 01    INC   [X+1]
    4497: 0F 00 00 ADC   [X+0],0x0
    449A: 52 01    MOV   A,[X+1]
    449C: 13 F0    SUB   A,[X-16]
    449E: 52 EF    MOV   A,[X-17]
    44A0: 31 80    XOR   A,0x80
    44A2: 62 D0 00 MOV   REG[0xD0],0x0
    44A5: 53 3D    MOV   [__rX],A
    44A7: 52 00    MOV   A,[X+0]
    44A9: 31 80    XOR   A,0x80
    44AB: 1A 3D    SBB   A,[__rX]
    44AD: D0 0D    JNC   0x44BB
    44AF: 52 03    MOV   A,[X+3]
    44B1: 11 14    SUB   A,0x14
    44B3: 52 02    MOV   A,[X+2]
    44B5: 31 80    XOR   A,0x80
    44B7: 19 80    SBB   A,0x80
    44B9: CF 54    JC    0x440E
    44BB: 80 19    JMP   0x44D5
    44BD: 62 D0 00 MOV   REG[0xD0],0x0
    44C0: 52 03    MOV   A,[X+3]
    44C2: 03 FC    ADD   A,[X-4]
    44C4: 53 48    MOV   [__r1],A
    44C6: 52 02    MOV   A,[X+2]
    44C8: 0B FB    ADC   A,[X-5]
    44CA: 60 D5    MOV   REG[0xD5],A
    44CC: 52 19    MOV   A,[X+25]
    44CE: 3F 48    MVI   [__r1],A
    44D0: 77 03    INC   [X+3]
    44D2: 0F 02 00 ADC   [X+2],0x0
    44D5: 52 03    MOV   A,[X+3]
    44D7: 13 F2    SUB   A,[X-14]
    44D9: 52 F1    MOV   A,[X-15]
    44DB: 31 80    XOR   A,0x80
    44DD: 62 D0 00 MOV   REG[0xD0],0x0
    44E0: 53 3D    MOV   [__rX],A
    44E2: 52 02    MOV   A,[X+2]
    44E4: 31 80    XOR   A,0x80
    44E6: 1A 3D    SBB   A,[__rX]
    44E8: CF D4    JC    0x44BD
    44EA: 52 03    MOV   A,[X+3]
    44EC: 03 FC    ADD   A,[X-4]
    44EE: 53 48    MOV   [__r1],A
    44F0: 52 02    MOV   A,[X+2]
    44F2: 0B FB    ADC   A,[X-5]
    44F4: 60 D5    MOV   REG[0xD5],A
    44F6: 50 00    MOV   A,0x0
    44F8: 3F 48    MVI   [__r1],A
    44FA: 62 D0 00 MOV   REG[0xD0],0x0
    44FD: 52 FC    MOV   A,[X-4]
    44FF: 53 48    MOV   [__r1],A
    4501: 52 FB    MOV   A,[X-5]
    4503: 53 49    MOV   [__r0],A
    4505: 38 CF    ADD   SP,0xCF
    4507: 20       POP   X
    4508: 7F       RET   
_cprintf:
    4509: 10       PUSH  X
    450A: 4F       MOV   X,SP
    450B: 38 04    ADD   SP,0x4
    450D: 62 D0 00 MOV   REG[0xD0],0x0
    4510: 5A 48    MOV   [__r1],X
    4512: 16 48 05 SUB   [__r1],0x5
    4515: 51 48    MOV   A,[__r1]
    4517: 54 01    MOV   [X+1],A
    4519: 56 00 07 MOV   [X+0],0x7
    451C: 52 00    MOV   A,[X+0]
    451E: 08       PUSH  A
    451F: 52 01    MOV   A,[X+1]
    4521: 08       PUSH  A
    4522: 52 FB    MOV   A,[X-5]
    4524: 08       PUSH  A
    4525: 52 FC    MOV   A,[X-4]
    4527: 08       PUSH  A
    4528: 50 03    MOV   A,0x3
    452A: 08       PUSH  A
    452B: 50 78    MOV   A,0x78
    452D: 08       PUSH  A
    452E: 7C 16 9F LCALL __cprint
    4531: 38 FA    ADD   SP,0xFA
    4533: 62 D0 00 MOV   REG[0xD0],0x0
    4536: 51 48    MOV   A,[__r1]
    4538: 54 03    MOV   [X+3],A
    453A: 51 49    MOV   A,[__r0]
    453C: 54 02    MOV   [X+2],A
    453E: 52 03    MOV   A,[X+3]
    4540: 53 48    MOV   [__r1],A
    4542: 52 02    MOV   A,[X+2]
    4544: 53 49    MOV   [__r0],A
    4546: 38 FC    ADD   SP,0xFC
    4548: 20       POP   X
    4549: 7F       RET   
    454A: 30       HALT  
