 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _sw_X::
 0000 01                .byte 1
 0001                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0001                   .dbsym e sw_X _sw_X c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           _sw_Y::
 0000 01                .byte 1
 0001                   .dbsym e sw_Y _sw_Y c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           _sw_Z::
 0000 01                .byte 1
 0001                   .dbsym e sw_Z _sw_Z c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           _i2cchekc::
 0000 00                .byte 0
 0001                   .dbsym e i2cchekc _i2cchekc c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           L40:
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           L41:
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           L42:
 0000 0000              .byte 0,0
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           L43:
 0000 00000000          .byte 0,0,0,0
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           L89:
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           L90:
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           L91:
 0000 0000              .byte 0,0
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           L92:
 0000 00000000          .byte 0,0,0,0
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           L138:
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           L139:
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           L140:
 0000 0000              .byte 0,0
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           L141:
 0000 00000000          .byte 0,0,0,0
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000                   .dbfunc e main _main fV
 0000                   .dbsym s iX L43 L
 0000                   .dbsym s pwm_X L42 I
 0000                   .dbsym s rd_X L41 c
 0000                   .dbsym s count_X L40 c
 0000                   .dbsym s iY L92 L
 0000                   .dbsym s pwm_Y L91 I
 0000                   .dbsym s rd_Y L90 c
 0000                   .dbsym s count_Y L89 c
 0000                   .dbsym s iZ L141 L
 0000                   .dbsym s pwm_Z L140 I
 0000                   .dbsym s rd_Z L139 c
 0000                   .dbsym s count_Z L138 c
 0000           ;          tmpx1 -> X+6
 0000           ;          tmpx0 -> X+2
 0000           ;             pZ -> X+0
 0000           ;          tmpx1 -> X+6
 0000           ;          tmpx0 -> X+2
 0000           ;             pY -> X+0
 0000           ;          tmpx1 -> X+6
 0000           ;          tmpx0 -> X+2
 0000           ;             pX -> X+0
 0000           ;           wate -> X+0
 0000           ;           wate -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3807              add SP,7
 0004                   .dbline 63
 0004           ; //----------------------------------------------------------------------------
 0004           ; // C main line
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include <stdio.h>
 0004           ; 
 0004           ; //MBM & I2C Flag
 0004           ; #define I2CIO_WRITE           0x80
 0004           ; #define I2CIO_READ            0x40
 0004           ; #define I2CIO_UPDATE  0x20
 0004           ; 
 0004           ; //BrakeFlag
 0004           ; #define STOP_X        0x01
 0004           ; #define STOP_Y        0x02
 0004           ; #define STOP_Z        0x04
 0004           ; 
 0004           ; //set prs
 0004           ; #define prsSet(dw, b) (*(BYTE *)&(dw) = (*((BYTE *)&(dw) + 1) = (*((BYTE *)&(dw) + 2) = (*(((BYTE *)&(dw)) + 3) = (b)))))
 0004           ; 
 0004           ; //prs poly balue
 0004           ; #define POLY  0xE0000200
 0004           ; 
 0004           ; //brake delay time
 0004           ; #define STOPCOUNT_X   0xff
 0004           ; #define STOPINC_X     0x01
 0004           ; #define STOPCOUNT_Y   0xff
 0004           ; #define STOPINC_Y     0x01
 0004           ; #define STOPCOUNT_Z   0xff
 0004           ; #define STOPINC_Z     0x04
 0004           ; 
 0004           ; //rotation direction flag
 0004           ; #define STOP  0x00
 0004           ; #define CW            0x01
 0004           ; #define CCW           0x02
 0004           ; 
 0004           ; //bit macro
 0004           ; #define bitSet(a, b)  ((a) |= (b))
 0004           ; #define bitClear(a, b)        ((a) &= ~(b))
 0004           ; #define bitCheck(a, b)        ((a) & (b))
 0004           ; 
 0004           ; //I2C buff
 0004           ; MBM_1_Outbox  OutboxBuff;
 0004           ; MBM_1_Inbox           InboxBuff;
 0004           ; 
 0004           ; //prs seed
 0004           ; DWORD prs_X;
 0004           ; DWORD prs_Y;
 0004           ; DWORD prs_Z;
 0004           ; 
 0004           ; //prs seed update flag
 0004           ; BOOL  sw_X = TRUE;
 0004           ; BOOL  sw_Y = TRUE;
 0004           ; BOOL  sw_Z = TRUE;
 0004           ; 
 0004           ; BYTE ct;
 0004           ; BYTE ec;
 0004           ; 
 0004           ; BOOL i2cchekc = FALSE;
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 64
 0004           ;       M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
 0004 7101                      or  F, 01h
 0006           
 0006                   .dbline 68
 0006           ;       // Insert your main routine code here.
 0006           ;       
 0006           ;       //init LCD
 0006           ;       LCD_1_Start();
 0006 10                push X
 0007 7C0000            xcall _LCD_1_Start
 000A                   .dbline 69
 000A           ;       LCD_1_Control(LCD_1_DISP_CLEAR_HOME);
 000A 5001              mov A,1
 000C 7C0000            xcall _LCD_1_Control
 000F 20                pop X
 0010                   .dbline 72
 0010           ;       
 0010           ;       //init MBM
 0010           ;       MBM_1_InitializeMailbox();
 0010 7C0000            xcall _MBM_1_InitializeMailbox
 0013                   .dbline 73
 0013           ;       MBM_1_pMyMailbox = &MBM_1_MyMailbox;
 0013 62D000            mov REG[0xd0],>_MBM_1_pMyMailbox
 0016 550100            mov [_MBM_1_pMyMailbox+1],<_MBM_1_MyMailbox
 0019 550000            mov [_MBM_1_pMyMailbox],>_MBM_1_MyMailbox
 001C                   .dbline 76
 001C           ;       
 001C           ;       //init EzI2C
 001C           ;       EzI2Cs_1_SetRamBuffer(sizeof (MBM_1_MyMailbox), (INBOXFLAG + 1), (BYTE *)&MBM_1_MyMailbox);
 001C 10                push X
 001D 5000              mov A,>_MBM_1_MyMailbox
 001F 08                push A
 0020 5000              mov A,<_MBM_1_MyMailbox
 0022 08                push A
 0023 5011              mov A,17
 0025 08                push A
 0026 5015              mov A,21
 0028 08                push A
 0029 7C0000            xcall _EzI2Cs_1_SetRamBuffer
 002C 38FC              add SP,-4
 002E                   .dbline 77
 002E           ;       EzI2Cs_1_Start();
 002E 7C0000            xcall _EzI2Cs_1_Start
 0031                   .dbline 78
 0031           ;       EzI2Cs_1_ResumeInt();
 0031 7C0000            xcall _EzI2Cs_1_ResumeInt
 0034                   .dbline 81
 0034           ;       
 0034           ;       //init PRS
 0034           ;       PRS32_X_WritePolynomial(POLY);
 0034 50E0              mov A,-32
 0036 08                push A
 0037 5000              mov A,0
 0039 08                push A
 003A 5002              mov A,2
 003C 08                push A
 003D 5000              mov A,0
 003F 08                push A
 0040 7C0000            xcall _PRS32_X_WritePolynomial
 0043 38FC              add SP,-4
 0045                   .dbline 82
 0045           ;       PRS32_X_WriteSeed(0);
 0045 5000              mov A,0
 0047 08                push A
 0048 08                push A
 0049 08                push A
 004A 08                push A
 004B 7C0000            xcall _PRS32_X_WriteSeed
 004E 38FC              add SP,-4
 0050                   .dbline 83
 0050           ;       PRS32_X_Start();
 0050 7C0000            xcall _PRS32_X_Start
 0053                   .dbline 85
 0053           ;       
 0053           ;       PRS32_Y_WritePolynomial(POLY);
 0053 50E0              mov A,-32
 0055 08                push A
 0056 5000              mov A,0
 0058 08                push A
 0059 5002              mov A,2
 005B 08                push A
 005C 5000              mov A,0
 005E 08                push A
 005F 7C0000            xcall _PRS32_Y_WritePolynomial
 0062 38FC              add SP,-4
 0064                   .dbline 86
 0064           ;       PRS32_Y_WriteSeed(0);
 0064 5000              mov A,0
 0066 08                push A
 0067 08                push A
 0068 08                push A
 0069 08                push A
 006A 7C0000            xcall _PRS32_Y_WriteSeed
 006D 38FC              add SP,-4
 006F                   .dbline 87
 006F           ;       PRS32_Y_Start();
 006F 7C0000            xcall _PRS32_Y_Start
 0072                   .dbline 89
 0072           ;       
 0072           ;       PRS32_Z_WritePolynomial(POLY);
 0072 50E0              mov A,-32
 0074 08                push A
 0075 5000              mov A,0
 0077 08                push A
 0078 5002              mov A,2
 007A 08                push A
 007B 5000              mov A,0
 007D 08                push A
 007E 7C0000            xcall _PRS32_Z_WritePolynomial
 0081 38FC              add SP,-4
 0083                   .dbline 90
 0083           ;       PRS32_Z_WriteSeed(0);
 0083 5000              mov A,0
 0085 08                push A
 0086 08                push A
 0087 08                push A
 0088 08                push A
 0089 7C0000            xcall _PRS32_Z_WriteSeed
 008C 38FC              add SP,-4
 008E                   .dbline 91
 008E           ;       PRS32_Z_Start();
 008E 7C0000            xcall _PRS32_Z_Start
 0091                   .dbline 94
 0091           ;       
 0091           ;       //init Timer
 0091           ;       Timer8_1_Start();
 0091 7C0000            xcall _Timer8_1_Start
 0094                   .dbline 95
 0094           ;       Timer8_1_EnableInt();
 0094 7C0000            xcall _Timer8_1_EnableInt
 0097                   .dbline 97
 0097           ;       
 0097           ;       LCD_1_Position(0, 0);
 0097 5000              mov A,0
 0099 5700              mov X,0
 009B 7C0000            xcall _LCD_1_Position
 009E 20                pop X
 009F                   .dbline 98
 009F           ;       cprintf("DC Motor Module");
 009F 5040              mov A,>L5
 00A1 08                push A
 00A2 5040              mov A,<L5
 00A4 08                push A
 00A5 7C0000            xcall _cprintf
 00A8 38FE              add SP,-2
 00AA                   .dbline 99
 00AA           ;       LCD_1_Position(1, 5);
 00AA 10                push X
 00AB 5705              mov X,5
 00AD 5001              mov A,1
 00AF 7C0000            xcall _LCD_1_Position
 00B2 20                pop X
 00B3                   .dbline 100
 00B3           ;       cprintf("Start");
 00B3 503A              mov A,>L6
 00B5 08                push A
 00B6 503A              mov A,<L6
 00B8 08                push A
 00B9 7C0000            xcall _cprintf
 00BC 38FE              add SP,-2
 00BE 7D0F40            xjmp L8
 00C1           L7:
 00C1                   .dbline 104
 00C1           ;       
 00C1           ;       //main loop
 00C1           ;       while (TRUE)
 00C1           ;       {
 00C1                   .dbline 107
 00C1           ;               
 00C1           ;               //I2C Read
 00C1           ;               if (bitCheck(MBM_1_MyMailbox.Outbox.OutboxFlag, I2CIO_UPDATE))
 00C1 62D000            mov REG[0xd0],>_MBM_1_MyMailbox
 00C4 470220            tst [_MBM_1_MyMailbox+2],32
 00C7 A056              jz L10
 00C9                   .dbline 109
 00C9           ;               {
 00C9           ;                       BYTE wate;
 00C9                   .dbline 110
 00C9           ;                       bitSet(MBM_1_MyMailbox.Outbox.OutboxFlag, I2CIO_READ);
 00C9 2E0240            or [_MBM_1_MyMailbox+2],64
 00CC                   .dbline 111
 00CC           ;                       for (wate = 0; wate < 0xff; wate++)
 00CC 560000            mov [X+0],0
 00CF 8043              xjmp L17
 00D1           L14:
 00D1                   .dbline 112
 00D1           ;                       {
 00D1                   .dbline 113
 00D1           ;                               if (bitCheck(~MBM_1_MyMailbox.Outbox.OutboxFlag, I2CIO_WRITE))
 00D1 62D000            mov REG[0xd0],>_MBM_1_MyMailbox
 00D4 5102              mov A,[_MBM_1_MyMailbox+2]
 00D6 73                cpl A
 00D7 62D000            mov REG[0xd0],>__r0
 00DA 5300              mov [__r0],A
 00DC 260080            and [__r0],-128
 00DF A031              jz L18
 00E1                   .dbline 115
 00E1           ;                               {
 00E1           ;                                       OutboxBuff = MBM_1_MyMailbox.Outbox;
 00E1                   .dbline 115
 00E1 550002            mov [__r1],<_MBM_1_MyMailbox+2
 00E4 550002            mov [__r0],>_MBM_1_MyMailbox+2
 00E7 550000            mov [__r3],<_OutboxBuff
 00EA 550000            mov [__r2],>_OutboxBuff
 00ED 5100              mov A,[__r0]
 00EF 60D4              mov REG[0xd4],A
 00F1 5100              mov A,[__r2]
 00F3 60D5              mov REG[0xd5],A
 00F5 10                push X
 00F6 570E              mov X,14
 00F8           X1:
 00F8 62D000            mov REG[0xd0],>__r0
 00FB 3E00              mvi A,[__r1]
 00FD 3F00              mvi [__r3],A
 00FF 79                dec X
 0100 BFF7              jnz X1
 0102 20                pop X
 0103                   .dbline 116
 0103           ;                                       bitClear(MBM_1_MyMailbox.Outbox.OutboxFlag, I2CIO_UPDATE);
 0103 62D000            mov REG[0xd0],>_MBM_1_MyMailbox
 0106 2602DF            and [_MBM_1_MyMailbox+2],-33
 0109                   .dbline 117
 0109           ;                                       i2cchekc = TRUE;
 0109 62D000            mov REG[0xd0],>_i2cchekc
 010C 550001            mov [_i2cchekc],1
 010F                   .dbline 118
 010F           ;                                       break;
 010F 8008              xjmp L16
 0111           L18:
 0111                   .dbline 120
 0111           ;                               }
 0111           ;                       }
 0111           L15:
 0111                   .dbline 111
 0111 7700              inc [X+0]
 0113           L17:
 0113                   .dbline 111
 0113 3D00FF            cmp [X+0],-1
 0116 CFBA              jc L14
 0118           X2:
 0118           L16:
 0118                   .dbline 121
 0118           ;                       bitClear(MBM_1_MyMailbox.Outbox.OutboxFlag, I2CIO_READ);
 0118 62D000            mov REG[0xd0],>_MBM_1_MyMailbox
 011B 2602BF            and [_MBM_1_MyMailbox+2],-65
 011E                   .dbline 122
 011E           ;               }
 011E           L10:
 011E                   .dbline 125
 011E           ;               
 011E           ;               //I2C Write
 011E           ;               if (bitCheck(InboxBuff.InboxFlag, I2CIO_UPDATE))
 011E 62D000            mov REG[0xd0],>_InboxBuff
 0121 470020            tst [_InboxBuff],32
 0124 A05F              jz L24
 0126                   .dbline 127
 0126           ;               {
 0126           ;                       BYTE wate;
 0126                   .dbline 128
 0126           ;                       bitSet(MBM_1_MyMailbox.Inbox.InboxFlag, I2CIO_WRITE);
 0126 62D000            mov REG[0xd0],>_MBM_1_MyMailbox
 0129 2E1080            or [_MBM_1_MyMailbox+16],-128
 012C                   .dbline 129
 012C           ;                       for (wate = 0; wate < 0xff; wate++)
 012C 560000            mov [X+0],0
 012F 8049              xjmp L30
 0131           L27:
 0131                   .dbline 130
 0131           ;                       {
 0131                   .dbline 131
 0131           ;                               if (~bitCheck(MBM_1_MyMailbox.Inbox.InboxFlag, I2CIO_READ))
 0131 62D000            mov REG[0xd0],>_MBM_1_MyMailbox
 0134 5110              mov A,[_MBM_1_MyMailbox+16]
 0136 2140              and A,64
 0138 73                cpl A
 0139 3900              cmp A,0
 013B A03B              jz L31
 013D                   .dbline 133
 013D           ;                               {
 013D           ;                                       InboxBuff.InboxFlag = MBM_1_MyMailbox.Inbox.InboxFlag;
 013D                   .dbline 133
 013D 5110              mov A,[_MBM_1_MyMailbox+16]
 013F 62D000            mov REG[0xd0],>_InboxBuff
 0142 5300              mov [_InboxBuff],A
 0144                   .dbline 134
 0144           ;                                       MBM_1_MyMailbox.Inbox = InboxBuff;
 0144 62D000            mov REG[0xd0],>__r0
 0147 550000            mov [__r1],<_InboxBuff
 014A 550000            mov [__r0],>_InboxBuff
 014D 550010            mov [__r3],<_MBM_1_MyMailbox+16
 0150 550010            mov [__r2],>_MBM_1_MyMailbox+16
 0153 5100              mov A,[__r0]
 0155 60D4              mov REG[0xd4],A
 0157 5100              mov A,[__r2]
 0159 60D5              mov REG[0xd5],A
 015B 10                push X
 015C 5705              mov X,5
 015E           X3:
 015E 62D000            mov REG[0xd0],>__r0
 0161 3E00              mvi A,[__r1]
 0163 3F00              mvi [__r3],A
 0165 79                dec X
 0166 BFF7              jnz X3
 0168 20                pop X
 0169                   .dbline 135
 0169           ;                                       bitSet(MBM_1_MyMailbox.Inbox.InboxFlag, I2CIO_UPDATE);
 0169 62D000            mov REG[0xd0],>_MBM_1_MyMailbox
 016C 2E1020            or [_MBM_1_MyMailbox+16],32
 016F                   .dbline 136
 016F           ;                                       InboxBuff.InboxFlag = 0;
 016F 62D000            mov REG[0xd0],>_InboxBuff
 0172 550000            mov [_InboxBuff],0
 0175                   .dbline 137
 0175           ;                                       break;
 0175 8008              xjmp L29
 0177           L31:
 0177                   .dbline 139
 0177           ;                               }
 0177           ;                       }
 0177           L28:
 0177                   .dbline 129
 0177 7700              inc [X+0]
 0179           L30:
 0179                   .dbline 129
 0179 3D00FF            cmp [X+0],-1
 017C CFB4              jc L27
 017E           X4:
 017E           L29:
 017E                   .dbline 140
 017E           ;                       bitClear(MBM_1_MyMailbox.Inbox.InboxFlag, I2CIO_WRITE);
 017E 62D000            mov REG[0xd0],>_MBM_1_MyMailbox
 0181 26107F            and [_MBM_1_MyMailbox+16],127
 0184                   .dbline 141
 0184           ;               }
 0184           L24:
 0184                   .dbline 144
 0184           ;               
 0184           ;               //calclate X motor
 0184           ;               if (sw_X)
 0184 62D000            mov REG[0xd0],>_sw_X
 0187 3C0000            cmp [_sw_X],0
 018A A43F              jz L38
 018C                   .dbline 146
 018C           ;               {
 018C           ;                       static BYTE count_X;
 018C                   .dbline 152
 018C           ;                       static BYTE rd_X;
 018C           ;                       static INT pwm_X;
 018C           ;                       static LONG iX;
 018C           ;                       
 018C           ;                       //stop & brake 
 018C           ;                       if (bitCheck(OutboxBuff.TBrakeFlag, STOP_X))
 018C 62D000            mov REG[0xd0],>_OutboxBuff
 018F 470101            tst [_OutboxBuff+1],1
 0192 A0D2              jz L44
 0194                   .dbline 155
 0194           ;                       {
 0194           ;                               //brake
 0194           ;                               if (count_X < (STOPCOUNT_X - STOPINC_X))
 0194                   .dbline 155
 0194 62D000            mov REG[0xd0],>L40
 0197 3C00FE            cmp [L40],-2
 019A D0A1              jnc L47
 019C           X5:
 019C                   .dbline 158
 019C           ;                               {
 019C           ;                                       //brake start
 019C           ;                                       if (rd_X)
 019C                   .dbline 158
 019C 62D000            mov REG[0xd0],>L41
 019F 3C0000            cmp [L41],0
 01A2 A057              jz L49
 01A4                   .dbline 160
 01A4           ;                                       {
 01A4           ;                                               PRS32_X_WriteSeed(0);
 01A4                   .dbline 160
 01A4 10                push X
 01A5 5000              mov A,0
 01A7 08                push A
 01A8 08                push A
 01A9 08                push A
 01AA 08                push A
 01AB 7C0000            xcall _PRS32_X_WriteSeed
 01AE 38FC              add SP,-4
 01B0 20                pop X
 01B1                   .dbline 163
 01B1           ;                                               
 01B1           ;                                               //XAH off
 01B1           ;                                               XAH_Data_ADDR = bitClear(XAH_DataShadow, XAH_MASK);
 01B1 62D000            mov REG[0xd0],>_Port_1_Data_SHADE
 01B4 5100              mov A,[_Port_1_Data_SHADE]
 01B6 21F7              and A,-9
 01B8 5300              mov [_Port_1_Data_SHADE],A
 01BA 6004              mov REG[0x4],A
 01BC                   .dbline 165
 01BC           ;                                               //XBH off
 01BC           ;                                               XBH_Data_ADDR = bitClear(XBH_DataShadow, XBH_MASK);
 01BC 5100              mov A,[_Port_1_Data_SHADE]
 01BE 21EF              and A,-17
 01C0 5300              mov [_Port_1_Data_SHADE],A
 01C2 6004              mov REG[0x4],A
 01C4                   .dbline 167
 01C4           ;                                               //XAL prs on
 01C4           ;                                               bitSet(XAL_GlobalSelect_ADDR, XAL_MASK);
 01C4 430604            or REG[0x6],4
 01C7                   .dbline 169
 01C7           ;                                               //XBL prs on
 01C7           ;                                               bitSet(XBL_GlobalSelect_ADDR, XBL_MASK);
 01C7 430640            or REG[0x6],64
 01CA                   .dbline 171
 01CA           ;                                               
 01CA           ;                                               bitSet(InboxBuff.CBrakeFlag, STOP_X);
 01CA 62D000            mov REG[0xd0],>_InboxBuff
 01CD 2E0101            or [_InboxBuff+1],1
 01D0                   .dbline 172
 01D0           ;                                               bitSet(InboxBuff.InboxFlag, I2CIO_UPDATE);
 01D0 2E0020            or [_InboxBuff],32
 01D3                   .dbline 173
 01D3           ;                                               InboxBuff.X_crs = 0;
 01D3 550200            mov [_InboxBuff+2],0
 01D6                   .dbline 174
 01D6           ;                                               pwm_X = 0;
 01D6 62D000            mov REG[0xd0],>L42
 01D9 550100            mov [L42+1],0
 01DC 550000            mov [L42],0
 01DF                   .dbline 175
 01DF           ;                                               iX = 0;
 01DF 62D000            mov REG[0xd0],>L43
 01E2 550000            mov [L43],0
 01E5 550100            mov [L43+1],0
 01E8 550200            mov [L43+2],0
 01EB 550300            mov [L43+3],0
 01EE                   .dbline 176
 01EE           ;                                               count_X = 0;
 01EE 62D000            mov REG[0xd0],>L40
 01F1 550000            mov [L40],0
 01F4                   .dbline 177
 01F4           ;                                               rd_X = STOP;
 01F4 62D000            mov REG[0xd0],>L41
 01F7 550000            mov [L41],0
 01FA                   .dbline 178
 01FA           ;                                       }
 01FA           L49:
 01FA                   .dbline 180
 01FA           ;                                       //set prs
 01FA           ;                                       prsSet(prs_X, count_X);
 01FA 62D000            mov REG[0xd0],>L40
 01FD 5100              mov A,[L40]
 01FF 62D000            mov REG[0xd0],>_prs_X
 0202 5303              mov [_prs_X+3],A
 0204 62D000            mov REG[0xd0],>L40
 0207 5100              mov A,[L40]
 0209 62D000            mov REG[0xd0],>_prs_X
 020C 5302              mov [_prs_X+2],A
 020E 62D000            mov REG[0xd0],>L40
 0211 5100              mov A,[L40]
 0213 62D000            mov REG[0xd0],>_prs_X
 0216 5301              mov [_prs_X+1],A
 0218 62D000            mov REG[0xd0],>L40
 021B 5100              mov A,[L40]
 021D 62D000            mov REG[0xd0],>_prs_X
 0220 5300              mov [_prs_X],A
 0222                   .dbline 181
 0222           ;                                       PRS32_X_WriteSeed(prs_X);
 0222 10                push X
 0223 5100              mov A,[_prs_X]
 0225 08                push A
 0226 5101              mov A,[_prs_X+1]
 0228 08                push A
 0229 5102              mov A,[_prs_X+2]
 022B 08                push A
 022C 5103              mov A,[_prs_X+3]
 022E 08                push A
 022F 7C0000            xcall _PRS32_X_WriteSeed
 0232 38FC              add SP,-4
 0234 20                pop X
 0235                   .dbline 182
 0235           ;                                       count_X += STOPINC_X;
 0235 62D000            mov REG[0xd0],>L40
 0238 7600              inc [L40]
 023A                   .dbline 183
 023A           ;                               }
 023A 8389              xjmp L45
 023C           L47:
 023C                   .dbline 185
 023C           ;                               //lock
 023C           ;                               else if (count_X != 0xff)
 023C 62D000            mov REG[0xd0],>L40
 023F 3C00FF            cmp [L40],-1
 0242 A381              jz L45
 0244                   .dbline 188
 0244           ;                               {
 0244           ;                                       //XAL on & prs off
 0244           ;                                       XAL_Data_ADDR = bitSet(XAL_DataShadow, XAL_MASK);
 0244                   .dbline 188
 0244 62D000            mov REG[0xd0],>_Port_1_Data_SHADE
 0247 5100              mov A,[_Port_1_Data_SHADE]
 0249 2904              or A,4
 024B 5300              mov [_Port_1_Data_SHADE],A
 024D 6004              mov REG[0x4],A
 024F                   .dbline 189
 024F           ;                                       bitClear(XAL_GlobalSelect_ADDR, XAL_MASK);
 024F 4106FB            and REG[0x6],-5
 0252                   .dbline 191
 0252           ;                                       //XBL on & prs off
 0252           ;                                       XBL_Data_ADDR = bitSet(XBL_DataShadow, XBL_MASK);
 0252 5100              mov A,[_Port_1_Data_SHADE]
 0254 2940              or A,64
 0256 5300              mov [_Port_1_Data_SHADE],A
 0258 6004              mov REG[0x4],A
 025A                   .dbline 192
 025A           ;                                       bitClear(XBL_GlobalSelect_ADDR, XBL_MASK);
 025A 4106BF            and REG[0x6],-65
 025D                   .dbline 194
 025D           ;                                       
 025D           ;                                       count_X = 0xff;
 025D 62D000            mov REG[0xd0],>L40
 0260 5500FF            mov [L40],-1
 0263                   .dbline 195
 0263           ;                               }
 0263                   .dbline 196
 0263           ;                       }
 0263 8360              xjmp L45
 0265           L44:
 0265                   .dbline 199
 0265           ;                       //rotation
 0265           ;                       else
 0265           ;                       {
 0265                   .dbline 204
 0265           ;                               INT pX;
 0265           ;                               LONG tmpx0;
 0265           ;                               BYTE tmpx1;
 0265           ;                               
 0265           ;                               if (rd_X == STOP)
 0265 62D000            mov REG[0xd0],>L41
 0268 3C0000            cmp [L41],0
 026B B00D              jnz L58
 026D                   .dbline 206
 026D           ;                               {
 026D           ;                                       bitClear(InboxBuff.CBrakeFlag, STOP_X);
 026D                   .dbline 206
 026D 62D000            mov REG[0xd0],>_InboxBuff
 0270 2601FE            and [_InboxBuff+1],-2
 0273                   .dbline 207
 0273           ;                                       count_X = 0;
 0273 62D000            mov REG[0xd0],>L40
 0276 550000            mov [L40],0
 0279                   .dbline 208
 0279           ;                               }
 0279           L58:
 0279                   .dbline 211
 0279           ;                               
 0279           ;                               //calclate PI
 0279           ;                               pX = ((*(CHAR *)&(OutboxBuff.X_trs)) - pwm_X);
 0279 62D000            mov REG[0xd0],>_OutboxBuff
 027C 5102              mov A,[_OutboxBuff+2]
 027E 62D000            mov REG[0xd0],>__r0
 0281 5300              mov [__r1],A
 0283 550000            mov [__r0],0
 0286 470080            tst [__r1],-128
 0289 A004              jz X6
 028B 5500FF            mov [__r0],-1
 028E           X6:
 028E 62D000            mov REG[0xd0],>__r0
 0291 5100              mov A,[__r1]
 0293 62D000            mov REG[0xd0],>L42
 0296 1201              sub A,[L42+1]
 0298 5401              mov [X+1],A
 029A 62D000            mov REG[0xd0],>__r0
 029D 5100              mov A,[__r0]
 029F 62D000            mov REG[0xd0],>L42
 02A2 1A00              sbb A,[L42]
 02A4 5400              mov [X+0],A
 02A6                   .dbline 212
 02A6           ;                               iX += pX;
 02A6 62D000            mov REG[0xd0],>__r0
 02A9 5201              mov A,[X+1]
 02AB 5300              mov [__r3],A
 02AD 5200              mov A,[X+0]
 02AF 5300              mov [__r2],A
 02B1 470080            tst [__r2],-128
 02B4 A009              jz X7
 02B6 5500FF            mov [__r1],-1
 02B9 5500FF            mov [__r0],-1
 02BC 800A              jmp X8
 02BE           X7:
 02BE 62D000            mov REG[0xd0],>__r0
 02C1 550000            mov [__r1],0
 02C4 550000            mov [__r0],0
 02C7           X8:
 02C7 62D000            mov REG[0xd0],>__r0
 02CA 5100              mov A,[__r3]
 02CC 62D000            mov REG[0xd0],>L43
 02CF 0403              add [L43+3],A
 02D1 62D000            mov REG[0xd0],>__r0
 02D4 5100              mov A,[__r2]
 02D6 62D000            mov REG[0xd0],>L43
 02D9 0C02              adc [L43+2],A
 02DB 62D000            mov REG[0xd0],>__r0
 02DE 5100              mov A,[__r1]
 02E0 62D000            mov REG[0xd0],>L43
 02E3 0C01              adc [L43+1],A
 02E5 62D000            mov REG[0xd0],>__r0
 02E8 5100              mov A,[__r0]
 02EA 62D000            mov REG[0xd0],>L43
 02ED 0C00              adc [L43],A
 02EF                   .dbline 213
 02EF           ;                               tmpx0 = (OutboxBuff.Kp_X * (LONG)pX + OutboxBuff.Ki_X * iX);
 02EF 62D000            mov REG[0xd0],>_OutboxBuff
 02F2 5107              mov A,[_OutboxBuff+7]
 02F4 62D000            mov REG[0xd0],>__r0
 02F7 5300              mov [__r3],A
 02F9 62D000            mov REG[0xd0],>L43
 02FC 5100              mov A,[L43]
 02FE 08                push A
 02FF 5101              mov A,[L43+1]
 0301 08                push A
 0302 5102              mov A,[L43+2]
 0304 08                push A
 0305 5103              mov A,[L43+3]
 0307 08                push A
 0308 62D000            mov REG[0xd0],>__r0
 030B 5000              mov A,0
 030D 08                push A
 030E 08                push A
 030F 08                push A
 0310 5100              mov A,[__r3]
 0312 08                push A
 0313 7C0000            xcall __mul_32X32_32
 0316 38FC              add SP,-4
 0318 18                pop A
 0319 5300              mov [__r3],A
 031B 18                pop A
 031C 5300              mov [__r2],A
 031E 18                pop A
 031F 5300              mov [__r1],A
 0321 18                pop A
 0322 5300              mov [__r0],A
 0324 5201              mov A,[X+1]
 0326 5300              mov [__r7],A
 0328 5200              mov A,[X+0]
 032A 5300              mov [__r6],A
 032C 470080            tst [__r6],-128
 032F A009              jz X9
 0331 5500FF            mov [__r5],-1
 0334 5500FF            mov [__r4],-1
 0337 800A              jmp X10
 0339           X9:
 0339 62D000            mov REG[0xd0],>__r0
 033C 550000            mov [__r5],0
 033F 550000            mov [__r4],0
 0342           X10:
 0342 62D000            mov REG[0xd0],>_OutboxBuff
 0345 5106              mov A,[_OutboxBuff+6]
 0347 62D000            mov REG[0xd0],>__r0
 034A 5300              mov [__r11],A
 034C 5100              mov A,[__r4]
 034E 08                push A
 034F 5100              mov A,[__r5]
 0351 08                push A
 0352 5100              mov A,[__r6]
 0354 08                push A
 0355 5100              mov A,[__r7]
 0357 08                push A
 0358 5000              mov A,0
 035A 08                push A
 035B 08                push A
 035C 08                push A
 035D 5100              mov A,[__r11]
 035F 08                push A
 0360 7C0000            xcall __mul_32X32_32
 0363 38FC              add SP,-4
 0365 18                pop A
 0366 5300              mov [__r7],A
 0368 18                pop A
 0369 5300              mov [__r6],A
 036B 18                pop A
 036C 5300              mov [__r5],A
 036E 18                pop A
 036F 5300              mov [__r4],A
 0371 5100              mov A,[__r7]
 0373 0200              add A,[__r3]
 0375 5405              mov [X+5],A
 0377 5100              mov A,[__r6]
 0379 0A00              adc A,[__r2]
 037B 5404              mov [X+4],A
 037D 5100              mov A,[__r5]
 037F 0A00              adc A,[__r1]
 0381 5403              mov [X+3],A
 0383 5100              mov A,[__r4]
 0385 0A00              adc A,[__r0]
 0387 5402              mov [X+2],A
 0389                   .dbline 214
 0389           ;                               if (tmpx0 < 0)
 0389 5205              mov A,[X+5]
 038B 1100              sub A,0
 038D 5204              mov A,[X+4]
 038F 1900              sbb A,0
 0391 5203              mov A,[X+3]
 0393 1900              sbb A,0
 0395 5202              mov A,[X+2]
 0397 3180              xor A,-128
 0399 1980              sbb A,(0 ^ 0x80)
 039B D090              jnc L64
 039D           X11:
 039D                   .dbline 216
 039D           ;                               {
 039D           ;                                       pwm_X += (~((~tmpx0) >> OutboxBuff.bshift_X));
 039D                   .dbline 216
 039D 62D000            mov REG[0xd0],>_OutboxBuff
 03A0 5105              mov A,[_OutboxBuff+5]
 03A2 62D000            mov REG[0xd0],>__r0
 03A5 5300              mov [__r1],A
 03A7 5202              mov A,[X+2]
 03A9 73                cpl A
 03AA 5300              mov [__r4],A
 03AC 5203              mov A,[X+3]
 03AE 73                cpl A
 03AF 5300              mov [__r5],A
 03B1 5204              mov A,[X+4]
 03B3 73                cpl A
 03B4 5300              mov [__r6],A
 03B6 5205              mov A,[X+5]
 03B8 73                cpl A
 03B9 5300              mov [__r7],A
 03BB 5100              mov A,[__r1]
 03BD 211F              and A,31
 03BF A00F              jz X12
 03C1           X13:
 03C1 62D000            mov REG[0xd0],>__r0
 03C4 6800              asr [__r4]
 03C6 6E00              rrc [__r5]
 03C8 6E00              rrc [__r6]
 03CA 6E00              rrc [__r7]
 03CC 78                dec A
 03CD BFF3              jnz X13
 03CF           X12:
 03CF 62D000            mov REG[0xd0],>__r0
 03D2 5100              mov A,[__r6]
 03D4 73                cpl A
 03D5 5300              mov [__r2],A
 03D7 5100              mov A,[__r7]
 03D9 73                cpl A
 03DA 5300              mov [__r3],A
 03DC 62D000            mov REG[0xd0],>L42
 03DF 5101              mov A,[L42+1]
 03E1 62D000            mov REG[0xd0],>__r0
 03E4 5300              mov [__r7],A
 03E6 62D000            mov REG[0xd0],>L42
 03E9 5100              mov A,[L42]
 03EB 62D000            mov REG[0xd0],>__r0
 03EE 5300              mov [__r6],A
 03F0 470080            tst [__r6],-128
 03F3 A009              jz X14
 03F5 5500FF            mov [__r5],-1
 03F8 5500FF            mov [__r4],-1
 03FB 800A              jmp X15
 03FD           X14:
 03FD 62D000            mov REG[0xd0],>__r0
 0400 550000            mov [__r5],0
 0403 550000            mov [__r4],0
 0406           X15:
 0406 62D000            mov REG[0xd0],>__r0
 0409 5100              mov A,[__r7]
 040B 0200              add A,[__r3]
 040D 5300              mov [__r3],A
 040F 5100              mov A,[__r6]
 0411 0A00              adc A,[__r2]
 0413 5300              mov [__r2],A
 0415 5100              mov A,[__r3]
 0417 5300              mov [__r1],A
 0419 5100              mov A,[__r2]
 041B 5300              mov [__r0],A
 041D 5100              mov A,[__r1]
 041F 08                push A
 0420 5100              mov A,[__r0]
 0422 62D000            mov REG[0xd0],>L42
 0425 5300              mov [L42],A
 0427 18                pop A
 0428 5301              mov [L42+1],A
 042A                   .dbline 217
 042A           ;                               }
 042A 8079              xjmp L65
 042C           L64:
 042C                   .dbline 219
 042C           ;                               else
 042C           ;                               {
 042C                   .dbline 220
 042C           ;                                       pwm_X += (tmpx0 >> OutboxBuff.bshift_X);
 042C 62D000            mov REG[0xd0],>_OutboxBuff
 042F 5105              mov A,[_OutboxBuff+5]
 0431 62D000            mov REG[0xd0],>__r0
 0434 5300              mov [__r1],A
 0436 5202              mov A,[X+2]
 0438 5300              mov [__r4],A
 043A 5203              mov A,[X+3]
 043C 5300              mov [__r5],A
 043E 5204              mov A,[X+4]
 0440 5300              mov [__r6],A
 0442 5205              mov A,[X+5]
 0444 5300              mov [__r7],A
 0446 5100              mov A,[__r1]
 0448 211F              and A,31
 044A A00F              jz X16
 044C           X17:
 044C 62D000            mov REG[0xd0],>__r0
 044F 6800              asr [__r4]
 0451 6E00              rrc [__r5]
 0453 6E00              rrc [__r6]
 0455 6E00              rrc [__r7]
 0457 78                dec A
 0458 BFF3              jnz X17
 045A           X16:
 045A 62D000            mov REG[0xd0],>L42
 045D 5101              mov A,[L42+1]
 045F 62D000            mov REG[0xd0],>__r0
 0462 5300              mov [__r3],A
 0464 62D000            mov REG[0xd0],>L42
 0467 5100              mov A,[L42]
 0469 62D000            mov REG[0xd0],>__r0
 046C 5300              mov [__r2],A
 046E 470080            tst [__r2],-128
 0471 A009              jz X18
 0473 5500FF            mov [__r1],-1
 0476 5500FF            mov [__r0],-1
 0479 800A              jmp X19
 047B           X18:
 047B 62D000            mov REG[0xd0],>__r0
 047E 550000            mov [__r1],0
 0481 550000            mov [__r0],0
 0484           X19:
 0484 62D000            mov REG[0xd0],>__r0
 0487 5100              mov A,[__r7]
 0489 0400              add [__r3],A
 048B 5100              mov A,[__r6]
 048D 0C00              adc [__r2],A
 048F 5100              mov A,[__r3]
 0491 5300              mov [__r1],A
 0493 5100              mov A,[__r2]
 0495 5300              mov [__r0],A
 0497 5100              mov A,[__r1]
 0499 08                push A
 049A 5100              mov A,[__r0]
 049C 62D000            mov REG[0xd0],>L42
 049F 5300              mov [L42],A
 04A1 18                pop A
 04A2 5301              mov [L42+1],A
 04A4                   .dbline 221
 04A4           ;                               }
 04A4           L65:
 04A4                   .dbline 224
 04A4           ;                               
 04A4           ;                               //CCW
 04A4           ;                               if (pwm_X < 0)
 04A4 62D000            mov REG[0xd0],>L42
 04A7 5101              mov A,[L42+1]
 04A9 1100              sub A,0
 04AB 5100              mov A,[L42]
 04AD 3180              xor A,-128
 04AF 1980              sbb A,(0 ^ 0x80)
 04B1 D082              jnc L68
 04B3           X20:
 04B3                   .dbline 226
 04B3           ;                               {
 04B3           ;                                       if (bitCheck(~rd_X, CCW))
 04B3                   .dbline 226
 04B3 62D000            mov REG[0xd0],>L41
 04B6 5100              mov A,[L41]
 04B8 73                cpl A
 04B9 62D000            mov REG[0xd0],>__r0
 04BC 5300              mov [__r0],A
 04BE 260002            and [__r0],2
 04C1 A035              jz L70
 04C3                   .dbline 228
 04C3           ;                                       {
 04C3           ;                                               PRS32_X_WriteSeed(0);
 04C3                   .dbline 228
 04C3 10                push X
 04C4 5000              mov A,0
 04C6 08                push A
 04C7 08                push A
 04C8 08                push A
 04C9 08                push A
 04CA 7C0000            xcall _PRS32_X_WriteSeed
 04CD 38FC              add SP,-4
 04CF 20                pop X
 04D0                   .dbline 231
 04D0           ;                                               
 04D0           ;                                               //XAH off
 04D0           ;                                               XAH_Data_ADDR = bitClear(XAH_DataShadow, XAH_MASK);
 04D0 62D000            mov REG[0xd0],>_Port_1_Data_SHADE
 04D3 5100              mov A,[_Port_1_Data_SHADE]
 04D5 21F7              and A,-9
 04D7 5300              mov [_Port_1_Data_SHADE],A
 04D9 6004              mov REG[0x4],A
 04DB                   .dbline 233
 04DB           ;                                               //XBL & prs off
 04DB           ;                                               XBL_Data_ADDR = bitClear(XBL_DataShadow, XBL_MASK);
 04DB 5100              mov A,[_Port_1_Data_SHADE]
 04DD 21BF              and A,-65
 04DF 5300              mov [_Port_1_Data_SHADE],A
 04E1 6004              mov REG[0x4],A
 04E3                   .dbline 234
 04E3           ;                                               bitClear(XBL_GlobalSelect_ADDR, XBL_MASK);
 04E3 4106BF            and REG[0x6],-65
 04E6                   .dbline 236
 04E6           ;                                               //XBH on
 04E6           ;                                               XBH_Data_ADDR = bitSet(XBH_DataShadow, XBH_MASK);
 04E6 5100              mov A,[_Port_1_Data_SHADE]
 04E8 2910              or A,16
 04EA 5300              mov [_Port_1_Data_SHADE],A
 04EC 6004              mov REG[0x4],A
 04EE                   .dbline 238
 04EE           ;                                               //XAL prs on
 04EE           ;                                               bitSet(XAL_GlobalSelect_ADDR, XAL_MASK);
 04EE 430604            or REG[0x6],4
 04F1                   .dbline 240
 04F1           ;                                               
 04F1           ;                                               rd_X = CCW;
 04F1 62D000            mov REG[0xd0],>L41
 04F4 550002            mov [L41],2
 04F7                   .dbline 241
 04F7           ;                                       }
 04F7           L70:
 04F7                   .dbline 243
 04F7           ;                                       
 04F7           ;                                       if (pwm_X <= -128)
 04F7 62D000            mov REG[0xd0],>L42
 04FA 5080              mov A,-128
 04FC 1201              sub A,[L42+1]
 04FE 5100              mov A,[L42]
 0500 3180              xor A,-128
 0502 62D000            mov REG[0xd0],>__r0
 0505 5300              mov [__rX],A
 0507 507F              mov A,(-1 ^ 0x80)
 0509 1A00              sbb A,[__rX]
 050B C00C              jc L72
 050D           X21:
 050D                   .dbline 245
 050D           ;                                       {
 050D           ;                                               InboxBuff.X_crs = 0x80;
 050D                   .dbline 245
 050D 62D000            mov REG[0xd0],>_InboxBuff
 0510 550280            mov [_InboxBuff+2],-128
 0513                   .dbline 246
 0513           ;                                               tmpx1 = 255;
 0513 5606FF            mov [X+6],-1
 0516                   .dbline 247
 0516           ;                                       }
 0516 8094              xjmp L69
 0518           L72:
 0518                   .dbline 249
 0518           ;                                       else
 0518           ;                                       {
 0518                   .dbline 250
 0518           ;                                               (*(CHAR *)&(InboxBuff.X_crs)) = pwm_X;
 0518 62D000            mov REG[0xd0],>L42
 051B 5101              mov A,[L42+1]
 051D 62D000            mov REG[0xd0],>_InboxBuff
 0520 5302              mov [_InboxBuff+2],A
 0522                   .dbline 251
 0522           ;                                               tmpx1 = (((~InboxBuff.X_crs) << 1) + 1);
 0522 5102              mov A,[_InboxBuff+2]
 0524 73                cpl A
 0525 62D000            mov REG[0xd0],>__r0
 0528 5300              mov [__r0],A
 052A 6500              asl [__r0]
 052C 5100              mov A,[__r0]
 052E 0101              add A,1
 0530 5406              mov [X+6],A
 0532                   .dbline 252
 0532           ;                                       }
 0532                   .dbline 253
 0532           ;                               }
 0532 8078              xjmp L69
 0534           L68:
 0534                   .dbline 256
 0534           ;                               //CW
 0534           ;                               else
 0534           ;                               {
 0534                   .dbline 257
 0534           ;                                       if (bitCheck(~rd_X, CW))
 0534 62D000            mov REG[0xd0],>L41
 0537 5100              mov A,[L41]
 0539 73                cpl A
 053A 62D000            mov REG[0xd0],>__r0
 053D 5300              mov [__r0],A
 053F 260001            and [__r0],1
 0542 A035              jz L77
 0544                   .dbline 259
 0544           ;                                       {
 0544           ;                                               PRS32_X_WriteSeed(0);
 0544                   .dbline 259
 0544 10                push X
 0545 5000              mov A,0
 0547 08                push A
 0548 08                push A
 0549 08                push A
 054A 08                push A
 054B 7C0000            xcall _PRS32_X_WriteSeed
 054E 38FC              add SP,-4
 0550 20                pop X
 0551                   .dbline 262
 0551           ;                                               
 0551           ;                                               //XBH off
 0551           ;                                               XBH_Data_ADDR = bitClear(XBH_DataShadow, XBH_MASK);
 0551 62D000            mov REG[0xd0],>_Port_1_Data_SHADE
 0554 5100              mov A,[_Port_1_Data_SHADE]
 0556 21EF              and A,-17
 0558 5300              mov [_Port_1_Data_SHADE],A
 055A 6004              mov REG[0x4],A
 055C                   .dbline 264
 055C           ;                                               //XAL & prs off
 055C           ;                                               XAL_Data_ADDR = bitClear(XAL_DataShadow, XAL_MASK);
 055C 5100              mov A,[_Port_1_Data_SHADE]
 055E 21FB              and A,-5
 0560 5300              mov [_Port_1_Data_SHADE],A
 0562 6004              mov REG[0x4],A
 0564                   .dbline 265
 0564           ;                                               bitClear(XAL_GlobalSelect_ADDR, XAL_MASK);
 0564 4106FB            and REG[0x6],-5
 0567                   .dbline 267
 0567           ;                                               //XAH on
 0567           ;                                               XAH_Data_ADDR = bitSet(XAH_DataShadow, XAH_MASK);
 0567 5100              mov A,[_Port_1_Data_SHADE]
 0569 2908              or A,8
 056B 5300              mov [_Port_1_Data_SHADE],A
 056D 6004              mov REG[0x4],A
 056F                   .dbline 269
 056F           ;                                               //XBL prs on
 056F           ;                                               bitSet(XBL_GlobalSelect_ADDR, XBL_MASK);
 056F 430640            or REG[0x6],64
 0572                   .dbline 271
 0572           ;                                               
 0572           ;                                               rd_X = CW;
 0572 62D000            mov REG[0xd0],>L41
 0575 550001            mov [L41],1
 0578                   .dbline 272
 0578           ;                                       }
 0578           L77:
 0578                   .dbline 274
 0578           ;                                       
 0578           ;                                       if (pwm_X >= 127)
 0578 62D000            mov REG[0xd0],>L42
 057B 5101              mov A,[L42+1]
 057D 117F              sub A,127
 057F 5100              mov A,[L42]
 0581 3180              xor A,-128
 0583 1980              sbb A,(0 ^ 0x80)
 0585 C00C              jc L79
 0587           X22:
 0587                   .dbline 276
 0587           ;                                       {
 0587           ;                                               InboxBuff.X_crs = 0x7f;
 0587                   .dbline 276
 0587 62D000            mov REG[0xd0],>_InboxBuff
 058A 55027F            mov [_InboxBuff+2],127
 058D                   .dbline 277
 058D           ;                                               tmpx1 = 255;
 058D 5606FF            mov [X+6],-1
 0590                   .dbline 278
 0590           ;                                       }
 0590 801A              xjmp L80
 0592           L79:
 0592                   .dbline 280
 0592           ;                                       else
 0592           ;                                       {
 0592                   .dbline 281
 0592           ;                                               (*(CHAR *)&(InboxBuff.X_crs)) = pwm_X;
 0592 62D000            mov REG[0xd0],>L42
 0595 5101              mov A,[L42+1]
 0597 62D000            mov REG[0xd0],>_InboxBuff
 059A 5302              mov [_InboxBuff+2],A
 059C                   .dbline 282
 059C           ;                                               tmpx1 = ((InboxBuff.X_crs << 1) + 1);
 059C 5102              mov A,[_InboxBuff+2]
 059E 62D000            mov REG[0xd0],>__r0
 05A1 5300              mov [__r0],A
 05A3 6500              asl [__r0]
 05A5 5100              mov A,[__r0]
 05A7 0101              add A,1
 05A9 5406              mov [X+6],A
 05AB                   .dbline 283
 05AB           ;                                       }
 05AB           L80:
 05AB                   .dbline 284
 05AB           ;                               }
 05AB           L69:
 05AB                   .dbline 286
 05AB           ;                               
 05AB           ;                               prsSet(prs_X, tmpx1);
 05AB 5206              mov A,[X+6]
 05AD 62D000            mov REG[0xd0],>_prs_X
 05B0 5303              mov [_prs_X+3],A
 05B2 5206              mov A,[X+6]
 05B4 5302              mov [_prs_X+2],A
 05B6 5206              mov A,[X+6]
 05B8 5301              mov [_prs_X+1],A
 05BA 5206              mov A,[X+6]
 05BC 5300              mov [_prs_X],A
 05BE                   .dbline 287
 05BE           ;                               bitSet(InboxBuff.InboxFlag, I2CIO_UPDATE);
 05BE 62D000            mov REG[0xd0],>_InboxBuff
 05C1 2E0020            or [_InboxBuff],32
 05C4                   .dbline 288
 05C4           ;                       }
 05C4           L45:
 05C4                   .dbline 290
 05C4           ;                       
 05C4           ;                       sw_X = FALSE;
 05C4 62D000            mov REG[0xd0],>_sw_X
 05C7 550000            mov [_sw_X],0
 05CA                   .dbline 291
 05CA           ;               }
 05CA           L38:
 05CA                   .dbline 295
 05CA           ;               //end X
 05CA           ;               
 05CA           ;               //calclate Y motor
 05CA           ;               if (sw_Y)
 05CA 62D000            mov REG[0xd0],>_sw_Y
 05CD 3C0000            cmp [_sw_Y],0
 05D0 A43F              jz L87
 05D2                   .dbline 297
 05D2           ;               {
 05D2           ;                       static BYTE count_Y;
 05D2                   .dbline 303
 05D2           ;                       static BYTE rd_Y;
 05D2           ;                       static INT pwm_Y;
 05D2           ;                       static LONG iY;
 05D2           ;                       
 05D2           ;                       //stop & brake 
 05D2           ;                       if (bitCheck(OutboxBuff.TBrakeFlag, STOP_Y))
 05D2 62D000            mov REG[0xd0],>_OutboxBuff
 05D5 470102            tst [_OutboxBuff+1],2
 05D8 A0D2              jz L93
 05DA                   .dbline 306
 05DA           ;                       {
 05DA           ;                               //brake
 05DA           ;                               if (count_Y < (STOPCOUNT_Y - STOPINC_Y))
 05DA                   .dbline 306
 05DA 62D000            mov REG[0xd0],>L89
 05DD 3C00FE            cmp [L89],-2
 05E0 D0A1              jnc L96
 05E2           X23:
 05E2                   .dbline 309
 05E2           ;                               {
 05E2           ;                                       //brake start
 05E2           ;                                       if (rd_Y)
 05E2                   .dbline 309
 05E2 62D000            mov REG[0xd0],>L90
 05E5 3C0000            cmp [L90],0
 05E8 A057              jz L98
 05EA                   .dbline 311
 05EA           ;                                       {
 05EA           ;                                               PRS32_Y_WriteSeed(0);
 05EA                   .dbline 311
 05EA 10                push X
 05EB 5000              mov A,0
 05ED 08                push A
 05EE 08                push A
 05EF 08                push A
 05F0 08                push A
 05F1 7C0000            xcall _PRS32_Y_WriteSeed
 05F4 38FC              add SP,-4
 05F6 20                pop X
 05F7                   .dbline 314
 05F7           ;                                               
 05F7           ;                                               //YAH off
 05F7           ;                                               YAH_Data_ADDR = bitClear(YAH_DataShadow, YAH_MASK);
 05F7 62D000            mov REG[0xd0],>_Port_2_Data_SHADE
 05FA 5100              mov A,[_Port_2_Data_SHADE]
 05FC 21FE              and A,-2
 05FE 5300              mov [_Port_2_Data_SHADE],A
 0600 6008              mov REG[0x8],A
 0602                   .dbline 316
 0602           ;                                               //YBH off
 0602           ;                                               YBH_Data_ADDR = bitClear(YBH_DataShadow, YBH_MASK);
 0602 5100              mov A,[_Port_2_Data_SHADE]
 0604 21F7              and A,-9
 0606 5300              mov [_Port_2_Data_SHADE],A
 0608 6008              mov REG[0x8],A
 060A                   .dbline 318
 060A           ;                                               //YAL prs on
 060A           ;                                               bitSet(YAL_GlobalSelect_ADDR, YAL_MASK);
 060A 430A02            or REG[0xa],2
 060D                   .dbline 320
 060D           ;                                               //YBL prs on
 060D           ;                                               bitSet(YBL_GlobalSelect_ADDR, YBL_MASK);
 060D 430A20            or REG[0xa],32
 0610                   .dbline 322
 0610           ;                                               
 0610           ;                                               bitSet(InboxBuff.CBrakeFlag, STOP_Y);
 0610 62D000            mov REG[0xd0],>_InboxBuff
 0613 2E0102            or [_InboxBuff+1],2
 0616                   .dbline 323
 0616           ;                                               bitSet(InboxBuff.InboxFlag, I2CIO_UPDATE);
 0616 2E0020            or [_InboxBuff],32
 0619                   .dbline 324
 0619           ;                                               InboxBuff.Y_crs = 0;
 0619 550300            mov [_InboxBuff+3],0
 061C                   .dbline 325
 061C           ;                                               pwm_Y = 0;
 061C 62D000            mov REG[0xd0],>L91
 061F 550100            mov [L91+1],0
 0622 550000            mov [L91],0
 0625                   .dbline 326
 0625           ;                                               iY = 0;
 0625 62D000            mov REG[0xd0],>L92
 0628 550000            mov [L92],0
 062B 550100            mov [L92+1],0
 062E 550200            mov [L92+2],0
 0631 550300            mov [L92+3],0
 0634                   .dbline 327
 0634           ;                                               count_Y = 0;
 0634 62D000            mov REG[0xd0],>L89
 0637 550000            mov [L89],0
 063A                   .dbline 328
 063A           ;                                               rd_Y = STOP;
 063A 62D000            mov REG[0xd0],>L90
 063D 550000            mov [L90],0
 0640                   .dbline 329
 0640           ;                                       }
 0640           L98:
 0640                   .dbline 331
 0640           ;                                       //set prs
 0640           ;                                       prsSet(prs_Y, count_Y);
 0640 62D000            mov REG[0xd0],>L89
 0643 5100              mov A,[L89]
 0645 62D000            mov REG[0xd0],>_prs_Y
 0648 5303              mov [_prs_Y+3],A
 064A 62D000            mov REG[0xd0],>L89
 064D 5100              mov A,[L89]
 064F 62D000            mov REG[0xd0],>_prs_Y
 0652 5302              mov [_prs_Y+2],A
 0654 62D000            mov REG[0xd0],>L89
 0657 5100              mov A,[L89]
 0659 62D000            mov REG[0xd0],>_prs_Y
 065C 5301              mov [_prs_Y+1],A
 065E 62D000            mov REG[0xd0],>L89
 0661 5100              mov A,[L89]
 0663 62D000            mov REG[0xd0],>_prs_Y
 0666 5300              mov [_prs_Y],A
 0668                   .dbline 332
 0668           ;                                       PRS32_Y_WriteSeed(prs_Y);
 0668 10                push X
 0669 5100              mov A,[_prs_Y]
 066B 08                push A
 066C 5101              mov A,[_prs_Y+1]
 066E 08                push A
 066F 5102              mov A,[_prs_Y+2]
 0671 08                push A
 0672 5103              mov A,[_prs_Y+3]
 0674 08                push A
 0675 7C0000            xcall _PRS32_Y_WriteSeed
 0678 38FC              add SP,-4
 067A 20                pop X
 067B                   .dbline 333
 067B           ;                                       count_Y += STOPINC_Y;
 067B 62D000            mov REG[0xd0],>L89
 067E 7600              inc [L89]
 0680                   .dbline 334
 0680           ;                               }
 0680 8389              xjmp L94
 0682           L96:
 0682                   .dbline 336
 0682           ;                               //lock
 0682           ;                               else if (count_Y != 0xff)
 0682 62D000            mov REG[0xd0],>L89
 0685 3C00FF            cmp [L89],-1
 0688 A381              jz L94
 068A                   .dbline 339
 068A           ;                               {
 068A           ;                                       //YAL on & prs off
 068A           ;                                       YAL_Data_ADDR = bitSet(YAL_DataShadow, YAL_MASK);
 068A                   .dbline 339
 068A 62D000            mov REG[0xd0],>_Port_2_Data_SHADE
 068D 5100              mov A,[_Port_2_Data_SHADE]
 068F 2902              or A,2
 0691 5300              mov [_Port_2_Data_SHADE],A
 0693 6008              mov REG[0x8],A
 0695                   .dbline 340
 0695           ;                                       bitClear(YAL_GlobalSelect_ADDR, YAL_MASK);
 0695 410AFD            and REG[0xa],-3
 0698                   .dbline 342
 0698           ;                                       //YBL on & prs off
 0698           ;                                       YBL_Data_ADDR = bitSet(YBL_DataShadow, YBL_MASK);
 0698 5100              mov A,[_Port_2_Data_SHADE]
 069A 2920              or A,32
 069C 5300              mov [_Port_2_Data_SHADE],A
 069E 6008              mov REG[0x8],A
 06A0                   .dbline 343
 06A0           ;                                       bitClear(YBL_GlobalSelect_ADDR, YBL_MASK);
 06A0 410ADF            and REG[0xa],-33
 06A3                   .dbline 345
 06A3           ;                                       
 06A3           ;                                       count_Y = 0xff;
 06A3 62D000            mov REG[0xd0],>L89
 06A6 5500FF            mov [L89],-1
 06A9                   .dbline 346
 06A9           ;                               }
 06A9                   .dbline 347
 06A9           ;                       }
 06A9 8360              xjmp L94
 06AB           L93:
 06AB                   .dbline 350
 06AB           ;                       //rotation
 06AB           ;                       else
 06AB           ;                       {
 06AB                   .dbline 355
 06AB           ;                               INT pY;
 06AB           ;                               LONG tmpx0;
 06AB           ;                               BYTE tmpx1;
 06AB           ;                               
 06AB           ;                               if (rd_Y == STOP)
 06AB 62D000            mov REG[0xd0],>L90
 06AE 3C0000            cmp [L90],0
 06B1 B00D              jnz L107
 06B3                   .dbline 357
 06B3           ;                               {
 06B3           ;                                       bitClear(InboxBuff.CBrakeFlag, STOP_Y);
 06B3                   .dbline 357
 06B3 62D000            mov REG[0xd0],>_InboxBuff
 06B6 2601FD            and [_InboxBuff+1],-3
 06B9                   .dbline 358
 06B9           ;                                       count_Y = 0;
 06B9 62D000            mov REG[0xd0],>L89
 06BC 550000            mov [L89],0
 06BF                   .dbline 359
 06BF           ;                               }
 06BF           L107:
 06BF                   .dbline 362
 06BF           ;                               
 06BF           ;                               //calclate PI
 06BF           ;                               pY = ((*(CHAR *)&(OutboxBuff.Y_trs)) - pwm_Y);
 06BF 62D000            mov REG[0xd0],>_OutboxBuff
 06C2 5103              mov A,[_OutboxBuff+3]
 06C4 62D000            mov REG[0xd0],>__r0
 06C7 5300              mov [__r1],A
 06C9 550000            mov [__r0],0
 06CC 470080            tst [__r1],-128
 06CF A004              jz X24
 06D1 5500FF            mov [__r0],-1
 06D4           X24:
 06D4 62D000            mov REG[0xd0],>__r0
 06D7 5100              mov A,[__r1]
 06D9 62D000            mov REG[0xd0],>L91
 06DC 1201              sub A,[L91+1]
 06DE 5401              mov [X+1],A
 06E0 62D000            mov REG[0xd0],>__r0
 06E3 5100              mov A,[__r0]
 06E5 62D000            mov REG[0xd0],>L91
 06E8 1A00              sbb A,[L91]
 06EA 5400              mov [X+0],A
 06EC                   .dbline 363
 06EC           ;                               iY += pY;
 06EC 62D000            mov REG[0xd0],>__r0
 06EF 5201              mov A,[X+1]
 06F1 5300              mov [__r3],A
 06F3 5200              mov A,[X+0]
 06F5 5300              mov [__r2],A
 06F7 470080            tst [__r2],-128
 06FA A009              jz X25
 06FC 5500FF            mov [__r1],-1
 06FF 5500FF            mov [__r0],-1
 0702 800A              jmp X26
 0704           X25:
 0704 62D000            mov REG[0xd0],>__r0
 0707 550000            mov [__r1],0
 070A 550000            mov [__r0],0
 070D           X26:
 070D 62D000            mov REG[0xd0],>__r0
 0710 5100              mov A,[__r3]
 0712 62D000            mov REG[0xd0],>L92
 0715 0403              add [L92+3],A
 0717 62D000            mov REG[0xd0],>__r0
 071A 5100              mov A,[__r2]
 071C 62D000            mov REG[0xd0],>L92
 071F 0C02              adc [L92+2],A
 0721 62D000            mov REG[0xd0],>__r0
 0724 5100              mov A,[__r1]
 0726 62D000            mov REG[0xd0],>L92
 0729 0C01              adc [L92+1],A
 072B 62D000            mov REG[0xd0],>__r0
 072E 5100              mov A,[__r0]
 0730 62D000            mov REG[0xd0],>L92
 0733 0C00              adc [L92],A
 0735                   .dbline 364
 0735           ;                               tmpx0 = (OutboxBuff.Kp_Y * (LONG)pY + OutboxBuff.Ki_Y * iY);
 0735 62D000            mov REG[0xd0],>_OutboxBuff
 0738 510A              mov A,[_OutboxBuff+10]
 073A 62D000            mov REG[0xd0],>__r0
 073D 5300              mov [__r3],A
 073F 62D000            mov REG[0xd0],>L92
 0742 5100              mov A,[L92]
 0744 08                push A
 0745 5101              mov A,[L92+1]
 0747 08                push A
 0748 5102              mov A,[L92+2]
 074A 08                push A
 074B 5103              mov A,[L92+3]
 074D 08                push A
 074E 62D000            mov REG[0xd0],>__r0
 0751 5000              mov A,0
 0753 08                push A
 0754 08                push A
 0755 08                push A
 0756 5100              mov A,[__r3]
 0758 08                push A
 0759 7C0000            xcall __mul_32X32_32
 075C 38FC              add SP,-4
 075E 18                pop A
 075F 5300              mov [__r3],A
 0761 18                pop A
 0762 5300              mov [__r2],A
 0764 18                pop A
 0765 5300              mov [__r1],A
 0767 18                pop A
 0768 5300              mov [__r0],A
 076A 5201              mov A,[X+1]
 076C 5300              mov [__r7],A
 076E 5200              mov A,[X+0]
 0770 5300              mov [__r6],A
 0772 470080            tst [__r6],-128
 0775 A009              jz X27
 0777 5500FF            mov [__r5],-1
 077A 5500FF            mov [__r4],-1
 077D 800A              jmp X28
 077F           X27:
 077F 62D000            mov REG[0xd0],>__r0
 0782 550000            mov [__r5],0
 0785 550000            mov [__r4],0
 0788           X28:
 0788 62D000            mov REG[0xd0],>_OutboxBuff
 078B 5109              mov A,[_OutboxBuff+9]
 078D 62D000            mov REG[0xd0],>__r0
 0790 5300              mov [__r11],A
 0792 5100              mov A,[__r4]
 0794 08                push A
 0795 5100              mov A,[__r5]
 0797 08                push A
 0798 5100              mov A,[__r6]
 079A 08                push A
 079B 5100              mov A,[__r7]
 079D 08                push A
 079E 5000              mov A,0
 07A0 08                push A
 07A1 08                push A
 07A2 08                push A
 07A3 5100              mov A,[__r11]
 07A5 08                push A
 07A6 7C0000            xcall __mul_32X32_32
 07A9 38FC              add SP,-4
 07AB 18                pop A
 07AC 5300              mov [__r7],A
 07AE 18                pop A
 07AF 5300              mov [__r6],A
 07B1 18                pop A
 07B2 5300              mov [__r5],A
 07B4 18                pop A
 07B5 5300              mov [__r4],A
 07B7 5100              mov A,[__r7]
 07B9 0200              add A,[__r3]
 07BB 5405              mov [X+5],A
 07BD 5100              mov A,[__r6]
 07BF 0A00              adc A,[__r2]
 07C1 5404              mov [X+4],A
 07C3 5100              mov A,[__r5]
 07C5 0A00              adc A,[__r1]
 07C7 5403              mov [X+3],A
 07C9 5100              mov A,[__r4]
 07CB 0A00              adc A,[__r0]
 07CD 5402              mov [X+2],A
 07CF                   .dbline 365
 07CF           ;                               if (tmpx0 < 0)
 07CF 5205              mov A,[X+5]
 07D1 1100              sub A,0
 07D3 5204              mov A,[X+4]
 07D5 1900              sbb A,0
 07D7 5203              mov A,[X+3]
 07D9 1900              sbb A,0
 07DB 5202              mov A,[X+2]
 07DD 3180              xor A,-128
 07DF 1980              sbb A,(0 ^ 0x80)
 07E1 D090              jnc L113
 07E3           X29:
 07E3                   .dbline 367
 07E3           ;                               {
 07E3           ;                                       pwm_Y += (~((~tmpx0) >> OutboxBuff.bshift_Y));
 07E3                   .dbline 367
 07E3 62D000            mov REG[0xd0],>_OutboxBuff
 07E6 5108              mov A,[_OutboxBuff+8]
 07E8 62D000            mov REG[0xd0],>__r0
 07EB 5300              mov [__r1],A
 07ED 5202              mov A,[X+2]
 07EF 73                cpl A
 07F0 5300              mov [__r4],A
 07F2 5203              mov A,[X+3]
 07F4 73                cpl A
 07F5 5300              mov [__r5],A
 07F7 5204              mov A,[X+4]
 07F9 73                cpl A
 07FA 5300              mov [__r6],A
 07FC 5205              mov A,[X+5]
 07FE 73                cpl A
 07FF 5300              mov [__r7],A
 0801 5100              mov A,[__r1]
 0803 211F              and A,31
 0805 A00F              jz X30
 0807           X31:
 0807 62D000            mov REG[0xd0],>__r0
 080A 6800              asr [__r4]
 080C 6E00              rrc [__r5]
 080E 6E00              rrc [__r6]
 0810 6E00              rrc [__r7]
 0812 78                dec A
 0813 BFF3              jnz X31
 0815           X30:
 0815 62D000            mov REG[0xd0],>__r0
 0818 5100              mov A,[__r6]
 081A 73                cpl A
 081B 5300              mov [__r2],A
 081D 5100              mov A,[__r7]
 081F 73                cpl A
 0820 5300              mov [__r3],A
 0822 62D000            mov REG[0xd0],>L91
 0825 5101              mov A,[L91+1]
 0827 62D000            mov REG[0xd0],>__r0
 082A 5300              mov [__r7],A
 082C 62D000            mov REG[0xd0],>L91
 082F 5100              mov A,[L91]
 0831 62D000            mov REG[0xd0],>__r0
 0834 5300              mov [__r6],A
 0836 470080            tst [__r6],-128
 0839 A009              jz X32
 083B 5500FF            mov [__r5],-1
 083E 5500FF            mov [__r4],-1
 0841 800A              jmp X33
 0843           X32:
 0843 62D000            mov REG[0xd0],>__r0
 0846 550000            mov [__r5],0
 0849 550000            mov [__r4],0
 084C           X33:
 084C 62D000            mov REG[0xd0],>__r0
 084F 5100              mov A,[__r7]
 0851 0200              add A,[__r3]
 0853 5300              mov [__r3],A
 0855 5100              mov A,[__r6]
 0857 0A00              adc A,[__r2]
 0859 5300              mov [__r2],A
 085B 5100              mov A,[__r3]
 085D 5300              mov [__r1],A
 085F 5100              mov A,[__r2]
 0861 5300              mov [__r0],A
 0863 5100              mov A,[__r1]
 0865 08                push A
 0866 5100              mov A,[__r0]
 0868 62D000            mov REG[0xd0],>L91
 086B 5300              mov [L91],A
 086D 18                pop A
 086E 5301              mov [L91+1],A
 0870                   .dbline 368
 0870           ;                               }
 0870 8079              xjmp L114
 0872           L113:
 0872                   .dbline 370
 0872           ;                               else
 0872           ;                               {
 0872                   .dbline 371
 0872           ;                                       pwm_Y += (tmpx0 >> OutboxBuff.bshift_Y);
 0872 62D000            mov REG[0xd0],>_OutboxBuff
 0875 5108              mov A,[_OutboxBuff+8]
 0877 62D000            mov REG[0xd0],>__r0
 087A 5300              mov [__r1],A
 087C 5202              mov A,[X+2]
 087E 5300              mov [__r4],A
 0880 5203              mov A,[X+3]
 0882 5300              mov [__r5],A
 0884 5204              mov A,[X+4]
 0886 5300              mov [__r6],A
 0888 5205              mov A,[X+5]
 088A 5300              mov [__r7],A
 088C 5100              mov A,[__r1]
 088E 211F              and A,31
 0890 A00F              jz X34
 0892           X35:
 0892 62D000            mov REG[0xd0],>__r0
 0895 6800              asr [__r4]
 0897 6E00              rrc [__r5]
 0899 6E00              rrc [__r6]
 089B 6E00              rrc [__r7]
 089D 78                dec A
 089E BFF3              jnz X35
 08A0           X34:
 08A0 62D000            mov REG[0xd0],>L91
 08A3 5101              mov A,[L91+1]
 08A5 62D000            mov REG[0xd0],>__r0
 08A8 5300              mov [__r3],A
 08AA 62D000            mov REG[0xd0],>L91
 08AD 5100              mov A,[L91]
 08AF 62D000            mov REG[0xd0],>__r0
 08B2 5300              mov [__r2],A
 08B4 470080            tst [__r2],-128
 08B7 A009              jz X36
 08B9 5500FF            mov [__r1],-1
 08BC 5500FF            mov [__r0],-1
 08BF 800A              jmp X37
 08C1           X36:
 08C1 62D000            mov REG[0xd0],>__r0
 08C4 550000            mov [__r1],0
 08C7 550000            mov [__r0],0
 08CA           X37:
 08CA 62D000            mov REG[0xd0],>__r0
 08CD 5100              mov A,[__r7]
 08CF 0400              add [__r3],A
 08D1 5100              mov A,[__r6]
 08D3 0C00              adc [__r2],A
 08D5 5100              mov A,[__r3]
 08D7 5300              mov [__r1],A
 08D9 5100              mov A,[__r2]
 08DB 5300              mov [__r0],A
 08DD 5100              mov A,[__r1]
 08DF 08                push A
 08E0 5100              mov A,[__r0]
 08E2 62D000            mov REG[0xd0],>L91
 08E5 5300              mov [L91],A
 08E7 18                pop A
 08E8 5301              mov [L91+1],A
 08EA                   .dbline 372
 08EA           ;                               }
 08EA           L114:
 08EA                   .dbline 375
 08EA           ;                               
 08EA           ;                               //CCW
 08EA           ;                               if (pwm_Y < 0)
 08EA 62D000            mov REG[0xd0],>L91
 08ED 5101              mov A,[L91+1]
 08EF 1100              sub A,0
 08F1 5100              mov A,[L91]
 08F3 3180              xor A,-128
 08F5 1980              sbb A,(0 ^ 0x80)
 08F7 D082              jnc L117
 08F9           X38:
 08F9                   .dbline 377
 08F9           ;                               {
 08F9           ;                                       if (bitCheck(~rd_Y, CCW))
 08F9                   .dbline 377
 08F9 62D000            mov REG[0xd0],>L90
 08FC 5100              mov A,[L90]
 08FE 73                cpl A
 08FF 62D000            mov REG[0xd0],>__r0
 0902 5300              mov [__r0],A
 0904 260002            and [__r0],2
 0907 A035              jz L119
 0909                   .dbline 379
 0909           ;                                       {
 0909           ;                                               PRS32_Y_WriteSeed(0);
 0909                   .dbline 379
 0909 10                push X
 090A 5000              mov A,0
 090C 08                push A
 090D 08                push A
 090E 08                push A
 090F 08                push A
 0910 7C0000            xcall _PRS32_Y_WriteSeed
 0913 38FC              add SP,-4
 0915 20                pop X
 0916                   .dbline 382
 0916           ;                                               
 0916           ;                                               //YAH off
 0916           ;                                               YAH_Data_ADDR = bitClear(YAH_DataShadow, YAH_MASK);
 0916 62D000            mov REG[0xd0],>_Port_2_Data_SHADE
 0919 5100              mov A,[_Port_2_Data_SHADE]
 091B 21FE              and A,-2
 091D 5300              mov [_Port_2_Data_SHADE],A
 091F 6008              mov REG[0x8],A
 0921                   .dbline 384
 0921           ;                                               //YBL & prs off
 0921           ;                                               YBL_Data_ADDR = bitClear(YBL_DataShadow, YBL_MASK);
 0921 5100              mov A,[_Port_2_Data_SHADE]
 0923 21DF              and A,-33
 0925 5300              mov [_Port_2_Data_SHADE],A
 0927 6008              mov REG[0x8],A
 0929                   .dbline 385
 0929           ;                                               bitClear(YBL_GlobalSelect_ADDR, YBL_MASK);
 0929 410ADF            and REG[0xa],-33
 092C                   .dbline 387
 092C           ;                                               //YBH on
 092C           ;                                               YBH_Data_ADDR = bitSet(YBH_DataShadow, YBH_MASK);
 092C 5100              mov A,[_Port_2_Data_SHADE]
 092E 2908              or A,8
 0930 5300              mov [_Port_2_Data_SHADE],A
 0932 6008              mov REG[0x8],A
 0934                   .dbline 389
 0934           ;                                               //YAL prs on
 0934           ;                                               bitSet(YAL_GlobalSelect_ADDR, YAL_MASK);
 0934 430A02            or REG[0xa],2
 0937                   .dbline 391
 0937           ;                                               
 0937           ;                                               rd_Y = CCW;
 0937 62D000            mov REG[0xd0],>L90
 093A 550002            mov [L90],2
 093D                   .dbline 392
 093D           ;                                       }
 093D           L119:
 093D                   .dbline 394
 093D           ;                                       
 093D           ;                                       if (pwm_Y <= -128)
 093D 62D000            mov REG[0xd0],>L91
 0940 5080              mov A,-128
 0942 1201              sub A,[L91+1]
 0944 5100              mov A,[L91]
 0946 3180              xor A,-128
 0948 62D000            mov REG[0xd0],>__r0
 094B 5300              mov [__rX],A
 094D 507F              mov A,(-1 ^ 0x80)
 094F 1A00              sbb A,[__rX]
 0951 C00C              jc L121
 0953           X39:
 0953                   .dbline 396
 0953           ;                                       {
 0953           ;                                               InboxBuff.Y_crs = 0x80;
 0953                   .dbline 396
 0953 62D000            mov REG[0xd0],>_InboxBuff
 0956 550380            mov [_InboxBuff+3],-128
 0959                   .dbline 397
 0959           ;                                               tmpx1 = 255;
 0959 5606FF            mov [X+6],-1
 095C                   .dbline 398
 095C           ;                                       }
 095C 8094              xjmp L118
 095E           L121:
 095E                   .dbline 400
 095E           ;                                       else
 095E           ;                                       {
 095E                   .dbline 401
 095E           ;                                               (*(CHAR *)&(InboxBuff.Y_crs)) = pwm_Y;
 095E 62D000            mov REG[0xd0],>L91
 0961 5101              mov A,[L91+1]
 0963 62D000            mov REG[0xd0],>_InboxBuff
 0966 5303              mov [_InboxBuff+3],A
 0968                   .dbline 402
 0968           ;                                               tmpx1 = (((~InboxBuff.Y_crs) << 1) + 1);
 0968 5103              mov A,[_InboxBuff+3]
 096A 73                cpl A
 096B 62D000            mov REG[0xd0],>__r0
 096E 5300              mov [__r0],A
 0970 6500              asl [__r0]
 0972 5100              mov A,[__r0]
 0974 0101              add A,1
 0976 5406              mov [X+6],A
 0978                   .dbline 403
 0978           ;                                       }
 0978                   .dbline 404
 0978           ;                               }
 0978 8078              xjmp L118
 097A           L117:
 097A                   .dbline 407
 097A           ;                               //CW
 097A           ;                               else
 097A           ;                               {
 097A                   .dbline 408
 097A           ;                                       if (bitCheck(~rd_Y, CW))
 097A 62D000            mov REG[0xd0],>L90
 097D 5100              mov A,[L90]
 097F 73                cpl A
 0980 62D000            mov REG[0xd0],>__r0
 0983 5300              mov [__r0],A
 0985 260001            and [__r0],1
 0988 A035              jz L126
 098A                   .dbline 410
 098A           ;                                       {
 098A           ;                                               PRS32_Y_WriteSeed(0);
 098A                   .dbline 410
 098A 10                push X
 098B 5000              mov A,0
 098D 08                push A
 098E 08                push A
 098F 08                push A
 0990 08                push A
 0991 7C0000            xcall _PRS32_Y_WriteSeed
 0994 38FC              add SP,-4
 0996 20                pop X
 0997                   .dbline 413
 0997           ;                                               
 0997           ;                                               //YBH off
 0997           ;                                               YBH_Data_ADDR = bitClear(YBH_DataShadow, YBH_MASK);
 0997 62D000            mov REG[0xd0],>_Port_2_Data_SHADE
 099A 5100              mov A,[_Port_2_Data_SHADE]
 099C 21F7              and A,-9
 099E 5300              mov [_Port_2_Data_SHADE],A
 09A0 6008              mov REG[0x8],A
 09A2                   .dbline 415
 09A2           ;                                               //YAL & prs off
 09A2           ;                                               YAL_Data_ADDR = bitClear(YAL_DataShadow, YAL_MASK);
 09A2 5100              mov A,[_Port_2_Data_SHADE]
 09A4 21FD              and A,-3
 09A6 5300              mov [_Port_2_Data_SHADE],A
 09A8 6008              mov REG[0x8],A
 09AA                   .dbline 416
 09AA           ;                                               bitClear(YAL_GlobalSelect_ADDR, YAL_MASK);
 09AA 410AFD            and REG[0xa],-3
 09AD                   .dbline 418
 09AD           ;                                               //YAH on
 09AD           ;                                               YAH_Data_ADDR = bitSet(YAH_DataShadow, YAH_MASK);
 09AD 5100              mov A,[_Port_2_Data_SHADE]
 09AF 2901              or A,1
 09B1 5300              mov [_Port_2_Data_SHADE],A
 09B3 6008              mov REG[0x8],A
 09B5                   .dbline 420
 09B5           ;                                               //YBL prs on
 09B5           ;                                               bitSet(YBL_GlobalSelect_ADDR, YBL_MASK);
 09B5 430A20            or REG[0xa],32
 09B8                   .dbline 422
 09B8           ;                                               
 09B8           ;                                               rd_Y = CW;
 09B8 62D000            mov REG[0xd0],>L90
 09BB 550001            mov [L90],1
 09BE                   .dbline 423
 09BE           ;                                       }
 09BE           L126:
 09BE                   .dbline 425
 09BE           ;                                       
 09BE           ;                                       if (pwm_Y >= 127)
 09BE 62D000            mov REG[0xd0],>L91
 09C1 5101              mov A,[L91+1]
 09C3 117F              sub A,127
 09C5 5100              mov A,[L91]
 09C7 3180              xor A,-128
 09C9 1980              sbb A,(0 ^ 0x80)
 09CB C00C              jc L128
 09CD           X40:
 09CD                   .dbline 427
 09CD           ;                                       {
 09CD           ;                                               InboxBuff.Y_crs = 0x7f;
 09CD                   .dbline 427
 09CD 62D000            mov REG[0xd0],>_InboxBuff
 09D0 55037F            mov [_InboxBuff+3],127
 09D3                   .dbline 428
 09D3           ;                                               tmpx1 = 255;
 09D3 5606FF            mov [X+6],-1
 09D6                   .dbline 429
 09D6           ;                                       }
 09D6 801A              xjmp L129
 09D8           L128:
 09D8                   .dbline 431
 09D8           ;                                       else
 09D8           ;                                       {
 09D8                   .dbline 432
 09D8           ;                                               (*(CHAR *)&(InboxBuff.Y_crs)) = pwm_Y;
 09D8 62D000            mov REG[0xd0],>L91
 09DB 5101              mov A,[L91+1]
 09DD 62D000            mov REG[0xd0],>_InboxBuff
 09E0 5303              mov [_InboxBuff+3],A
 09E2                   .dbline 433
 09E2           ;                                               tmpx1 = ((InboxBuff.Y_crs << 1) + 1);
 09E2 5103              mov A,[_InboxBuff+3]
 09E4 62D000            mov REG[0xd0],>__r0
 09E7 5300              mov [__r0],A
 09E9 6500              asl [__r0]
 09EB 5100              mov A,[__r0]
 09ED 0101              add A,1
 09EF 5406              mov [X+6],A
 09F1                   .dbline 434
 09F1           ;                                       }
 09F1           L129:
 09F1                   .dbline 435
 09F1           ;                               }
 09F1           L118:
 09F1                   .dbline 437
 09F1           ;                               
 09F1           ;                               prsSet(prs_Y, tmpx1);
 09F1 5206              mov A,[X+6]
 09F3 62D000            mov REG[0xd0],>_prs_Y
 09F6 5303              mov [_prs_Y+3],A
 09F8 5206              mov A,[X+6]
 09FA 5302              mov [_prs_Y+2],A
 09FC 5206              mov A,[X+6]
 09FE 5301              mov [_prs_Y+1],A
 0A00 5206              mov A,[X+6]
 0A02 5300              mov [_prs_Y],A
 0A04                   .dbline 438
 0A04           ;                               bitSet(InboxBuff.InboxFlag, I2CIO_UPDATE);
 0A04 62D000            mov REG[0xd0],>_InboxBuff
 0A07 2E0020            or [_InboxBuff],32
 0A0A                   .dbline 439
 0A0A           ;                       }
 0A0A           L94:
 0A0A                   .dbline 441
 0A0A           ;                       
 0A0A           ;                       sw_Y = FALSE;
 0A0A 62D000            mov REG[0xd0],>_sw_Y
 0A0D 550000            mov [_sw_Y],0
 0A10                   .dbline 442
 0A10           ;               }
 0A10           L87:
 0A10                   .dbline 446
 0A10           ;               //end Y
 0A10           ;               
 0A10           ;               //calclate Z motor
 0A10           ;               if (sw_Z)
 0A10 62D000            mov REG[0xd0],>_sw_Z
 0A13 3C0000            cmp [_sw_Z],0
 0A16 A449              jz L136
 0A18                   .dbline 448
 0A18           ;               {
 0A18           ;                       static BYTE count_Z;
 0A18                   .dbline 454
 0A18           ;                       static BYTE rd_Z;
 0A18           ;                       static INT pwm_Z;
 0A18           ;                       static LONG iZ;
 0A18           ;                       
 0A18           ;                       //stop & brake 
 0A18           ;                       if (bitCheck(OutboxBuff.TBrakeFlag, STOP_Z))
 0A18 62D000            mov REG[0xd0],>_OutboxBuff
 0A1B 470104            tst [_OutboxBuff+1],4
 0A1E A0D6              jz L142
 0A20                   .dbline 457
 0A20           ;                       {
 0A20           ;                               //brake
 0A20           ;                               if (count_Z < (STOPCOUNT_Z - STOPINC_Z))
 0A20                   .dbline 457
 0A20 62D000            mov REG[0xd0],>L138
 0A23 3C00FB            cmp [L138],-5
 0A26 D0A2              jnc L145
 0A28           X41:
 0A28                   .dbline 460
 0A28           ;                               {
 0A28           ;                                       //brake start
 0A28           ;                                       if (rd_Z)
 0A28                   .dbline 460
 0A28 62D000            mov REG[0xd0],>L139
 0A2B 3C0000            cmp [L139],0
 0A2E A057              jz L147
 0A30                   .dbline 462
 0A30           ;                                       {
 0A30           ;                                               PRS32_Z_WriteSeed(0);
 0A30                   .dbline 462
 0A30 10                push X
 0A31 5000              mov A,0
 0A33 08                push A
 0A34 08                push A
 0A35 08                push A
 0A36 08                push A
 0A37 7C0000            xcall _PRS32_Z_WriteSeed
 0A3A 38FC              add SP,-4
 0A3C 20                pop X
 0A3D                   .dbline 465
 0A3D           ;                                               
 0A3D           ;                                               //ZAH off
 0A3D           ;                                               ZAH_Data_ADDR = bitClear(ZAH_DataShadow, ZAH_MASK);
 0A3D 62D000            mov REG[0xd0],>_Port_2_Data_SHADE
 0A40 5100              mov A,[_Port_2_Data_SHADE]
 0A42 21FB              and A,-5
 0A44 5300              mov [_Port_2_Data_SHADE],A
 0A46 6008              mov REG[0x8],A
 0A48                   .dbline 467
 0A48           ;                                               //ZBH off
 0A48           ;                                               ZBH_Data_ADDR = bitClear(ZBH_DataShadow, ZBH_MASK);
 0A48 5100              mov A,[_Port_2_Data_SHADE]
 0A4A 21BF              and A,-65
 0A4C 5300              mov [_Port_2_Data_SHADE],A
 0A4E 6008              mov REG[0x8],A
 0A50                   .dbline 469
 0A50           ;                                               //ZAL prs on
 0A50           ;                                               bitSet(ZAL_GlobalSelect_ADDR, ZAL_MASK);
 0A50 430A80            or REG[0xa],-128
 0A53                   .dbline 471
 0A53           ;                                               //ZBL prs on
 0A53           ;                                               bitSet(ZBL_GlobalSelect_ADDR, ZBL_MASK);
 0A53 430280            or REG[0x2],-128
 0A56                   .dbline 473
 0A56           ;                                               
 0A56           ;                                               bitSet(InboxBuff.CBrakeFlag, STOP_Z);
 0A56 62D000            mov REG[0xd0],>_InboxBuff
 0A59 2E0104            or [_InboxBuff+1],4
 0A5C                   .dbline 474
 0A5C           ;                                               bitSet(InboxBuff.InboxFlag, I2CIO_UPDATE);
 0A5C 2E0020            or [_InboxBuff],32
 0A5F                   .dbline 475
 0A5F           ;                                               InboxBuff.Z_crs = 0;
 0A5F 550400            mov [_InboxBuff+4],0
 0A62                   .dbline 476
 0A62           ;                                               pwm_Z = 0;
 0A62 62D000            mov REG[0xd0],>L140
 0A65 550100            mov [L140+1],0
 0A68 550000            mov [L140],0
 0A6B                   .dbline 477
 0A6B           ;                                               iZ = 0;
 0A6B 62D000            mov REG[0xd0],>L141
 0A6E 550000            mov [L141],0
 0A71 550100            mov [L141+1],0
 0A74 550200            mov [L141+2],0
 0A77 550300            mov [L141+3],0
 0A7A                   .dbline 478
 0A7A           ;                                               count_Z = 0;
 0A7A 62D000            mov REG[0xd0],>L138
 0A7D 550000            mov [L138],0
 0A80                   .dbline 479
 0A80           ;                                               rd_Z = STOP;
 0A80 62D000            mov REG[0xd0],>L139
 0A83 550000            mov [L139],0
 0A86                   .dbline 480
 0A86           ;                                       }
 0A86           L147:
 0A86                   .dbline 482
 0A86           ;                                       //set prs
 0A86           ;                                       prsSet(prs_Z, count_Z);
 0A86 62D000            mov REG[0xd0],>L138
 0A89 5100              mov A,[L138]
 0A8B 62D000            mov REG[0xd0],>_prs_Z
 0A8E 5303              mov [_prs_Z+3],A
 0A90 62D000            mov REG[0xd0],>L138
 0A93 5100              mov A,[L138]
 0A95 62D000            mov REG[0xd0],>_prs_Z
 0A98 5302              mov [_prs_Z+2],A
 0A9A 62D000            mov REG[0xd0],>L138
 0A9D 5100              mov A,[L138]
 0A9F 62D000            mov REG[0xd0],>_prs_Z
 0AA2 5301              mov [_prs_Z+1],A
 0AA4 62D000            mov REG[0xd0],>L138
 0AA7 5100              mov A,[L138]
 0AA9 62D000            mov REG[0xd0],>_prs_Z
 0AAC 5300              mov [_prs_Z],A
 0AAE                   .dbline 483
 0AAE           ;                                       PRS32_Z_WriteSeed(prs_Z);
 0AAE 10                push X
 0AAF 5100              mov A,[_prs_Z]
 0AB1 08                push A
 0AB2 5101              mov A,[_prs_Z+1]
 0AB4 08                push A
 0AB5 5102              mov A,[_prs_Z+2]
 0AB7 08                push A
 0AB8 5103              mov A,[_prs_Z+3]
 0ABA 08                push A
 0ABB 7C0000            xcall _PRS32_Z_WriteSeed
 0ABE 38FC              add SP,-4
 0AC0 20                pop X
 0AC1                   .dbline 484
 0AC1           ;                                       count_Z += STOPINC_Z;
 0AC1 62D000            mov REG[0xd0],>L138
 0AC4 060004            add [L138],4
 0AC7                   .dbline 485
 0AC7           ;                               }
 0AC7 8392              xjmp L143
 0AC9           L145:
 0AC9                   .dbline 487
 0AC9           ;                               //lock
 0AC9           ;                               else if (count_Z != 0xff)
 0AC9 62D000            mov REG[0xd0],>L138
 0ACC 3C00FF            cmp [L138],-1
 0ACF A38A              jz L143
 0AD1                   .dbline 490
 0AD1           ;                               {
 0AD1           ;                                       //ZAL on & prs off
 0AD1           ;                                       ZAL_Data_ADDR = bitSet(ZAL_DataShadow, ZAL_MASK);
 0AD1                   .dbline 490
 0AD1 62D000            mov REG[0xd0],>_Port_2_Data_SHADE
 0AD4 5100              mov A,[_Port_2_Data_SHADE]
 0AD6 2980              or A,-128
 0AD8 5300              mov [_Port_2_Data_SHADE],A
 0ADA 6008              mov REG[0x8],A
 0ADC                   .dbline 491
 0ADC           ;                                       bitClear(ZAL_GlobalSelect_ADDR, ZAL_MASK);
 0ADC 410A7F            and REG[0xa],127
 0ADF                   .dbline 493
 0ADF           ;                                       //ZBL on & prs off
 0ADF           ;                                       ZBL_Data_ADDR = bitSet(ZBL_DataShadow, ZBL_MASK);
 0ADF 62D000            mov REG[0xd0],>_Port_0_Data_SHADE
 0AE2 5100              mov A,[_Port_0_Data_SHADE]
 0AE4 2980              or A,-128
 0AE6 5300              mov [_Port_0_Data_SHADE],A
 0AE8 6000              mov REG[0],A
 0AEA                   .dbline 494
 0AEA           ;                                       bitClear(ZBL_GlobalSelect_ADDR, ZBL_MASK);
 0AEA 41027F            and REG[0x2],127
 0AED                   .dbline 496
 0AED           ;                                       
 0AED           ;                                       count_Z = 0xff;
 0AED 62D000            mov REG[0xd0],>L138
 0AF0 5500FF            mov [L138],-1
 0AF3                   .dbline 497
 0AF3           ;                               }
 0AF3                   .dbline 498
 0AF3           ;                       }
 0AF3 8366              xjmp L143
 0AF5           L142:
 0AF5                   .dbline 501
 0AF5           ;                       //rotation
 0AF5           ;                       else
 0AF5           ;                       {
 0AF5                   .dbline 506
 0AF5           ;                               INT pZ;
 0AF5           ;                               LONG tmpx0;
 0AF5           ;                               BYTE tmpx1;
 0AF5           ;                               
 0AF5           ;                               if (rd_Z == STOP)
 0AF5 62D000            mov REG[0xd0],>L139
 0AF8 3C0000            cmp [L139],0
 0AFB B00D              jnz L156
 0AFD                   .dbline 508
 0AFD           ;                               {
 0AFD           ;                                       bitClear(InboxBuff.CBrakeFlag, STOP_Z);
 0AFD                   .dbline 508
 0AFD 62D000            mov REG[0xd0],>_InboxBuff
 0B00 2601FB            and [_InboxBuff+1],-5
 0B03                   .dbline 509
 0B03           ;                                       count_Z = 0;
 0B03 62D000            mov REG[0xd0],>L138
 0B06 550000            mov [L138],0
 0B09                   .dbline 510
 0B09           ;                               }
 0B09           L156:
 0B09                   .dbline 513
 0B09           ;                               
 0B09           ;                               //calclate PI
 0B09           ;                               pZ = ((*(CHAR *)&(OutboxBuff.Z_trs)) - pwm_Z);
 0B09 62D000            mov REG[0xd0],>_OutboxBuff
 0B0C 5104              mov A,[_OutboxBuff+4]
 0B0E 62D000            mov REG[0xd0],>__r0
 0B11 5300              mov [__r1],A
 0B13 550000            mov [__r0],0
 0B16 470080            tst [__r1],-128
 0B19 A004              jz X42
 0B1B 5500FF            mov [__r0],-1
 0B1E           X42:
 0B1E 62D000            mov REG[0xd0],>__r0
 0B21 5100              mov A,[__r1]
 0B23 62D000            mov REG[0xd0],>L140
 0B26 1201              sub A,[L140+1]
 0B28 5401              mov [X+1],A
 0B2A 62D000            mov REG[0xd0],>__r0
 0B2D 5100              mov A,[__r0]
 0B2F 62D000            mov REG[0xd0],>L140
 0B32 1A00              sbb A,[L140]
 0B34 5400              mov [X+0],A
 0B36                   .dbline 514
 0B36           ;                               iZ += pZ;
 0B36 62D000            mov REG[0xd0],>__r0
 0B39 5201              mov A,[X+1]
 0B3B 5300              mov [__r3],A
 0B3D 5200              mov A,[X+0]
 0B3F 5300              mov [__r2],A
 0B41 470080            tst [__r2],-128
 0B44 A009              jz X43
 0B46 5500FF            mov [__r1],-1
 0B49 5500FF            mov [__r0],-1
 0B4C 800A              jmp X44
 0B4E           X43:
 0B4E 62D000            mov REG[0xd0],>__r0
 0B51 550000            mov [__r1],0
 0B54 550000            mov [__r0],0
 0B57           X44:
 0B57 62D000            mov REG[0xd0],>__r0
 0B5A 5100              mov A,[__r3]
 0B5C 62D000            mov REG[0xd0],>L141
 0B5F 0403              add [L141+3],A
 0B61 62D000            mov REG[0xd0],>__r0
 0B64 5100              mov A,[__r2]
 0B66 62D000            mov REG[0xd0],>L141
 0B69 0C02              adc [L141+2],A
 0B6B 62D000            mov REG[0xd0],>__r0
 0B6E 5100              mov A,[__r1]
 0B70 62D000            mov REG[0xd0],>L141
 0B73 0C01              adc [L141+1],A
 0B75 62D000            mov REG[0xd0],>__r0
 0B78 5100              mov A,[__r0]
 0B7A 62D000            mov REG[0xd0],>L141
 0B7D 0C00              adc [L141],A
 0B7F                   .dbline 515
 0B7F           ;                               tmpx0 = (OutboxBuff.Kp_Z * (LONG)pZ + OutboxBuff.Ki_Z * iZ);
 0B7F 62D000            mov REG[0xd0],>_OutboxBuff
 0B82 510D              mov A,[_OutboxBuff+13]
 0B84 62D000            mov REG[0xd0],>__r0
 0B87 5300              mov [__r3],A
 0B89 62D000            mov REG[0xd0],>L141
 0B8C 5100              mov A,[L141]
 0B8E 08                push A
 0B8F 5101              mov A,[L141+1]
 0B91 08                push A
 0B92 5102              mov A,[L141+2]
 0B94 08                push A
 0B95 5103              mov A,[L141+3]
 0B97 08                push A
 0B98 62D000            mov REG[0xd0],>__r0
 0B9B 5000              mov A,0
 0B9D 08                push A
 0B9E 08                push A
 0B9F 08                push A
 0BA0 5100              mov A,[__r3]
 0BA2 08                push A
 0BA3 7C0000            xcall __mul_32X32_32
 0BA6 38FC              add SP,-4
 0BA8 18                pop A
 0BA9 5300              mov [__r3],A
 0BAB 18                pop A
 0BAC 5300              mov [__r2],A
 0BAE 18                pop A
 0BAF 5300              mov [__r1],A
 0BB1 18                pop A
 0BB2 5300              mov [__r0],A
 0BB4 5201              mov A,[X+1]
 0BB6 5300              mov [__r7],A
 0BB8 5200              mov A,[X+0]
 0BBA 5300              mov [__r6],A
 0BBC 470080            tst [__r6],-128
 0BBF A009              jz X45
 0BC1 5500FF            mov [__r5],-1
 0BC4 5500FF            mov [__r4],-1
 0BC7 800A              jmp X46
 0BC9           X45:
 0BC9 62D000            mov REG[0xd0],>__r0
 0BCC 550000            mov [__r5],0
 0BCF 550000            mov [__r4],0
 0BD2           X46:
 0BD2 62D000            mov REG[0xd0],>_OutboxBuff
 0BD5 510C              mov A,[_OutboxBuff+12]
 0BD7 62D000            mov REG[0xd0],>__r0
 0BDA 5300              mov [__r11],A
 0BDC 5100              mov A,[__r4]
 0BDE 08                push A
 0BDF 5100              mov A,[__r5]
 0BE1 08                push A
 0BE2 5100              mov A,[__r6]
 0BE4 08                push A
 0BE5 5100              mov A,[__r7]
 0BE7 08                push A
 0BE8 5000              mov A,0
 0BEA 08                push A
 0BEB 08                push A
 0BEC 08                push A
 0BED 5100              mov A,[__r11]
 0BEF 08                push A
 0BF0 7C0000            xcall __mul_32X32_32
 0BF3 38FC              add SP,-4
 0BF5 18                pop A
 0BF6 5300              mov [__r7],A
 0BF8 18                pop A
 0BF9 5300              mov [__r6],A
 0BFB 18                pop A
 0BFC 5300              mov [__r5],A
 0BFE 18                pop A
 0BFF 5300              mov [__r4],A
 0C01 5100              mov A,[__r7]
 0C03 0200              add A,[__r3]
 0C05 5405              mov [X+5],A
 0C07 5100              mov A,[__r6]
 0C09 0A00              adc A,[__r2]
 0C0B 5404              mov [X+4],A
 0C0D 5100              mov A,[__r5]
 0C0F 0A00              adc A,[__r1]
 0C11 5403              mov [X+3],A
 0C13 5100              mov A,[__r4]
 0C15 0A00              adc A,[__r0]
 0C17 5402              mov [X+2],A
 0C19                   .dbline 516
 0C19           ;                               if (tmpx0 < 0)
 0C19 5205              mov A,[X+5]
 0C1B 1100              sub A,0
 0C1D 5204              mov A,[X+4]
 0C1F 1900              sbb A,0
 0C21 5203              mov A,[X+3]
 0C23 1900              sbb A,0
 0C25 5202              mov A,[X+2]
 0C27 3180              xor A,-128
 0C29 1980              sbb A,(0 ^ 0x80)
 0C2B D090              jnc L162
 0C2D           X47:
 0C2D                   .dbline 518
 0C2D           ;                               {
 0C2D           ;                                       pwm_Z += (~((~tmpx0) >> OutboxBuff.bshift_Z));
 0C2D                   .dbline 518
 0C2D 62D000            mov REG[0xd0],>_OutboxBuff
 0C30 510B              mov A,[_OutboxBuff+11]
 0C32 62D000            mov REG[0xd0],>__r0
 0C35 5300              mov [__r1],A
 0C37 5202              mov A,[X+2]
 0C39 73                cpl A
 0C3A 5300              mov [__r4],A
 0C3C 5203              mov A,[X+3]
 0C3E 73                cpl A
 0C3F 5300              mov [__r5],A
 0C41 5204              mov A,[X+4]
 0C43 73                cpl A
 0C44 5300              mov [__r6],A
 0C46 5205              mov A,[X+5]
 0C48 73                cpl A
 0C49 5300              mov [__r7],A
 0C4B 5100              mov A,[__r1]
 0C4D 211F              and A,31
 0C4F A00F              jz X48
 0C51           X49:
 0C51 62D000            mov REG[0xd0],>__r0
 0C54 6800              asr [__r4]
 0C56 6E00              rrc [__r5]
 0C58 6E00              rrc [__r6]
 0C5A 6E00              rrc [__r7]
 0C5C 78                dec A
 0C5D BFF3              jnz X49
 0C5F           X48:
 0C5F 62D000            mov REG[0xd0],>__r0
 0C62 5100              mov A,[__r6]
 0C64 73                cpl A
 0C65 5300              mov [__r2],A
 0C67 5100              mov A,[__r7]
 0C69 73                cpl A
 0C6A 5300              mov [__r3],A
 0C6C 62D000            mov REG[0xd0],>L140
 0C6F 5101              mov A,[L140+1]
 0C71 62D000            mov REG[0xd0],>__r0
 0C74 5300              mov [__r7],A
 0C76 62D000            mov REG[0xd0],>L140
 0C79 5100              mov A,[L140]
 0C7B 62D000            mov REG[0xd0],>__r0
 0C7E 5300              mov [__r6],A
 0C80 470080            tst [__r6],-128
 0C83 A009              jz X50
 0C85 5500FF            mov [__r5],-1
 0C88 5500FF            mov [__r4],-1
 0C8B 800A              jmp X51
 0C8D           X50:
 0C8D 62D000            mov REG[0xd0],>__r0
 0C90 550000            mov [__r5],0
 0C93 550000            mov [__r4],0
 0C96           X51:
 0C96 62D000            mov REG[0xd0],>__r0
 0C99 5100              mov A,[__r7]
 0C9B 0200              add A,[__r3]
 0C9D 5300              mov [__r3],A
 0C9F 5100              mov A,[__r6]
 0CA1 0A00              adc A,[__r2]
 0CA3 5300              mov [__r2],A
 0CA5 5100              mov A,[__r3]
 0CA7 5300              mov [__r1],A
 0CA9 5100              mov A,[__r2]
 0CAB 5300              mov [__r0],A
 0CAD 5100              mov A,[__r1]
 0CAF 08                push A
 0CB0 5100              mov A,[__r0]
 0CB2 62D000            mov REG[0xd0],>L140
 0CB5 5300              mov [L140],A
 0CB7 18                pop A
 0CB8 5301              mov [L140+1],A
 0CBA                   .dbline 519
 0CBA           ;                               }
 0CBA 8079              xjmp L163
 0CBC           L162:
 0CBC                   .dbline 521
 0CBC           ;                               else
 0CBC           ;                               {
 0CBC                   .dbline 522
 0CBC           ;                                       pwm_Z += (tmpx0 >> OutboxBuff.bshift_Z);
 0CBC 62D000            mov REG[0xd0],>_OutboxBuff
 0CBF 510B              mov A,[_OutboxBuff+11]
 0CC1 62D000            mov REG[0xd0],>__r0
 0CC4 5300              mov [__r1],A
 0CC6 5202              mov A,[X+2]
 0CC8 5300              mov [__r4],A
 0CCA 5203              mov A,[X+3]
 0CCC 5300              mov [__r5],A
 0CCE 5204              mov A,[X+4]
 0CD0 5300              mov [__r6],A
 0CD2 5205              mov A,[X+5]
 0CD4 5300              mov [__r7],A
 0CD6 5100              mov A,[__r1]
 0CD8 211F              and A,31
 0CDA A00F              jz X52
 0CDC           X53:
 0CDC 62D000            mov REG[0xd0],>__r0
 0CDF 6800              asr [__r4]
 0CE1 6E00              rrc [__r5]
 0CE3 6E00              rrc [__r6]
 0CE5 6E00              rrc [__r7]
 0CE7 78                dec A
 0CE8 BFF3              jnz X53
 0CEA           X52:
 0CEA 62D000            mov REG[0xd0],>L140
 0CED 5101              mov A,[L140+1]
 0CEF 62D000            mov REG[0xd0],>__r0
 0CF2 5300              mov [__r3],A
 0CF4 62D000            mov REG[0xd0],>L140
 0CF7 5100              mov A,[L140]
 0CF9 62D000            mov REG[0xd0],>__r0
 0CFC 5300              mov [__r2],A
 0CFE 470080            tst [__r2],-128
 0D01 A009              jz X54
 0D03 5500FF            mov [__r1],-1
 0D06 5500FF            mov [__r0],-1
 0D09 800A              jmp X55
 0D0B           X54:
 0D0B 62D000            mov REG[0xd0],>__r0
 0D0E 550000            mov [__r1],0
 0D11 550000            mov [__r0],0
 0D14           X55:
 0D14 62D000            mov REG[0xd0],>__r0
 0D17 5100              mov A,[__r7]
 0D19 0400              add [__r3],A
 0D1B 5100              mov A,[__r6]
 0D1D 0C00              adc [__r2],A
 0D1F 5100              mov A,[__r3]
 0D21 5300              mov [__r1],A
 0D23 5100              mov A,[__r2]
 0D25 5300              mov [__r0],A
 0D27 5100              mov A,[__r1]
 0D29 08                push A
 0D2A 5100              mov A,[__r0]
 0D2C 62D000            mov REG[0xd0],>L140
 0D2F 5300              mov [L140],A
 0D31 18                pop A
 0D32 5301              mov [L140+1],A
 0D34                   .dbline 523
 0D34           ;                               }
 0D34           L163:
 0D34                   .dbline 526
 0D34           ;                               
 0D34           ;                               //CCW
 0D34           ;                               if (pwm_Z < 0)
 0D34 62D000            mov REG[0xd0],>L140
 0D37 5101              mov A,[L140+1]
 0D39 1100              sub A,0
 0D3B 5100              mov A,[L140]
 0D3D 3180              xor A,-128
 0D3F 1980              sbb A,(0 ^ 0x80)
 0D41 D088              jnc L166
 0D43           X56:
 0D43                   .dbline 528
 0D43           ;                               {
 0D43           ;                                       if (bitCheck(~rd_Z, CCW))
 0D43                   .dbline 528
 0D43 62D000            mov REG[0xd0],>L139
 0D46 5100              mov A,[L139]
 0D48 73                cpl A
 0D49 62D000            mov REG[0xd0],>__r0
 0D4C 5300              mov [__r0],A
 0D4E 260002            and [__r0],2
 0D51 A03B              jz L168
 0D53                   .dbline 530
 0D53           ;                                       {
 0D53           ;                                               PRS32_Z_WriteSeed(0);
 0D53                   .dbline 530
 0D53 10                push X
 0D54 5000              mov A,0
 0D56 08                push A
 0D57 08                push A
 0D58 08                push A
 0D59 08                push A
 0D5A 7C0000            xcall _PRS32_Z_WriteSeed
 0D5D 38FC              add SP,-4
 0D5F 20                pop X
 0D60                   .dbline 533
 0D60           ;                                               
 0D60           ;                                               //ZAH off
 0D60           ;                                               ZAH_Data_ADDR = bitClear(ZAH_DataShadow, ZAH_MASK);
 0D60 62D000            mov REG[0xd0],>_Port_2_Data_SHADE
 0D63 5100              mov A,[_Port_2_Data_SHADE]
 0D65 21FB              and A,-5
 0D67 5300              mov [_Port_2_Data_SHADE],A
 0D69 6008              mov REG[0x8],A
 0D6B                   .dbline 535
 0D6B           ;                                               //ZBL & prs off
 0D6B           ;                                               ZBL_Data_ADDR = bitClear(ZBL_DataShadow, ZBL_MASK);
 0D6B 62D000            mov REG[0xd0],>_Port_0_Data_SHADE
 0D6E 5100              mov A,[_Port_0_Data_SHADE]
 0D70 217F              and A,127
 0D72 5300              mov [_Port_0_Data_SHADE],A
 0D74 6000              mov REG[0],A
 0D76                   .dbline 536
 0D76           ;                                               bitClear(ZBL_GlobalSelect_ADDR, ZBL_MASK);
 0D76 41027F            and REG[0x2],127
 0D79                   .dbline 538
 0D79           ;                                               //ZBH on
 0D79           ;                                               ZBH_Data_ADDR = bitSet(ZBH_DataShadow, ZBH_MASK);
 0D79 62D000            mov REG[0xd0],>_Port_2_Data_SHADE
 0D7C 5100              mov A,[_Port_2_Data_SHADE]
 0D7E 2940              or A,64
 0D80 5300              mov [_Port_2_Data_SHADE],A
 0D82 6008              mov REG[0x8],A
 0D84                   .dbline 540
 0D84           ;                                               //ZAL prs on
 0D84           ;                                               bitSet(ZAL_GlobalSelect_ADDR, ZAL_MASK);
 0D84 430A80            or REG[0xa],-128
 0D87                   .dbline 542
 0D87           ;                                               
 0D87           ;                                               rd_Z = CCW;
 0D87 62D000            mov REG[0xd0],>L139
 0D8A 550002            mov [L139],2
 0D8D                   .dbline 543
 0D8D           ;                                       }
 0D8D           L168:
 0D8D                   .dbline 545
 0D8D           ;                                       
 0D8D           ;                                       if (pwm_Z <= -128)
 0D8D 62D000            mov REG[0xd0],>L140
 0D90 5080              mov A,-128
 0D92 1201              sub A,[L140+1]
 0D94 5100              mov A,[L140]
 0D96 3180              xor A,-128
 0D98 62D000            mov REG[0xd0],>__r0
 0D9B 5300              mov [__rX],A
 0D9D 507F              mov A,(-1 ^ 0x80)
 0D9F 1A00              sbb A,[__rX]
 0DA1 C00C              jc L170
 0DA3           X57:
 0DA3                   .dbline 547
 0DA3           ;                                       {
 0DA3           ;                                               InboxBuff.Z_crs = 0x80;
 0DA3                   .dbline 547
 0DA3 62D000            mov REG[0xd0],>_InboxBuff
 0DA6 550480            mov [_InboxBuff+4],-128
 0DA9                   .dbline 548
 0DA9           ;                                               tmpx1 = 255;
 0DA9 5606FF            mov [X+6],-1
 0DAC                   .dbline 549
 0DAC           ;                                       }
 0DAC 8094              xjmp L167
 0DAE           L170:
 0DAE                   .dbline 551
 0DAE           ;                                       else
 0DAE           ;                                       {
 0DAE                   .dbline 552
 0DAE           ;                                               (*(CHAR *)&(InboxBuff.Z_crs)) = pwm_Z;
 0DAE 62D000            mov REG[0xd0],>L140
 0DB1 5101              mov A,[L140+1]
 0DB3 62D000            mov REG[0xd0],>_InboxBuff
 0DB6 5304              mov [_InboxBuff+4],A
 0DB8                   .dbline 553
 0DB8           ;                                               tmpx1 = (((~InboxBuff.Z_crs) << 1) + 1);
 0DB8 5104              mov A,[_InboxBuff+4]
 0DBA 73                cpl A
 0DBB 62D000            mov REG[0xd0],>__r0
 0DBE 5300              mov [__r0],A
 0DC0 6500              asl [__r0]
 0DC2 5100              mov A,[__r0]
 0DC4 0101              add A,1
 0DC6 5406              mov [X+6],A
 0DC8                   .dbline 554
 0DC8           ;                                       }
 0DC8                   .dbline 555
 0DC8           ;                               }
 0DC8 8078              xjmp L167
 0DCA           L166:
 0DCA                   .dbline 558
 0DCA           ;                               //CW
 0DCA           ;                               else
 0DCA           ;                               {
 0DCA                   .dbline 559
 0DCA           ;                                       if (bitCheck(~rd_Z, CW))
 0DCA 62D000            mov REG[0xd0],>L139
 0DCD 5100              mov A,[L139]
 0DCF 73                cpl A
 0DD0 62D000            mov REG[0xd0],>__r0
 0DD3 5300              mov [__r0],A
 0DD5 260001            and [__r0],1
 0DD8 A035              jz L175
 0DDA                   .dbline 561
 0DDA           ;                                       {
 0DDA           ;                                               PRS32_Z_WriteSeed(0);
 0DDA                   .dbline 561
 0DDA 10                push X
 0DDB 5000              mov A,0
 0DDD 08                push A
 0DDE 08                push A
 0DDF 08                push A
 0DE0 08                push A
 0DE1 7C0000            xcall _PRS32_Z_WriteSeed
 0DE4 38FC              add SP,-4
 0DE6 20                pop X
 0DE7                   .dbline 564
 0DE7           ;                                               
 0DE7           ;                                               //ZBH off
 0DE7           ;                                               ZBH_Data_ADDR = bitClear(ZBH_DataShadow, ZBH_MASK);
 0DE7 62D000            mov REG[0xd0],>_Port_2_Data_SHADE
 0DEA 5100              mov A,[_Port_2_Data_SHADE]
 0DEC 21BF              and A,-65
 0DEE 5300              mov [_Port_2_Data_SHADE],A
 0DF0 6008              mov REG[0x8],A
 0DF2                   .dbline 566
 0DF2           ;                                               //ZAL & prs off
 0DF2           ;                                               ZAL_Data_ADDR = bitClear(ZAL_DataShadow, ZAL_MASK);
 0DF2 5100              mov A,[_Port_2_Data_SHADE]
 0DF4 217F              and A,127
 0DF6 5300              mov [_Port_2_Data_SHADE],A
 0DF8 6008              mov REG[0x8],A
 0DFA                   .dbline 567
 0DFA           ;                                               bitClear(ZAL_GlobalSelect_ADDR, ZAL_MASK);
 0DFA 410A7F            and REG[0xa],127
 0DFD                   .dbline 569
 0DFD           ;                                               //ZAH on
 0DFD           ;                                               ZAH_Data_ADDR = bitSet(ZAH_DataShadow, ZAH_MASK);
 0DFD 5100              mov A,[_Port_2_Data_SHADE]
 0DFF 2904              or A,4
 0E01 5300              mov [_Port_2_Data_SHADE],A
 0E03 6008              mov REG[0x8],A
 0E05                   .dbline 571
 0E05           ;                                               //ZBL prs on
 0E05           ;                                               bitSet(ZBL_GlobalSelect_ADDR, ZBL_MASK);
 0E05 430280            or REG[0x2],-128
 0E08                   .dbline 573
 0E08           ;                                               
 0E08           ;                                               rd_Z = CW;
 0E08 62D000            mov REG[0xd0],>L139
 0E0B 550001            mov [L139],1
 0E0E                   .dbline 574
 0E0E           ;                                       }
 0E0E           L175:
 0E0E                   .dbline 576
 0E0E           ;                                       
 0E0E           ;                                       if (pwm_Z >= 127)
 0E0E 62D000            mov REG[0xd0],>L140
 0E11 5101              mov A,[L140+1]
 0E13 117F              sub A,127
 0E15 5100              mov A,[L140]
 0E17 3180              xor A,-128
 0E19 1980              sbb A,(0 ^ 0x80)
 0E1B C00C              jc L177
 0E1D           X58:
 0E1D                   .dbline 578
 0E1D           ;                                       {
 0E1D           ;                                               InboxBuff.Z_crs = 0x7f;
 0E1D                   .dbline 578
 0E1D 62D000            mov REG[0xd0],>_InboxBuff
 0E20 55047F            mov [_InboxBuff+4],127
 0E23                   .dbline 579
 0E23           ;                                               tmpx1 = 255;
 0E23 5606FF            mov [X+6],-1
 0E26                   .dbline 580
 0E26           ;                                       }
 0E26 801A              xjmp L178
 0E28           L177:
 0E28                   .dbline 582
 0E28           ;                                       else
 0E28           ;                                       {
 0E28                   .dbline 583
 0E28           ;                                               (*(CHAR *)&(InboxBuff.Z_crs)) = pwm_Z;
 0E28 62D000            mov REG[0xd0],>L140
 0E2B 5101              mov A,[L140+1]
 0E2D 62D000            mov REG[0xd0],>_InboxBuff
 0E30 5304              mov [_InboxBuff+4],A
 0E32                   .dbline 584
 0E32           ;                                               tmpx1 = ((InboxBuff.Z_crs << 1) + 1);
 0E32 5104              mov A,[_InboxBuff+4]
 0E34 62D000            mov REG[0xd0],>__r0
 0E37 5300              mov [__r0],A
 0E39 6500              asl [__r0]
 0E3B 5100              mov A,[__r0]
 0E3D 0101              add A,1
 0E3F 5406              mov [X+6],A
 0E41                   .dbline 585
 0E41           ;                                       }
 0E41           L178:
 0E41                   .dbline 586
 0E41           ;                               }
 0E41           L167:
 0E41                   .dbline 588
 0E41           ;                               
 0E41           ;                               prsSet(prs_Z, tmpx1);
 0E41 5206              mov A,[X+6]
 0E43 62D000            mov REG[0xd0],>_prs_Z
 0E46 5303              mov [_prs_Z+3],A
 0E48 5206              mov A,[X+6]
 0E4A 5302              mov [_prs_Z+2],A
 0E4C 5206              mov A,[X+6]
 0E4E 5301              mov [_prs_Z+1],A
 0E50 5206              mov A,[X+6]
 0E52 5300              mov [_prs_Z],A
 0E54                   .dbline 589
 0E54           ;                               bitSet(InboxBuff.InboxFlag, I2CIO_UPDATE);
 0E54 62D000            mov REG[0xd0],>_InboxBuff
 0E57 2E0020            or [_InboxBuff],32
 0E5A                   .dbline 590
 0E5A           ;                       }
 0E5A           L143:
 0E5A                   .dbline 592
 0E5A           ;                       
 0E5A           ;                       sw_Z = FALSE;
 0E5A 62D000            mov REG[0xd0],>_sw_Z
 0E5D 550000            mov [_sw_Z],0
 0E60                   .dbline 593
 0E60           ;               }
 0E60           L136:
 0E60                   .dbline 597
 0E60           ;               //end Z
 0E60           ;               
 0E60           ;               //LCD print
 0E60           ;               if ((!sw_X) && (!sw_Y) && (!sw_Z))
 0E60 62D000            mov REG[0xd0],>_sw_X
 0E63 3C0000            cmp [_sw_X],0
 0E66 B0D9              jnz L185
 0E68 62D000            mov REG[0xd0],>_sw_Y
 0E6B 3C0000            cmp [_sw_Y],0
 0E6E B0D1              jnz L185
 0E70 62D000            mov REG[0xd0],>_sw_Z
 0E73 3C0000            cmp [_sw_Z],0
 0E76 B0C9              jnz L185
 0E78                   .dbline 599
 0E78           ;               {
 0E78           ;                       LCD_1_Position(0, 0);
 0E78                   .dbline 599
 0E78 10                push X
 0E79 5000              mov A,0
 0E7B 5700              mov X,0
 0E7D 7C0000            xcall _LCD_1_Position
 0E80 20                pop X
 0E81                   .dbline 600
 0E81           ;                       cprintf("B%1X M:%02X %02X %02X E%02X",
 0E81 62D000            mov REG[0xd0],>_ec
 0E84 5100              mov A,[_ec]
 0E86 62D000            mov REG[0xd0],>__r0
 0E89 5300              mov [__r1],A
 0E8B 5000              mov A,0
 0E8D 08                push A
 0E8E 5100              mov A,[__r1]
 0E90 08                push A
 0E91 62D000            mov REG[0xd0],>_OutboxBuff
 0E94 5104              mov A,[_OutboxBuff+4]
 0E96 62D000            mov REG[0xd0],>__r0
 0E99 5300              mov [__r1],A
 0E9B 5000              mov A,0
 0E9D 08                push A
 0E9E 5100              mov A,[__r1]
 0EA0 08                push A
 0EA1 62D000            mov REG[0xd0],>_OutboxBuff
 0EA4 5103              mov A,[_OutboxBuff+3]
 0EA6 62D000            mov REG[0xd0],>__r0
 0EA9 5300              mov [__r1],A
 0EAB 5000              mov A,0
 0EAD 08                push A
 0EAE 5100              mov A,[__r1]
 0EB0 08                push A
 0EB1 62D000            mov REG[0xd0],>_OutboxBuff
 0EB4 5102              mov A,[_OutboxBuff+2]
 0EB6 62D000            mov REG[0xd0],>__r0
 0EB9 5300              mov [__r1],A
 0EBB 5000              mov A,0
 0EBD 08                push A
 0EBE 5100              mov A,[__r1]
 0EC0 08                push A
 0EC1 62D000            mov REG[0xd0],>_OutboxBuff
 0EC4 5101              mov A,[_OutboxBuff+1]
 0EC6 62D000            mov REG[0xd0],>__r0
 0EC9 5300              mov [__r1],A
 0ECB 5000              mov A,0
 0ECD 08                push A
 0ECE 5100              mov A,[__r1]
 0ED0 08                push A
 0ED1 501E              mov A,>L187
 0ED3 08                push A
 0ED4 501E              mov A,<L187
 0ED6 08                push A
 0ED7 7C0000            xcall _cprintf
 0EDA 38F4              add SP,-12
 0EDC                   .dbline 606
 0EDC           ;                               OutboxBuff.TBrakeFlag,
 0EDC           ;                               OutboxBuff.X_trs,
 0EDC           ;                               OutboxBuff.Y_trs,
 0EDC           ;                               OutboxBuff.Z_trs,
 0EDC           ;                               ec);
 0EDC           ;                       LCD_1_Position(1, 0);
 0EDC 10                push X
 0EDD 5700              mov X,0
 0EDF 5001              mov A,1
 0EE1 7C0000            xcall _LCD_1_Position
 0EE4 20                pop X
 0EE5                   .dbline 607
 0EE5           ;                       cprintf("B%1X M:%02X %02X %02X C%02X",
 0EE5 62D000            mov REG[0xd0],>_ct
 0EE8 5100              mov A,[_ct]
 0EEA 62D000            mov REG[0xd0],>__r0
 0EED 5300              mov [__r1],A
 0EEF 5000              mov A,0
 0EF1 08                push A
 0EF2 5100              mov A,[__r1]
 0EF4 08                push A
 0EF5 62D000            mov REG[0xd0],>_InboxBuff
 0EF8 5104              mov A,[_InboxBuff+4]
 0EFA 62D000            mov REG[0xd0],>__r0
 0EFD 5300              mov [__r1],A
 0EFF 5000              mov A,0
 0F01 08                push A
 0F02 5100              mov A,[__r1]
 0F04 08                push A
 0F05 62D000            mov REG[0xd0],>_InboxBuff
 0F08 5103              mov A,[_InboxBuff+3]
 0F0A 62D000            mov REG[0xd0],>__r0
 0F0D 5300              mov [__r1],A
 0F0F 5000              mov A,0
 0F11 08                push A
 0F12 5100              mov A,[__r1]
 0F14 08                push A
 0F15 62D000            mov REG[0xd0],>_InboxBuff
 0F18 5102              mov A,[_InboxBuff+2]
 0F1A 62D000            mov REG[0xd0],>__r0
 0F1D 5300              mov [__r1],A
 0F1F 5000              mov A,0
 0F21 08                push A
 0F22 5100              mov A,[__r1]
 0F24 08                push A
 0F25 62D000            mov REG[0xd0],>_InboxBuff
 0F28 5101              mov A,[_InboxBuff+1]
 0F2A 62D000            mov REG[0xd0],>__r0
 0F2D 5300              mov [__r1],A
 0F2F 5000              mov A,0
 0F31 08                push A
 0F32 5100              mov A,[__r1]
 0F34 08                push A
 0F35 5002              mov A,>L192
 0F37 08                push A
 0F38 5002              mov A,<L192
 0F3A 08                push A
 0F3B 7C0000            xcall _cprintf
 0F3E 38F4              add SP,-12
 0F40                   .dbline 613
 0F40           ;                               InboxBuff.CBrakeFlag,
 0F40           ;                               InboxBuff.X_crs,
 0F40           ;                               InboxBuff.Y_crs,
 0F40           ;                               InboxBuff.Z_crs,
 0F40           ;                               ct);
 0F40           ;               }
 0F40           L185:
 0F40                   .dbline 614
 0F40           ;       }
 0F40           L8:
 0F40                   .dbline 103
 0F40 7D00C1            xjmp L7
 0F43           X0:
 0F43                   .dbline -2
 0F43           L4:
 0F43 38F9              add SP,-7
 0F45 20                pop X
 0F46                   .dbline 0 ; func end
 0F46 8FFF              jmp .
 0F48                   .dbsym l tmpx1 6 c
 0F48                   .dbsym l tmpx0 2 L
 0F48                   .dbsym l pZ 0 I
 0F48                   .dbsym l tmpx1 6 c
 0F48                   .dbsym l tmpx0 2 L
 0F48                   .dbsym l pY 0 I
 0F48                   .dbsym l tmpx1 6 c
 0F48                   .dbsym l tmpx0 2 L
 0F48                   .dbsym l pX 0 I
 0F48                   .dbsym l wate 0 c
 0F48                   .dbsym l wate 0 c
 0F48                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           L198:
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           L199:
 0000 00                .byte 0
                        .area text(rom, con, rel)
 0F48                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0F48                   .dbfunc e _Timer8_1_ISR __Timer8_1_ISR fV
 0F48                   .dbsym s i2ccount L199 c
 0F48                   .dbsym s sw L198 c
 0F48           __Timer8_1_ISR::
 0F48                   .dbline -1
 0F48 71C0              or F,-64
 0F4A 08                push A
 0F4B 5DD0              mov A,REG[0xd0]
 0F4D 08                push A
 0F4E 5DD3              mov A,REG[0xd3]
 0F50 08                push A
 0F51 5DD4              mov A,REG[0xd4]
 0F53 08                push A
 0F54 5DD5              mov A,REG[0xd5]
 0F56 08                push A
 0F57 62D000            mov REG[0xd0],>__r0
 0F5A 5100              mov A,[__r0]
 0F5C 08                push A
 0F5D 5100              mov A,[__r1]
 0F5F 08                push A
 0F60 5100              mov A,[__r2]
 0F62 08                push A
 0F63 5100              mov A,[__r3]
 0F65 08                push A
 0F66 5100              mov A,[__r4]
 0F68 08                push A
 0F69 5100              mov A,[__r5]
 0F6B 08                push A
 0F6C 5100              mov A,[__r6]
 0F6E 08                push A
 0F6F 5100              mov A,[__r7]
 0F71 08                push A
 0F72 5100              mov A,[__r8]
 0F74 08                push A
 0F75 5100              mov A,[__r9]
 0F77 08                push A
 0F78 5100              mov A,[__r10]
 0F7A 08                push A
 0F7B 5100              mov A,[__r11]
 0F7D 08                push A
 0F7E 5100              mov A,[__rX]
 0F80 08                push A
 0F81 5100              mov A,[__rY]
 0F83 08                push A
 0F84 5100              mov A,[__rZ]
 0F86 08                push A
 0F87                   .dbline 622
 0F87           ;       
 0F87           ; }
 0F87           ; 
 0F87           ; //update motors prs
 0F87           ; #pragma interrupt_handler _Timer8_1_ISR
 0F87           ; #pragma nomac
 0F87           ; void _Timer8_1_ISR(void)
 0F87           ; {
 0F87                   .dbline 627
 0F87           ;       static BYTE sw;
 0F87           ;       static BYTE i2ccount;
 0F87           ;       
 0F87           ;       //update X motor prs
 0F87           ;       if (sw == 0)
 0F87 62D000            mov REG[0xd0],>L198
 0F8A 3C0000            cmp [L198],0
 0F8D B03A              jnz L200
 0F8F                   .dbline 629
 0F8F           ;       {
 0F8F           ;               if (sw_X)
 0F8F                   .dbline 629
 0F8F 62D000            mov REG[0xd0],>_sw_X
 0F92 3C0000            cmp [_sw_X],0
 0F95 A00B              jz L202
 0F97                   .dbline 631
 0F97           ;               {
 0F97           ;                       MBM_1_SetBusyFlag();
 0F97                   .dbline 631
 0F97 7C0000            xcall _MBM_1_SetBusyFlag
 0F9A                   .dbline 632
 0F9A           ;                       ec++;
 0F9A 62D000            mov REG[0xd0],>_ec
 0F9D 7600              inc [_ec]
 0F9F                   .dbline 633
 0F9F           ;               }
 0F9F 8004              xjmp L203
 0FA1           L202:
 0FA1                   .dbline 635
 0FA1           ;               else
 0FA1           ;               {
 0FA1                   .dbline 636
 0FA1           ;                       MBM_1_ClearBusyFlag();
 0FA1 7C0000            xcall _MBM_1_ClearBusyFlag
 0FA4                   .dbline 637
 0FA4           ;               }
 0FA4           L203:
 0FA4                   .dbline 638
 0FA4           ;               PRS32_X_WriteSeed(prs_X);
 0FA4 10                push X
 0FA5 62D000            mov REG[0xd0],>_prs_X
 0FA8 5100              mov A,[_prs_X]
 0FAA 08                push A
 0FAB 5101              mov A,[_prs_X+1]
 0FAD 08                push A
 0FAE 5102              mov A,[_prs_X+2]
 0FB0 08                push A
 0FB1 5103              mov A,[_prs_X+3]
 0FB3 08                push A
 0FB4 7C0000            xcall _PRS32_X_WriteSeed
 0FB7 38FC              add SP,-4
 0FB9 20                pop X
 0FBA                   .dbline 639
 0FBA           ;               sw_X = TRUE;
 0FBA 62D000            mov REG[0xd0],>_sw_X
 0FBD 550001            mov [_sw_X],1
 0FC0                   .dbline 640
 0FC0           ;               sw = 1;
 0FC0 62D000            mov REG[0xd0],>L198
 0FC3 550001            mov [L198],1
 0FC6                   .dbline 641
 0FC6           ;       }
 0FC6 8079              xjmp L201
 0FC8           L200:
 0FC8                   .dbline 644
 0FC8           ;       
 0FC8           ;       //update Y motor prs
 0FC8           ;       else if (sw == 1)
 0FC8 62D000            mov REG[0xd0],>L198
 0FCB 3C0001            cmp [L198],1
 0FCE B03A              jnz L204
 0FD0                   .dbline 646
 0FD0           ;       {
 0FD0           ;               if (sw_Y)
 0FD0                   .dbline 646
 0FD0 62D000            mov REG[0xd0],>_sw_Y
 0FD3 3C0000            cmp [_sw_Y],0
 0FD6 A00B              jz L206
 0FD8                   .dbline 648
 0FD8           ;               {
 0FD8           ;                       MBM_1_SetBusyFlag();
 0FD8                   .dbline 648
 0FD8 7C0000            xcall _MBM_1_SetBusyFlag
 0FDB                   .dbline 649
 0FDB           ;                       ec++;
 0FDB 62D000            mov REG[0xd0],>_ec
 0FDE 7600              inc [_ec]
 0FE0                   .dbline 650
 0FE0           ;               }
 0FE0 8004              xjmp L207
 0FE2           L206:
 0FE2                   .dbline 652
 0FE2           ;               else
 0FE2           ;               {
 0FE2                   .dbline 653
 0FE2           ;                       MBM_1_ClearBusyFlag();
 0FE2 7C0000            xcall _MBM_1_ClearBusyFlag
 0FE5                   .dbline 654
 0FE5           ;               }
 0FE5           L207:
 0FE5                   .dbline 655
 0FE5           ;               PRS32_Y_WriteSeed(prs_Y);
 0FE5 10                push X
 0FE6 62D000            mov REG[0xd0],>_prs_Y
 0FE9 5100              mov A,[_prs_Y]
 0FEB 08                push A
 0FEC 5101              mov A,[_prs_Y+1]
 0FEE 08                push A
 0FEF 5102              mov A,[_prs_Y+2]
 0FF1 08                push A
 0FF2 5103              mov A,[_prs_Y+3]
 0FF4 08                push A
 0FF5 7C0000            xcall _PRS32_Y_WriteSeed
 0FF8 38FC              add SP,-4
 0FFA 20                pop X
 0FFB                   .dbline 656
 0FFB           ;               sw_Y = TRUE;
 0FFB 62D000            mov REG[0xd0],>_sw_Y
 0FFE 550001            mov [_sw_Y],1
 1001                   .dbline 657
 1001           ;               sw = 2;
 1001 62D000            mov REG[0xd0],>L198
 1004 550002            mov [L198],2
 1007                   .dbline 658
 1007           ;       }
 1007 8038              xjmp L205
 1009           L204:
 1009                   .dbline 662
 1009           ;       
 1009           ;       //update Z motor prs
 1009           ;       else
 1009           ;       {
 1009                   .dbline 663
 1009           ;               if (sw_Z)
 1009 62D000            mov REG[0xd0],>_sw_Z
 100C 3C0000            cmp [_sw_Z],0
 100F A00B              jz L208
 1011                   .dbline 665
 1011           ;               {
 1011           ;                       MBM_1_SetBusyFlag();
 1011                   .dbline 665
 1011 7C0000            xcall _MBM_1_SetBusyFlag
 1014                   .dbline 666
 1014           ;                       ec++;
 1014 62D000            mov REG[0xd0],>_ec
 1017 7600              inc [_ec]
 1019                   .dbline 667
 1019           ;               }
 1019 8004              xjmp L209
 101B           L208:
 101B                   .dbline 669
 101B           ;               else
 101B           ;               {
 101B                   .dbline 670
 101B           ;                       MBM_1_ClearBusyFlag();
 101B 7C0000            xcall _MBM_1_ClearBusyFlag
 101E                   .dbline 671
 101E           ;               }
 101E           L209:
 101E                   .dbline 672
 101E           ;               PRS32_Z_WriteSeed(prs_Z);
 101E 10                push X
 101F 62D000            mov REG[0xd0],>_prs_Z
 1022 5100              mov A,[_prs_Z]
 1024 08                push A
 1025 5101              mov A,[_prs_Z+1]
 1027 08                push A
 1028 5102              mov A,[_prs_Z+2]
 102A 08                push A
 102B 5103              mov A,[_prs_Z+3]
 102D 08                push A
 102E 7C0000            xcall _PRS32_Z_WriteSeed
 1031 38FC              add SP,-4
 1033 20                pop X
 1034                   .dbline 673
 1034           ;               sw_Z = TRUE;
 1034 62D000            mov REG[0xd0],>_sw_Z
 1037 550001            mov [_sw_Z],1
 103A                   .dbline 674
 103A           ;               sw = 0;
 103A 62D000            mov REG[0xd0],>L198
 103D 550000            mov [L198],0
 1040                   .dbline 675
 1040           ;       }
 1040           L205:
 1040           L201:
 1040                   .dbline 677
 1040           ;       
 1040           ;       if (i2cchekc)
 1040 62D000            mov REG[0xd0],>_i2cchekc
 1043 3C0000            cmp [_i2cchekc],0
 1046 A00F              jz L210
 1048                   .dbline 679
 1048           ;       {
 1048           ;               i2ccount = 0;
 1048                   .dbline 679
 1048 62D000            mov REG[0xd0],>L199
 104B 550000            mov [L199],0
 104E                   .dbline 680
 104E           ;               i2cchekc = FALSE;
 104E 62D000            mov REG[0xd0],>_i2cchekc
 1051 550000            mov [_i2cchekc],0
 1054                   .dbline 681
 1054           ;       }
 1054 8017              xjmp L211
 1056           L210:
 1056                   .dbline 683
 1056           ;       else
 1056           ;       {
 1056                   .dbline 685
 1056           ;               //1 count = 2.73 ms
 1056           ;               if (i2ccount > 35)
 1056 62D000            mov REG[0xd0],>L199
 1059 5023              mov A,35
 105B 3A00              cmp A,[L199]
 105D D009              jnc L212
 105F           X59:
 105F                   .dbline 688
 105F           ;               {
 105F           ;                       //stop
 105F           ;                       bitSet(OutboxBuff.TBrakeFlag, (STOP_X | STOP_Y | STOP_Z));
 105F                   .dbline 688
 105F 62D000            mov REG[0xd0],>_OutboxBuff
 1062 2E0107            or [_OutboxBuff+1],7
 1065                   .dbline 689
 1065           ;               }
 1065 8006              xjmp L213
 1067           L212:
 1067                   .dbline 691
 1067           ;               else
 1067           ;               {
 1067                   .dbline 692
 1067           ;                       i2ccount++;
 1067 62D000            mov REG[0xd0],>L199
 106A 7600              inc [L199]
 106C                   .dbline 693
 106C           ;               }
 106C           L213:
 106C                   .dbline 694
 106C           ;       }       
 106C           L211:
 106C                   .dbline 696
 106C           ;       
 106C           ;       ct++;
 106C 62D000            mov REG[0xd0],>_ct
 106F 7600              inc [_ct]
 1071                   .dbline -2
 1071           L197:
 1071 62D000            mov REG[0xD0],>__r0
 1074 18                pop A
 1075 5300              mov [__rZ],A
 1077 18                pop A
 1078 5300              mov [__rY],A
 107A 18                pop A
 107B 5300              mov [__rX],A
 107D 18                pop A
 107E 5300              mov [__r11],A
 1080 18                pop A
 1081 5300              mov [__r10],A
 1083 18                pop A
 1084 5300              mov [__r9],A
 1086 18                pop A
 1087 5300              mov [__r8],A
 1089 18                pop A
 108A 5300              mov [__r7],A
 108C 18                pop A
 108D 5300              mov [__r6],A
 108F 18                pop A
 1090 5300              mov [__r5],A
 1092 18                pop A
 1093 5300              mov [__r4],A
 1095 18                pop A
 1096 5300              mov [__r3],A
 1098 18                pop A
 1099 5300              mov [__r2],A
 109B 18                pop A
 109C 5300              mov [__r1],A
 109E 18                pop A
 109F 5300              mov [__r0],A
 10A1 18                pop A
 10A2 60D5              mov REG[213],A
 10A4 18                pop A
 10A5 60D4              mov REG[212],A
 10A7 18                pop A
 10A8 60D3              mov REG[211],A
 10AA 18                pop A
 10AB 60D0              mov REG[208],A
 10AD 18                pop A
 10AE                   .dbline 0 ; func end
 10AE 7E                reti
 10AF                   .dbend
                        .area lit(rom, con, rel, lit)
 0000           L216:
 0000 00                .byte 0
 0001 00                .byte 0
                        .area text(rom, con, rel)
 10AF                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 10AF                   .dbfunc e putchar _putchar fI
 10AF           ;            str -> X+0
 10AF           ;              c -> X-4
 10AF           _putchar::
 10AF                   .dbline -1
 10AF 10                push X
 10B0 4F                mov X,SP
 10B1 3802              add SP,2
 10B3                   .dbline 702
 10B3           ; }
 10B3           ; #pragma usemac
 10B3           ; 
 10B3           ; //putchar for LCD cprintf
 10B3           ; int putchar(char c)
 10B3           ; {
 10B3                   .dbline 703
 10B3           ;       char str[2] = {0};
 10B3 62D000            mov REG[0xd0],>__r0
 10B6 550000            mov [__r1],<L216
 10B9 550000            mov [__r0],>L216
 10BC 5A00              mov [__r3],X
 10BE 62D507            mov REG[0xd5],7
 10C1 10                push X
 10C2 550000            mov [__rX],0
 10C5 5100              mov A,[__r0]
 10C7 5800              mov X,[__r1]
 10C9           X60:
 10C9 08                push A
 10CA 28                romx
 10CB 62D000            mov REG[0xd0],>__r0
 10CE 3F00              mvi [__r3],A
 10D0 18                pop A
 10D1 75                inc X
 10D2 0900              adc A,0
 10D4 7600              inc [__rX]
 10D6 3C0002            cmp [__rX],2
 10D9 BFEF              jnz X60
 10DB 20                pop X
 10DC                   .dbline 704
 10DC           ;       str[0] = c;
 10DC 52FC              mov A,[X-4]
 10DE 5400              mov [X+0],A
 10E0                   .dbline 705
 10E0           ;       LCD_1_PrString(str);
 10E0 10                push X
 10E1 5007              mov A,7
 10E3 08                push A
 10E4 18                pop A
 10E5 7C0000            xcall _LCD_1_PrString
 10E8 20                pop X
 10E9                   .dbline 706
 10E9           ;       return c;
 10E9 62D000            mov REG[0xd0],>__r0
 10EC 52FC              mov A,[X-4]
 10EE 5300              mov [__r1],A
 10F0 550000            mov [__r0],0
 10F3                   .dbline -2
 10F3           L215:
 10F3 38FE              add SP,-2
 10F5 20                pop X
 10F6                   .dbline 0 ; func end
 10F6 7F                ret
 10F7                   .dbsym l str 0 A[2:2]c
 10F7                   .dbsym l c -4 c
 10F7                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           _ec::
 0000 00                .byte 0
 0001                   .dbsym e ec _ec c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           _ct::
 0000 00                .byte 0
 0001                   .dbsym e ct _ct c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           _prs_Z::
 0000 00000000          .byte 0,0,0,0
 0004                   .dbsym e prs_Z _prs_Z l
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           _prs_Y::
 0000 00000000          .byte 0,0,0,0
 0004                   .dbsym e prs_Y _prs_Y l
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           _prs_X::
 0000 00000000          .byte 0,0,0,0
 0004                   .dbsym e prs_X _prs_X l
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           _InboxBuff::
 0000 0000000000        .byte 0,0,0,0,0
 0005                   .dbstruct 0 5 .2
 0005                   .dbfield 0 InboxFlag c
 0005                   .dbfield 1 CBrakeFlag c
 0005                   .dbfield 2 X_crs c
 0005                   .dbfield 3 Y_crs c
 0005                   .dbfield 4 Z_crs c
 0005                   .dbend
 0005                   .dbsym e InboxBuff _InboxBuff S[.2]
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\tatsuya\Dropbox\基盤班\プログ~1\PSoC\Designer\CATCHR~2\CATCHR~1\CATCHR~1\main.c
 0000           _OutboxBuff::
 0000 00000000000000000000      .word 0,0,0,0,0
 000A 00000000          .byte 0,0,0,0
 000E                   .dbstruct 0 14 .1
 000E                   .dbfield 0 OutboxFlag c
 000E                   .dbfield 1 TBrakeFlag c
 000E                   .dbfield 2 X_trs c
 000E                   .dbfield 3 Y_trs c
 000E                   .dbfield 4 Z_trs c
 000E                   .dbfield 5 bshift_X c
 000E                   .dbfield 6 Kp_X c
 000E                   .dbfield 7 Ki_X c
 000E                   .dbfield 8 bshift_Y c
 000E                   .dbfield 9 Kp_Y c
 000E                   .dbfield 10 Ki_Y c
 000E                   .dbfield 11 bshift_Z c
 000E                   .dbfield 12 Kp_Z c
 000E                   .dbfield 13 Ki_Z c
 000E                   .dbend
 000E                   .dbsym e OutboxBuff _OutboxBuff S[.1]
                        .area lit(rom, con, rel, lit)
 0002           L192:
 0002 42253158204D3A253032582025303258  .byte 'B,37,49,'X,32,'M,58,37,48,50,'X,32,37,48,50,'X
 0012 202530325820432530325800  .byte 32,37,48,50,'X,32,'C,37,48,50,'X,0
 001E           L187:
 001E 42253158204D3A253032582025303258  .byte 'B,37,49,'X,32,'M,58,37,48,50,'X,32,37,48,50,'X
 002E 202530325820452530325800  .byte 32,37,48,50,'X,32,'E,37,48,50,'X,0
 003A           L6:
 003A 537461727400      .byte 'S,'t,'a,'r,'t,0
 0040           L5:
 0040 4443204D6F746F72204D6F64756C6500  .byte 'D,'C,32,'M,'o,'t,'o,'r,32,'M,'o,'d,'u,'l,'e,0
