C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CYFLASH
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\CyFlash.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.2\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\CyFlash.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\CyFlash.lst) CD DB NOIP OT(2
                    -,SIZE) DF(DEBUG) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\CyFlash.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CyFlash.c
   3          * Version 3.40
   4          *
   5          *  Description:
   6          *   Provides an API for the FLASH/EEPROM.
   7          *
   8          *  Note:
   9          *   This code is endian agnostic.
  10          *
  11          *  Note:
  12          *   Documentation of the API's in this file is located in the
  13          *   System Reference Guide provided with PSoC Creator.
  14          *
  15          ********************************************************************************
  16          * Copyright 2008-2013, Cypress Semiconductor Corporation. All rights reserved.
  17          * You may use this file only in accordance with the license, terms, conditions,
  18          * disclaimers, and limitations in the end user license agreement accompanying
  19          * the software package with which this file was provided.
  20          *******************************************************************************/
  21          
  22          #include "CyFlash.h"
  23          
  24          
  25          /*******************************************************************************
  26          * Holds die temperature, updated by CySetTemp(). Used for flash writting.
  27          * The first byte is the sign of the temperature (0 = negative, 1 = positive).
  28          * The second byte is the magnitude.
  29          *******************************************************************************/
  30          uint8 dieTemperature[CY_FLASH_DIE_TEMP_DATA_SIZE];
  31          
  32          #if(CYDEV_ECC_ENABLE == 0)
  33              static uint8 * rowBuffer = 0;
  34          #endif  /* (CYDEV_ECC_ENABLE == 0) */
  35          
  36          
  37          static cystatus CySetTempInt(void);
  38          
  39          
  40          /*******************************************************************************
  41          * Function Name: CyFlash_Start
  42          ********************************************************************************
  43          *
  44          * Summary:
  45          *  Enable the EEPROM/Flash.
  46          *
  47          *  Note: For PSoC 5, this will enable both Flash and EEPROM. For PSoC 3 and
  48          *  PSOC 5LP  this will enable only Flash.
  49          *
  50          * Parameters:
  51          *  None
  52          *
  53          * Return:
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 2   

  54          *  None
  55          *
  56          *******************************************************************************/
  57          void CyFlash_Start(void) 
  58          {
  59   1          #if(CY_PSOC5A)
              
                      /* Active Power Mode */
                      *CY_FLASH_PM_ACT_EEFLASH_PTR |= CY_FLASH_PM_FLASH_EE_MASK;
              
                      /* Standby Power Mode */
                      *CY_FLASH_PM_ALTACT_EEFLASH_PTR |= CY_FLASH_PM_FLASH_EE_MASK;
              
                  #endif  /* (CY_PSOC5A) */
  68   1      
  69   1          #if(CY_PSOC3 || CY_PSOC5LP)
  70   1      
  71   1              /* Active Power Mode */
  72   1              *CY_FLASH_PM_ACT_EEFLASH_PTR |= CY_FLASH_PM_FLASH_MASK;
  73   1      
  74   1              /* Standby Power Mode */
  75   1              *CY_FLASH_PM_ALTACT_EEFLASH_PTR |= CY_FLASH_PM_FLASH_MASK;
  76   1      
  77   1          #endif  /* (CY_PSOC3 || CY_PSOC5LP) */
  78   1      
  79   1          CyDelayUs(CY_FLASH_EE_STARTUP_DELAY);
  80   1      }
  81          
  82          
  83          /*******************************************************************************
  84          * Function Name: CyFlash_Stop
  85          ********************************************************************************
  86          *
  87          * Summary:
  88          *  Disable the EEPROM/Flash.
  89          *
  90          *  Note:
  91          *  PSoC 5: disable both Flash and EEPROM.
  92          *  PSoC 3 and PSOC 5LP: disable only Flash. Use CyEEPROM_Stop() to stop EEPROM.
  93          *
  94          * Parameters:
  95          *  None
  96          *
  97          * Return:
  98          *  None
  99          *
 100          * Side Effects:
 101          *  This setting is ignored as long as the CPU is currently running.  This will
 102          *  only take effect when the CPU is later disabled.
 103          *
 104          *******************************************************************************/
 105          void CyFlash_Stop(void) 
 106          {
 107   1          #if (CY_PSOC5A)
              
                      /* Active Power Mode */
                      *CY_FLASH_PM_ACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_FLASH_EE_MASK));
              
                      /* Standby Power Mode */
                      *CY_FLASH_PM_ALTACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_FLASH_EE_MASK));
              
                  #endif  /* (CY_PSOC5A) */
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 3   

 116   1      
 117   1          #if (CY_PSOC3 || CY_PSOC5LP)
 118   1      
 119   1              /* Active Power Mode */
 120   1              *CY_FLASH_PM_ACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_FLASH_MASK));
 121   1      
 122   1              /* Standby Power Mode */
 123   1              *CY_FLASH_PM_ALTACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_FLASH_MASK));
 124   1      
 125   1          #endif  /* (CY_PSOC3 || CY_PSOC5LP) */
 126   1      }
 127          
 128          
 129          /*******************************************************************************
 130          * Function Name: CySetTempInt
 131          ********************************************************************************
 132          *
 133          * Summary:
 134          *  Sends a command to the SPC to read the die temperature. Sets a global value
 135          *  used by the Write functions. This function must be called once before
 136          *  executing a series of Flash writing functions.
 137          *
 138          * Parameters:
 139          *  None
 140          *
 141          * Return:
 142          *  status:
 143          *   CYRET_SUCCESS - if successful
 144          *   CYRET_LOCKED  - if Flash writing already in use
 145          *   CYRET_UNKNOWN - if there was an SPC error
 146          *
 147          *******************************************************************************/
 148          static cystatus CySetTempInt(void) 
 149          {
 150   1          cystatus status;
 151   1      
 152   1          /* Make sure SPC is powered */
 153   1          CySpcStart();
 154   1      
 155   1          /* Plan for failure. */
 156   1          status = CYRET_UNKNOWN;
 157   1      
 158   1          if(CySpcLock() == CYRET_SUCCESS)
 159   1          {
 160   2              /* Write the command. */
 161   2              #if(CY_PSOC5A)
                          if(CYRET_STARTED == CySpcGetTemp(CY_TEMP_NUMBER_OF_SAMPLES, CY_TEMP_TIMER_PERIOD, CY_TEMP_CLK_
             -DIV_SELECT))
                      #else
 164   2                  if(CYRET_STARTED == CySpcGetTemp(CY_TEMP_NUMBER_OF_SAMPLES))
 165   2              #endif  /* (CY_PSOC5A) */
 166   2                  {
 167   3                      do
 168   3                      {
 169   4                          if(CySpcReadData(dieTemperature, CY_FLASH_DIE_TEMP_DATA_SIZE) == CY_FLASH_DIE_TEMP_DAT
             -A_SIZE)
 170   4                          {
 171   5                              status = CYRET_SUCCESS;
 172   5      
 173   5                              while(CY_SPC_BUSY)
 174   5                              {
 175   6                                  /* Spin until idle. */
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 4   

 176   6                                  CyDelayUs(1u);
 177   6                              }
 178   5                              break;
 179   5                          }
 180   4      
 181   4                      } while(CY_SPC_BUSY);
 182   3                  }
 183   2      
 184   2                  CySpcUnlock();
 185   2          }
 186   1          else
 187   1          {
 188   2              status = CYRET_LOCKED;
 189   2          }
 190   1      
 191   1          return (status);
 192   1      }
 193          
 194          
 195          /*******************************************************************************
 196          * Function Name: CySetTemp
 197          ********************************************************************************
 198          *
 199          * Summary:
 200          *  This is a wraparound for CySetTempInt(). It is used to return second
 201          *  successful read of temperature value.
 202          *
 203          * Parameters:
 204          *  None
 205          *
 206          * Return:
 207          *  status:
 208          *   CYRET_SUCCESS if successful.
 209          *   CYRET_LOCKED  if Flash writing already in use
 210          *   CYRET_UNKNOWN if there was an SPC error.
 211          *
 212          *  uint8 dieTemperature[2]:
 213          *   Holds die temperature for the flash writting algorithm. The first byte is
 214          *   the sign of the temperature (0 = negative, 1 = positive). The second byte is
 215          *   the magnitude.
 216          *
 217          *******************************************************************************/
 218          cystatus CySetTemp(void) 
 219          {
 220   1          cystatus status = CySetTempInt();
 221   1      
 222   1          if(status == CYRET_SUCCESS)
 223   1          {
 224   2              status = CySetTempInt();
 225   2          }
 226   1      
 227   1          return (status);
 228   1      }
 229          
 230          
 231          /*******************************************************************************
 232          * Function Name: CySetFlashEEBuffer
 233          ********************************************************************************
 234          *
 235          * Summary:
 236          *  Sets the user supplied temporary buffer to store SPC data while performing
 237          *  flash and EEPROM commands. This buffer is only necessary when Flash ECC is
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 5   

 238          *  disabled.
 239          *
 240          * Parameters:
 241          *  buffer:
 242          *   Address of block of memory to store temporary memory. The size of the block
 243          *   of memory is CYDEV_FLS_ROW_SIZE + CYDEV_ECC_ROW_SIZE.
 244          *
 245          * Return:
 246          *  status:
 247          *   CYRET_SUCCESS if successful.
 248          *   CYRET_BAD_PARAM if the buffer is NULL
 249          *
 250          *******************************************************************************/
 251          cystatus CySetFlashEEBuffer(uint8 * buffer) 
 252          {
 253   1          cystatus status = CYRET_SUCCESS;
 254   1      
 255   1          CySpcStart();
 256   1      
 257   1          #if(CYDEV_ECC_ENABLE == 0)
 258   1      
 259   1              if(NULL == buffer)
 260   1              {
 261   2                  status = CYRET_BAD_PARAM;
 262   2              }
 263   1              else if(CySpcLock() != CYRET_SUCCESS)
 264   1              {
 265   2                  status = CYRET_LOCKED;
 266   2              }
 267   1              else
 268   1              {
 269   2                  rowBuffer = buffer;
 270   2                  CySpcUnlock();
 271   2              }
 272   1      
 273   1          #else
              
                      /* To supress the warning */
                      buffer = buffer;
              
                  #endif  /* (CYDEV_ECC_ENABLE == 0u) */
 279   1      
 280   1          return(status);
 281   1      }
 282          
 283          
 284          #if(CYDEV_ECC_ENABLE == 1)
              
                  /*******************************************************************************
                  * Function Name: CyWriteRowData
                  ********************************************************************************
                  *
                  * Summary:
                  *   Sends a command to the SPC to load and program a row of data in flash.
                  *
                  * Parameters:
                  *  arrayID:
                  *   ID of the array to write.
                  *  rowAddress:
                  *   rowAddress of flash row to program.
                  *  rowData:
                  *   Array of bytes to write.
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 6   

                  *
                  * Return:
                  *  status:
                  *   CYRET_SUCCESS if successful.
                  *   CYRET_LOCKED if the SPC is already in use.
                  *   CYRET_CANCELED if command not accepted
                  *   CYRET_UNKNOWN if there was an SPC error.
                  *
                  *******************************************************************************/
                  cystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, const uint8 * rowData) 
                  {
                      uint16 rowSize;
                      cystatus status;
              
                      rowSize = (arrayId > CY_SPC_LAST_FLASH_ARRAYID) ? CYDEV_EEPROM_ROW_SIZE : CYDEV_FLS_ROW_SIZE;
                      status = CyWriteRowFull(arrayId, rowAddress, rowData, rowSize);
              
                      return(status);
                  }
              
              #else
 321          
 322              /*******************************************************************************
 323              * Function Name: CyWriteRowData
 324              ********************************************************************************
 325              *
 326              * Summary:
 327              *   Sends a command to the SPC to load and program a row of data in flash.
 328              *
 329              * Parameters:
 330              *  arrayID      : ID of the array to write.
 331              *  rowAddress   : rowAddress of flash row to program.
 332              *  rowData      : Array of bytes to write.
 333              *
 334              * Return:
 335              *  status:
 336              *   CYRET_SUCCESS if successful.
 337              *   CYRET_LOCKED if the SPC is already in use.
 338              *   CYRET_CANCELED if command not accepted
 339              *   CYRET_UNKNOWN if there was an SPC error.
 340              *
 341              *******************************************************************************/
 342              cystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, const uint8 * rowData) 
 343              {
 344   1              uint8 i;
 345   1              uint32 offset;
 346   1              uint16 rowSize;
 347   1              cystatus status;
 348   1      
 349   1              rowSize = (arrayId > CY_SPC_LAST_FLASH_ARRAYID) ? \
 350   1                          CYDEV_EEPROM_ROW_SIZE : \
 351   1                          (CYDEV_FLS_ROW_SIZE + CYDEV_ECC_ROW_SIZE);
 352   1      
 353   1              if(rowSize != CYDEV_EEPROM_ROW_SIZE)
 354   1              {
 355   2                  /* Save the ECC area. */
 356   2                  offset = CYDEV_ECC_BASE + ((uint32) arrayId * CYDEV_ECC_SECTOR_SIZE) +
 357   2                          ((uint32) rowAddress * CYDEV_ECC_ROW_SIZE);
 358   2      
 359   2                  for (i = 0u; i < CYDEV_ECC_ROW_SIZE; i++)
 360   2                  {
 361   3                      *(rowBuffer + CYDEV_FLS_ROW_SIZE + i) = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 7   

 362   3                  }
 363   2              }
 364   1      
 365   1              /* Copy the rowdata to the temporary buffer. */
 366   1              #if(CY_PSOC3)
 367   1                  (void) memcpy((void *) rowBuffer, (void *)((uint32) rowData), (int16) CYDEV_FLS_ROW_SIZE);
 368   1              #else
                          (void) memcpy((void *) rowBuffer, (const void *) rowData, CYDEV_FLS_ROW_SIZE);
                      #endif  /* (CY_PSOC3) */
 371   1      
 372   1              status = CyWriteRowFull(arrayId, rowAddress, rowBuffer, rowSize);
 373   1      
 374   1              return(status);
 375   1          }
 376          
 377          #endif /* (CYDEV_ECC_ENABLE == 0u) */
 378          
 379          
 380          #if ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u))
              
                  /*******************************************************************************
                  * Function Name: CyWriteRowConfig
                  ********************************************************************************
                  *
                  * Summary:
                  *  Sends a command to the SPC to load and program a row of config data in flash.
                  *  This function is only valid for Flash array IDs (not for EEPROM).
                  *
                  * Parameters:
                  *  arrayId:
                  *   ID of the array to write
                  *  rowAddress:
                  *   Address of the sector to erase.
                  *  rowECC:
                  *   Array of bytes to write.
                  *
                  * Return:
                  *  status:
                  *   CYRET_SUCCESS if successful.
                  *   CYRET_LOCKED if the SPC is already in use.
                  *   CYRET_CANCELED if command not accepted
                  *   CYRET_UNKNOWN if there was an SPC error.
                  *
                  *******************************************************************************/
                  cystatus CyWriteRowConfig(uint8 arrayId, uint16 rowAddress, const uint8 * rowECC) 
                  {
                      uint32 offset;
                      uint16 i;
                      cystatus status;
              
                      /* Read the existing flash data. */
                      offset = ((uint32) arrayId * CYDEV_FLS_SECTOR_SIZE) +
                          ((uint32) rowAddress * CYDEV_FLS_ROW_SIZE);
                          
                      #if (CYDEV_FLS_BASE != 0u)
                          offset += CYDEV_FLS_BASE;
                      #endif
              
                      for (i = 0u; i < CYDEV_FLS_ROW_SIZE; i++)
                      {
                          rowBuffer[i] = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
                      }
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 8   

              
                      #if(CY_PSOC3)
                          (void) memcpy((void *) &rowBuffer[CYDEV_FLS_ROW_SIZE], (void *)((uint32)rowECC), (int16) CYDEV
             -_ECC_ROW_SIZE);
                      #else
                          (void) memcpy((void *) &rowBuffer[CYDEV_FLS_ROW_SIZE], (const void *) rowECC, CYDEV_ECC_ROW_SI
             -ZE);
                      #endif  /* (CY_PSOC3) */
              
                      status = CyWriteRowFull(arrayId, rowAddress, rowBuffer, CYDEV_FLS_ROW_SIZE + CYDEV_ECC_ROW_SIZE);
              
                      return (status);
                  }
              
              #endif  /* ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u)) */
 437          
 438          
 439          
 440          /*******************************************************************************
 441          * Function Name: CyWriteRowFull
 442          ********************************************************************************
 443          * Summary:
 444          *   Sends a command to the SPC to load and program a row of data in flash.
 445          *   rowData array is expected to contain Flash and ECC data if needed.
 446          *
 447          * Parameters:
 448          *       arrayId: FLASH or EEPROM array id.
 449          *       rowData: pointer to a row of data to write.
 450          *       rowNumber: Zero based number of the row.
 451          *       rowSize: Size of the row.
 452          *
 453          * Return:
 454          *   CYRET_SUCCESS if successful.
 455          *   CYRET_LOCKED if the SPC is already in use.
 456          *   CYRET_CANCELED if command not accepted
 457          *   CYRET_UNKNOWN if there was an SPC error.
 458          *
 459          *******************************************************************************/
 460          cystatus CyWriteRowFull(uint8 arrayId, uint16 rowNumber, const uint8* rowData, uint16 rowSize) \
 461                  
 462          {
 463   1          cystatus status;
 464   1      
 465   1          if(CySpcLock() == CYRET_SUCCESS)
 466   1          {
 467   2              /* Load row data into SPC internal latch */
 468   2              status = CySpcLoadRow(arrayId, rowData, rowSize);
 469   2      
 470   2              if(CYRET_STARTED == status)
 471   2              {
 472   3                  while(CY_SPC_BUSY)
 473   3                  {
 474   4                      /* Wait for SPC to finish and get SPC status */
 475   4                      CyDelayUs(1u);
 476   4                  }
 477   3      
 478   3                  /* Hide SPC status */
 479   3                  if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 480   3                  {
 481   4                      status = CYRET_SUCCESS;
 482   4                  }
 483   3                  else
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 9   

 484   3                  {
 485   4                      status = CYRET_UNKNOWN;
 486   4                  }
 487   3      
 488   3                  if(CYRET_SUCCESS == status)
 489   3                  {
 490   4                      /* Erase and program flash with the data from SPC interval latch */
 491   4                      status = CySpcWriteRow(arrayId, rowNumber, dieTemperature[0u], dieTemperature[1u]);
 492   4      
 493   4                      if(CYRET_STARTED == status)
 494   4                      {
 495   5                          while(CY_SPC_BUSY)
 496   5                          {
 497   6                              /* Wait for SPC to finish and get SPC status */
 498   6                              CyDelayUs(1u);
 499   6                          }
 500   5      
 501   5                          /* Hide SPC status */
 502   5                          if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 503   5                          {
 504   6                              status = CYRET_SUCCESS;
 505   6                          }
 506   5                          else
 507   5                          {
 508   6                              status = CYRET_UNKNOWN;
 509   6                          }
 510   5                      }
 511   4                  }
 512   3      
 513   3              }
 514   2      
 515   2              CySpcUnlock();
 516   2          }
 517   1          else
 518   1          {
 519   2              status = CYRET_LOCKED;
 520   2          }
 521   1      
 522   1          return(status);
 523   1      }
 524          
 525          
 526          /*******************************************************************************
 527          * Function Name: CyFlash_SetWaitCycles
 528          ********************************************************************************
 529          *
 530          * Summary:
 531          *  Sets the number of clock cycles the cache will wait before it samples data
 532          *  coming back from Flash. This function must be called before increasing CPU
 533          *  clock frequency. It can optionally be called after lowering CPU clock
 534          *  frequency in order to improve CPU performance.
 535          *
 536          * Parameters:
 537          *  uint8 freq:
 538          *   Frequency of operation in Megahertz.
 539          *
 540          * Return:
 541          *  None
 542          *
 543          *******************************************************************************/
 544          void CyFlash_SetWaitCycles(uint8 freq) 
 545          {
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 10  

 546   1          uint8 interruptState;
 547   1      
 548   1          /* Save current global interrupt enable and disable it */
 549   1          interruptState = CyEnterCriticalSection();
 550   1      
 551   1          /***************************************************************************
 552   1          * The number of clock cycles the cache will wait before it samples data
 553   1          * coming back from Flash must be equal or greater to to the CPU frequency
 554   1          * outlined in clock cycles.
 555   1          ***************************************************************************/
 556   1      
 557   1          #if (CY_PSOC3)
 558   1      
 559   1              if (freq <= 22u)
 560   1              {
 561   2                  *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
 562   2                      ((uint8)(CY_FLASH_LESSER_OR_EQUAL_22MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
 563   2              }
 564   1              else if (freq <= 44u)
 565   1              {
 566   2                  *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
 567   2                      ((uint8)(CY_FLASH_LESSER_OR_EQUAL_44MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
 568   2              }
 569   1              else
 570   1              {
 571   2                  *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
 572   2                      ((uint8)(CY_FLASH_GREATER_44MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
 573   2              }
 574   1      
 575   1          #endif  /* (CY_PSOC3) */
 576   1      
 577   1      
 578   1          #if (CY_PSOC5A)
              
                      if (freq <= 16u)
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_16MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else if (freq <= 33u)
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_33MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else if (freq <= 50u)
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_50MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_GREATER_51MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
              
                  #endif  /* (CY_PSOC5A) */
 602   1      
 603   1      
 604   1          #if (CY_PSOC5LP)
              
                      if (freq <= 16u)
                      {
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 11  

                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_16MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else if (freq <= 33u)
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_33MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else if (freq <= 50u)
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_50MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_GREATER_51MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
              
                  #endif  /* (CY_PSOC5LP) */
 628   1      
 629   1          /* Restore global interrupt enable state */
 630   1          CyExitCriticalSection(interruptState);
 631   1      }
 632          
 633          
 634          #if (CY_PSOC3 || CY_PSOC5LP)
 635          
 636              /*******************************************************************************
 637              * Function Name: CyEEPROM_Start
 638              ********************************************************************************
 639              *
 640              * Summary:
 641              *  Enable the EEPROM.
 642              *
 643              * Parameters:
 644              *  None
 645              *
 646              * Return:
 647              *  None
 648              *
 649              *******************************************************************************/
 650              void CyEEPROM_Start(void) 
 651              {
 652   1              /* Active Power Mode */
 653   1              *CY_FLASH_PM_ACT_EEFLASH_PTR |= CY_FLASH_PM_EE_MASK;
 654   1      
 655   1              /* Standby Power Mode */
 656   1              *CY_FLASH_PM_ALTACT_EEFLASH_PTR |= CY_FLASH_PM_EE_MASK;
 657   1          }
 658          
 659          
 660              /*******************************************************************************
 661              * Function Name: CyEEPROM_Stop
 662              ********************************************************************************
 663              *
 664              * Summary:
 665              *  Disable the EEPROM.
 666              *
 667              * Parameters:
 668              *  None
 669              *
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 12  

 670              * Return:
 671              *  None
 672              *
 673              *******************************************************************************/
 674              void CyEEPROM_Stop (void) 
 675              {
 676   1              /* Active Power Mode */
 677   1              *CY_FLASH_PM_ACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_EE_MASK));
 678   1      
 679   1              /* Standby Power Mode */
 680   1              *CY_FLASH_PM_ALTACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_EE_MASK));
 681   1          }
 682          
 683          #endif /* (CY_PSOC3 || CY_PSOC5LP) */
 684          
 685          
 686          /*******************************************************************************
 687          * Function Name: CyEEPROM_ReadReserve
 688          ********************************************************************************
 689          *
 690          * Summary:
 691          *  Request access to the EEPROM for reading and wait until access is available.
 692          *
 693          * Parameters:
 694          *  None
 695          *
 696          * Return:
 697          *  None
 698          *
 699          *******************************************************************************/
 700          void CyEEPROM_ReadReserve(void) 
 701          {
 702   1          /* Make a request for PHUB to have access */
 703   1          *CY_FLASH_EE_SCR_PTR |= CY_FLASH_EE_SCR_AHB_EE_REQ;
 704   1      
 705   1          while (0u == (*CY_FLASH_EE_SCR_PTR & CY_FLASH_EE_SCR_AHB_EE_ACK))
 706   1          {
 707   2              /* Wait for acknowledgement from PHUB */
 708   2          }
 709   1      }
 710          
 711          
 712          /*******************************************************************************
 713          * Function Name: CyEEPROM_ReadRelease
 714          ********************************************************************************
 715          *
 716          * Summary:
 717          *  Release the read reservation of the EEPROM.
 718          *
 719          * Parameters:
 720          *  None
 721          *
 722          * Return:
 723          *  None
 724          *
 725          *******************************************************************************/
 726          void CyEEPROM_ReadRelease(void) 
 727          {
 728   1          *CY_FLASH_EE_SCR_PTR |= 0x00u;
 729   1      }
 730          
 731          
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 13  

 732          /* [] END OF FILE */
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CyFlash_Start (BEGIN)
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 72
0000 9043AC            MOV     DPTR,#043ACH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 75
000B 9043BC            MOV     DPTR,#043BCH
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4401              ORL     A,#01H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 79
0016 7F05              MOV     R7,#05H
0018 7E00              MOV     R6,#00H
001A 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 80
001D 22                RET     
             ; FUNCTION CyFlash_Start (END)

             ; FUNCTION CyFlash_Stop (BEGIN)
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
                                           ; SOURCE LINE # 120
0000 9043AC            MOV     DPTR,#043ACH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
000B 9043BC            MOV     DPTR,#043BCH
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54FE              ANL     A,#0FEH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
0016 22                RET     
             ; FUNCTION CyFlash_Stop (END)

             ; FUNCTION CySetTempInt (BEGIN)
                                           ; SOURCE LINE # 148
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 153
0000 120000      E     LCALL   CySpcStart
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 15  

                                           ; SOURCE LINE # 156
0003 900000      R     MOV     DPTR,#status
0006 74FF              MOV     A,#0FFH
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
0009 120000      E     LCALL   CySpcLock
000C EF                MOV     A,R7
000D 704A              JNZ     ?C0003
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 164
000F 7F01              MOV     R7,#01H
0011 120000      E     LCALL   _CySpcGetTemp
0014 EF                MOV     A,R7
0015 6407              XRL     A,#07H
0017 703B              JNZ     ?C0004
                                           ; SOURCE LINE # 166
0019         ?C0007:
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
0019 7B01              MOV     R3,#01H
001B 7A00        R     MOV     R2,#HIGH dieTemperature
001D 7900        R     MOV     R1,#LOW dieTemperature
001F 7D02              MOV     R5,#02H
0021 120000      E     LCALL   _CySpcReadData
0024 EF                MOV     A,R7
0025 B4021D            CJNE    A,#02H,?C0005
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
0028 900000      R     MOV     DPTR,#status
002B E4                CLR     A
002C F0                MOVX    @DPTR,A
002D         ?C0009:
                                           ; SOURCE LINE # 173
002D 904722            MOV     DPTR,#04722H
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 5402              ANL     A,#02H
0035 FF                MOV     R7,A
0036 7E00              MOV     R6,#00H
0038 EF                MOV     A,R7
0039 4E                ORL     A,R6
003A 7018              JNZ     ?C0004
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 176
003C 7F01              MOV     R7,#01H
003E 7E00              MOV     R6,#00H
0040 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 177
0043 80E8              SJMP    ?C0009
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 181
0045         ?C0005:
0045 904722            MOV     DPTR,#04722H
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A EF                MOV     A,R7
004B 5402              ANL     A,#02H
004D FF                MOV     R7,A
004E 7E00              MOV     R6,#00H
0050 EF                MOV     A,R7
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 16  

0051 4E                ORL     A,R6
0052 60C5              JZ      ?C0007
                                           ; SOURCE LINE # 182
0054         ?C0004:
                                           ; SOURCE LINE # 184
0054 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 185
0057 8006              SJMP    ?C0011
0059         ?C0003:
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
0059 900000      R     MOV     DPTR,#status
005C 7404              MOV     A,#04H
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
005F         ?C0011:
                                           ; SOURCE LINE # 191
005F 900000      R     MOV     DPTR,#status
0062 E0                MOVX    A,@DPTR
0063 FF                MOV     R7,A
                                           ; SOURCE LINE # 192
0064         ?C0012:
0064 22                RET     
             ; FUNCTION CySetTempInt (END)

             ; FUNCTION CySetTemp (BEGIN)
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
0000 120000      R     LCALL   CySetTempInt
0003 900000      R     MOV     DPTR,#status
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
0008 900000      R     MOV     DPTR,#status
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 7008              JNZ     ?C0013
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
0010 120000      R     LCALL   CySetTempInt
0013 900000      R     MOV     DPTR,#status
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 225
0018         ?C0013:
                                           ; SOURCE LINE # 227
0018 900000      R     MOV     DPTR,#status
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
                                           ; SOURCE LINE # 228
001D         ?C0014:
001D 22                RET     
             ; FUNCTION CySetTemp (END)

             ; FUNCTION _CySetFlashEEBuffer (BEGIN)
                                           ; SOURCE LINE # 251
0000 900000      R     MOV     DPTR,#buffer
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 17  

0006 900000      R     MOV     DPTR,#status
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
000B 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 259
000E 7B00              MOV     R3,#00H
0010 7A00              MOV     R2,#00H
0012 7900              MOV     R1,#00H
0014 C003              PUSH    AR3
0016 C002              PUSH    AR2
0018 C001              PUSH    AR1
001A 900000      R     MOV     DPTR,#buffer
001D 120000      E     LCALL   ?C?PLDXDATA
0020 D082              POP     DPL
0022 D083              POP     DPH
0024 D0E0              POP     ACC
0026 6B                XRL     A,R3
0027 7008              JNZ     ?C0056
0029 E9                MOV     A,R1
002A 6582              XRL     A,DPL
002C 7003              JNZ     ?C0056
002E EA                MOV     A,R2
002F 6583              XRL     A,DPH
0031         ?C0056:
0031 7008              JNZ     ?C0015
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 261
0033 900000      R     MOV     DPTR,#status
0036 7401              MOV     A,#01H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 262
0039 801D              SJMP    ?C0016
003B         ?C0015:
                                           ; SOURCE LINE # 263
003B 120000      E     LCALL   CySpcLock
003E EF                MOV     A,R7
003F 6008              JZ      ?C0017
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
0041 900000      R     MOV     DPTR,#status
0044 7404              MOV     A,#04H
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
0047 800F              SJMP    ?C0016
0049         ?C0017:
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
0049 900000      R     MOV     DPTR,#buffer
004C 120000      E     LCALL   ?C?PLDXDATA
004F 900000      R     MOV     DPTR,#rowBuffer
0052 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 270
0055 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 271
0058         ?C0016:
                                           ; SOURCE LINE # 280
0058 900000      R     MOV     DPTR,#status
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
                                           ; SOURCE LINE # 281
005D         ?C0019:
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 18  

005D 22                RET     
             ; FUNCTION _CySetFlashEEBuffer (END)

             ; FUNCTION _CyWriteRowData (BEGIN)
                                           ; SOURCE LINE # 342
0000 900000      R     MOV     DPTR,#arrayId
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#rowAddress
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
000D 900000      R     MOV     DPTR,#rowData
0010 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 349
0013 900000      R     MOV     DPTR,#arrayId
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 D3                SETB    C
001A 943F              SUBB    A,#03FH
001C 4006              JC      ?C0020
001E 7E00              MOV     R6,#00H
0020 7F10              MOV     R7,#010H
0022 8004              SJMP    ?C0021
0024         ?C0020:
0024 7E01              MOV     R6,#01H
0026 7F20              MOV     R7,#020H
0028         ?C0021:
0028 900000      R     MOV     DPTR,#rowSize
002B EE                MOV     A,R6
002C F0                MOVX    @DPTR,A
002D A3                INC     DPTR
002E EF                MOV     A,R7
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 353
0030 900000      R     MOV     DPTR,#rowSize
0033 E0                MOVX    A,@DPTR
0034 FE                MOV     R6,A
0035 A3                INC     DPTR
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 6410              XRL     A,#010H
003B 4E                ORL     A,R6
003C 7003              JNZ     $ + 5H
003E 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 357
0041 900000      R     MOV     DPTR,#arrayId
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 7E00              MOV     R6,#00H
0048 7C20              MOV     R4,#020H
004A 7D00              MOV     R5,#00H
004C 120000      E     LCALL   ?C?LIMUL
004F EF                MOV     A,R7
0050 2400              ADD     A,#00H
0052 FF                MOV     R7,A
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 19  

0053 EE                MOV     A,R6
0054 3400              ADDC    A,#00H
0056 FE                MOV     R6,A
0057 ED                MOV     A,R5
0058 3408              ADDC    A,#08H
005A FD                MOV     R5,A
005B EC                MOV     A,R4
005C 3400              ADDC    A,#00H
005E FC                MOV     R4,A
005F C004              PUSH    AR4
0061 C005              PUSH    AR5
0063 C006              PUSH    AR6
0065 C007              PUSH    AR7
0067 900000      R     MOV     DPTR,#rowAddress
006A E0                MOVX    A,@DPTR
006B FE                MOV     R6,A
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F 7C00              MOV     R4,#00H
0071 7D20              MOV     R5,#020H
0073 120000      E     LCALL   ?C?LIMUL
0076 A804              MOV     R0,AR4
0078 A905              MOV     R1,AR5
007A AA06              MOV     R2,AR6
007C AB07              MOV     R3,AR7
007E D007              POP     AR7
0080 D006              POP     AR6
0082 D005              POP     AR5
0084 D004              POP     AR4
0086 120000      E     LCALL   ?C?LADD
0089 900000      R     MOV     DPTR,#offset
008C 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 359
008F 900000      R     MOV     DPTR,#i
0092 E4                CLR     A
0093 F0                MOVX    @DPTR,A
0094         ?C0023:
0094 900000      R     MOV     DPTR,#i
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 EF                MOV     A,R7
009A C3                CLR     C
009B 9420              SUBB    A,#020H
009D 5044              JNC     ?C0022
                                           ; SOURCE LINE # 360
                                           ; SOURCE LINE # 361
009F 900000      R     MOV     DPTR,#i
00A2 E0                MOVX    A,@DPTR
00A3 FF                MOV     R7,A
00A4 E4                CLR     A
00A5 FC                MOV     R4,A
00A6 FD                MOV     R5,A
00A7 FE                MOV     R6,A
00A8 900000      R     MOV     DPTR,#offset
00AB 120000      E     LCALL   ?C?LLDXDATA0
00AE 120000      E     LCALL   ?C?LADD
00B1 A907              MOV     R1,AR7
00B3 AA06              MOV     R2,AR6
00B5 AB05              MOV     R3,AR5
00B7 120000      E     LCALL   _cyread8
00BA 900000      R     MOV     DPTR,#rowBuffer
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 20  

00BD 120000      E     LCALL   ?C?PLDXDATA
00C0 E9                MOV     A,R1
00C1 2400              ADD     A,#00H
00C3 F9                MOV     R1,A
00C4 EA                MOV     A,R2
00C5 3401              ADDC    A,#01H
00C7 FA                MOV     R2,A
00C8 900000      R     MOV     DPTR,#i
00CB E0                MOVX    A,@DPTR
00CC FE                MOV     R6,A
00CD EE                MOV     A,R6
00CE FD                MOV     R5,A
00CF 7C00              MOV     R4,#00H
00D1 E9                MOV     A,R1
00D2 2D                ADD     A,R5
00D3 F9                MOV     R1,A
00D4 EA                MOV     A,R2
00D5 3C                ADDC    A,R4
00D6 FA                MOV     R2,A
00D7 EF                MOV     A,R7
00D8 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 362
00DB 900000      R     MOV     DPTR,#i
00DE E0                MOVX    A,@DPTR
00DF 04                INC     A
00E0 F0                MOVX    @DPTR,A
00E1 80B1              SJMP    ?C0023
                                           ; SOURCE LINE # 363
00E3         ?C0022:
                                           ; SOURCE LINE # 367
00E3 900000      R     MOV     DPTR,#rowData
00E6 120000      E     LCALL   ?C?PLDXDATA
00E9 C003              PUSH    AR3
00EB C002              PUSH    AR2
00ED C001              PUSH    AR1
00EF 900000      R     MOV     DPTR,#rowBuffer
00F2 120000      E     LCALL   ?C?PLDXDATA
00F5 A801              MOV     R0,AR1
00F7 AC02              MOV     R4,AR2
00F9 AD03              MOV     R5,AR3
00FB D001              POP     AR1
00FD D002              POP     AR2
00FF D003              POP     AR3
0101 7E01              MOV     R6,#01H
0103 7F00              MOV     R7,#00H
0105 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 372
0108 900000      R     MOV     DPTR,#arrayId
010B E0                MOVX    A,@DPTR
010C FF                MOV     R7,A
010D C007              PUSH    AR7
010F 900000      R     MOV     DPTR,#rowAddress
0112 E0                MOVX    A,@DPTR
0113 FC                MOV     R4,A
0114 A3                INC     DPTR
0115 E0                MOVX    A,@DPTR
0116 FD                MOV     R5,A
0117 900000      R     MOV     DPTR,#rowBuffer
011A 120000      E     LCALL   ?C?PLDXDATA
011D 900000      R     MOV     DPTR,#rowSize
0120 E0                MOVX    A,@DPTR
0121 FE                MOV     R6,A
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 21  

0122 A3                INC     DPTR
0123 E0                MOVX    A,@DPTR
0124 FF                MOV     R7,A
0125 900000      R     MOV     DPTR,#?_CyWriteRowFull?BYTE+06H
0128 EE                MOV     A,R6
0129 F0                MOVX    @DPTR,A
012A A3                INC     DPTR
012B EF                MOV     A,R7
012C F0                MOVX    @DPTR,A
012D D007              POP     AR7
012F 120000      R     LCALL   _CyWriteRowFull
0132 900000      R     MOV     DPTR,#status
0135 EF                MOV     A,R7
0136 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
0137 900000      R     MOV     DPTR,#status
013A E0                MOVX    A,@DPTR
013B FF                MOV     R7,A
                                           ; SOURCE LINE # 375
013C         ?C0026:
013C 22                RET     
             ; FUNCTION _CyWriteRowData (END)

             ; FUNCTION _CyWriteRowFull (BEGIN)
                                           ; SOURCE LINE # 460
0000 900000      R     MOV     DPTR,#arrayId
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#rowNumber
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
000D 900000      R     MOV     DPTR,#rowData
0010 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 465
0013 120000      E     LCALL   CySpcLock
0016 EF                MOV     A,R7
0017 6003              JZ      $ + 5H
0019 020000      R     LJMP    ?C0027
                                           ; SOURCE LINE # 466
                                           ; SOURCE LINE # 468
001C 900000      R     MOV     DPTR,#arrayId
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 900000      R     MOV     DPTR,#rowData
0024 120000      E     LCALL   ?C?PLDXDATA
0027 900000      R     MOV     DPTR,#rowSize
002A E0                MOVX    A,@DPTR
002B FC                MOV     R4,A
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E FD                MOV     R5,A
002F 900000      E     MOV     DPTR,#?_CySpcLoadRow?BYTE+04H
0032 EC                MOV     A,R4
0033 F0                MOVX    @DPTR,A
0034 A3                INC     DPTR
0035 ED                MOV     A,R5
0036 F0                MOVX    @DPTR,A
0037 120000      E     LCALL   _CySpcLoadRow
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 22  

003A 900000      R     MOV     DPTR,#status
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 470
003F 900000      R     MOV     DPTR,#status
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 6407              XRL     A,#07H
0047 6003              JZ      $ + 5H
0049 020000      R     LJMP    ?C0028
                                           ; SOURCE LINE # 471
004C         ?C0029:
                                           ; SOURCE LINE # 472
004C 904722            MOV     DPTR,#04722H
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 EF                MOV     A,R7
0052 5402              ANL     A,#02H
0054 FF                MOV     R7,A
0055 7E00              MOV     R6,#00H
0057 EF                MOV     A,R7
0058 4E                ORL     A,R6
0059 7009              JNZ     ?C0030
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 475
005B 7F01              MOV     R7,#01H
005D 7E00              MOV     R6,#00H
005F 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 476
0062 80E8              SJMP    ?C0029
0064         ?C0030:
                                           ; SOURCE LINE # 479
0064 904722            MOV     DPTR,#04722H
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 EF                MOV     A,R7
006A 5402              ANL     A,#02H
006C FF                MOV     R7,A
006D 7E00              MOV     R6,#00H
006F EF                MOV     A,R7
0070 4E                ORL     A,R6
0071 600D              JZ      ?C0032
0073 904722            MOV     DPTR,#04722H
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 EF                MOV     A,R7
0079 13                RRC     A
007A 13                RRC     A
007B 543F              ANL     A,#03FH
007D FF                MOV     R7,A
007E 8002              SJMP    ?C0033
0080         ?C0032:
0080 7FFF              MOV     R7,#0FFH
0082         ?C0033:
0082 EF                MOV     A,R7
0083 7007              JNZ     ?C0031
                                           ; SOURCE LINE # 480
                                           ; SOURCE LINE # 481
0085 900000      R     MOV     DPTR,#status
0088 E4                CLR     A
0089 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 23  

                                           ; SOURCE LINE # 482
008A 8006              SJMP    ?C0034
008C         ?C0031:
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
008C 900000      R     MOV     DPTR,#status
008F 74FF              MOV     A,#0FFH
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 486
0092         ?C0034:
                                           ; SOURCE LINE # 488
0092 900000      R     MOV     DPTR,#status
0095 E0                MOVX    A,@DPTR
0096 FF                MOV     R7,A
0097 EF                MOV     A,R7
0098 7074              JNZ     ?C0028
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 491
009A 900000      R     MOV     DPTR,#arrayId
009D E0                MOVX    A,@DPTR
009E FF                MOV     R7,A
009F 900000      R     MOV     DPTR,#rowNumber
00A2 E0                MOVX    A,@DPTR
00A3 FC                MOV     R4,A
00A4 A3                INC     DPTR
00A5 E0                MOVX    A,@DPTR
00A6 FD                MOV     R5,A
00A7 900000      R     MOV     DPTR,#dieTemperature
00AA E0                MOVX    A,@DPTR
00AB FB                MOV     R3,A
00AC 900000      R     MOV     DPTR,#dieTemperature+01H
00AF E0                MOVX    A,@DPTR
00B0 FE                MOV     R6,A
00B1 900000      E     MOV     DPTR,#?_CySpcWriteRow?BYTE+04H
00B4 EE                MOV     A,R6
00B5 F0                MOVX    @DPTR,A
00B6 120000      E     LCALL   _CySpcWriteRow
00B9 900000      R     MOV     DPTR,#status
00BC EF                MOV     A,R7
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
00BE 900000      R     MOV     DPTR,#status
00C1 E0                MOVX    A,@DPTR
00C2 FF                MOV     R7,A
00C3 EF                MOV     A,R7
00C4 6407              XRL     A,#07H
00C6 7046              JNZ     ?C0028
                                           ; SOURCE LINE # 494
00C8         ?C0037:
                                           ; SOURCE LINE # 495
00C8 904722            MOV     DPTR,#04722H
00CB E0                MOVX    A,@DPTR
00CC FF                MOV     R7,A
00CD EF                MOV     A,R7
00CE 5402              ANL     A,#02H
00D0 FF                MOV     R7,A
00D1 7E00              MOV     R6,#00H
00D3 EF                MOV     A,R7
00D4 4E                ORL     A,R6
00D5 7009              JNZ     ?C0038
                                           ; SOURCE LINE # 496
                                           ; SOURCE LINE # 498
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 24  

00D7 7F01              MOV     R7,#01H
00D9 7E00              MOV     R6,#00H
00DB 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 499
00DE 80E8              SJMP    ?C0037
00E0         ?C0038:
                                           ; SOURCE LINE # 502
00E0 904722            MOV     DPTR,#04722H
00E3 E0                MOVX    A,@DPTR
00E4 FF                MOV     R7,A
00E5 EF                MOV     A,R7
00E6 5402              ANL     A,#02H
00E8 FF                MOV     R7,A
00E9 7E00              MOV     R6,#00H
00EB EF                MOV     A,R7
00EC 4E                ORL     A,R6
00ED 600D              JZ      ?C0040
00EF 904722            MOV     DPTR,#04722H
00F2 E0                MOVX    A,@DPTR
00F3 FF                MOV     R7,A
00F4 EF                MOV     A,R7
00F5 13                RRC     A
00F6 13                RRC     A
00F7 543F              ANL     A,#03FH
00F9 FF                MOV     R7,A
00FA 8002              SJMP    ?C0041
00FC         ?C0040:
00FC 7FFF              MOV     R7,#0FFH
00FE         ?C0041:
00FE EF                MOV     A,R7
00FF 7007              JNZ     ?C0039
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 504
0101 900000      R     MOV     DPTR,#status
0104 E4                CLR     A
0105 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 505
0106 8006              SJMP    ?C0028
0108         ?C0039:
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 508
0108 900000      R     MOV     DPTR,#status
010B 74FF              MOV     A,#0FFH
010D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 509
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
                                           ; SOURCE LINE # 513
010E         ?C0028:
                                           ; SOURCE LINE # 515
010E 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 516
0111 8006              SJMP    ?C0043
0113         ?C0027:
                                           ; SOURCE LINE # 518
                                           ; SOURCE LINE # 519
0113 900000      R     MOV     DPTR,#status
0116 7404              MOV     A,#04H
0118 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 520
0119         ?C0043:
                                           ; SOURCE LINE # 522
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 25  

0119 900000      R     MOV     DPTR,#status
011C E0                MOVX    A,@DPTR
011D FF                MOV     R7,A
                                           ; SOURCE LINE # 523
011E         ?C0044:
011E 22                RET     
             ; FUNCTION _CyWriteRowFull (END)

             ; FUNCTION _CyFlash_SetWaitCycles (BEGIN)
                                           ; SOURCE LINE # 544
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 545
                                           ; SOURCE LINE # 549
0005 120000      E     LCALL   CyEnterCriticalSection
0008 900000      R     MOV     DPTR,#interruptState
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 559
000D 900000      R     MOV     DPTR,#freq
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 D3                SETB    C
0014 9416              SUBB    A,#016H
0016 5014              JNC     ?C0045
                                           ; SOURCE LINE # 560
                                           ; SOURCE LINE # 562
0018 904800            MOV     DPTR,#04800H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 543F              ANL     A,#03FH
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 4440              ORL     A,#040H
0024 FF                MOV     R7,A
0025 904800            MOV     DPTR,#04800H
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 563
002A 8031              SJMP    ?C0046
002C         ?C0045:
                                           ; SOURCE LINE # 564
002C 900000      R     MOV     DPTR,#freq
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 D3                SETB    C
0033 942C              SUBB    A,#02CH
0035 5014              JNC     ?C0047
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 567
0037 904800            MOV     DPTR,#04800H
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D 543F              ANL     A,#03FH
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 4480              ORL     A,#080H
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 26  

0043 FF                MOV     R7,A
0044 904800            MOV     DPTR,#04800H
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 568
0049 8012              SJMP    ?C0046
004B         ?C0047:
                                           ; SOURCE LINE # 570
                                           ; SOURCE LINE # 572
004B 904800            MOV     DPTR,#04800H
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 EF                MOV     A,R7
0051 543F              ANL     A,#03FH
0053 FF                MOV     R7,A
0054 EF                MOV     A,R7
0055 44C0              ORL     A,#0C0H
0057 FF                MOV     R7,A
0058 904800            MOV     DPTR,#04800H
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 573
005D         ?C0046:
                                           ; SOURCE LINE # 630
005D 900000      R     MOV     DPTR,#interruptState
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 631
0065 22                RET     
             ; FUNCTION _CyFlash_SetWaitCycles (END)

             ; FUNCTION CyEEPROM_Start (BEGIN)
                                           ; SOURCE LINE # 650
                                           ; SOURCE LINE # 651
                                           ; SOURCE LINE # 653
0000 9043AC            MOV     DPTR,#043ACH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4410              ORL     A,#010H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 656
000B 9043BC            MOV     DPTR,#043BCH
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4410              ORL     A,#010H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 657
0016 22                RET     
             ; FUNCTION CyEEPROM_Start (END)

             ; FUNCTION CyEEPROM_Stop (BEGIN)
                                           ; SOURCE LINE # 674
                                           ; SOURCE LINE # 675
                                           ; SOURCE LINE # 677
0000 9043AC            MOV     DPTR,#043ACH
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 27  

0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54EF              ANL     A,#0EFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 680
000B 9043BC            MOV     DPTR,#043BCH
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54EF              ANL     A,#0EFH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 681
0016 22                RET     
             ; FUNCTION CyEEPROM_Stop (END)

             ; FUNCTION CyEEPROM_ReadReserve (BEGIN)
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 701
                                           ; SOURCE LINE # 703
0000 904702            MOV     DPTR,#04702H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
000B         ?C0052:
                                           ; SOURCE LINE # 705
000B 904702            MOV     DPTR,#04702H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 5402              ANL     A,#02H
0013 FF                MOV     R7,A
0014 7E00              MOV     R6,#00H
0016 EF                MOV     A,R7
0017 4E                ORL     A,R6
0018 60F1              JZ      ?C0052
                                           ; SOURCE LINE # 706
                                           ; SOURCE LINE # 708
001A         ?C0053:
                                           ; SOURCE LINE # 709
001A         ?C0054:
001A 22                RET     
             ; FUNCTION CyEEPROM_ReadReserve (END)

             ; FUNCTION CyEEPROM_ReadRelease (BEGIN)
                                           ; SOURCE LINE # 726
                                           ; SOURCE LINE # 727
                                           ; SOURCE LINE # 728
0000 904702            MOV     DPTR,#04702H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4400              ORL     A,#00H
0008 FF                MOV     R7,A
C51 COMPILER V9.03   CYFLASH                                                               08/11/2013 22:22:03 PAGE 28  

0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 729
000B 22                RET     
             ; FUNCTION CyEEPROM_ReadRelease (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1069    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5      31
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
