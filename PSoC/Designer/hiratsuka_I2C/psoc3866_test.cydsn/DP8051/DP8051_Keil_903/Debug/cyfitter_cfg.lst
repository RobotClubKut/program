C51 COMPILER V9.03   CYFITTER_CFG                                                          08/12/2013 00:15:24 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.2\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.lst) CD DB
                    - NOIP OT(2,SIZE) DF(DEBUG) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator 2.2 Component Pack 6
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.  Except for the user defined sections in
   8          * CyClockStartupError(), this file should not be modified.
   9          *
  10          ********************************************************************************
  11          * Copyright 2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <string.h>
  18          #include <cytypes.h>
  19          #include <cydevice_trm.h>
  20          #include <cyfitter.h>
  21          #include <CyLib.h>
  22          #include <cyfitter_cfg.h>
  23          
  24          /* Clock startup error codes                                                   */
  25          #define CYCLOCKSTART_NO_ERROR    0u
  26          #define CYCLOCKSTART_XTAL_ERROR  1u
  27          #define CYCLOCKSTART_32KHZ_ERROR 2u
  28          #define CYCLOCKSTART_PLL_ERROR   3u
  29          
  30          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
              /*******************************************************************************
              * Function Name: CyClockStartupError
              ********************************************************************************
              * Summary:
              *  If an error is encountered during clock configuration (crystal startup error,
              *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
              *  the customer, this function will stop in an infinite loop.
              *
              * Parameters:
              *   void
              *
              * Return:
              *   void
              *
              *******************************************************************************/
              #if defined(__GNUC__) || defined(__ARMCC_VERSION)
              __attribute__ ((unused))
              #endif
              static void CyClockStartupError(uint8 errorCode);
              #if defined(__GNUC__) || defined(__ARMCC_VERSION)
              __attribute__ ((unused))
              #endif
              static void CyClockStartupError(uint8 errorCode)
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/12/2013 00:15:24 PAGE 2   

              {
                  /* To remove the compiler warning if errorCode not used.                */
                  errorCode = errorCode;
              
                  /* `#START CyClockStartupError` */
              
                  /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
                  /* we will end up here to allow the customer to implement something to  */
                  /* deal with the clock condition.                                       */
              
                  /* `#END` */
              
                  /* If nothing else, stop here since the clocks have not started         */
                  /* correctly.                                                           */
                  while(1) {}
              }
              #endif
  71          
  72          
  73          #if defined(__C51__) || defined(__CX51__)
  74                  #define CYPACKED
  75                  #define CYALIGNED
  76                  
  77                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  78          
  79          
  80          
  81                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  82                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  83                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  84          #else
                      #error Unsupported toolchain
              #endif
  87          
  88          #define cfg_byte_table ((const void CYFAR *)0x080000u)
  89          /* IOPINS0_7 Address: CYREG_PRT12_DM0 Size (bytes): 8 */
  90          #define BS_IOPINS0_7_VAL ((const uint8 CYFAR *)0x000800E0u)
  91          
  92          /* IOPINS0_1 Address: CYREG_PRT1_DM0 Size (bytes): 8 */
  93          #define BS_IOPINS0_1_VAL ((const uint8 CYFAR *)0x000800E8u)
  94          
  95          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
  96          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x000800F0u)
  97          
  98          /* IOPINS0_6 Address: CYREG_PRT6_DR Size (bytes): 10 */
  99          #define BS_IOPINS0_6_VAL ((const uint8 CYFAR *)0x000800F8u)
 100          
 101          
 102          /*******************************************************************************
 103          * Function Name: ClockSetup
 104          ********************************************************************************
 105          *
 106          * Summary:
 107          *  Performs the initialization of all of the clocks in the device based on the
 108          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 109          *  clocks and setting the necessary dividers to produce the desired frequency. 
 110          *
 111          * Parameters:
 112          *  void
 113          *
 114          * Return:
 115          *  void
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/12/2013 00:15:24 PAGE 3   

 116          *
 117          *******************************************************************************/
 118          static void ClockSetup(void);
 119          static void ClockSetup(void)
 120          {
 121   1              uint32 timeout;
 122   1              uint8 pllLock;
 123   1      
 124   1      
 125   1              /* Configure Digital Clocks based on settings from Clock DWR */
 126   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x001Du);
 127   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x19u);
 128   1      
 129   1              /* Configure ILO based on settings from Clock DWR */
 130   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
 131   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 132   1      
 133   1              /* Configure IMO based on settings from Clock DWR */
 134   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03u);
 135   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_3MHZ)));
 136   1      
 137   1              /* Configure PLL based on settings from Clock DWR */
 138   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0010u);
 139   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1051u);
 140   1              /* Wait up to 250us for the PLL to lock */
 141   1              pllLock = 0u;
 142   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--) { 
 143   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 144   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 145   2              }
 146   1      
 147   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 148   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 149   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 150   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 151   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 152   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 153   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 154   1      
 155   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x01u
             -)));
 156   1      }
 157          
 158          
 159          /* Analog API Functions */
 160          
 161          
 162          /*******************************************************************************
 163          * Function Name: AnalogSetDefault
 164          ********************************************************************************
 165          *
 166          * Summary:
 167          *  Sets up the analog portions of the chip to default values based on chip
 168          *  configuration options from the project.
 169          *
 170          * Parameters:
 171          *  void
 172          *
 173          * Return:
 174          *  void
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/12/2013 00:15:24 PAGE 4   

 175          *
 176          *******************************************************************************/
 177          static void AnalogSetDefault(void);
 178          static void AnalogSetDefault(void)
 179          {
 180   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 181   1              CY_SET_REG8((void CYXDATA *)CYREG_BG_DFT0, bg_xover_inl_trim & 0x07u);
 182   1              CY_SET_REG8((void CYXDATA *)CYREG_BG_DFT1, ((uint8)((uint8)bg_xover_inl_trim >> 4)) & 0x0Fu);
 183   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 184   1      }
 185          
 186          
 187          /*******************************************************************************
 188          * Function Name: SetAnalogRoutingPumps
 189          ********************************************************************************
 190          *
 191          * Summary:
 192          * Enables or disables the analog pumps feeding analog routing switches.
 193          * Intended to be called at startup, based on the Vdda system configuration;
 194          * may be called during operation when the user informs us that the Vdda voltage
 195          * crossed the pump threshold.
 196          *
 197          * Parameters:
 198          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 199          *
 200          * Return:
 201          *  void
 202          *
 203          *******************************************************************************/
 204          void SetAnalogRoutingPumps(uint8 enabled)
 205          {
 206   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 207   1              if (enabled != 0u)
 208   1              {
 209   2                      regValue |= 0x00u;
 210   2              }
 211   1              else
 212   1              {
 213   2                      regValue &= (uint8)~0x00u;
 214   2              }
 215   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 216   1      }
 217          
 218          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 219          
 220          
 221          /*******************************************************************************
 222          * Function Name: cyfitter_cfg
 223          ********************************************************************************
 224          * Summary:
 225          *  This function is called by the start-up code for the selected device. It
 226          *  performs all of the necessary device configuration based on the design
 227          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 228          *  as Clocks and Pins as well as any component configuration that is necessary.
 229          *
 230          * Parameters:  
 231          *   void
 232          *
 233          * Return:
 234          *   void
 235          *
 236          *******************************************************************************/
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/12/2013 00:15:24 PAGE 5   

 237          
 238          void cyfitter_cfg(void)
 239          {
 240   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 241   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x01u));
 242   1      
 243   1              {
 244   2      
 245   2                      typedef struct {
 246   2                              void CYFAR *address;
 247   2                              uint16 size;
 248   2                      } CYPACKED cfg_memset_t;
 249   2      
 250   2                      static const cfg_memset_t CYCODE cfg_memset_list [] = {
 251   2                              /* address, size */
 252   2                              {(void CYFAR *)(CYREG_I2C_XCFG), 21u},
 253   2                              {(void CYFAR *)(CYREG_TMR0_CFG0), 12u},
 254   2                              {(void CYFAR *)(CYREG_PRT0_DR), 16u},
 255   2                              {(void CYFAR *)(CYREG_PRT3_DR), 48u},
 256   2                              {(void CYFAR *)(CYREG_PRT15_DR), 16u},
 257   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 258   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 259   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 260   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 261   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 262   2                      };
 263   2      
 264   2                      uint8 CYDATA i;
 265   2      
 266   2                      /* Zero out critical memory blocks before beginning configuration */
 267   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 268   2                      {
 269   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 270   3                              CYMEMZERO(ms->address, ms->size);
 271   3                      }
 272   2      
 273   2                      cfg_write_bytes(cfg_byte_table);
 274   2      
 275   2                      /* Enable digital routing */
 276   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 277   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 278   2      
 279   2                      /* Enable UDB array */
 280   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 281   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 282   2              }
 283   1      
 284   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 285   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT12_DM0), (const void CYFAR *)(BS_IOPINS0_7_VAL), 8u);
 286   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT1_DM0), (const void CYFAR *)(BS_IOPINS0_1_VAL), 8u);
 287   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (const void CYFAR *)(BS_IOPINS0_2_VAL), 8u);
 288   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT6_DR), (const void CYFAR *)(BS_IOPINS0_6_VAL), 10u);
 289   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 290   1      
 291   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 292   1              CY_SET_REG8((void CYXDATA *)CYDEV_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYDEV_BOOST_CR2) | 0x08u));
 293   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/12/2013 00:15:24 PAGE 6   

 294   1              {
 295   2                      CY_SET_REG8((void CYXDATA *)CYDEV_MFGCFG_PWRSYS_WAKE_TR2, 0x3Au);
 296   2              }
 297   1      
 298   1      
 299   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 300   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 301   1              /* Setup clocks based on selections from Clock DWR */
 302   1              ClockSetup();
 303   1      
 304   1              /* Perform basic analog initialization to defaults */
 305   1              AnalogSetDefault();
 306   1      
 307   1              /* Configure alternate active mode */
 308   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 309   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 310   1      }
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/12/2013 00:15:24 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 126
0000 7B00              MOV     R3,#00H
0002 7A40              MOV     R2,#040H
0004 7980              MOV     R1,#080H
0006 7D1D              MOV     R5,#01DH
0008 7C00              MOV     R4,#00H
000A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 127
000D 904082            MOV     DPTR,#04082H
0010 7419              MOV     A,#019H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
0013 904300            MOV     DPTR,#04300H
0016 7402              MOV     A,#02H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 131
0019 904000            MOV     DPTR,#04000H
001C 7408              MOV     A,#08H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
001F 904200            MOV     DPTR,#04200H
0022 7403              MOV     A,#03H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
0025 7B0C              MOV     R3,#0CH
0027 7A01              MOV     R2,#01H
0029 7908              MOV     R1,#08H
002B 120000      E     LCALL   _cyread8
002E 9046A1            MOV     DPTR,#046A1H
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
0033 7B00              MOV     R3,#00H
0035 7A42              MOV     R2,#042H
0037 7922              MOV     R1,#022H
0039 7D10              MOV     R5,#010H
003B 7C00              MOV     R4,#00H
003D 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 139
0040 7B00              MOV     R3,#00H
0042 7A42              MOV     R2,#042H
0044 7920              MOV     R1,#020H
0046 7D51              MOV     R5,#051H
0048 7C10              MOV     R4,#010H
004A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 141
004D 900000      R     MOV     DPTR,#pllLock
0050 E4                CLR     A
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
0052 7F19              MOV     R7,#019H
0054 7E00              MOV     R6,#00H
0056 7D00              MOV     R5,#00H
0058 7C00              MOV     R4,#00H
005A 900000      R     MOV     DPTR,#timeout
005D 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/12/2013 00:15:24 PAGE 8   

0060         ?C0001:
0060 900000      R     MOV     DPTR,#timeout
0063 120000      E     LCALL   ?C?LLDXDATA
0066 D3                SETB    C
0067 EF                MOV     A,R7
0068 9400              SUBB    A,#00H
006A EE                MOV     A,R6
006B 9400              SUBB    A,#00H
006D 404E              JC      ?C0002
006F 900000      R     MOV     DPTR,#pllLock
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 EF                MOV     A,R7
0075 6403              XRL     A,#03H
0077 6044              JZ      ?C0002
                                           ; SOURCE LINE # 143
0079 904225            MOV     DPTR,#04225H
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E EF                MOV     A,R7
007F 5401              ANL     A,#01H
0081 FF                MOV     R7,A
0082 7E00              MOV     R6,#00H
0084 900000      R     MOV     DPTR,#pllLock
0087 E0                MOVX    A,@DPTR
0088 FE                MOV     R6,A
0089 EE                MOV     A,R6
008A 25E0              ADD     A,ACC
008C FE                MOV     R6,A
008D EE                MOV     A,R6
008E 4F                ORL     A,R7
008F FF                MOV     R7,A
0090 EF                MOV     A,R7
0091 5403              ANL     A,#03H
0093 FF                MOV     R7,A
0094 900000      R     MOV     DPTR,#pllLock
0097 EF                MOV     A,R7
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
0099 7FE0              MOV     R7,#0E0H
009B 7E01              MOV     R6,#01H
009D 7D00              MOV     R5,#00H
009F 7C00              MOV     R4,#00H
00A1 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 145
00A4 900000      R     MOV     DPTR,#timeout
00A7 120000      E     LCALL   ?C?LLDXDATA
00AA 7BFF              MOV     R3,#0FFH
00AC 7AFF              MOV     R2,#0FFH
00AE 79FF              MOV     R1,#0FFH
00B0 78FF              MOV     R0,#0FFH
00B2 120000      E     LCALL   ?C?LADD
00B5 900000      R     MOV     DPTR,#timeout
00B8 120000      E     LCALL   ?C?LSTXDATA
00BB 80A3              SJMP    ?C0001
00BD         ?C0002:
                                           ; SOURCE LINE # 148
00BD 7B00              MOV     R3,#00H
00BF 7A40              MOV     R2,#040H
00C1 7904              MOV     R1,#04H
00C3 7D00              MOV     R5,#00H
00C5 7C01              MOV     R4,#01H
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/12/2013 00:15:24 PAGE 9   

00C7 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 149
00CA 904004            MOV     DPTR,#04004H
00CD 7407              MOV     A,#07H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
00D0 904006            MOV     DPTR,#04006H
00D3 E4                CLR     A
00D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
00D5 904008            MOV     DPTR,#04008H
00D8 7448              MOV     A,#048H
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
00DB 904004            MOV     DPTR,#04004H
00DE E4                CLR     A
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
00E0 904001            MOV     DPTR,#04001H
00E3 7402              MOV     A,#02H
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
00E6 9043A2            MOV     DPTR,#043A2H
00E9 E0                MOVX    A,@DPTR
00EA FF                MOV     R7,A
00EB EF                MOV     A,R7
00EC 4401              ORL     A,#01H
00EE FF                MOV     R7,A
00EF 9043A2            MOV     DPTR,#043A2H
00F2 EF                MOV     A,R7
00F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
00F4 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/12/2013 00:15:24 PAGE 10  

0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 183
002F 905876            MOV     DPTR,#05876H
0032 7444              MOV     A,#044H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
0035 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 204
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0006
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4400              ORL     A,#00H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
0025 800E              SJMP    ?C0007
0027         ?C0006:
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54FF              ANL     A,#0FFH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
0035         ?C0007:
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/12/2013 00:15:24 PAGE 11  

                                           ; SOURCE LINE # 215
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 239
                                           ; SOURCE LINE # 241
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4401              ORL     A,#01H
000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 267
0016 750000      R     MOV     i,#00H
0019         ?C0009:
0019 E500        R     MOV     A,i
001B C3                CLR     C
001C 940A              SUBB    A,#0AH
001E 503A              JNC     ?C0010
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
0020 AF00        R     MOV     R7,i
0022 EF                MOV     A,R7
0023 75F005            MOV     B,#05H
0026 A4                MUL     AB
0027 2400        R     ADD     A,#LOW cfg_memset_list
0029 F582              MOV     DPL,A
002B E4                CLR     A
002C 3400        R     ADDC    A,#HIGH cfg_memset_list
002E F583              MOV     DPH,A
0030 AF82              MOV     R7,DPL
0032 AE83              MOV     R6,DPH
0034 8E00        R     MOV     ms,R6
0036 8F00        R     MOV     ms+01H,R7
                                           ; SOURCE LINE # 270
0038 AE00        R     MOV     R6,ms
003A AF00        R     MOV     R7,ms+01H
003C 8F82              MOV     DPL,R7
003E 8E83              MOV     DPH,R6
0040 120000      E     LCALL   ?C?PLDCODE
0043 AE00        R     MOV     R6,ms
0045 AF00        R     MOV     R7,ms+01H
0047 8F82              MOV     DPL,R7
0049 8E83              MOV     DPH,R6
004B 7403              MOV     A,#03H
004D 93                MOVC    A,@A+DPTR
004E FC                MOV     R4,A
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/12/2013 00:15:24 PAGE 12  

004F 7404              MOV     A,#04H
0051 93                MOVC    A,@A+DPTR
0052 FD                MOV     R5,A
0053 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 271
0056 0500        R     INC     i
0058 80BF              SJMP    ?C0009
005A         ?C0010:
                                           ; SOURCE LINE # 273
005A 7B08              MOV     R3,#08H
005C 7A00              MOV     R2,#00H
005E 7900              MOV     R1,#00H
0060 120000      E     LCALL   _cfg_write_bytes
                                           ; SOURCE LINE # 276
0063 7B01              MOV     R3,#01H
0065 7A50              MOV     R2,#050H
0067 7903              MOV     R1,#03H
0069 120000      E     LCALL   _cyread8
006C EF                MOV     A,R7
006D 4402              ORL     A,#02H
006F FD                MOV     R5,A
0070 7B01              MOV     R3,#01H
0072 7A50              MOV     R2,#050H
0074 7903              MOV     R1,#03H
0076 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 277
0079 7B01              MOV     R3,#01H
007B 7A50              MOV     R2,#050H
007D 7913              MOV     R1,#013H
007F 120000      E     LCALL   _cyread8
0082 EF                MOV     A,R7
0083 4402              ORL     A,#02H
0085 FD                MOV     R5,A
0086 7B01              MOV     R3,#01H
0088 7A50              MOV     R2,#050H
008A 7913              MOV     R1,#013H
008C 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 280
008F 9043A0            MOV     DPTR,#043A0H
0092 E0                MOVX    A,@DPTR
0093 FF                MOV     R7,A
0094 EF                MOV     A,R7
0095 4440              ORL     A,#040H
0097 FF                MOV     R7,A
0098 9043A0            MOV     DPTR,#043A0H
009B EF                MOV     A,R7
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
009D 9043C2            MOV     DPTR,#043C2H
00A0 E0                MOVX    A,@DPTR
00A1 FF                MOV     R7,A
00A2 EF                MOV     A,R7
00A3 4410              ORL     A,#010H
00A5 FF                MOV     R7,A
00A6 9043C2            MOV     DPTR,#043C2H
00A9 EF                MOV     A,R7
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 282
                                           ; SOURCE LINE # 285
00AB 7B08              MOV     R3,#08H
00AD 7A00              MOV     R2,#00H
00AF 79E0              MOV     R1,#0E0H
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/12/2013 00:15:24 PAGE 13  

00B1 C003              PUSH    AR3
00B3 C002              PUSH    AR2
00B5 C001              PUSH    AR1
00B7 7B00              MOV     R3,#00H
00B9 7A51              MOV     R2,#051H
00BB 79C2              MOV     R1,#0C2H
00BD 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00C0 120000      E     LCALL   ?C?PSTXDATA
00C3 D001              POP     AR1
00C5 D002              POP     AR2
00C7 D003              POP     AR3
00C9 7F08              MOV     R7,#08H
00CB 7E00              MOV     R6,#00H
00CD 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 286
00D0 7B08              MOV     R3,#08H
00D2 7A00              MOV     R2,#00H
00D4 79E8              MOV     R1,#0E8H
00D6 C003              PUSH    AR3
00D8 C002              PUSH    AR2
00DA C001              PUSH    AR1
00DC 7B00              MOV     R3,#00H
00DE 7A51              MOV     R2,#051H
00E0 7912              MOV     R1,#012H
00E2 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00E5 120000      E     LCALL   ?C?PSTXDATA
00E8 D001              POP     AR1
00EA D002              POP     AR2
00EC D003              POP     AR3
00EE 7F08              MOV     R7,#08H
00F0 7E00              MOV     R6,#00H
00F2 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 287
00F5 7B08              MOV     R3,#08H
00F7 7A00              MOV     R2,#00H
00F9 79F0              MOV     R1,#0F0H
00FB C003              PUSH    AR3
00FD C002              PUSH    AR2
00FF C001              PUSH    AR1
0101 7B00              MOV     R3,#00H
0103 7A51              MOV     R2,#051H
0105 7922              MOV     R1,#022H
0107 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
010A 120000      E     LCALL   ?C?PSTXDATA
010D D001              POP     AR1
010F D002              POP     AR2
0111 D003              POP     AR3
0113 7F08              MOV     R7,#08H
0115 7E00              MOV     R6,#00H
0117 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 288
011A 7B08              MOV     R3,#08H
011C 7A00              MOV     R2,#00H
011E 79F8              MOV     R1,#0F8H
0120 C003              PUSH    AR3
0122 C002              PUSH    AR2
0124 C001              PUSH    AR1
0126 7B00              MOV     R3,#00H
0128 7A51              MOV     R2,#051H
012A 7960              MOV     R1,#060H
012C 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
012F 120000      E     LCALL   ?C?PSTXDATA
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/12/2013 00:15:24 PAGE 14  

0132 D001              POP     AR1
0134 D002              POP     AR2
0136 D003              POP     AR3
0138 7F0A              MOV     R7,#0AH
013A 7E00              MOV     R6,#00H
013C 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 289
013F 9044F4            MOV     DPTR,#044F4H
0142 7401              MOV     A,#01H
0144 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
0145 904322            MOV     DPTR,#04322H
0148 E0                MOVX    A,@DPTR
0149 FF                MOV     R7,A
014A EF                MOV     A,R7
014B 4408              ORL     A,#08H
014D FF                MOV     R7,A
014E 904322            MOV     DPTR,#04322H
0151 EF                MOV     A,R7
0152 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 293
0153 9046EC            MOV     DPTR,#046ECH
0156 E0                MOVX    A,@DPTR
0157 FF                MOV     R7,A
0158 EF                MOV     A,R7
0159 C3                CLR     C
015A 9405              SUBB    A,#05H
015C 5006              JNC     ?C0012
                                           ; SOURCE LINE # 294
                                           ; SOURCE LINE # 295
015E 904689            MOV     DPTR,#04689H
0161 743A              MOV     A,#03AH
0163 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
0164         ?C0012:
                                           ; SOURCE LINE # 300
0164 904800            MOV     DPTR,#04800H
0167 74F1              MOV     A,#0F1H
0169 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 302
016A 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 305
016D 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 308
0170 7B00              MOV     R3,#00H
0172 7A43              MOV     R2,#043H
0174 79A0              MOV     R1,#0A0H
0176 C003              PUSH    AR3
0178 C002              PUSH    AR2
017A C001              PUSH    AR1
017C 7B00              MOV     R3,#00H
017E 7A43              MOV     R2,#043H
0180 79B0              MOV     R1,#0B0H
0182 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0185 120000      E     LCALL   ?C?PSTXDATA
0188 D001              POP     AR1
018A D002              POP     AR2
018C D003              POP     AR3
018E 7F0E              MOV     R7,#0EH
0190 7E00              MOV     R6,#00H
0192 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 309
C51 COMPILER V9.03   CYFITTER_CFG                                                          08/12/2013 00:15:24 PAGE 15  

0195 9043B0            MOV     DPTR,#043B0H
0198 E0                MOVX    A,@DPTR
0199 FF                MOV     R7,A
019A EF                MOV     A,R7
019B 54FD              ANL     A,#0FDH
019D FF                MOV     R7,A
019E EF                MOV     A,R7
019F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 310
01A0 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    780    ----
   CONSTANT SIZE    =     50    ----
   XDATA SIZE       =   ----       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
