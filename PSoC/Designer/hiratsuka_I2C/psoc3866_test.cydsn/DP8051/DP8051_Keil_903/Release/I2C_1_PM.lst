C51 COMPILER V9.03   I2C_1_PM                                                              07/27/2013 12:49:50 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE I2C_1_PM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Release\I2C_1_PM.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.2\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\I2C_1_PM.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Release\I2C_1_PM.lst) CD DB NOIP 
                    -OT(8,SIZE) DF(NDEBUG) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Release\I2C_1_PM.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /*******************************************************************************
   2          * File Name: I2C_1_PM.c
   3          * Version 3.30
   4          *
   5          * Description:
   6          *  This file provides Low power mode APIs for I2C component.
   7          *
   8          * Note:
   9          *  None
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "I2C_1_PVT.h"
  19          
  20          I2C_1_BACKUP_STRUCT I2C_1_backup =
  21          {
  22              I2C_1_DISABLE, /* enableState */
  23          
  24              #if(I2C_1_FF_IMPLEMENTED)
  25                  I2C_1_DEFAULT_XCFG,  /* xcfg */
  26                  I2C_1_DEFAULT_CFG,   /* cfg  */
  27          
  28                  #if(I2C_1_MODE_SLAVE_ENABLED)
                          I2C_1_DEFAULT_ADDR, /* addr */
                      #endif /* (I2C_1_MODE_SLAVE_ENABLED) */
  31          
  32                  #if(CY_PSOC5A)
                          LO8(I2C_1_DEFAULT_DIVIDE_FACTOR),  /* div */
                      #else
  35                      LO8(I2C_1_DEFAULT_DIVIDE_FACTOR), /* div1 */
  36                      HI8(I2C_1_DEFAULT_DIVIDE_FACTOR), /* div2 */
  37                  #endif /* (CY_PSOC5A) */
  38          
  39              #else  /* (I2C_1_UDB_IMPLEMENTED) */
                      I2C_1_DEFAULT_CFG,    /* control */
              
                      #if(CY_UDB_V0)
                          I2C_1_INT_ENABLE_MASK, /* aux_ctl */
              
                          #if(I2C_1_MODE_SLAVE_ENABLED)
                              I2C_1_DEFAULT_ADDR, /* addr_d0 */
                          #endif /* (I2C_1_MODE_SLAVE_ENABLED) */
                      #endif /* (CY_UDB_V0) */
                  #endif /* (I2C_1_FF_IMPLEMENTED) */
  50          
  51              #if(I2C_1_TIMEOUT_ENABLED)
                      I2C_1_DEFAULT_TMOUT_PERIOD,
C51 COMPILER V9.03   I2C_1_PM                                                              07/27/2013 12:49:50 PAGE 2   

                      I2C_1_DEFAULT_TMOUT_INTR_MASK,
              
                      #if(I2C_1_TIMEOUT_PRESCALER_ENABLED && CY_UDB_V0)
                          I2C_1_DEFAULT_TMOUT_PRESCALER_PRD,
                      #endif /* (I2C_1_TIMEOUT_PRESCALER_ENABLED) */
              
                  #endif /* (I2C_1_TIMEOUT_ENABLED) */
  60          };
  61          
  62          #if((I2C_1_FF_IMPLEMENTED) && (I2C_1_WAKEUP_ENABLED))
                  volatile uint8 I2C_1_wakeupSource;
              #endif /* ((I2C_1_FF_IMPLEMENTED) && (I2C_1_WAKEUP_ENABLED)) */
  65          
  66          
  67          /*******************************************************************************
  68          * Function Name: I2C_1_SaveConfig
  69          ********************************************************************************
  70          *
  71          * Summary:
  72          *  Wakeup on address match enabled: disables I2C Master(if was enabled before go
  73          *  to sleep), enables I2C backup regulator. Waits while on-going transaction be
  74          *  will completed and I2C will be ready go to sleep. All incoming transaction
  75          *  will be NACKed till power down will be asserted. The address match event
  76          *  wakes up the chip.
  77          *  Wakeup on address match disabled: saves I2C configuration and non-retention
  78          *  register values.
  79          *
  80          * Parameters:
  81          *  None
  82          *
  83          * Return:
  84          *  None
  85          *
  86          * Global Variables:
  87          *  I2C_1_backup - used to save component configuration and
  88          *       none-retention registers before enter sleep mode.
  89          *
  90          * Reentrant:
  91          *  No
  92          *
  93          *******************************************************************************/
  94          void I2C_1_SaveConfig(void) 
  95          {
  96   1          #if(I2C_1_FF_IMPLEMENTED)
  97   1              #if(I2C_1_WAKEUP_ENABLED)
                          uint8 enableInterrupts;
                      #endif /* (I2C_1_WAKEUP_ENABLED) */
 100   1      
 101   1              /* Store regiters in either Sleep mode */
 102   1              I2C_1_backup.cfg  = I2C_1_CFG_REG;
 103   1              I2C_1_backup.xcfg = I2C_1_XCFG_REG;
 104   1      
 105   1              #if(I2C_1_MODE_SLAVE_ENABLED)
                          I2C_1_backup.addr = I2C_1_ADDR_REG;
                      #endif /* (I2C_1_MODE_SLAVE_ENABLED) */
 108   1      
 109   1              #if(CY_PSOC5A)
                          I2C_1_backup.clkDiv   = I2C_1_CLKDIV_REG;
                      #else
 112   1                  I2C_1_backup.clkDiv1  = I2C_1_CLKDIV1_REG;
 113   1                  I2C_1_backup.clkDiv2  = I2C_1_CLKDIV2_REG;
 114   1              #endif /* (CY_PSOC5A) */
C51 COMPILER V9.03   I2C_1_PM                                                              07/27/2013 12:49:50 PAGE 3   

 115   1      
 116   1              #if(I2C_1_WAKEUP_ENABLED)
                          /* Need to disable Master */
                          I2C_1_CFG_REG &= ((uint8) ~I2C_1_ENABLE_MASTER);
              
                          /* Enable the I2C regulator backup */
                          enableInterrupts = CyEnterCriticalSection();
                          I2C_1_PWRSYS_CR1_REG |= I2C_1_PWRSYS_CR1_I2C_REG_BACKUP;
                          CyExitCriticalSection(enableInterrupts);
              
                          /* 1) Set force NACK to ignore I2C transactions
                             2) Wait while I2C will be ready go to Sleep
                             3) These bits are cleared on wake up */
                          I2C_1_XCFG_REG |= I2C_1_XCFG_FORCE_NACK;
                          while(0u == (I2C_1_XCFG_REG & I2C_1_XCFG_RDY_TO_SLEEP))
                          {
                              ; /* Wait when block is ready to Sleep */
                          }
              
                          /* Setup wakeup interrupt */
                          I2C_1_DisableInt();
                          (void) CyIntSetVector(I2C_1_ISR_NUMBER, &I2C_1_WAKEUP_ISR);
                          I2C_1_wakeupSource = 0u;
                          I2C_1_EnableInt();
              
                      #endif /* (I2C_1_WAKEUP_ENABLED) */
 141   1      
 142   1          #else
                      /* Store only address match bit */
                      I2C_1_backup.control = (I2C_1_CFG_REG & I2C_1_CTRL_ANY_ADDRESS_MASK);
              
                      #if(CY_UDB_V0)
                          /* Store interrupt mask bits */
                          I2C_1_backup.intMask = I2C_1_INT_MASK_REG;
              
                          #if(I2C_1_MODE & I2C_1_MODE_SLAVE)
                              I2C_1_backup.addr = I2C_1_ADDR_REG;
                          #endif /* (I2C_1_MODE & I2C_1_MODE_SLAVE) */
              
                      #endif /* (CY_UDB_V0) */
              
                  #endif /* (I2C_1_FF_IMPLEMENTED) */
 157   1      
 158   1          #if(I2C_1_TIMEOUT_ENABLED)
                      I2C_1_TimeoutSaveConfig();   /* Save Timeout config */
                  #endif /* (I2C_1_TIMEOUT_ENABLED) */
 161   1      }
 162          
 163          
 164          /*******************************************************************************
 165          * Function Name: I2C_1_Sleep
 166          ********************************************************************************
 167          *
 168          * Summary:
 169          *  Wakeup on address match enabled: All incoming transaction will be NACKed till
 170          *  power down will be asserted. The address match event wakes up the chip.
 171          *  Wakeup on address match disabled: Disables active mode power template bits or
 172          *  clock gating as appropriate. Saves I2C configuration and non-retention
 173          *  register values.
 174          *  Disables I2C interrupt.
 175          *
 176          * Parameters:
C51 COMPILER V9.03   I2C_1_PM                                                              07/27/2013 12:49:50 PAGE 4   

 177          *  None
 178          *
 179          * Return:
 180          *  None
 181          *
 182          * Reentrant:
 183          *  No
 184          *
 185          *******************************************************************************/
 186          void I2C_1_Sleep(void) 
 187          {
 188   1          #if(I2C_1_WAKEUP_ENABLED)
                      /* The I2C block should be always enabled if used as wakeup source */
                      I2C_1_backup.enableState = I2C_1_DISABLE;
              
                      #if(I2C_1_TIMEOUT_ENABLED)
                          I2C_1_TimeoutStop();
                      #endif /* (I2C_1_TIMEOUT_ENABLED) */
              
                  #else
 197   1      
 198   1              I2C_1_backup.enableState = ((uint8) I2C_1_IS_ENABLED);
 199   1      
 200   1              if(I2C_1_IS_ENABLED)
 201   1              {
 202   2                  I2C_1_Stop();
 203   2              }
 204   1          #endif /* (I2C_1_WAKEUP_ENABLED) */
 205   1      
 206   1          I2C_1_SaveConfig();
 207   1      }
 208          
 209          
 210          /*******************************************************************************
 211          * Function Name: I2C_1_RestoreConfig
 212          ********************************************************************************
 213          *
 214          * Summary:
 215          *  Wakeup on address match enabled: enables I2C Master (if was enabled before go
 216          *  to sleep), disables I2C backup regulator.
 217          *  Wakeup on address match disabled: Restores I2C configuration and
 218          *  non-retention register values.
 219          *
 220          * Parameters:
 221          *  None
 222          *
 223          * Return:
 224          *  None
 225          *
 226          * Global Variables:
 227          *  I2C_1_backup - used to save component configuration and
 228          *  none-retention registers before exit sleep mode.
 229          *
 230          *******************************************************************************/
 231          void I2C_1_RestoreConfig(void) 
 232          {
 233   1          #if(I2C_1_FF_IMPLEMENTED)
 234   1              uint8 enableInterrupts;
 235   1      
 236   1              if(I2C_1_CHECK_PWRSYS_I2C_BACKUP)    /* Enabled if was in Sleep */
 237   1              {
 238   2                  /* Disable back-up regulator */
C51 COMPILER V9.03   I2C_1_PM                                                              07/27/2013 12:49:50 PAGE 5   

 239   2                  enableInterrupts = CyEnterCriticalSection();
 240   2                  I2C_1_PWRSYS_CR1_REG &= ((uint8) ~I2C_1_PWRSYS_CR1_I2C_REG_BACKUP);
 241   2                  CyExitCriticalSection(enableInterrupts);
 242   2      
 243   2                  /* Re-enable Master */
 244   2                  I2C_1_CFG_REG = I2C_1_backup.cfg;
 245   2              }
 246   1              else /* The I2C_REG_BACKUP was cleaned by PM API: it means Hibernate or wake-up not set */
 247   1              {
 248   2                  #if(I2C_1_WAKEUP_ENABLED)
                              /* Disable power to I2C block before register restore */
                              enableInterrupts = CyEnterCriticalSection();
                              I2C_1_ACT_PWRMGR_REG  &= ((uint8) ~I2C_1_ACT_PWR_EN);
                              I2C_1_STBY_PWRMGR_REG &= ((uint8) ~I2C_1_STBY_PWR_EN);
                              CyExitCriticalSection(enableInterrupts);
              
                              /* Enable component after restore complete */
                              I2C_1_backup.enableState = I2C_1_ENABLE;
                          #endif /* (I2C_1_WAKEUP_ENABLED) */
 258   2      
 259   2                  /* Restore component registers: Hibernate disable power */
 260   2                  I2C_1_XCFG_REG = I2C_1_backup.xcfg;
 261   2                  I2C_1_CFG_REG  = I2C_1_backup.cfg;
 262   2      
 263   2                  #if(I2C_1_MODE_SLAVE_ENABLED)
                              I2C_1_ADDR_REG = I2C_1_backup.addr;
                          #endif /* (I2C_1_MODE_SLAVE_ENABLED) */
 266   2      
 267   2                  #if(CY_PSOC5A)
                              I2C_1_CLKDIV_REG  = I2C_1_backup.clkDiv;
                          #else
 270   2                      I2C_1_CLKDIV1_REG = I2C_1_backup.clkDiv1;
 271   2                      I2C_1_CLKDIV2_REG = I2C_1_backup.clkDiv2;
 272   2                  #endif /* (CY_PSOC5A) */
 273   2              }
 274   1      
 275   1              #if(I2C_1_WAKEUP_ENABLED)
                          I2C_1_DisableInt();
                          (void) CyIntSetVector(I2C_1_ISR_NUMBER, &I2C_1_ISR);
                          if(0u != I2C_1_wakeupSource)
                          {
                              I2C_1_SetPendingInt();   /* Generate interrupt to process incomming transcation */
                          }
                          I2C_1_EnableInt();
                      #endif /* (I2C_1_WAKEUP_ENABLED) */
 284   1      
 285   1          #else
              
                      #if(CY_UDB_V0)
                          uint8 enableInterrupts;
              
                          I2C_1_INT_MASK_REG |= I2C_1_backup.intMask;
              
                          enableInterrupts = CyEnterCriticalSection();
                          I2C_1_INT_ENABLE_REG |= I2C_1_INT_ENABLE_MASK;
                          CyExitCriticalSection(enableInterrupts);
              
                          #if(I2C_1_MODE_MASTER_ENABLED)
                              /* Restore Master Clock generator */
                              I2C_1_MCLK_PRD_REG = I2C_1_DEFAULT_MCLK_PRD;
                              I2C_1_MCLK_CMP_REG = I2C_1_DEFAULT_MCLK_CMP;
                          #endif /* (I2C_1_MODE_MASTER_ENABLED) */
C51 COMPILER V9.03   I2C_1_PM                                                              07/27/2013 12:49:50 PAGE 6   

              
                          #if(I2C_1_MODE_SLAVE_ENABLED)
                              I2C_1_ADDR_REG = I2C_1_backup.addr;
              
                              /* Restore slave bit counter period */
                              I2C_1_PERIOD_REG = I2C_1_DEFAULT_PERIOD;
                          #endif /* (I2C_1_MODE_SLAVE_ENABLED) */
              
                      #endif /* (CY_UDB_V0) */
              
                      I2C_1_CFG_REG = I2C_1_backup.control;
              
                  #endif /* (I2C_1_FF_IMPLEMENTED) */
 314   1      
 315   1          #if(I2C_1_TIMEOUT_ENABLED)
                      I2C_1_TimeoutRestoreConfig();
                  #endif /* (I2C_1_TIMEOUT_ENABLED) */
 318   1      }
 319          
 320          
 321          /*******************************************************************************
 322          * Function Name: I2C_1_Wakeup
 323          ********************************************************************************
 324          *
 325          * Summary:
 326          *  Wakeup on address match enabled: enables I2C Master (if was enabled before go
 327          *  to sleep) and disables I2C backup regulator.
 328          *  Wakeup on address match disabled: Restores I2C configuration and
 329          *  non-retention register values. Restores Active mode power template bits or
 330          *  clock gating as appropriate.
 331          *  The I2C interrupt remains disabled after function call.
 332          *
 333          * Parameters:
 334          *  None
 335          *
 336          * Return:
 337          *  None
 338          *
 339          * Reentrant:
 340          *  No
 341          *
 342          *******************************************************************************/
 343          void I2C_1_Wakeup(void) 
 344          {
 345   1          I2C_1_RestoreConfig();   /* Restore I2C register settings */
 346   1      
 347   1          /* Restore component enable state */
 348   1          if(0u != I2C_1_backup.enableState)
 349   1          {
 350   2              I2C_1_Enable();
 351   2              I2C_1_EnableInt();
 352   2          }
 353   1          else
 354   1          {
 355   2              #if(I2C_1_TIMEOUT_ENABLED)
                          I2C_1_TimeoutEnable();
                      #endif /* (I2C_1_TIMEOUT_ENABLED) */
 358   2          }
 359   1      }
 360          
 361          
 362          /* [] END OF FILE */
C51 COMPILER V9.03   I2C_1_PM                                                              07/27/2013 12:49:50 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION I2C_1_SaveConfig (BEGIN)
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 102
0000 9049D6            MOV     DPTR,#049D6H
0003 E0                MOVX    A,@DPTR
0004 900000      R     MOV     DPTR,#I2C_1_backup+02H
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
0008 9049C8            MOV     DPTR,#049C8H
000B E0                MOVX    A,@DPTR
000C 900000      R     MOV     DPTR,#I2C_1_backup+01H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
0010 9049DB            MOV     DPTR,#049DBH
0013 E0                MOVX    A,@DPTR
0014 900000      R     MOV     DPTR,#I2C_1_backup+03H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
0018 9049DC            MOV     DPTR,#049DCH
001B E0                MOVX    A,@DPTR
001C 900000      R     MOV     DPTR,#I2C_1_backup+04H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
0020 22                RET     
             ; FUNCTION I2C_1_SaveConfig (END)

             ; FUNCTION I2C_1_Sleep (BEGIN)
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 198
0000 9043A5            MOV     DPTR,#043A5H
0003 E0                MOVX    A,@DPTR
0004 30E204            JNB     ACC.2,?C0002
0007 7F01              MOV     R7,#01H
0009 8002              SJMP    ?C0003
000B         ?C0002:
000B 7F00              MOV     R7,#00H
000D         ?C0003:
000D 900000      R     MOV     DPTR,#I2C_1_backup
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
0012 9043A5            MOV     DPTR,#043A5H
0015 E0                MOVX    A,@DPTR
0016 30E203            JNB     ACC.2,?C0004
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 202
0019 120000      E     LCALL   I2C_1_Stop
                                           ; SOURCE LINE # 203
001C         ?C0004:
                                           ; SOURCE LINE # 206
001C 120000      R     LCALL   I2C_1_SaveConfig
                                           ; SOURCE LINE # 207
001F 22                RET     
             ; FUNCTION I2C_1_Sleep (END)

             ; FUNCTION I2C_1_RestoreConfig (BEGIN)
                                           ; SOURCE LINE # 231
C51 COMPILER V9.03   I2C_1_PM                                                              07/27/2013 12:49:50 PAGE 8   

                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 236
0000 904331            MOV     DPTR,#04331H
0003 E0                MOVX    A,@DPTR
0004 5404              ANL     A,#04H
0006 6016              JZ      ?C0006
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 239
0008 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'enableInterrupts' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 240
000B 904331            MOV     DPTR,#04331H
000E E0                MOVX    A,@DPTR
000F 54FB              ANL     A,#0FBH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 241
0012 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 244
0015 900000      R     MOV     DPTR,#I2C_1_backup+02H
0018 E0                MOVX    A,@DPTR
0019 9049D6            MOV     DPTR,#049D6H
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 245
001D 22                RET     
001E         ?C0006:
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 260
001E 900000      R     MOV     DPTR,#I2C_1_backup+01H
0021 E0                MOVX    A,@DPTR
0022 9049C8            MOV     DPTR,#049C8H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 261
0026 900000      R     MOV     DPTR,#I2C_1_backup+02H
0029 E0                MOVX    A,@DPTR
002A 9049D6            MOV     DPTR,#049D6H
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 270
002E 900000      R     MOV     DPTR,#I2C_1_backup+03H
0031 E0                MOVX    A,@DPTR
0032 9049DB            MOV     DPTR,#049DBH
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 271
0036 900000      R     MOV     DPTR,#I2C_1_backup+04H
0039 E0                MOVX    A,@DPTR
003A 9049DC            MOV     DPTR,#049DCH
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 318
003E         ?C0008:
003E 22                RET     
             ; FUNCTION I2C_1_RestoreConfig (END)

             ; FUNCTION I2C_1_Wakeup (BEGIN)
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 345
0000 120000      R     LCALL   I2C_1_RestoreConfig
                                           ; SOURCE LINE # 348
0003 900000      R     MOV     DPTR,#I2C_1_backup
0006 E0                MOVX    A,@DPTR
0007 6009              JZ      ?C0011
                                           ; SOURCE LINE # 349
C51 COMPILER V9.03   I2C_1_PM                                                              07/27/2013 12:49:50 PAGE 9   

                                           ; SOURCE LINE # 350
0009 120000      E     LCALL   I2C_1_Enable
                                           ; SOURCE LINE # 351
000C 9044C1            MOV     DPTR,#044C1H
000F 7480              MOV     A,#080H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
0012         ?C0011:
0012 22                RET     
             ; FUNCTION I2C_1_Wakeup (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    147    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
