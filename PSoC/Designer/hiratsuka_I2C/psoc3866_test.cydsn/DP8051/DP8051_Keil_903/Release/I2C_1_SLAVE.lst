C51 COMPILER V9.03   I2C_1_SLAVE                                                           07/27/2013 12:49:50 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE I2C_1_SLAVE
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Release\I2C_1_SLAVE.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.2\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\I2C_1_SLAVE.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Release\I2C_1_SLAVE.lst) CD DB
                    - NOIP OT(8,SIZE) DF(NDEBUG) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Release\I2C_1_SLAVE.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /*******************************************************************************
   2          * File Name: I2C_1_SLAVE.c
   3          * Version 3.30
   4          *
   5          * Description:
   6          *  This file provides the source code of APIs for the I2C component Slave mode.
   7          *
   8          * Note:
   9          *
  10          *******************************************************************************
  11          * Copyright 2012, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "I2C_1_PVT.h"
  18          
  19          #if(I2C_1_MODE_SLAVE_ENABLED)
              
              /**********************************
              *      System variables
              **********************************/
              
              volatile uint8 I2C_1_slStatus;   /* Slave Status  */
              
              /* Transmit buffer variables */
              volatile uint8 * I2C_1_slRdBufPtr;   /* Pointer to Transmit buffer  */
              volatile uint8   I2C_1_slRdBufSize;  /* Slave Transmit buffer size  */
              volatile uint8   I2C_1_slRdBufIndex; /* Slave Transmit buffer Index */
              
              /* Receive buffer variables */
              volatile uint8 * I2C_1_slWrBufPtr;   /* Pointer to Receive buffer  */
              volatile uint8   I2C_1_slWrBufSize;  /* Slave Receive buffer size  */
              volatile uint8   I2C_1_slWrBufIndex; /* Slave Receive buffer Index */
              
              #if(I2C_1_SW_ADRR_DECODE)
                  volatile uint8 I2C_1_slAddress;  /* Software address variable */
              #endif   /* (I2C_1_SW_ADRR_DECODE) */
              
              
              /*******************************************************************************
              * Function Name: I2C_1_SlaveStatus
              ********************************************************************************
              *
              * Summary:
              *  Returns I2C slave's communication status.
              *
              * Parameters:
              *  None
              *
              * Return:
C51 COMPILER V9.03   I2C_1_SLAVE                                                           07/27/2013 12:49:50 PAGE 2   

              *  Current status of I2C slave.
              *
              * Global variables:
              *  I2C_1_slStatus  - used to store current status of I2C slave.
              *
              *******************************************************************************/
              uint8 I2C_1_SlaveStatus(void) 
              {
                  return(I2C_1_slStatus);
              }
              
              
              /*******************************************************************************
              * Function Name: I2C_1_SlaveClearReadStatus
              ********************************************************************************
              *
              * Summary:
              *  Clears the read status flags and returns they values.
              *  The I2C_1_SSTAT_RD_BUSY flag is not effected by clear.
              *
              * Parameters:
              *  None
              *
              * Return:
              *  Current read status of I2C slave.
              *
              * Global variables:
              *  I2C_1_slStatus  - used to store current status of I2C slave.
              *
              * Reentrant:
              *  No
              *
              *******************************************************************************/
              uint8 I2C_1_SlaveClearReadStatus(void) 
              {
                  uint8 status;
              
                  /* Mask of transfer complete flag and Error status */
                  status = (I2C_1_slStatus & I2C_1_SSTAT_RD_MASK);
                  I2C_1_slStatus &= ((uint8) ~I2C_1_SSTAT_RD_CLEAR);
              
                  return(status);
              }
              
              
              /*******************************************************************************
              * Function Name: I2C_1_SlaveClearWriteStatus
              ********************************************************************************
              *
              * Summary:
              *  Clears the write status flags and returns they values.
              *  The I2C_1_SSTAT_WR_BUSY flag is not effected by clear.
              *
              * Parameters:
              *  None
              *
              * Return:
              *  Current write status of I2C slave.
              *
              * Global variables:
              *  I2C_1_slStatus  - used to store current status of I2C slave.
              *
C51 COMPILER V9.03   I2C_1_SLAVE                                                           07/27/2013 12:49:50 PAGE 3   

              * Reentrant:
              *  No
              *
              *******************************************************************************/
              uint8 I2C_1_SlaveClearWriteStatus(void) 
              {
                  uint8 status;
              
                  /* Mask of transfer complete flag and Error status */
                  status = (I2C_1_slStatus & I2C_1_SSTAT_WR_MASK);
                  I2C_1_slStatus &= ((uint8) ~I2C_1_SSTAT_WR_CLEAR);
              
                  return(status);
              }
              
              
              /*******************************************************************************
              * Function Name: I2C_1_SlaveSetAddress
              ********************************************************************************
              *
              * Summary:
              *  Sets the I2C slave address.
              *
              * Parameters:
              *  address: I2C slave address for the primary device. This value may be any
              *  address between 0 and 127.
              *
              * Return:
              *  None
              *
              * Global variables:
              *  I2C_1_Address  - used to store I2C slave address for the primary
              *  device when software address detect feature is used.
              *
              * Reentrant:
              *  No
              *
              *******************************************************************************/
              void I2C_1_SlaveSetAddress(uint8 address) 
              {
                  #if(I2C_1_SW_ADRR_DECODE)
                      I2C_1_slAddress = (address & I2C_1_SLAVE_ADDR_MASK);
                  #else
                      I2C_1_ADDR_REG  = (address & I2C_1_SLAVE_ADDR_MASK);
                  #endif /* (I2C_1_SW_ADRR_DECODE) */
              }
              
              
              /*******************************************************************************
              * Function Name: I2C_1_SlaveInitReadBuf
              ********************************************************************************
              *
              * Summary:
              *  Sets the buffer pointer and size of the read buffer. This function also
              *  resets the transfer count returned with the I2C_SlaveGetReadBufSize function.
              *
              * Parameters:
              *  readBuf:  Pointer to the data buffer to be read by the master.
              *  bufSize:  Size of the read buffer exposed to the I2C master.
              *
              * Return:
              *  None
C51 COMPILER V9.03   I2C_1_SLAVE                                                           07/27/2013 12:49:50 PAGE 4   

              *
              * Global variables:
              *  I2C_1_slRdBufPtr   - used to store pointer to slave read buffer.
              *  I2C_1_slRdBufSize  - used to store salve read buffer size.
              *  I2C_1_slRdBufIndex - used to store current index within slave
              *  read buffer.
              *
              * Side Effects:
              *  If this function is called during a bus transaction, data from the previous
              *  buffer location and the beginning of current buffer may be transmitted.
              *
              * Reentrant:
              *  No
              *
              *******************************************************************************/
              void I2C_1_SlaveInitReadBuf(uint8 * rdBuf, uint8 bufSize)
                   
              {
                  /* Check for proper buffer */
                  if(NULL != rdBuf)
                  {
                      I2C_1_slRdBufPtr   = (volatile uint8 *) rdBuf;    /* Set buffer pointer */
                      I2C_1_slRdBufSize  = bufSize;    /* Set buffer size */
                      I2C_1_slRdBufIndex = 0u;         /* Clears buffer index */
                  }
              }
              
              
              /*******************************************************************************
              * Function Name: I2C_1_SlaveInitWriteBuf
              ********************************************************************************
              *
              * Summary:
              *  Sets the buffer pointer and size of the read buffer. This function also
              *  resets the transfer count returned with the I2C_SlaveGetReadBufSize function.
              *
              * Parameters:
              *  writeBuf:  Pointer to the data buffer to be read by the master.
              *  bufSize:  Size of the buffer exposed to the I2C master.
              *
              * Return:
              *  None
              *
              * Global variables:
              *  I2C_1_slWrBufPtr   - used to store pointer to slave write buffer.
              *  I2C_1_slWrBufSize  - used to store salve write buffer size.
              *  I2C_1_slWrBufIndex - used to store current index within slave
              *  write buffer.
              *
              * Side Effects:
              *  If this function is called during a bus transaction, data from the previous
              *  buffer location and the beginning of current buffer may be transmitted.
              *
              * Reentrant:
              *  No
              *
              *******************************************************************************/
              void I2C_1_SlaveInitWriteBuf(uint8 * wrBuf, uint8 bufSize)
                   
              {
                  /* Check for proper buffer */
                  if(NULL != wrBuf)
C51 COMPILER V9.03   I2C_1_SLAVE                                                           07/27/2013 12:49:50 PAGE 5   

                  {
                      I2C_1_slWrBufPtr   = (volatile uint8 *) wrBuf;  /* Set buffer pointer */
                      I2C_1_slWrBufSize  = bufSize;   /* Set buffer size */
                      I2C_1_slWrBufIndex = 0u;        /* Clears buffer index */
                  }
              }
              
              
              /*******************************************************************************
              * Function Name: I2C_1_SlaveGetReadBufSize
              ********************************************************************************
              *
              * Summary:
              *  Returns the number of bytes read by the I2C master since an
              *  I2C_SlaveInitReadBuf or I2C_SlaveClearReadBuf function was executed.
              *  The maximum return value will be the size of the read buffer.
              *
              * Parameters:
              *  None
              *
              * Return:
              *  Bytes read by master.
              *
              * Global variables:
              *  I2C_1_slRdBufIndex - used to store current index within slave
              *  read buffer.
              *
              *******************************************************************************/
              uint8 I2C_1_SlaveGetReadBufSize(void) 
              {
                  return(I2C_1_slRdBufIndex);
              }
              
              
              /*******************************************************************************
              * Function Name: I2C_1_SlaveGetWriteBufSize
              ********************************************************************************
              *
              * Summary:
              *  Returns the number of bytes written by the I2C master since an
              *  I2C_SlaveInitWriteBuf or I2C_SlaveClearWriteBuf function was executed.
              *  The maximum return value will be the size of the write buffer.
              *
              * Parameters:
              *  None
              *
              * Return:
              *  Bytes written by master.
              *
              * Global variables:
              *  I2C_1_slWrBufIndex - used to store current index within slave
              *  write buffer.
              *
              *******************************************************************************/
              uint8 I2C_1_SlaveGetWriteBufSize(void) 
              {
                  return(I2C_1_slWrBufIndex);
              }
              
              
              /*******************************************************************************
              * Function Name: I2C_1_SlaveClearReadBuf
C51 COMPILER V9.03   I2C_1_SLAVE                                                           07/27/2013 12:49:50 PAGE 6   

              ********************************************************************************
              *
              * Summary:
              *  Resets the read pointer to the first byte in the read buffer. The next byte
              *  read by the master will be the first byte in the read buffer.
              *
              * Parameters:
              *  None
              *
              * Return:
              *  None
              *
              * Global variables:
              *  I2C_1_slRdBufIndex - used to store current index within slave
              *  read buffer.
              *
              * Reentrant:
              *  No
              *
              *******************************************************************************/
              void I2C_1_SlaveClearReadBuf(void) 
              {
                  I2C_1_slRdBufIndex = 0u;
              }
              
              
              /*******************************************************************************
              * Function Name: I2C_1_SlaveClearRxBuf
              ********************************************************************************
              *
              * Summary:
              *  Resets the write pointer to the first byte in the write buffer. The next byte
              *  written by the master will be the first byte in the write buffer.
              *
              * Parameters:
              *  None
              *
              * Return:
              *  None
              *
              * Global variables:
              *  I2C_1_slWrBufIndex - used to store current index within slave
              *  write buffer.
              *
              * Reentrant:
              *  No
              *
              *******************************************************************************/
              void I2C_1_SlaveClearWriteBuf(void) 
              {
                  I2C_1_slWrBufIndex = 0u;
              }
              
              #endif /* (I2C_1_MODE_SLAVE_ENABLED) */
 355          
 356          
 357          /* [] END OF FILE */
C51 COMPILER V9.03   I2C_1_SLAVE                                                           07/27/2013 12:49:50 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
