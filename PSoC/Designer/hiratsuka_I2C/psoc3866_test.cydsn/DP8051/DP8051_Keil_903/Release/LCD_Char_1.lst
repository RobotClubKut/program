C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE LCD_CHAR_1
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Release\LCD_Char_1.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.2\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\LCD_Char_1.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Release\LCD_Char_1.lst) CD DB N
                    -OIP OT(8,SIZE) DF(NDEBUG) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Release\LCD_Char_1.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /*******************************************************************************
   2          * File Name: LCD_Char_1.c
   3          * Version 1.90
   4          *
   5          * Description:
   6          *  This file provides source code for the Character LCD component's API.
   7          *
   8          * Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "CyLib.h"
  18          #include "LCD_Char_1.h"
  19          
  20          
  21          static void LCD_Char_1_WrDatNib(uint8 nibble) ;
  22          static void LCD_Char_1_WrCntrlNib(uint8 nibble) ;
  23          
  24          /* Stores the state of conponent. Indicates wherewer component is 
  25          * in enable state or not.
  26          */
  27          uint8 LCD_Char_1_enableState = 0u;
  28          
  29          uint8 LCD_Char_1_initVar = 0u;
  30          
  31          
  32          /*******************************************************************************
  33          * Function Name: LCD_Char_1_Init
  34          ********************************************************************************
  35          *
  36          * Summary:
  37          *  Perform initialization required for components normal work.
  38          *  This function initializes the LCD hardware module as follows:
  39          *        Enable 4-bit interface
  40          *        Clear the display
  41          *        Enable auto cursor increment
  42          *        Resets the cursor to start position
  43          *  Also loads custom character set to LCD if it was defined in the customizer.
  44          *
  45          * Parameters:
  46          *  None.
  47          *
  48          * Return:
  49          *  None.
  50          *
  51          * Reentrant:
  52          *  No.
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 2   

  53          *
  54          *******************************************************************************/
  55          void LCD_Char_1_Init(void) 
  56          {
  57   1          /* INIT CODE */
  58   1          CyDelay(40u);                                                        /* Delay 40 ms */
  59   1          LCD_Char_1_WrCntrlNib(LCD_Char_1_DISPLAY_8_BIT_INIT);    /* Selects 8-bit mode */
  60   1          CyDelay(5u);                                                         /* Delay 5 ms */
  61   1          LCD_Char_1_WrCntrlNib(LCD_Char_1_DISPLAY_8_BIT_INIT);    /* Selects 8-bit mode */
  62   1          CyDelay(15u);                                                        /* Delay 15 ms */
  63   1          LCD_Char_1_WrCntrlNib(LCD_Char_1_DISPLAY_8_BIT_INIT);    /* Selects 8-bit mode */
  64   1          CyDelay(1u);                                                         /* Delay 1 ms */
  65   1          LCD_Char_1_WrCntrlNib(LCD_Char_1_DISPLAY_4_BIT_INIT);    /* Selects 4-bit mode */
  66   1          CyDelay(5u);                                                         /* Delay 5 ms */
  67   1      
  68   1          LCD_Char_1_WriteControl(LCD_Char_1_CURSOR_AUTO_INCR_ON);    /* Incr Cursor After Writes */
  69   1          LCD_Char_1_WriteControl(LCD_Char_1_DISPLAY_CURSOR_ON);      /* Turn Display, Cursor ON */
  70   1          LCD_Char_1_WriteControl(LCD_Char_1_DISPLAY_2_LINES_5x10);   /* 2 Lines by 5x10 Characters */
  71   1          LCD_Char_1_WriteControl(LCD_Char_1_DISPLAY_CURSOR_OFF);     /* Turn Display, Cursor OFF */
  72   1          LCD_Char_1_WriteControl(LCD_Char_1_CLEAR_DISPLAY);          /* Clear LCD Screen */
  73   1          LCD_Char_1_WriteControl(LCD_Char_1_DISPLAY_ON_CURSOR_OFF);  /* Turn Display ON, Cursor OFF */
  74   1          LCD_Char_1_WriteControl(LCD_Char_1_RESET_CURSOR_POSITION);  /* Set Cursor to 0,0 */
  75   1          CyDelay(5u);
  76   1      
  77   1          #if(LCD_Char_1_CUSTOM_CHAR_SET != LCD_Char_1_NONE)
                      LCD_Char_1_LoadCustomFonts(LCD_Char_1_customFonts);
                  #endif /* LCD_Char_1_CUSTOM_CHAR_SET != LCD_Char_1_NONE */
  80   1      }
  81          
  82          
  83          /*******************************************************************************
  84          * Function Name: LCD_Char_1_Enable
  85          ********************************************************************************
  86          *
  87          * Summary:
  88          *  Turns on the display.
  89          *
  90          * Parameters:
  91          *  None.
  92          *
  93          * Return:
  94          *  None.
  95          *
  96          * Reentrant:
  97          *  No.
  98          *
  99          * Theory:
 100          *  This finction has no effect when it called first time as
 101          *  LCD_Char_1_Init() turns on the LCD.
 102          *
 103          *******************************************************************************/
 104          void LCD_Char_1_Enable(void) 
 105          {
 106   1          LCD_Char_1_DisplayOn();
 107   1          LCD_Char_1_enableState = 1u;
 108   1      }
 109          
 110          
 111          /*******************************************************************************
 112          * Function Name: LCD_Char_1_Start
 113          ********************************************************************************
 114          *
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 3   

 115          * Summary:
 116          *  Perform initialization required for components normal work.
 117          *  This function initializes the LCD hardware module as follows:
 118          *        Enable 4-bit interface
 119          *        Clear the display
 120          *        Enable auto cursor increment
 121          *        Resets the cursor to start position
 122          *  Also loads custom character set to LCD if it was defined in the customizer.
 123          *  If it was not the first call in this project then it just turns on the
 124          *  display
 125          *
 126          *
 127          * Parameters:
 128          *  LCD_Char_1_initVar - global variable.
 129          *
 130          * Return:
 131          *  LCD_Char_1_initVar - global variable.
 132          *
 133          * Reentrant:
 134          *  No.
 135          *
 136          *******************************************************************************/
 137          void LCD_Char_1_Start(void) 
 138          {
 139   1          /* If not initialized then perform initialization */
 140   1          if(LCD_Char_1_initVar == 0u)
 141   1          {
 142   2              LCD_Char_1_Init();
 143   2              LCD_Char_1_initVar = 1u;
 144   2          }
 145   1      
 146   1          /* Turn on the LCD */
 147   1          LCD_Char_1_Enable();
 148   1      }
 149          
 150          
 151          /*******************************************************************************
 152          * Function Name: LCD_Char_1_Stop
 153          ********************************************************************************
 154          *
 155          * Summary:
 156          *  Turns off the display of the LCD screen.
 157          *
 158          * Parameters:
 159          *  None.
 160          *
 161          * Return:
 162          *  None.
 163          *
 164          * Reentrant:
 165          *  No.
 166          *
 167          *******************************************************************************/
 168          void LCD_Char_1_Stop(void) 
 169          {
 170   1          /* Calls LCD Off Macro */
 171   1          LCD_Char_1_DisplayOff();
 172   1          LCD_Char_1_enableState = 0u;
 173   1      }
 174          
 175          
 176          /*******************************************************************************
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 4   

 177          *  Function Name: LCD_Char_1_Position
 178          ********************************************************************************
 179          *
 180          * Summary:
 181          *  Moves active cursor location to a point specified by the input arguments
 182          *
 183          * Parameters:
 184          *  row:     Specific row of LCD module to be written
 185          *  column:  Column of LCD module to be written
 186          *
 187          * Return:
 188          *  None.
 189          *
 190          * Note:
 191          *  This only applies for LCD displays which use the 2X40 address mode.
 192          *  This results in Row 2 offset from row one by 0x28.
 193          *  When there are more than 2 rows, each row must be fewer than 20 characters.
 194          *
 195          *******************************************************************************/
 196          void LCD_Char_1_Position(uint8 row, uint8 column) 
 197          {
 198   1          switch (row)
 199   1          {
 200   2              case (uint8)0:
 201   2                  LCD_Char_1_WriteControl(LCD_Char_1_ROW_0_START + column);
 202   2                  break;
 203   2              case (uint8) 1:
 204   2                  LCD_Char_1_WriteControl(LCD_Char_1_ROW_1_START + column);
 205   2                  break;
 206   2              case (uint8) 2:
 207   2                  LCD_Char_1_WriteControl(LCD_Char_1_ROW_2_START + column);
 208   2                  break;
 209   2              case (uint8) 3:
 210   2                  LCD_Char_1_WriteControl(LCD_Char_1_ROW_3_START + column);
 211   2                  break;
 212   2              default:
 213   2                  /* if default case is hit, invalid row argument was passed.*/
 214   2                  break;
 215   2          }
 216   1      }
 217          
 218          
 219          /*******************************************************************************
 220          * Function Name: LCD_Char_1_PrintString
 221          ********************************************************************************
 222          *
 223          * Summary:
 224          *  Writes a zero terminated string to the LCD.
 225          *
 226          * Parameters:
 227          *  string:  pointer to head of char8 array to be written to the LCD module
 228          *
 229          * Return:
 230          *  None.
 231          *
 232          *******************************************************************************/
 233          void LCD_Char_1_PrintString(char8 const string[]) 
 234          {
 235   1          uint8 indexU8 = 1u;
 236   1          char8 current = *string;
 237   1      
 238   1          /* Until null is reached, print next character */
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 5   

 239   1          while((char8) '\0' != current)
 240   1          {
 241   2              LCD_Char_1_WriteData((uint8)current);
 242   2              current = string[indexU8];
 243   2              indexU8++;
 244   2          }
 245   1      }
 246          
 247          
 248          /*******************************************************************************
 249          *  Function Name: LCD_Char_1_PutChar
 250          ********************************************************************************
 251          *
 252          * Summary:
 253          *  Writes a single character to the current cursor position of the LCD module.
 254          *  Custom character names (_CUSTOM_0 through
 255          *  _CUSTOM_7) are acceptable as inputs.
 256          *
 257          * Parameters:
 258          *  character:  character to be written to the LCD
 259          *
 260          * Return:
 261          *  None.
 262          *
 263          *******************************************************************************/
 264          void LCD_Char_1_PutChar(char8 character) 
 265          {
 266   1          LCD_Char_1_WriteData((uint8)character);
 267   1      }
 268          
 269          
 270          /*******************************************************************************
 271          *  Function Name: LCD_Char_1_WriteData
 272          ********************************************************************************
 273          *
 274          * Summary:
 275          *  Writes a data byte to the LCD module's Data Display RAM.
 276          *
 277          * Parameters:
 278          *  dByte:  byte to be written to LCD module.
 279          *
 280          * Return:
 281          *  None.
 282          *
 283          *******************************************************************************/
 284          void LCD_Char_1_WriteData(uint8 dByte) 
 285          {
 286   1          uint8 nibble;
 287   1      
 288   1          LCD_Char_1_IsReady();
 289   1          nibble = dByte >> LCD_Char_1_NIBBLE_SHIFT;
 290   1      
 291   1          /* Write high nibble */
 292   1          LCD_Char_1_WrDatNib(nibble);
 293   1      
 294   1          nibble = dByte & LCD_Char_1_NIBBLE_MASK;
 295   1          /* Write low nibble */
 296   1          LCD_Char_1_WrDatNib(nibble);
 297   1      }
 298          
 299          
 300          /*******************************************************************************
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 6   

 301          *  Function Name: LCD_Char_1_WriteControl
 302          ********************************************************************************
 303          *
 304          * Summary:
 305          *  Writes a command byte to the LCD module.
 306          *
 307          * Parameters:
 308          *  cByte:   byte to be written to LCD module.
 309          *
 310          * Return:
 311          *  None.
 312          *
 313          *******************************************************************************/
 314          void LCD_Char_1_WriteControl(uint8 cByte) 
 315          {
 316   1          uint8 nibble;
 317   1      
 318   1          LCD_Char_1_IsReady();
 319   1      
 320   1          nibble = cByte >> LCD_Char_1_NIBBLE_SHIFT;
 321   1          
 322   1          /* WrCntrlNib(High Nibble) */
 323   1          LCD_Char_1_WrCntrlNib(nibble);
 324   1          nibble = cByte & LCD_Char_1_NIBBLE_MASK;
 325   1      
 326   1          /* WrCntrlNib(Low Nibble) */
 327   1          LCD_Char_1_WrCntrlNib(nibble);
 328   1      }
 329          
 330          
 331          /*******************************************************************************
 332          * Function Name: LCD_Char_1_IsReady
 333          ********************************************************************************
 334          *
 335          * Summary:
 336          *  Polls LCD until the ready bit is set.
 337          *
 338          * Parameters:
 339          *  None.
 340          *
 341          * Return:
 342          *  None.
 343          *
 344          * Note:
 345          *  Changes pins to High-Z.
 346          *
 347          *******************************************************************************/
 348          void LCD_Char_1_IsReady(void) 
 349          {
 350   1          uint8 value;
 351   1      
 352   1          /* Clear the LCD port*/
 353   1          LCD_Char_1_PORT_DR_REG &= ((uint8)(~LCD_Char_1_PORT_MASK));
 354   1      
 355   1          /* PSoC4 has a bit different port/pin organization for setting Drive Modes than
 356   1          * PSoC3/5.
 357   1          */
 358   1          #if (CY_PSOC4)
                      
                      /* Mask off data pins to clear old values out */
                      value = LCD_Char_1_PORT_PC_REG & ((uint32) (~ LCD_Char_1_DM_DATA_MASK));
                      /* Load in high Z values for data pins, others unchanged */
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 7   

                      LCD_Char_1_PORT_PC_REG = value | LCD_Char_1_HIGH_Z_DATA_DM;
              
                  #else
 366   1          
 367   1              /* Change Port to High-Z Status on data pins */
 368   1      
 369   1              /* Mask off data pins to clear old values out */
 370   1              value = LCD_Char_1_PORT_DM0_REG & ((uint8)(~LCD_Char_1_DATA_MASK));
 371   1              /* Load in high Z values for data pins, others unchanged */
 372   1              LCD_Char_1_PORT_DM0_REG = value | (LCD_Char_1_HIGH_Z_DM0 & LCD_Char_1_DATA_MASK);
 373   1      
 374   1              /* Mask off data pins to clear old values out */
 375   1              value = LCD_Char_1_PORT_DM1_REG & ((uint8)(~LCD_Char_1_DATA_MASK));
 376   1              /* Load in high Z values for data pins, others unchanged */
 377   1              LCD_Char_1_PORT_DM1_REG = value;
 378   1      
 379   1              /* Mask off data pins to clear old values out */
 380   1              value = LCD_Char_1_PORT_DM2_REG & ((uint8)(~LCD_Char_1_DATA_MASK));
 381   1              /* Load in high Z values for data pins, others unchanged */
 382   1              LCD_Char_1_PORT_DM2_REG = value;
 383   1          
 384   1          #endif /* CY_PSOC4 */
 385   1          
 386   1          /* Make sure RS is low */
 387   1          LCD_Char_1_PORT_DR_REG &= ((uint8)(~LCD_Char_1_RS));
 388   1      
 389   1          /* Set R/W high to read */
 390   1          LCD_Char_1_PORT_DR_REG |= LCD_Char_1_RW;
 391   1      
 392   1          do
 393   1          {
 394   2              /* 40 ns delay required before rising Enable and 500ns between neighbour Enables */
 395   2              CyDelayUs(0u);
 396   2      
 397   2              /* Set E high */
 398   2              LCD_Char_1_PORT_DR_REG |= LCD_Char_1_E;
 399   2      
 400   2              /* 360 ns delay the setup time for data pins */
 401   2              CyDelayUs(1u);
 402   2      
 403   2              /* Get port state */
 404   2              value = LCD_Char_1_PORT_PS_REG;
 405   2      
 406   2              /* Set enable low */
 407   2              LCD_Char_1_PORT_DR_REG &= ((uint8)(~LCD_Char_1_E));
 408   2      
 409   2              /* This gives a true delay between disably Enable bit and poling Ready bit */
 410   2              CyDelayUs(0u);
 411   2      
 412   2              /* Extract ready bit */
 413   2              value &= LCD_Char_1_READY_BIT;
 414   2      
 415   2              /* Set E high as we in 4-bit interface we need extra oparation */
 416   2              LCD_Char_1_PORT_DR_REG |= LCD_Char_1_E;
 417   2      
 418   2              /* 360 ns delay the setup time for data pins */
 419   2              CyDelayUs(1u);
 420   2      
 421   2              /* Set enable low */
 422   2              LCD_Char_1_PORT_DR_REG &= ((uint8)(~LCD_Char_1_E));
 423   2      
 424   2              /* Repeat until bit 4 is not zero. */
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 8   

 425   2      
 426   2          } while (value != 0u);
 427   1      
 428   1          /* Set R/W low to write */
 429   1          LCD_Char_1_PORT_DR_REG &= ((uint8)(~LCD_Char_1_RW));
 430   1      
 431   1          /* Clear the LCD port*/
 432   1          LCD_Char_1_PORT_DR_REG &= ((uint8)(~LCD_Char_1_PORT_MASK));
 433   1      
 434   1          #if (CY_PSOC4)
                      
                      /* Mask off data pins to clear old values out */
                      value = LCD_Char_1_PORT_PC_REG & ((uint32)(~ LCD_Char_1_DM_DATA_MASK));
                      /* Load in high Z values for data pins, others unchanged */
                      LCD_Char_1_PORT_PC_REG = value | LCD_Char_1_STRONG_DATA_DM;
              
                  #else
 442   1      
 443   1              /* Change Port to Output (Strong) on data pins */
 444   1              /* Mask off data pins to clear high z values out. Configure data pins 
 445   1              * to Strong Drive, others unchanged.
 446   1              */
 447   1              LCD_Char_1_PORT_DM0_REG &= ((uint8)(~LCD_Char_1_DATA_MASK));
 448   1              /* Mask off data pins to clear high z values out */
 449   1              value = LCD_Char_1_PORT_DM1_REG & ((uint8)(~LCD_Char_1_DATA_MASK));
 450   1              /* Configure data pins to Strong Drive, others unchanged */
 451   1              LCD_Char_1_PORT_DM1_REG = value | (LCD_Char_1_STRONG_DM1 & LCD_Char_1_DATA_MASK);
 452   1      
 453   1              /* Mask off data pins to clear high z values out */
 454   1              value = LCD_Char_1_PORT_DM2_REG & ((uint8)(~LCD_Char_1_DATA_MASK));
 455   1              /* Configure data pins to Strong Drive, others unchanged */
 456   1              LCD_Char_1_PORT_DM2_REG = value | (LCD_Char_1_STRONG_DM2 & LCD_Char_1_DATA_MASK);
 457   1          
 458   1          #endif /* CY_PSOC4 */
 459   1      }
 460          
 461          
 462          /*******************************************************************************
 463          *  Function Name: LCD_Char_1_WrDatNib
 464          ********************************************************************************
 465          *
 466          * Summary:
 467          *  Writes a data nibble to the LCD module.
 468          *
 469          * Parameters:
 470          *  nibble:  byte containing nibble in least significant nibble to be written
 471          *           to LCD module.
 472          *
 473          * Return:
 474          *  None.
 475          *
 476          *******************************************************************************/
 477          static void LCD_Char_1_WrDatNib(uint8 nibble) 
 478          {
 479   1          LCD_Char_1_IsReady();
 480   1      
 481   1          /* RS shoul be low to select data register */
 482   1          LCD_Char_1_PORT_DR_REG |= LCD_Char_1_RS;
 483   1          /* Reset RW for write operation */
 484   1          LCD_Char_1_PORT_DR_REG &= ((uint8)(~LCD_Char_1_RW));
 485   1      
 486   1          /* Two following lines of code will provide us with 40ns delay */
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 9   

 487   1          /* Clear data pins */
 488   1          LCD_Char_1_PORT_DR_REG &= ((uint8)(~LCD_Char_1_DATA_MASK));
 489   1      
 490   1          /* Write in data, bring E high*/
 491   1          #if(0u != LCD_Char_1_PORT_SHIFT) /* MISRA forbids shift by 0 so need to handle that */
 492   1              LCD_Char_1_PORT_DR_REG |= 
 493   1                  (LCD_Char_1_E | ((uint8)(((uint8) nibble) << LCD_Char_1_PORT_SHIFT)));
 494   1          #else
                      LCD_Char_1_PORT_DR_REG |= (LCD_Char_1_E | nibble);
                  #endif /* (0u != LCD_Char_1_PORT_SHIFT) */
 497   1      
 498   1          /* Minimum of 230 ns delay */
 499   1          CyDelayUs(1u);
 500   1      
 501   1          LCD_Char_1_PORT_DR_REG &= ((uint8)(~LCD_Char_1_E));
 502   1      }
 503          
 504          
 505          /*******************************************************************************
 506          *  Function Name: LCD_Char_1_WrCntrlNib
 507          ********************************************************************************
 508          *
 509          * Summary:
 510          *  Writes a control nibble to the LCD module.
 511          *
 512          * Parameters:
 513          *  nibble:  byte containing nibble in least significant nibble to be written
 514          *           to LCD module.
 515          *
 516          * Return:
 517          *  None.
 518          *
 519          *******************************************************************************/
 520          static void LCD_Char_1_WrCntrlNib(uint8 nibble) 
 521          {
 522   1          /* RS and RW shoul be low to select instruction register and  write operation respectively */
 523   1          LCD_Char_1_PORT_DR_REG &= ((uint8)(~(LCD_Char_1_RS | LCD_Char_1_RW)));
 524   1      
 525   1          /* Two following lines of code will give provide ua with 40ns delay */
 526   1          /* Clear data pins */
 527   1          LCD_Char_1_PORT_DR_REG &= ((uint8)(~LCD_Char_1_DATA_MASK));
 528   1      
 529   1          /* Write control data and set enable signal */
 530   1          #if(0u != LCD_Char_1_PORT_SHIFT) /* MISRA forbids shift by 0 so need to handle that */
 531   1              LCD_Char_1_PORT_DR_REG |= 
 532   1                  (LCD_Char_1_E | ((uint8)(((uint8) nibble) << LCD_Char_1_PORT_SHIFT)));
 533   1          #else
                      LCD_Char_1_PORT_DR_REG |= (LCD_Char_1_E | nibble);
                  #endif /* (0u != LCD_Char_1_PORT_SHIFT) */
 536   1      
 537   1          /* Minimum of 230 ns delay */
 538   1          CyDelayUs(1u);
 539   1      
 540   1          LCD_Char_1_PORT_DR_REG &= ((uint8)(~LCD_Char_1_E));
 541   1      }
 542          
 543          
 544          #if(LCD_Char_1_CONVERSION_ROUTINES == 1u)
 545          
 546              /*******************************************************************************
 547              *  Function Name: LCD_Char_1_PrintInt8
 548              ********************************************************************************
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 10  

 549              *
 550              * Summary:
 551              *  Print a byte as two ASCII characters.
 552              *
 553              * Parameters:
 554              *  value:  The byte to be printed out as ASCII characters.
 555              *
 556              * Return:
 557              *  None.
 558              *
 559              *******************************************************************************/
 560              void LCD_Char_1_PrintInt8(uint8 value) 
 561              {
 562   1              static char8 const CYCODE LCD_Char_1_hex[16u] = "0123456789ABCDEF";
 563   1              
 564   1              LCD_Char_1_PutChar((char8) LCD_Char_1_hex[value >> LCD_Char_1_BYTE_UPPER_NIBBLE_SHIFT]);
 565   1              LCD_Char_1_PutChar((char8) LCD_Char_1_hex[value & LCD_Char_1_BYTE_LOWER_NIBBLE_MASK]);
 566   1          }
 567          
 568          
 569              /*******************************************************************************
 570              *  Function Name: LCD_Char_1_PrintInt16
 571              ********************************************************************************
 572              *
 573              * Summary:
 574              *  Print a uint16 as four ASCII characters.
 575              *
 576              * Parameters:
 577              *  value:   The uint16 to be printed out as ASCII characters.
 578              *
 579              * Return:
 580              *  None.
 581              *
 582              *******************************************************************************/
 583              void LCD_Char_1_PrintInt16(uint16 value) 
 584              {
 585   1              LCD_Char_1_PrintInt8((uint8)(value >> LCD_Char_1_U16_UPPER_BYTE_SHIFT));
 586   1              LCD_Char_1_PrintInt8((uint8)(value & LCD_Char_1_U16_LOWER_BYTE_MASK));
 587   1          }
 588          
 589          
 590              /*******************************************************************************
 591              *  Function Name: LCD_Char_1_PrintNumber
 592              ********************************************************************************
 593              *
 594              * Summary:
 595              *  Print an uint32 value as a left-justified decimal value.
 596              *
 597              * Parameters:
 598              *  value:  The byte to be printed out as ASCII characters.
 599              *
 600              * Return:
 601              *  None.
 602              *
 603              *******************************************************************************/
 604              void LCD_Char_1_PrintNumber(uint16 value) 
 605              {
 606   1      
 607   1              char8 number[LCD_Char_1_NUMBER_OF_REMAINDERS];
 608   1              char8 temp[LCD_Char_1_NUMBER_OF_REMAINDERS];
 609   1      
 610   1              uint8 digIndex = 0u;
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 11  

 611   1              uint8 numDigits;
 612   1      
 613   1              /* Load these in reverse order */
 614   1              while(value >= LCD_Char_1_TEN)
 615   1              {
 616   2                  temp[digIndex] = (value % LCD_Char_1_TEN) + '0';
 617   2                  value /= LCD_Char_1_TEN;
 618   2                  digIndex++;
 619   2              }
 620   1      
 621   1              temp[digIndex] = (value % LCD_Char_1_TEN) + '0';
 622   1              numDigits = digIndex;
 623   1      
 624   1              /* While index is greater than or equal to zero copy number
 625   1              * from temporary array to number[].
 626   1              */
 627   1              while (digIndex != 0u)
 628   1              {
 629   2                  number[numDigits - digIndex] = temp[digIndex];
 630   2                  digIndex--;
 631   2              }
 632   1              
 633   1              /* Copy last digit */
 634   1              number[numDigits] = temp[0u];
 635   1      
 636   1              /* Null Termination */
 637   1              number[numDigits + 1u] = (char8) '\0';
 638   1      
 639   1              /* Print out number */
 640   1              LCD_Char_1_PrintString(&number[0u]);
 641   1          }
 642          
 643          #endif /* LCD_Char_1_CONVERSION_ROUTINES == 1u */
 644          
 645          
 646          /* [] END OF FILE */
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 12  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION LCD_Char_1_Init (BEGIN)
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 58
0000 E4                CLR     A
0001 7F28              MOV     R7,#028H
0003 FE                MOV     R6,A
0004 FD                MOV     R5,A
0005 FC                MOV     R4,A
0006 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 59
0009 7F03              MOV     R7,#03H
000B 120000      R     LCALL   _LCD_Char_1_WrCntrlNib
                                           ; SOURCE LINE # 60
000E E4                CLR     A
000F 7F05              MOV     R7,#05H
0011 FE                MOV     R6,A
0012 FD                MOV     R5,A
0013 FC                MOV     R4,A
0014 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 61
0017 7F03              MOV     R7,#03H
0019 120000      R     LCALL   _LCD_Char_1_WrCntrlNib
                                           ; SOURCE LINE # 62
001C E4                CLR     A
001D 7F0F              MOV     R7,#0FH
001F FE                MOV     R6,A
0020 FD                MOV     R5,A
0021 FC                MOV     R4,A
0022 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 63
0025 7F03              MOV     R7,#03H
0027 120000      R     LCALL   _LCD_Char_1_WrCntrlNib
                                           ; SOURCE LINE # 64
002A E4                CLR     A
002B 7F01              MOV     R7,#01H
002D FE                MOV     R6,A
002E FD                MOV     R5,A
002F FC                MOV     R4,A
0030 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 65
0033 7F02              MOV     R7,#02H
0035 120000      R     LCALL   _LCD_Char_1_WrCntrlNib
                                           ; SOURCE LINE # 66
0038 E4                CLR     A
0039 7F05              MOV     R7,#05H
003B FE                MOV     R6,A
003C FD                MOV     R5,A
003D FC                MOV     R4,A
003E 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 68
0041 7F06              MOV     R7,#06H
0043 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 69
0046 7F0E              MOV     R7,#0EH
0048 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 70
004B 7F2C              MOV     R7,#02CH
004D 120000      R     LCALL   _LCD_Char_1_WriteControl
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 13  

                                           ; SOURCE LINE # 71
0050 7F08              MOV     R7,#08H
0052 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 72
0055 7F01              MOV     R7,#01H
0057 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 73
005A 7F0C              MOV     R7,#0CH
005C 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 74
005F 7F03              MOV     R7,#03H
0061 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 75
0064 E4                CLR     A
0065 7F05              MOV     R7,#05H
0067 FE                MOV     R6,A
0068 FD                MOV     R5,A
0069 FC                MOV     R4,A
006A 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 80
006D 22                RET     
             ; FUNCTION LCD_Char_1_Init (END)

             ; FUNCTION LCD_Char_1_Enable (BEGIN)
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
0000 7F0C              MOV     R7,#0CH
0002 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 107
0005 900000      R     MOV     DPTR,#LCD_Char_1_enableState
0008 7401              MOV     A,#01H
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
000B 22                RET     
             ; FUNCTION LCD_Char_1_Enable (END)

             ; FUNCTION LCD_Char_1_Start (BEGIN)
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 140
0000 900000      R     MOV     DPTR,#LCD_Char_1_initVar
0003 E0                MOVX    A,@DPTR
0004 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
0006 120000      R     LCALL   LCD_Char_1_Init
                                           ; SOURCE LINE # 143
0009 900000      R     MOV     DPTR,#LCD_Char_1_initVar
000C 7401              MOV     A,#01H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
000F         ?C0003:
                                           ; SOURCE LINE # 147
000F 120000      R     LCALL   LCD_Char_1_Enable
                                           ; SOURCE LINE # 148
0012 22                RET     
             ; FUNCTION LCD_Char_1_Start (END)

             ; FUNCTION LCD_Char_1_Stop (BEGIN)
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 14  

                                           ; SOURCE LINE # 171
0000 7F08              MOV     R7,#08H
0002 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 172
0005 E4                CLR     A
0006 900000      R     MOV     DPTR,#LCD_Char_1_enableState
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
000A 22                RET     
             ; FUNCTION LCD_Char_1_Stop (END)

             ; FUNCTION _LCD_Char_1_Position (BEGIN)
                                           ; SOURCE LINE # 196
0000 900000      R     MOV     DPTR,#column
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
;---- Variable 'row' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
0005 EF                MOV     A,R7
0006 14                DEC     A
0007 6015              JZ      ?C0008
0009 14                DEC     A
000A 601D              JZ      ?C0009
000C 14                DEC     A
000D 6025              JZ      ?C0010
000F 2403              ADD     A,#03H
0011 702B              JNZ     ?C0012
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
0013         ?C0007:
                                           ; SOURCE LINE # 201
0013 900000      R     MOV     DPTR,#column
0016 E0                MOVX    A,@DPTR
0017 2480              ADD     A,#080H
0019 FF                MOV     R7,A
001A 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 202
001D 22                RET     
                                           ; SOURCE LINE # 203
001E         ?C0008:
                                           ; SOURCE LINE # 204
001E 900000      R     MOV     DPTR,#column
0021 E0                MOVX    A,@DPTR
0022 24C0              ADD     A,#0C0H
0024 FF                MOV     R7,A
0025 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 205
0028 22                RET     
                                           ; SOURCE LINE # 206
0029         ?C0009:
                                           ; SOURCE LINE # 207
0029 900000      R     MOV     DPTR,#column
002C E0                MOVX    A,@DPTR
002D 2494              ADD     A,#094H
002F FF                MOV     R7,A
0030 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 208
0033 22                RET     
                                           ; SOURCE LINE # 209
0034         ?C0010:
                                           ; SOURCE LINE # 210
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 15  

0034 900000      R     MOV     DPTR,#column
0037 E0                MOVX    A,@DPTR
0038 24D4              ADD     A,#0D4H
003A FF                MOV     R7,A
003B 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
003E         ?C0012:
003E 22                RET     
             ; FUNCTION _LCD_Char_1_Position (END)

             ; FUNCTION _LCD_Char_1_PrintString (BEGIN)
                                           ; SOURCE LINE # 233
0000 900000      R     MOV     DPTR,#string
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
0006 900000      R     MOV     DPTR,#indexU8
0009 7401              MOV     A,#01H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
000C 120000      E     LCALL   ?C?CLDPTR
000F 900000      R     MOV     DPTR,#current
0012 F0                MOVX    @DPTR,A
0013         ?C0013:
                                           ; SOURCE LINE # 239
0013 900000      R     MOV     DPTR,#current
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 6021              JZ      ?C0015
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
001A 120000      R     LCALL   _LCD_Char_1_WriteData
                                           ; SOURCE LINE # 242
001D 900000      R     MOV     DPTR,#string
0020 120000      E     LCALL   ?C?PLDXDATA
0023 900000      R     MOV     DPTR,#indexU8
0026 E0                MOVX    A,@DPTR
0027 29                ADD     A,R1
0028 F9                MOV     R1,A
0029 E4                CLR     A
002A 3A                ADDC    A,R2
002B FA                MOV     R2,A
002C 120000      E     LCALL   ?C?CLDPTR
002F 900000      R     MOV     DPTR,#current
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
0033 900000      R     MOV     DPTR,#indexU8
0036 E0                MOVX    A,@DPTR
0037 04                INC     A
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
0039 80D8              SJMP    ?C0013
                                           ; SOURCE LINE # 245
003B         ?C0015:
003B 22                RET     
             ; FUNCTION _LCD_Char_1_PrintString (END)

             ; FUNCTION _LCD_Char_1_PutChar (BEGIN)
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 16  

                                           ; SOURCE LINE # 264
;---- Variable 'character' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
0000 120000      R     LCALL   _LCD_Char_1_WriteData
                                           ; SOURCE LINE # 267
0003 22                RET     
             ; FUNCTION _LCD_Char_1_PutChar (END)

             ; FUNCTION _LCD_Char_1_WriteData (BEGIN)
                                           ; SOURCE LINE # 284
0000 900000      R     MOV     DPTR,#dByte
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 288
0005 120000      R     LCALL   LCD_Char_1_IsReady
                                           ; SOURCE LINE # 289
0008 900000      R     MOV     DPTR,#dByte
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D C4                SWAP    A
000E 540F              ANL     A,#0FH
0010 FF                MOV     R7,A
0011 A3                INC     DPTR
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
0013 120000      R     LCALL   _LCD_Char_1_WrDatNib
                                           ; SOURCE LINE # 294
0016 900000      R     MOV     DPTR,#dByte
0019 E0                MOVX    A,@DPTR
001A 540F              ANL     A,#0FH
001C FF                MOV     R7,A
001D A3                INC     DPTR
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
001F 120000      R     LCALL   _LCD_Char_1_WrDatNib
                                           ; SOURCE LINE # 297
0022 22                RET     
             ; FUNCTION _LCD_Char_1_WriteData (END)

             ; FUNCTION _LCD_Char_1_WriteControl (BEGIN)
                                           ; SOURCE LINE # 314
0000 900000      R     MOV     DPTR,#cByte
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 318
0005 120000      R     LCALL   LCD_Char_1_IsReady
                                           ; SOURCE LINE # 320
0008 900000      R     MOV     DPTR,#cByte
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D C4                SWAP    A
000E 540F              ANL     A,#0FH
0010 FF                MOV     R7,A
0011 A3                INC     DPTR
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 323
0013 120000      R     LCALL   _LCD_Char_1_WrCntrlNib
                                           ; SOURCE LINE # 324
0016 900000      R     MOV     DPTR,#cByte
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 17  

0019 E0                MOVX    A,@DPTR
001A 540F              ANL     A,#0FH
001C FF                MOV     R7,A
001D A3                INC     DPTR
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
001F 120000      R     LCALL   _LCD_Char_1_WrCntrlNib
                                           ; SOURCE LINE # 328
0022 22                RET     
             ; FUNCTION _LCD_Char_1_WriteControl (END)

             ; FUNCTION LCD_Char_1_IsReady (BEGIN)
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 353
0000 905120            MOV     DPTR,#05120H
0003 E0                MOVX    A,@DPTR
0004 5401              ANL     A,#01H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
0007 905122            MOV     DPTR,#05122H
000A E0                MOVX    A,@DPTR
000B 54E1              ANL     A,#0E1H
000D 900000      R     MOV     DPTR,#value
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
0011 E0                MOVX    A,@DPTR
0012 441E              ORL     A,#01EH
0014 905122            MOV     DPTR,#05122H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
0018 A3                INC     DPTR
0019 E0                MOVX    A,@DPTR
001A 54E1              ANL     A,#0E1H
001C 900000      R     MOV     DPTR,#value
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 377
0020 E0                MOVX    A,@DPTR
0021 905123            MOV     DPTR,#05123H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 380
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 54E1              ANL     A,#0E1H
0029 900000      R     MOV     DPTR,#value
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 382
002D E0                MOVX    A,@DPTR
002E 905124            MOV     DPTR,#05124H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 387
0032 905120            MOV     DPTR,#05120H
0035 E0                MOVX    A,@DPTR
0036 54BF              ANL     A,#0BFH
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 390
0039 E0                MOVX    A,@DPTR
003A 4480              ORL     A,#080H
003C F0                MOVX    @DPTR,A
003D         ?C0021:
                                           ; SOURCE LINE # 393
                                           ; SOURCE LINE # 395
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 18  

003D E4                CLR     A
003E FF                MOV     R7,A
003F FE                MOV     R6,A
0040 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 398
0043 905120            MOV     DPTR,#05120H
0046 E0                MOVX    A,@DPTR
0047 4420              ORL     A,#020H
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
004A 7F01              MOV     R7,#01H
004C 7E00              MOV     R6,#00H
004E 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 404
0051 905121            MOV     DPTR,#05121H
0054 E0                MOVX    A,@DPTR
0055 900000      R     MOV     DPTR,#value
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 407
0059 905120            MOV     DPTR,#05120H
005C E0                MOVX    A,@DPTR
005D 54DF              ANL     A,#0DFH
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 410
0060 E4                CLR     A
0061 FF                MOV     R7,A
0062 FE                MOV     R6,A
0063 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 413
0066 900000      R     MOV     DPTR,#value
0069 E0                MOVX    A,@DPTR
006A 5410              ANL     A,#010H
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 416
006D 905120            MOV     DPTR,#05120H
0070 E0                MOVX    A,@DPTR
0071 4420              ORL     A,#020H
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
0074 7F01              MOV     R7,#01H
0076 7E00              MOV     R6,#00H
0078 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 422
007B 905120            MOV     DPTR,#05120H
007E E0                MOVX    A,@DPTR
007F 54DF              ANL     A,#0DFH
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 426
0082 900000      R     MOV     DPTR,#value
0085 E0                MOVX    A,@DPTR
0086 70B5              JNZ     ?C0021
                                           ; SOURCE LINE # 429
0088 905120            MOV     DPTR,#05120H
008B E0                MOVX    A,@DPTR
008C 547F              ANL     A,#07FH
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 432
008F E0                MOVX    A,@DPTR
0090 5401              ANL     A,#01H
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 447
0093 905122            MOV     DPTR,#05122H
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 19  

0096 E0                MOVX    A,@DPTR
0097 54E1              ANL     A,#0E1H
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
009A A3                INC     DPTR
009B E0                MOVX    A,@DPTR
009C 54E1              ANL     A,#0E1H
009E 900000      R     MOV     DPTR,#value
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 451
00A2 E0                MOVX    A,@DPTR
00A3 441E              ORL     A,#01EH
00A5 905123            MOV     DPTR,#05123H
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 454
00A9 A3                INC     DPTR
00AA E0                MOVX    A,@DPTR
00AB 54E1              ANL     A,#0E1H
00AD 900000      R     MOV     DPTR,#value
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
00B1 E0                MOVX    A,@DPTR
00B2 441E              ORL     A,#01EH
00B4 905124            MOV     DPTR,#05124H
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 459
00B8 22                RET     
             ; FUNCTION LCD_Char_1_IsReady (END)

             ; FUNCTION _LCD_Char_1_WrDatNib (BEGIN)
                                           ; SOURCE LINE # 477
0000 900000      R     MOV     DPTR,#nibble
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 478
                                           ; SOURCE LINE # 479
0005 120000      R     LCALL   LCD_Char_1_IsReady
                                           ; SOURCE LINE # 482
0008 905120            MOV     DPTR,#05120H
000B E0                MOVX    A,@DPTR
000C 4440              ORL     A,#040H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 484
000F E0                MOVX    A,@DPTR
0010 547F              ANL     A,#07FH
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 488
0013 E0                MOVX    A,@DPTR
0014 54E1              ANL     A,#0E1H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
0017 C083              PUSH    DPH
0019 C082              PUSH    DPL
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D 900000      R     MOV     DPTR,#nibble
0020 E0                MOVX    A,@DPTR
0021 FE                MOV     R6,A
0022 25E0              ADD     A,ACC
0024 4420              ORL     A,#020H
0026 FE                MOV     R6,A
0027 EF                MOV     A,R7
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 20  

0028 4E                ORL     A,R6
0029 D082              POP     DPL
002B D083              POP     DPH
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 499
002E 7F01              MOV     R7,#01H
0030 7E00              MOV     R6,#00H
0032 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 501
0035 905120            MOV     DPTR,#05120H
0038 E0                MOVX    A,@DPTR
0039 54DF              ANL     A,#0DFH
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 502
003C 22                RET     
             ; FUNCTION _LCD_Char_1_WrDatNib (END)

             ; FUNCTION _LCD_Char_1_WrCntrlNib (BEGIN)
                                           ; SOURCE LINE # 520
;---- Variable 'nibble' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 521
                                           ; SOURCE LINE # 523
0000 905120            MOV     DPTR,#05120H
0003 E0                MOVX    A,@DPTR
0004 543F              ANL     A,#03FH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 527
0007 E0                MOVX    A,@DPTR
0008 54E1              ANL     A,#0E1H
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 532
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D EF                MOV     A,R7
000E 25E0              ADD     A,ACC
0010 4420              ORL     A,#020H
0012 FF                MOV     R7,A
0013 EE                MOV     A,R6
0014 4F                ORL     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 538
0016 7F01              MOV     R7,#01H
0018 7E00              MOV     R6,#00H
001A 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 540
001D 905120            MOV     DPTR,#05120H
0020 E0                MOVX    A,@DPTR
0021 54DF              ANL     A,#0DFH
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 541
0024 22                RET     
             ; FUNCTION _LCD_Char_1_WrCntrlNib (END)

             ; FUNCTION _LCD_Char_1_PrintInt8 (BEGIN)
                                           ; SOURCE LINE # 560
0000 900000      R     MOV     DPTR,#value
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 561
                                           ; SOURCE LINE # 564
0005 E0                MOVX    A,@DPTR
0006 FF                MOV     R7,A
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 21  

0007 C4                SWAP    A
0008 540F              ANL     A,#0FH
000A 900000      R     MOV     DPTR,#LCD_Char_1_hex
000D 93                MOVC    A,@A+DPTR
000E FF                MOV     R7,A
000F 120000      R     LCALL   _LCD_Char_1_PutChar
                                           ; SOURCE LINE # 565
0012 900000      R     MOV     DPTR,#value
0015 E0                MOVX    A,@DPTR
0016 540F              ANL     A,#0FH
0018 900000      R     MOV     DPTR,#LCD_Char_1_hex
001B 93                MOVC    A,@A+DPTR
001C FF                MOV     R7,A
001D 120000      R     LCALL   _LCD_Char_1_PutChar
                                           ; SOURCE LINE # 566
0020 22                RET     
             ; FUNCTION _LCD_Char_1_PrintInt8 (END)

             ; FUNCTION _LCD_Char_1_PrintInt16 (BEGIN)
                                           ; SOURCE LINE # 583
0000 900000      R     MOV     DPTR,#value
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 584
                                           ; SOURCE LINE # 585
0008 900000      R     MOV     DPTR,#value
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D 120000      R     LCALL   _LCD_Char_1_PrintInt8
                                           ; SOURCE LINE # 586
0010 900000      R     MOV     DPTR,#value
0013 E0                MOVX    A,@DPTR
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 120000      R     LCALL   _LCD_Char_1_PrintInt8
                                           ; SOURCE LINE # 587
001A 22                RET     
             ; FUNCTION _LCD_Char_1_PrintInt16 (END)

             ; FUNCTION _LCD_Char_1_PrintNumber (BEGIN)
                                           ; SOURCE LINE # 604
;---- Variable 'value' assigned to Register 'R2/R3' ----
0000 AB07              MOV     R3,AR7
0002 AA06              MOV     R2,AR6
                                           ; SOURCE LINE # 605
                                           ; SOURCE LINE # 610
0004 E4                CLR     A
0005 900000      R     MOV     DPTR,#digIndex
0008 F0                MOVX    @DPTR,A
0009         ?C0027:
                                           ; SOURCE LINE # 614
0009 C3                CLR     C
000A EB                MOV     A,R3
000B 940A              SUBB    A,#0AH
000D EA                MOV     A,R2
000E 9400              SUBB    A,#00H
0010 4035              JC      ?C0028
                                           ; SOURCE LINE # 615
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 22  

                                           ; SOURCE LINE # 616
0012 7C00              MOV     R4,#00H
0014 7D0A              MOV     R5,#0AH
0016 AF03              MOV     R7,AR3
0018 AE02              MOV     R6,AR2
001A 120000      E     LCALL   ?C?UIDIV
001D ED                MOV     A,R5
001E 2430              ADD     A,#030H
0020 FF                MOV     R7,A
0021 900000      R     MOV     DPTR,#digIndex
0024 E0                MOVX    A,@DPTR
0025 2400        R     ADD     A,#LOW temp
0027 F582              MOV     DPL,A
0029 E4                CLR     A
002A 3400        R     ADDC    A,#HIGH temp
002C F583              MOV     DPH,A
002E EF                MOV     A,R7
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 617
0030 7C00              MOV     R4,#00H
0032 7D0A              MOV     R5,#0AH
0034 AF03              MOV     R7,AR3
0036 AE02              MOV     R6,AR2
0038 120000      E     LCALL   ?C?UIDIV
003B AA06              MOV     R2,AR6
003D AB07              MOV     R3,AR7
                                           ; SOURCE LINE # 618
003F 900000      R     MOV     DPTR,#digIndex
0042 E0                MOVX    A,@DPTR
0043 04                INC     A
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 619
0045 80C2              SJMP    ?C0027
0047         ?C0028:
                                           ; SOURCE LINE # 621
0047 AE02              MOV     R6,AR2
0049 AF03              MOV     R7,AR3
004B 7C00              MOV     R4,#00H
004D 7D0A              MOV     R5,#0AH
004F 120000      E     LCALL   ?C?UIDIV
0052 ED                MOV     A,R5
0053 2430              ADD     A,#030H
0055 FF                MOV     R7,A
0056 900000      R     MOV     DPTR,#digIndex
0059 E0                MOVX    A,@DPTR
005A FE                MOV     R6,A
005B 2400        R     ADD     A,#LOW temp
005D F582              MOV     DPL,A
005F E4                CLR     A
0060 3400        R     ADDC    A,#HIGH temp
0062 F583              MOV     DPH,A
0064 EF                MOV     A,R7
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 622
;---- Variable 'numDigits' assigned to Register 'R1' ----
0066 A906              MOV     R1,AR6
0068         ?C0029:
                                           ; SOURCE LINE # 627
0068 900000      R     MOV     DPTR,#digIndex
006B E0                MOVX    A,@DPTR
006C 602A              JZ      ?C0030
                                           ; SOURCE LINE # 628
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 23  

                                           ; SOURCE LINE # 629
006E FF                MOV     R7,A
006F 2400        R     ADD     A,#LOW temp
0071 F582              MOV     DPL,A
0073 E4                CLR     A
0074 3400        R     ADDC    A,#HIGH temp
0076 F583              MOV     DPH,A
0078 E0                MOVX    A,@DPTR
0079 FE                MOV     R6,A
007A EF                MOV     A,R7
007B FD                MOV     R5,A
007C E9                MOV     A,R1
007D C3                CLR     C
007E 9D                SUBB    A,R5
007F FD                MOV     R5,A
0080 E4                CLR     A
0081 9400              SUBB    A,#00H
0083 FC                MOV     R4,A
0084 7400        R     MOV     A,#LOW number
0086 2D                ADD     A,R5
0087 F582              MOV     DPL,A
0089 7400        R     MOV     A,#HIGH number
008B 3C                ADDC    A,R4
008C F583              MOV     DPH,A
008E EE                MOV     A,R6
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 630
0090 900000      R     MOV     DPTR,#digIndex
0093 E0                MOVX    A,@DPTR
0094 14                DEC     A
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 631
0096 80D0              SJMP    ?C0029
0098         ?C0030:
                                           ; SOURCE LINE # 634
0098 900000      R     MOV     DPTR,#temp
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D 7400        R     MOV     A,#LOW number
009F 29                ADD     A,R1
00A0 F582              MOV     DPL,A
00A2 E4                CLR     A
00A3 3400        R     ADDC    A,#HIGH number
00A5 F583              MOV     DPH,A
00A7 EF                MOV     A,R7
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 637
00A9 7400        R     MOV     A,#LOW number+01H
00AB 29                ADD     A,R1
00AC F582              MOV     DPL,A
00AE E4                CLR     A
00AF 3400        R     ADDC    A,#HIGH number+01H
00B1 F583              MOV     DPH,A
00B3 E4                CLR     A
00B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 640
00B5 7B01              MOV     R3,#01H
00B7 7A00        R     MOV     R2,#HIGH number
00B9 7900        R     MOV     R1,#LOW number
00BB 120000      R     LCALL   _LCD_Char_1_PrintString
                                           ; SOURCE LINE # 641
00BE 22                RET     
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/27/2013 12:49:49 PAGE 24  

             ; FUNCTION _LCD_Char_1_PrintNumber (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    883    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =      2      26
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
