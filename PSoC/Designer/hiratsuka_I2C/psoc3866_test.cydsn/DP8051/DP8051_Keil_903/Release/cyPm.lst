C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CYPM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Release\cyPm.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.2\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\cyPm.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Release\cyPm.lst) CD DB NOIP OT(8,SIZ
                    -E) DF(NDEBUG) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Release\cyPm.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /*******************************************************************************
   2          * File Name: cyPm.c
   3          * Version 3.40
   4          *
   5          * Description:
   6          *  Provides an API for the power management.
   7          *
   8          * Note:
   9          *  Documentation of the API's in this file is located in the
  10          *  System Reference Guide provided with PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          *******************************************************************************/
  18          
  19          #include "cyPm.h"
  20          
  21          
  22          /*******************************************************************
  23          * Place your includes, defines and code here. Do not use merge
  24          * region below unless any component datasheet suggest to do so.
  25          *******************************************************************/
  26          /* `#START CY_PM_HEADER_INCLUDE` */
  27          
  28          /* `#END` */
  29          
  30          
  31          static CY_PM_BACKUP_STRUCT          cyPmBackup;
  32          static CY_PM_CLOCK_BACKUP_STRUCT    cyPmClockBackup;
  33          
  34          /* Convertion table between register's values and frequency in MHz  */
  35          static const uint8 CYCODE cyPmImoFreqReg2Mhz[7u] = {12u, 6u, 24u, 3u, 48u, 62u, 74u};
  36          
  37          /* Function Prototypes */
  38          static void CyPmHibSaveSet(void);
  39          static void CyPmHibRestore(void) ;
  40          
  41          static void CyPmSlpSaveSet(void) ;
  42          static void CyPmSlpRestore(void) ;
  43          
  44          static void CyPmHibSlpSaveSet(void) ;
  45          static void CyPmHibSlpRestore(void) ;
  46          
  47          static void CyPmHviLviSaveDisable(void) ;
  48          static void CyPmHviLviRestore(void) ;
  49          
  50          #if(CY_PSOC5A)
              
                  /***************************************************************************
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 2   

                  * The PICU interupt event is not allowed to act as wakeup source for PSoC 5.
                  * To prevent accidental wakeup all the PICU interrupts are disabled before
                  * Sleep and Hibernate low power modes entry. In case of Sleep mode registers
                  * values must be restored on wakeup, but in case of Hibernate low power mode
                  * there is no sense in saving/restoring registers values as the only wakeup
                  * source for this mode is external reset (XRES). For more information refer
                  * to the PSoC 5 device TRM.
                  ***************************************************************************/
              
                  static void CyPmSavePicuInterrupts(void);
                  static void CyPmDisablePicuInterrupts(void) ;
                  static void CyPmRestorePicuInterrupts(void) ;
              
              #endif  /* (CY_PSOC5A) */
  67          
  68          
  69          /*******************************************************************************
  70          * Function Name: CyPmSaveClocks
  71          ********************************************************************************
  72          *
  73          * Summary:
  74          *  This function is called in preparation for entering sleep or hibernate low
  75          *  power modes. Saves all state of the clocking system that does not persist
  76          *  during sleep/hibernate or that needs to be altered in preparation for
  77          *  sleep/hibernate. Shutdowns all the digital and analog clock dividers for the
  78          *  active power mode configuration.
  79          *
  80          *  Switches the master clock over to the IMO and shuts down the PLL and MHz
  81          *  Crystal. The IMO frequency is set to either 12 MHz or 48 MHz to match the
  82          *  Design-Wide Resources System Editor "Enable Fast IMO During Startup" setting.
  83          *  The ILO and 32 KHz oscillators are not impacted. The current Flash wait state
  84          *  setting is saved and the Flash wait state setting is set for the current IMO
  85          *  speed.
  86          *
  87          *  Note If the Master Clock source is routed through the DSI inputs, then it
  88          *  must be set manually to another source before using the
  89          *  CyPmSaveClocks()/CyPmRestoreClocks() functions.
  90          *
  91          * Parameters:
  92          *  None
  93          *
  94          * Return:
  95          *  None
  96          *
  97          * Side Effects:
  98          *  All peripheral clocks are going to be off after this API method call.
  99          *
 100          *******************************************************************************/
 101          void CyPmSaveClocks(void) 
 102          {
 103   1          /* Digital and analog clocks - save enable state and disable them all */
 104   1          cyPmClockBackup.enClkA = CY_PM_ACT_CFG1_REG & CY_PM_ACT_EN_CLK_A_MASK;
 105   1          cyPmClockBackup.enClkD = CY_PM_ACT_CFG2_REG;
 106   1          CY_PM_ACT_CFG1_REG &= ((uint8)(~CY_PM_ACT_EN_CLK_A_MASK));
 107   1          CY_PM_ACT_CFG2_REG &= ((uint8)(~CY_PM_ACT_EN_CLK_D_MASK));
 108   1      
 109   1          /* Save current flash wait cycles and set the maximum value */
 110   1          cyPmClockBackup.flashWaitCycles = CY_PM_CACHE_CR_CYCLES_MASK & CY_PM_CACHE_CR_REG;
 111   1          CyFlash_SetWaitCycles(CY_PM_MAX_FLASH_WAIT_CYCLES);
 112   1      
 113   1          /* IMO - save current IMO MHz OSC frequency and USB mode is on bit */
 114   1          cyPmClockBackup.imoFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 3   

 115   1          cyPmClockBackup.imoUsbClk = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_USB;
 116   1      
 117   1          /* IMO doubler - save enable state */
 118   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_F2XON))
 119   1          {
 120   2              /* IMO doubler enabled - save and disable */
 121   2              cyPmClockBackup.imo2x = CY_PM_ENABLED;
 122   2          }
 123   1          else
 124   1          {
 125   2              /* IMO doubler disabled */
 126   2              cyPmClockBackup.imo2x = CY_PM_DISABLED;
 127   2          }
 128   1      
 129   1          /* IMO - set appropriate frequency for LPM */
 130   1          CyIMO_SetFreq(CY_PM_IMO_FREQ_LPM);
 131   1      
 132   1          /* IMO - save enable state and enable without wait to settle */
 133   1          if(0u != (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG))
 134   1          {
 135   2              /* IMO - save enabled state */
 136   2              cyPmClockBackup.imoEnable = CY_PM_ENABLED;
 137   2          }
 138   1          else
 139   1          {
 140   2              /* IMO - save disabled state */
 141   2              cyPmClockBackup.imoEnable = CY_PM_DISABLED;
 142   2      
 143   2              /* IMO - enable */
 144   2              CyIMO_Start(CY_PM_IMO_NO_WAIT_TO_SETTLE);
 145   2          }
 146   1      
 147   1          /* IMO - save the current IMOCLK source and set to IMO if not yet */
 148   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_XCLKEN))
 149   1          {
 150   2              /* DSI or XTAL CLK */
 151   2              cyPmClockBackup.imoClkSrc =
 152   2                  (0u == (CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO2X_SRC)) ? CY_IMO_SOURCE_DSI : CY_IMO_SOURCE_X
             -TAL;
 153   2      
 154   2              /* IMO -  set IMOCLK source to MHz OSC */
 155   2              CyIMO_SetSource(CY_IMO_SOURCE_IMO);
 156   2          }
 157   1          else
 158   1          {
 159   2              /* IMO */
 160   2              cyPmClockBackup.imoClkSrc = CY_IMO_SOURCE_IMO;
 161   2          }
 162   1      
 163   1          /* Save clk_imo source */
 164   1          cyPmClockBackup.clkImoSrc = CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO_OUT_MASK;
 165   1      
 166   1          /* If IMOCLK2X or SPC OSC is source for clk_imo, set it to IMOCLK */
 167   1          if(CY_PM_CLKDIST_IMO_OUT_IMO != cyPmClockBackup.clkImoSrc)
 168   1          {
 169   2              /* Set IMOCLK to source for clk_imo */
 170   2              CY_PM_CLKDIST_CR_REG = (CY_PM_CLKDIST_CR_REG & ((uint8)(~CY_PM_CLKDIST_IMO_OUT_MASK))) |
 171   2                                      CY_PM_CLKDIST_IMO_OUT_IMO;
 172   2          }    /* Need to change nothing if IMOCLK is source clk_imo */
 173   1      
 174   1          /* IMO doubler - disable it (saved above) */
 175   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_F2XON))
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 4   

 176   1          {
 177   2              CyIMO_DisableDoubler();
 178   2          }
 179   1      
 180   1          /* Master clock - save divider and set it to divide-by-one (if no yet) */
 181   1          cyPmClockBackup.clkSyncDiv = CY_PM_CLKDIST_MSTR0_REG;
 182   1          if(CY_PM_DIV_BY_ONE != cyPmClockBackup.clkSyncDiv)
 183   1          {
 184   2              CyMasterClk_SetDivider(CY_PM_DIV_BY_ONE);
 185   2          }    /* Need to change nothing if master clock divider is 1 */
 186   1      
 187   1          /* Master clock - save current source */
 188   1          cyPmClockBackup.masterClkSrc = CY_PM_CLKDIST_MSTR1_REG & CY_PM_MASTER_CLK_SRC_MASK;
 189   1      
 190   1          /* Master clock source - set it to IMO if not yet. */
 191   1          if(CY_MASTER_SOURCE_IMO != cyPmClockBackup.masterClkSrc)
 192   1          {
 193   2              CyMasterClk_SetSource(CY_MASTER_SOURCE_IMO);
 194   2          }    /* Need to change nothing if master clock source is IMO */
 195   1      
 196   1          /* Bus clock - save divider and set it, if needed, to divide-by-one */
 197   1          cyPmClockBackup.clkBusDiv = (uint16) ((uint16) CY_PM_CLK_BUS_MSB_DIV_REG << 8u) | CY_PM_CLK_BUS_LSB_DI
             -V_REG;
 198   1          if(CY_PM_BUS_CLK_DIV_BY_ONE != cyPmClockBackup.clkBusDiv)
 199   1          {
 200   2              CyBusClk_SetDivider(CY_PM_BUS_CLK_DIV_BY_ONE);
 201   2          }    /* Do nothing if saved and actual values are equal */
 202   1      
 203   1          /* Set number of wait cycles for the flash according CPU frequency in MHz */
 204   1          CyFlash_SetWaitCycles((uint8)CY_PM_GET_CPU_FREQ_MHZ);
 205   1      
 206   1          /* PLL - check enable state, disable if needed */
 207   1          if(0u != (CY_PM_FASTCLK_PLL_CFG0_REG & CY_PM_PLL_CFG0_ENABLE))
 208   1          {
 209   2              /* PLL is enabled - save state and disable */
 210   2              cyPmClockBackup.pllEnableState = CY_PM_ENABLED;
 211   2              CyPLL_OUT_Stop();
 212   2          }
 213   1          else
 214   1          {
 215   2              /* PLL is disabled - save state */
 216   2              cyPmClockBackup.pllEnableState = CY_PM_DISABLED;
 217   2          }
 218   1      
 219   1          /* MHz ECO - check enable state and disable if needed */
 220   1          if(0u != (CY_PM_FASTCLK_XMHZ_CSR_REG & CY_PM_XMHZ_CSR_ENABLE))
 221   1          {
 222   2              /* MHz ECO is enabled - save state and disable */
 223   2              cyPmClockBackup.xmhzEnableState = CY_PM_ENABLED;
 224   2              CyXTAL_Stop();
 225   2          }
 226   1          else
 227   1          {
 228   2              /* MHz ECO is disabled - save state */
 229   2              cyPmClockBackup.xmhzEnableState = CY_PM_DISABLED;
 230   2          }
 231   1      
 232   1      
 233   1          /***************************************************************************
 234   1          * Save enable state of delay between the system bus clock and each of the
 235   1          * 4 individual analog clocks. This bit non-retention and it's value should
 236   1          * be restored on wakeup.
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 5   

 237   1          ***************************************************************************/
 238   1          if(0u != (CY_PM_CLKDIST_DELAY_REG & CY_PM_CLKDIST_DELAY_EN))
 239   1          {
 240   2              cyPmClockBackup.clkDistDelay = CY_PM_ENABLED;
 241   2          }
 242   1          else
 243   1          {
 244   2              cyPmClockBackup.clkDistDelay = CY_PM_DISABLED;
 245   2          }
 246   1      }
 247          
 248          
 249          /*******************************************************************************
 250          * Function Name: CyPmRestoreClocks
 251          ********************************************************************************
 252          *
 253          * Summary:
 254          *  Restores any state that was preserved by the last call to CyPmSaveClocks().
 255          *  The Flash wait state setting is also restored.
 256          *
 257          *  Note If the Master Clock source is routed through the DSI inputs, then it
 258          *  must be set manually to another source before using the
 259          *  CyPmSaveClocks()/CyPmRestoreClocks() functions.
 260          *
 261          *  PSoC 3 and PSoC 5LP:
 262          *  The merge region could be used to process state when the megahertz crystal is
 263          *  not ready after the hold-off timeout.
 264          *
 265          *  PSoC 5:
 266          *  The 130 ms is given for the megahertz crystal to stabilize. It's readiness is
 267          *  not verified after the hold-off timeout.
 268          *
 269          * Parameters:
 270          *  None
 271          *
 272          * Return:
 273          *  None
 274          *
 275          *******************************************************************************/
 276          void CyPmRestoreClocks(void) 
 277          {
 278   1          #if (!CY_PSOC5A)
 279   1      
 280   1              cystatus status = CYRET_TIMEOUT;
 281   1              uint16 i;
 282   1      
 283   1          #endif  /* (!CY_PSOC5A) */
 284   1      
 285   1      
 286   1          /* Convertion table between CyIMO_SetFreq() parameters and register's value */
 287   1          const uint8 CYCODE cyPmImoFreqMhz2Reg[7u] = {
 288   1              CY_IMO_FREQ_12MHZ, CY_IMO_FREQ_6MHZ,  CY_IMO_FREQ_24MHZ, CY_IMO_FREQ_3MHZ,
 289   1              CY_IMO_FREQ_48MHZ, 5u, 6u};
 290   1      
 291   1          /* Restore enable state of delay between the system bus clock and ACLKs. */
 292   1          if(CY_PM_ENABLED == cyPmClockBackup.clkDistDelay)
 293   1          {
 294   2              /* Delay for both the bandgap and the delay line to settle out */
 295   2              CyDelayCycles((uint32)(CY_PM_CLK_DELAY_BANDGAP_SETTLE_US + CY_PM_CLK_DELAY_BIAS_SETTLE_US) *
 296   2                              CY_PM_GET_CPU_FREQ_MHZ);
 297   2      
 298   2              CY_PM_CLKDIST_DELAY_REG |= CY_PM_CLKDIST_DELAY_EN;
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 6   

 299   2          }
 300   1      
 301   1          /* MHz ECO restore state */
 302   1          if(CY_PM_ENABLED == cyPmClockBackup.xmhzEnableState)
 303   1          {
 304   2              /***********************************************************************
 305   2              * Enabling XMHZ XTAL. The actual CyXTAL_Start() with non zero wait
 306   2              * period uses FTW for period measurement. This could cause a problem
 307   2              * if CTW/FTW is used as a wake up time in the low power modes APIs.
 308   2              * So, the XTAL wait procedure is implemented with a software delay.
 309   2              ***********************************************************************/
 310   2      
 311   2              /* Enable XMHZ XTAL with no wait */
 312   2              (void) CyXTAL_Start(CY_PM_XTAL_MHZ_NO_WAIT);
 313   2      
 314   2              #if(CY_PSOC5A)
              
                          /* Make a 130 milliseconds delay */
                          CyDelayCycles((uint32)CY_PM_WAIT_200_US * CY_PM_GET_CPU_FREQ_MHZ * CY_PM_MHZ_XTAL_WAIT_NUM_OF_
             -200_US);
              
                      #else
 320   2      
 321   2                  /* Read XERR bit to clear it */
 322   2                  (void) CY_PM_FASTCLK_XMHZ_CSR_REG;
 323   2      
 324   2                  /* Wait */
 325   2                  for(i = CY_PM_MHZ_XTAL_WAIT_NUM_OF_200_US; i > 0u; i--)
 326   2                  {
 327   3                      /* Make a 200 microseconds delay */
 328   3                      CyDelayCycles((uint32)CY_PM_WAIT_200_US * CY_PM_GET_CPU_FREQ_MHZ);
 329   3      
 330   3                      /* High output indicates oscillator failure */
 331   3                      if(0u == (CY_PM_FASTCLK_XMHZ_CSR_REG & CY_PM_XMHZ_CSR_XERR))
 332   3                      {
 333   4                          status = CYRET_SUCCESS;
 334   4                          break;
 335   4                      }
 336   3                  }
 337   2      
 338   2                  if(CYRET_TIMEOUT == status)
 339   2                  {
 340   3                      /*******************************************************************
 341   3                      * Process the situation when megahertz crystal is not ready.
 342   3                      * Time to stabialize value is crystal specific.
 343   3                      *******************************************************************/
 344   3      
 345   3                      /* `#START_MHZ_ECO_TIMEOUT` */
 346   3      
 347   3                      /* `#END` */
 348   3                  }
 349   2      
 350   2              #endif  /* (CY_PSOC5A) */
 351   2      
 352   2          }   /* (CY_PM_ENABLED == cyPmClockBackup.xmhzEnableState) */
 353   1      
 354   1      
 355   1          /* Temprorary set the maximum flash wait cycles */
 356   1          CyFlash_SetWaitCycles(CY_PM_MAX_FLASH_WAIT_CYCLES);
 357   1      
 358   1          /* The XTAL and DSI clocks are ready to be source for Master clock. */
 359   1          if((CY_PM_MASTER_CLK_SRC_XTAL == cyPmClockBackup.masterClkSrc) ||
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 7   

 360   1             (CY_PM_MASTER_CLK_SRC_DSI  == cyPmClockBackup.masterClkSrc))
 361   1          {
 362   2              /* Restore Master clock's divider */
 363   2              if(CY_PM_CLKDIST_MSTR0_REG != cyPmClockBackup.clkSyncDiv)
 364   2              {
 365   3                  /* Restore Master clock divider */
 366   3                  CyMasterClk_SetDivider(cyPmClockBackup.clkSyncDiv);
 367   3              }
 368   2      
 369   2              /* Restore Master clock source */
 370   2              CyMasterClk_SetSource(cyPmClockBackup.masterClkSrc);
 371   2          }
 372   1      
 373   1          /* IMO - restore IMO frequency */
 374   1          if((0u != (cyPmClockBackup.imoUsbClk & CY_PM_FASTCLK_IMO_CR_USB)) &&
 375   1              (CY_IMO_FREQ_24MHZ == cyPmImoFreqMhz2Reg[cyPmClockBackup.imoFreq]))
 376   1          {
 377   2              /* Restore IMO frequency (24 MHz) and trim it for USB */
 378   2              CyIMO_SetFreq(CY_IMO_FREQ_USB);
 379   2          }
 380   1          else
 381   1          {
 382   2              /* Restore IMO frequency */
 383   2              CyIMO_SetFreq(cyPmImoFreqMhz2Reg[cyPmClockBackup.imoFreq]);
 384   2      
 385   2              if(0u != (cyPmClockBackup.imoUsbClk & CY_PM_FASTCLK_IMO_CR_USB))
 386   2              {
 387   3                  CY_PM_FASTCLK_IMO_CR_REG |= CY_PM_FASTCLK_IMO_CR_USB;
 388   3              }
 389   2              else
 390   2              {
 391   3                  CY_PM_FASTCLK_IMO_CR_REG &= ((uint8)(~CY_PM_FASTCLK_IMO_CR_USB));
 392   3              }
 393   2          }
 394   1      
 395   1          /* IMO - restore enable state if needed */
 396   1          if((CY_PM_ENABLED == cyPmClockBackup.imoEnable) &&
 397   1             (0u == (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG)))
 398   1          {
 399   2              /* IMO - restore enabled state */
 400   2              CyIMO_Start(CY_PM_IMO_NO_WAIT_TO_SETTLE);
 401   2          }
 402   1      
 403   1          /* IMO - restore disable state if needed */
 404   1          if((CY_PM_DISABLED == cyPmClockBackup.imoEnable) &&
 405   1             (0u != (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG)))
 406   1          {
 407   2              CyIMO_Stop();
 408   2          }
 409   1      
 410   1          /* IMO - restore IMOCLK source */
 411   1          CyIMO_SetSource(cyPmClockBackup.imoClkSrc);
 412   1      
 413   1          /* Restore IMO doubler enable state (turned off by CyPmSaveClocks()) */
 414   1          if(CY_PM_ENABLED == cyPmClockBackup.imo2x)
 415   1          {
 416   2              CyIMO_EnableDoubler();
 417   2          }
 418   1      
 419   1          /* IMO - restore clk_imo source, if needed */
 420   1          if(cyPmClockBackup.clkImoSrc != (CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO_OUT_MASK))
 421   1          {
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 8   

 422   2              CY_PM_CLKDIST_CR_REG = (CY_PM_CLKDIST_CR_REG & ((uint8)(~CY_PM_CLKDIST_IMO_OUT_MASK))) |
 423   2                                      cyPmClockBackup.clkImoSrc;
 424   2          }
 425   1      
 426   1          /* PLL restore state */
 427   1          if(CY_PM_ENABLED == cyPmClockBackup.pllEnableState)
 428   1          {
 429   2              /***********************************************************************
 430   2              * Enable PLL. The actual CyPLL_OUT_Start() without wait period uses FTW
 431   2              * for period measurement. This could cause a problem if CTW/FTW is used
 432   2              * as a wakeup time in the low power modes APIs. To omit this issue PLL
 433   2              * wait procedure is implemented with a software delay.
 434   2              ***********************************************************************/
 435   2      
 436   2              /* Enable PLL */
 437   2              (void) CyPLL_OUT_Start(CY_PM_PLL_OUT_NO_WAIT);
 438   2      
 439   2              /* Make a 250 us delay */
 440   2              CyDelayCycles((uint32)CY_PM_WAIT_250_US * CY_PM_GET_CPU_FREQ_MHZ);
 441   2          }   /* (CY_PM_ENABLED == cyPmClockBackup.pllEnableState) */
 442   1      
 443   1      
 444   1          /* PLL and IMO is ready to be source for Master clock */
 445   1          if((CY_PM_MASTER_CLK_SRC_IMO == cyPmClockBackup.masterClkSrc) ||
 446   1             (CY_PM_MASTER_CLK_SRC_PLL == cyPmClockBackup.masterClkSrc))
 447   1          {
 448   2              /* Restore Master clock divider */
 449   2              if(CY_PM_CLKDIST_MSTR0_REG != cyPmClockBackup.clkSyncDiv)
 450   2              {
 451   3                  CyMasterClk_SetDivider(cyPmClockBackup.clkSyncDiv);
 452   3              }
 453   2      
 454   2              /* Restore Master clock source */
 455   2              CyMasterClk_SetSource(cyPmClockBackup.masterClkSrc);
 456   2          }
 457   1      
 458   1          /* Bus clock - restore divider, if needed */
 459   1          if(cyPmClockBackup.clkBusDiv != ((uint16)((uint16) CY_PM_CLK_BUS_MSB_DIV_REG << 8u) | CY_PM_CLK_BUS_LS
             -B_DIV_REG))
 460   1          {
 461   2              CyBusClk_SetDivider(cyPmClockBackup.clkBusDiv);
 462   2          }
 463   1      
 464   1          /* Restore flash wait cycles */
 465   1          CY_PM_CACHE_CR_REG = ((CY_PM_CACHE_CR_REG & ((uint8)(~CY_PM_CACHE_CR_CYCLES_MASK))) |
 466   1                                 cyPmClockBackup.flashWaitCycles);
 467   1      
 468   1          /* Digital and analog clocks - restore state */
 469   1          CY_PM_ACT_CFG1_REG = cyPmClockBackup.enClkA;
 470   1          CY_PM_ACT_CFG2_REG = cyPmClockBackup.enClkD;
 471   1      }
 472          
 473          
 474          /*******************************************************************************
 475          * Function Name: CyPmAltAct
 476          ********************************************************************************
 477          *
 478          * Summary:
 479          *  Puts the part into the Alternate Active (Standby) state. The Alternate Active
 480          *  state can allow for any of the capabilities of the device to be active, but
 481          *  the operation of this function is dependent on the CPU being disabled during
 482          *  the Alternate Active state. The configuration code and the component APIs
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 9   

 483          *  will configure the template for the Alternate Active state to be the same as
 484          *  the Active state with the exception that the CPU will be disabled during
 485          *  Alternate Active.
 486          *
 487          *  Note Before calling this function, you must manually configure the power mode
 488          *  of the source clocks for the timer that is used as the wakeup timer.
 489          *
 490          *  PSoC 3:
 491          *  Before switching to Alternate Active, if a wakeupTime other than NONE is
 492          *  specified, then the appropriate timer state is configured as specified with
 493          *  the interrupt for that timer disabled.  The wakeup source will be the
 494          *  combination of the values specified in the wakeupSource and any timer
 495          *  specified in the wakeupTime argument.  Once the wakeup condition is
 496          *  satisfied, then all saved state is restored and the function returns in the
 497          *  Active state.
 498          *
 499          *  Note that if the wakeupTime is made with a different value, the period before
 500          *  the wakeup occurs can be significantly shorter than the specified time.  If
 501          *  the next call is made with the same wakeupTime value, then the wakeup will
 502          *  occur the specified period after the previous wakeup occurred.
 503          *
 504          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 505          *  specified timer will be left as specified by wakeupTime with the timer
 506          *  enabled and the interrupt disabled.  If the CTW, FTW or One PPS is already
 507          *  configured for wakeup, for example with the SleepTimer or RTC components,
 508          *  then specify NONE for the wakeupTime and include the appropriate source for
 509          *  wakeupSource.
 510          *
 511          *  PSoC 5:
 512          *  This function is used to both enter the Alternate Active mode and halt the
 513          *  processor.  For PSoC 3 these two actions must be paired together.  With
 514          *  PSoC 5 the processor can be halted independently with the __WFI() function
 515          *  from the CMSIS library that is included in Creator.  This function should be
 516          *  used instead when the action required is just to halt the processor until an
 517          *  enabled interrupt occurs.
 518          *
 519          *  Neither of the parameters to the CyPmAltAct() function are used. The
 520          *  parameters must be set to 0 (PM_ALT_ACT_TIME_NONE and PM_ALT_ACT_SRC_NONE).
 521          *  The wake up time configuration can be done by a separate component: the CTW
 522          *  wakeup interval should be configured with the Sleep Timer component and one
 523          *  second interval should be configured with the RTC component.
 524          *
 525          *  Upon function execution the device will be switched from Active to Alternate
 526          *  Active mode and the CPU will be halted. When an enabled interrupt occurs the
 527          *  device will be switched to Active mode and the CPU will be started. Note that
 528          *  if a wakeup event occurs and the associated interrupt is not enabled, then
 529          *  the device will switch to Active mode with the CPU still halted. The CPU will
 530          *  remain halted until an enabled interrupt occurs.
 531          *
 532          *  PSoC 5LP:
 533          *  This function is used to both enter the Alternate Active mode and halt the
 534          *  processor.  For PSoC 3 these two actions must be paired together.  With PSoC
 535          *  5LP the processor can be halted independently with the __WFI() function from
 536          *  the CMSIS library that is included in Creator.  This function should be used
 537          *  instead when the action required is just to halt the processor until an
 538          *  enabled interrupt occurs.
 539          *
 540          *  The wakeupTime parameter is not used for this device. It must be set to zero
 541          *  (PM_ALT_ACT_TIME_NONE). The wake up time configuration can be done by a
 542          *  separate component: the CTW wakeup interval should be configured with the
 543          *  Sleep Timer component and one second interval should be configured with the
 544          *  RTC component.
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 10  

 545          *
 546          *  The wakeup behavior depends on wakeupSource parameter in the following
 547          *  manner: upon function execution the device will be switched from Active to
 548          *  Alternate Active mode and then the CPU will be halted. When an enabled wakeup
 549          *  event occurs the device will return to Active mode.  Similarly when an
 550          *  enabled interrupt occurs the CPU will be started. These two actions will
 551          *  occur together provided that the event that occurs is an enabled wakeup
 552          *  source and also generates an interrupt. If just the wakeup event occurs then
 553          *  the device will be in Active mode, but the CPU will remain halted waiting for
 554          *  an interrupt. If an interrupt occurs from something other than a wakeup
 555          *  source, then the CPU will restart with the device in Alternate Active mode
 556          *  until a wakeup event occurs.
 557          *
 558          *  For example, if CyPmAltAct(PM_ALT_ACT_TIME_NONE, PM_ALT_ACT_SRC_PICU) is
 559          *  called and PICU interrupt occurs, the CPU will be started and device will be
 560          *  switched into Active mode. And if CyPmAltAct(PM_ALT_ACT_TIME_NONE,
 561          *  PM_ALT_ACT_SRC_NONE) is called and PICU interrupt occurs, the CPU will be
 562          *  started while device remains in Alternate Active mode.
 563          *
 564          * Parameters:
 565          *  wakeupTime: Specifies a timer wakeup source and the frequency of that
 566          *              source. For PSoC 5 and PSoC 5LP this parameter is ignored.
 567          *
 568          *           Define                      Time
 569          *  PM_ALT_ACT_TIME_NONE             None
 570          *  PM_ALT_ACT_TIME_ONE_PPS          One PPS: 1 second
 571          *  PM_ALT_ACT_TIME_CTW_2MS          CTW: 2 ms
 572          *  PM_ALT_ACT_TIME_CTW_4MS          CTW: 4 ms
 573          *  PM_ALT_ACT_TIME_CTW_8MS          CTW: 8 ms
 574          *  PM_ALT_ACT_TIME_CTW_16MS         CTW: 16 ms
 575          *  PM_ALT_ACT_TIME_CTW_32MS         CTW: 32 ms
 576          *  PM_ALT_ACT_TIME_CTW_64MS         CTW: 64 ms
 577          *  PM_ALT_ACT_TIME_CTW_128MS        CTW: 128 ms
 578          *  PM_ALT_ACT_TIME_CTW_256MS        CTW: 256 ms
 579          *  PM_ALT_ACT_TIME_CTW_512MS        CTW: 512 ms
 580          *  PM_ALT_ACT_TIME_CTW_1024MS       CTW: 1024 ms
 581          *  PM_ALT_ACT_TIME_CTW_2048MS       CTW: 2048 ms
 582          *  PM_ALT_ACT_TIME_CTW_4096MS       CTW: 4096 ms
 583          *  PM_ALT_ACT_TIME_FTW(1-256)*       FTW: 10us to 2.56 ms
 584          *
 585          *  *Note:   PM_ALT_ACT_TIME_FTW() is a macro that takes an argument that
 586          *           specifies how many increments of 10 us to delay.
 587                      For PSoC 3 silicon the valid range of  values is 1 to 256.
 588          *
 589          *  wakeUpSource:    Specifies a bitwise mask of wakeup sources. In addition, if
 590          *                   a wakeupTime has been specified the associated timer will be
 591          *                   included as a wakeup source. For PSoC 5 this parameter is
 592          *                   ignored.
 593          *
 594          *           Define                      Source
 595          *  PM_ALT_ACT_SRC_NONE              None
 596          *  PM_ALT_ACT_SRC_COMPARATOR0       Comparator 0
 597          *  PM_ALT_ACT_SRC_COMPARATOR1       Comparator 1
 598          *  PM_ALT_ACT_SRC_COMPARATOR2       Comparator 2
 599          *  PM_ALT_ACT_SRC_COMPARATOR3       Comparator 3
 600          *  PM_ALT_ACT_SRC_INTERRUPT         Interrupt
 601          *  PM_ALT_ACT_SRC_PICU              PICU
 602          *  PM_ALT_ACT_SRC_I2C               I2C
 603          *  PM_ALT_ACT_SRC_BOOSTCONVERTER    Boost Converter
 604          *  PM_ALT_ACT_SRC_FTW               Fast Timewheel*
 605          *  PM_ALT_ACT_SRC_VD                High and Low Voltage Detection (HVI, LVI)*
 606          *  PM_ALT_ACT_SRC_CTW               Central Timewheel**
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 11  

 607          *  PM_ALT_ACT_SRC_ONE_PPS           One PPS**
 608          *  PM_ALT_ACT_SRC_LCD               LCD
 609          *
 610          *  *Note : FTW and HVI/LVI wakeup signals are in the same mask bit.
 611          *  **Note: CTW and One PPS wakeup signals are in the same mask bit.
 612          *
 613          *  When specifying a Comparator as the wakeupSource an instance specific define
 614          *  should be used that will track with the specific comparator that the instance
 615          *  is placed into. As an example, for a Comparator instance named MyComp the
 616          *  value to OR into the mask is: MyComp_ctComp__CMP_MASK.
 617          *
 618          *  When CTW, FTW or One PPS is used as a wakeup source, the CyPmReadStatus()
 619          *  function must be called upon wakeup with corresponding parameter. Please
 620          *  refer to the CyPmReadStatus() API in the System Reference Guide for more
 621          *  information.
 622          *
 623          * Return:
 624          *  None
 625          *
 626          * Reentrant:
 627          *  No
 628          *
 629          * Side Effects:
 630          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 631          *  specified timer will be left as specified by wakeupTime with the timer
 632          *  enabled and the interrupt disabled.  Also, the ILO 1 KHz (if CTW timer is
 633          *  used as wakeup time) or ILO 100 KHz (if FTW timer is used as wakeup time)
 634          *  will be left started.
 635          *
 636          *******************************************************************************/
 637          void CyPmAltAct(uint16 wakeupTime, uint16 wakeupSource) 
 638          {
 639   1          #if(CY_PSOC5)
              
                      /* Arguments expected to be 0 */
                      CYASSERT(PM_ALT_ACT_TIME_NONE == wakeupTime);
              
                      #if(CY_PSOC5A)
              
                          /* The wakeupSource argument expected to be 0 */
                          CYASSERT(PM_ALT_ACT_SRC_NONE  == wakeupSource);
              
                          if(0u != wakeupSource)
                          {
                              /* To remove unreferenced local variable warning */
                          }
              
                      #endif /* (CY_PSOC5A) */
              
                      if(0u != wakeupTime)
                      {
                          /* To remove unreferenced local variable warning */
                      }
              
                  #endif /* (CY_PSOC5) */
 662   1      
 663   1      
 664   1          #if(CY_PSOC3)
 665   1      
 666   1              /* FTW - save current and set new configuration */
 667   1              if((wakeupTime >= PM_ALT_ACT_TIME_FTW(1u)) && (wakeupTime <= PM_ALT_ACT_TIME_FTW(256u)))
 668   1              {
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 12  

 669   2                  CyPmFtwSetInterval(PM_ALT_ACT_FTW_INTERVAL(wakeupTime));
 670   2      
 671   2                  /* Include associated timer to the wakeupSource */
 672   2                  wakeupSource |= PM_ALT_ACT_SRC_FTW;
 673   2              }
 674   1      
 675   1              /* CTW - save current and set new configuration */
 676   1              if((wakeupTime >= PM_ALT_ACT_TIME_CTW_2MS) && (wakeupTime <= PM_ALT_ACT_TIME_CTW_4096MS))
 677   1              {
 678   2                  /* Save current CTW configuration and set new one */
 679   2                  CyPmCtwSetInterval((uint8)(wakeupTime - 1u));
 680   2      
 681   2                  /* Include associated timer to the wakeupSource */
 682   2                  wakeupSource |= PM_ALT_ACT_SRC_CTW;
 683   2              }
 684   1      
 685   1              /* 1PPS - save current and set new configuration */
 686   1              if(PM_ALT_ACT_TIME_ONE_PPS == wakeupTime)
 687   1              {
 688   2                  /* Save current 1PPS configuration and set new one */
 689   2                  CyPmOppsSet();
 690   2      
 691   2                  /* Include associated timer to the wakeupSource */
 692   2                  wakeupSource |= PM_ALT_ACT_SRC_ONE_PPS;
 693   2              }
 694   1      
 695   1          #endif /* (CY_PSOC3) */
 696   1      
 697   1      
 698   1          #if(CY_PSOC3 || CY_PSOC5LP)
 699   1      
 700   1              /* Save and set new wake up configuration */
 701   1      
 702   1              /* Interrupt, PICU, I2C, Boost converter, CTW/1PPS */
 703   1              cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
 704   1              CY_PM_WAKEUP_CFG0_REG = (uint8) (wakeupSource >> 4u);
 705   1      
 706   1              /* Comparators */
 707   1              cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
 708   1              CY_PM_WAKEUP_CFG1_REG = (((uint8) wakeupSource) & CY_PM_WAKEUP_SRC_CMPS_MASK);
 709   1      
 710   1              /* LCD */
 711   1              cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
 712   1              CY_PM_WAKEUP_CFG2_REG = ((uint8) ((wakeupSource >> 12u) & 0x01u));
 713   1      
 714   1          #endif  /* (CY_PSOC3 || CY_PSOC5LP) */
 715   1      
 716   1      
 717   1          /* Switch to the Alternate Active mode */
 718   1          CY_PM_MODE_CSR_REG = ((CY_PM_MODE_CSR_REG & ((uint8)(~CY_PM_MODE_CSR_MASK))) | CY_PM_MODE_CSR_ALT_ACT)
             -;
 719   1      
 720   1          /* Recommended readback. */
 721   1          (void) CY_PM_MODE_CSR_REG;
 722   1      
 723   1          /* Two recommended NOPs to get into the mode. */
 724   1          CY_NOP;
 725   1          CY_NOP;
 726   1      
 727   1          /* Execute WFI instruction (for ARM-based devices only) */
 728   1          CY_PM_WFI;
 729   1      
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 13  

 730   1          /* Point of return from Alternate Active Mode */
 731   1      
 732   1          #if(CY_PSOC3 || CY_PSOC5LP)
 733   1      
 734   1              /* Restore wake up configuration */
 735   1              CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
 736   1              CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
 737   1              CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
 738   1      
 739   1          #endif  /* (CY_PSOC3 || CY_PSOC5LP) */
 740   1      }
 741          
 742          
 743          /*******************************************************************************
 744          * Function Name: CyPmSleep
 745          ********************************************************************************
 746          *
 747          * Summary:
 748          *  Puts the part into the Sleep state.
 749          *
 750          *  Note Before calling this function, you must manually configure the power
 751          *  mode of the source clocks for the timer that is used as wakeup timer.
 752          *
 753          *  Note Before calling this function, you must prepare clock tree configuration
 754          *  for the low power mode by calling CyPmSaveClocks(). And restore clock
 755          *  configuration after CyPmSleep() execution by calling CyPmRestoreClocks(). See
 756          *  Power Management section, Clock Configuration subsection of the System
 757          *  Reference Guide for more information.
 758          *
 759          *  PSoC 3:
 760          *  Before switching to Sleep, if a wakeupTime other than NONE is specified,
 761          *  then the appropriate timer state is configured as specified with the
 762          *  interrupt for that timer disabled.  The wakeup source will be the combination
 763          *  of the values specified in the wakeupSource and any timer specified in the
 764          *  wakeupTime argument.  Once the wakeup condition is satisfied, then all saved
 765          *  state is restored and the function returns in the Active state.
 766          *
 767          *  Note that if the wakeupTime is made with a different value, the period before
 768          *  the wakeup occurs can be significantly shorter than the specified time.  If
 769          *  the next call is made with the same wakeupTime value, then the wakeup will
 770          *  occur the specified period after the previous wakeup occurred.
 771          *
 772          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 773          *  specified timer will be left as specified by wakeupTime with the timer
 774          *  enabled and the interrupt disabled.  If the CTW or One PPS is already
 775          *  configured for wakeup, for example with the SleepTimer or RTC components,
 776          *  then specify NONE for the wakeupTime and include the appropriate source for
 777          *  wakeupSource.
 778          *
 779          *  PSoC 5:
 780          *  Neither parameter to this function is used for PSoC 5. The parameters must be
 781          *  set to 0 (PM_SLEEP_TIME_NONE and PM_SLEEP_SRC_NONE).  The device will go
 782          *  into Sleep mode until it is woken by an interrupt from the Central Time Wheel
 783          *  (CTW). The CTW must already be configured to generate an interrupt. It is
 784          *  configured using the SleepTimer component.  Only the CTW can be used to wake
 785          *  the device from sleep mode.  The other wakeup sources, Once per second or
 786          *  Port Interrupt Controller (PICU), cannot be used reliably with PSoC 5. This
 787          *  function automatically disables these interrupt sources and then restores
 788          *  them after the devices is woken by the CTW.
 789          *
 790          *  The duration of sleep needs to be controlled so that the device doesn't wake
 791          *  up too soon after going to sleep or remain asleep for too long.  Reliable
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 14  

 792          *  sleep times of between 1 ms and 128 ms can be supported.  This requirement is
 793          *  satisfied with CTW settings of 4, 8, 16, 32, 64, 128 or 256 ms.  To control
 794          *  the sleep time the CTW is reset automatically just before putting the device
 795          *  to sleep.  The resulting wakeup time is half the duration programmed into the
 796          *  CTW with an uncertainty of 1 ms due to the arrival time of the first ILO
 797          *  clock edge. For example, the setting of 4 ms will result in a sleep time
 798          *  between 1 ms and 2 ms.
 799          *
 800          *  PSoC 5LP:
 801          *  The wakeupTime parameter is not used and the only NONE can be specified.
 802          *  The wakeup time must be configured with the component, SleepTimer for CTW
 803          *  intervals and RTC for 1PPS interval. The component must be configured to
 804          *  generate an interrrupt.
 805          *
 806          * Parameters:
 807          *  wakeupTime:      Specifies a timer wakeup source and the frequency of that
 808          *                   source. For PSoC 5 and PSoC 5LP, this parameter is ignored.
 809          *
 810          *           Define                      Time
 811          *  PM_SLEEP_TIME_NONE               None
 812          *  PM_SLEEP_TIME_ONE_PPS            One PPS: 1 second
 813          *  PM_SLEEP_TIME_CTW_2MS            CTW: 2 ms
 814          *  PM_SLEEP_TIME_CTW_4MS            CTW: 4 ms
 815          *  PM_SLEEP_TIME_CTW_8MS            CTW: 8 ms
 816          *  PM_SLEEP_TIME_CTW_16MS           CTW: 16 ms
 817          *  PM_SLEEP_TIME_CTW_32MS           CTW: 32 ms
 818          *  PM_SLEEP_TIME_CTW_64MS           CTW: 64 ms
 819          *  PM_SLEEP_TIME_CTW_128MS          CTW: 128 ms
 820          *  PM_SLEEP_TIME_CTW_256MS          CTW: 256 ms
 821          *  PM_SLEEP_TIME_CTW_512MS          CTW: 512 ms
 822          *  PM_SLEEP_TIME_CTW_1024MS         CTW: 1024 ms
 823          *  PM_SLEEP_TIME_CTW_2048MS         CTW: 2048 ms
 824          *  PM_SLEEP_TIME_CTW_4096MS         CTW: 4096 ms
 825          *
 826          *  wakeUpSource:    Specifies a bitwise mask of wakeup sources. In addition, if
 827          *                   a wakeupTime has been specified the associated timer will be
 828          *                   included as a wakeup source. For PSoC 5 this parameter is
 829          *                   ignored.
 830          *
 831          *           Define                      Source
 832          *  PM_SLEEP_SRC_NONE                None
 833          *  PM_SLEEP_SRC_COMPARATOR0         Comparator 0
 834          *  PM_SLEEP_SRC_COMPARATOR1         Comparator 1
 835          *  PM_SLEEP_SRC_COMPARATOR2         Comparator 2
 836          *  PM_SLEEP_SRC_COMPARATOR3         Comparator 3
 837          *  PM_SLEEP_SRC_PICU                PICU
 838          *  PM_SLEEP_SRC_I2C                 I2C
 839          *  PM_SLEEP_SRC_BOOSTCONVERTER      Boost Converter
 840          *  PM_SLEEP_SRC_VD                  High and Low Voltage Detection (HVI, LVI)
 841          *  PM_SLEEP_SRC_CTW                 Central Timewheel*
 842          *  PM_SLEEP_SRC_ONE_PPS             One PPS*
 843          *  PM_SLEEP_SRC_LCD                 LCD
 844          *
 845          *  *Note:   CTW and One PPS wakeup signals are in the same mask bit.
 846          *           For PSoC 5, these are in a different bit (value 1024).
 847          *
 848          *  When specifying a Comparator as the wakeupSource an instance specific define
 849          *  should be used that will track with the specific comparator that the instance
 850          *  is placed into. As an example for a Comparator instance named MyComp the
 851          *  value to OR into the mask is: MyComp_ctComp__CMP_MASK.
 852          *
 853          *  When CTW or One PPS is used as a wakeup source, the CyPmReadStatus()
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 15  

 854          *  function must be called upon wakeup with corresponding parameter. Please
 855          *  refer to the CyPmReadStatus() API in the System Reference Guide for more
 856          *  information.
 857          *
 858          * Return:
 859          *  None
 860          *
 861          * Reentrant:
 862          *  No
 863          *
 864          * Side Effects and Restrictions:
 865          *  For PSoC 5 silicon the wakeup source is not selectable. In this case the
 866          *  wakeupSource argument is ignored and any of the available wakeup sources will
 867          *  wake the device.
 868          *
 869          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 870          *  specified timer will be left as specified by wakeupTime with the timer
 871          *  enabled and the interrupt disabled. Also, the ILO 1 KHz (if CTW timer is
 872          *  used as wake up time) will be left started.
 873          *
 874          *  The 1 kHz ILO clock is expected to be enabled for PSoC 3 and PSoC 5LP to
 875          *  measure Hibernate/Sleep regulator settling time after a reset. The holdoff
 876          *  delay is measured using rising edges of the 1 kHz ILO.
 877          *
 878          *  For PSoC 3 silicon hardware buzz should be disabled before entering a sleep
 879          *  power mode. It is disabled by PSoC Creator during startup.
 880          *  If a Low Voltage Interrupt (LVI), High Voltage Interrupt (HVI) or Brown Out
 881          *  detect (power supply supervising capabilities) are required in a design
 882          *  during sleep, use the Central Time Wheel (CTW) to periodically wake the
 883          *  device, perform software buzz, and refresh the supervisory services. If LVI,
 884          *  HVI, or Brown Out is not required, then use of the CTW is not required.
 885          *  Refer to the device errata for more information.
 886          *
 887          *******************************************************************************/
 888          void CyPmSleep(uint8 wakeupTime, uint16 wakeupSource) 
 889          {
 890   1          uint8 interruptState;
 891   1      
 892   1          /* Save current global interrupt enable and disable it */
 893   1          interruptState = CyEnterCriticalSection();
 894   1      
 895   1      
 896   1          #if(CY_PSOC3 || CY_PSOC5LP)
 897   1      
 898   1              /***********************************************************************
 899   1              * The Hibernate/Sleep regulator has a settling time after a reset.
 900   1              * During this time, the system ignores requests to enter Sleep and
 901   1              * Hibernate modes. The holdoff delay is measured using rising edges of
 902   1              * the 1 kHz ILO.
 903   1              ***********************************************************************/
 904   1              if(0u == (CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_PWRUP_PULSE_Q))
 905   1              {
 906   2                  /* Disable hold off - no action on restore */
 907   2                  CY_PM_PWRSYS_SLP_TR_REG &= CY_PM_PWRSYS_SLP_TR_HIBSLP_HOLDOFF_MASK;
 908   2              }
 909   1              else
 910   1              {
 911   2                  /* Abort, device is not ready for low power mode entry */
 912   2      
 913   2                  /* Restore global interrupt enable state */
 914   2                  CyExitCriticalSection(interruptState);
 915   2      
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 16  

 916   2                  return;
 917   2              }
 918   1      
 919   1          #endif /* (CY_PSOC3 || CY_PSOC5LP) */
 920   1      
 921   1      
 922   1          #if(CY_PSOC3)
 923   1      
 924   1              /* Silicon Revision ID is below TO6 */
 925   1              if(CYDEV_CHIP_REV_ACTUAL < 5u)
 926   1              {
 927   2                  /* Hardware buzz expected to be disabled in Sleep mode */
 928   2                  CYASSERT(0u == (CY_PM_PWRSYS_WAKE_TR2_REG & CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ));
 929   2      
 930   2                  /* LVI/HVI requires hardware buzz to be enabled */
 931   2                  if(0u != (CY_PM_RESET_CR1_REG & (CY_PM_RESET_CR1_HVIA_EN |
 932   2                        CY_PM_RESET_CR1_LVIA_EN | CY_PM_RESET_CR1_LVID_EN)))
 933   2                  {
 934   3                      CYASSERT(0u != 0u);
 935   3                  }
 936   2              }
 937   1      
 938   1          #endif /* (CY_PSOC3) */
 939   1      
 940   1      
 941   1          /*******************************************************************************
 942   1          * For ARM-based devices, an interrupt is required for the CPU to wake up. The
 943   1          * Power Management implementation assumes that wakeup time is configured with a
 944   1          * separate component (component-based wakeup time configuration) for an
 945   1          * interrupt to be issued on terminal count. For more information, refer to the
 946   1          * Wakeup Time Configuration section of System Reference Guide.
 947   1          *******************************************************************************/
 948   1          #if(CY_PSOC5)
              
                      /* Arguments expected to be 0 */
                      CYASSERT(PM_SLEEP_TIME_NONE == wakeupTime);
              
                      #if(CY_PSOC5A)
              
                          /* The wakeupSource argument expected to be 0 */
                          CYASSERT(PM_SLEEP_SRC_NONE  == wakeupSource);
              
                          if(0u != wakeupSource)
                          {
                              /* To remove unreferenced local variable warning */
                          }
              
                      #endif /* (CY_PSOC5A) */
              
                      if(0u != wakeupTime)
                      {
                          /* To remove unreferenced local variable warning */
                      }
              
                  #endif /* (CY_PSOC5) */
 971   1      
 972   1      
 973   1          /* Prepare hardware for Sleep mode */
 974   1          CyPmSlpSaveSet();
 975   1      
 976   1      
 977   1          #if(CY_PSOC3)
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 17  

 978   1      
 979   1              /* CTW - save current and set new configuration */
 980   1              if((wakeupTime >= PM_SLEEP_TIME_CTW_2MS) && (wakeupTime <= PM_SLEEP_TIME_CTW_4096MS))
 981   1              {
 982   2                  /* Save current and set new configuration of the CTW */
 983   2                  CyPmCtwSetInterval((uint8)(wakeupTime - 1u));
 984   2      
 985   2                  /* Include associated timer to the wakeupSource */
 986   2                  wakeupSource |= PM_SLEEP_SRC_CTW;
 987   2              }
 988   1      
 989   1              /* 1PPS - save current and set new configuration */
 990   1              if(PM_SLEEP_TIME_ONE_PPS == wakeupTime)
 991   1              {
 992   2                  /* Save current and set new configuration of the 1PPS */
 993   2                  CyPmOppsSet();
 994   2      
 995   2                  /* Include associated timer to the wakeupSource */
 996   2                  wakeupSource |= PM_SLEEP_SRC_ONE_PPS;
 997   2              }
 998   1      
 999   1          #endif /* (CY_PSOC3) */
1000   1      
1001   1      
1002   1          #if(!CY_PSOC5A)
1003   1      
1004   1              /* Save and set new wake up configuration */
1005   1      
1006   1              /* Interrupt, PICU, I2C, Boost converter, CTW/1PPS */
1007   1              cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
1008   1              CY_PM_WAKEUP_CFG0_REG = (uint8) (wakeupSource >> 4u);
1009   1      
1010   1              /* Comparators */
1011   1              cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
1012   1              CY_PM_WAKEUP_CFG1_REG = (((uint8) wakeupSource) & CY_PM_WAKEUP_SRC_CMPS_MASK);
1013   1      
1014   1              /* LCD */
1015   1              cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
1016   1              CY_PM_WAKEUP_CFG2_REG = ((uint8) ((wakeupSource >> 12u) & 0x01u));
1017   1      
1018   1          #endif /* (!CY_PSOC5A) */
1019   1      
1020   1      
1021   1          /*******************************************************************
1022   1          * Do not use merge region below unless any component datasheet
1023   1          * suggest to do so.
1024   1          *******************************************************************/
1025   1          /* `#START CY_PM_JUST_BEFORE_SLEEP` */
1026   1      
1027   1          /* `#END` */
1028   1      
1029   1      
1030   1          /* Last moment IMO frequency change */
1031   1          if(0u == (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
1032   1          {
1033   2              /* IMO frequency is 12 MHz */
1034   2              cyPmBackup.imoActFreq12Mhz = CY_PM_ENABLED;
1035   2          }
1036   1          else
1037   1          {
1038   2              /* IMO frequency is not 12 MHz */
1039   2              cyPmBackup.imoActFreq12Mhz = CY_PM_DISABLED;
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 18  

1040   2      
1041   2              /* Save IMO frequency */
1042   2              cyPmBackup.imoActFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
1043   2      
1044   2              /* Set IMO frequency to 12 MHz */
1045   2              CY_PM_FASTCLK_IMO_CR_REG &= ((uint8) (~CY_PM_FASTCLK_IMO_CR_FREQ_MASK));
1046   2          }
1047   1      
1048   1          /* Switch to the Sleep mode */
1049   1          CY_PM_MODE_CSR_REG = ((CY_PM_MODE_CSR_REG & ((uint8)(~CY_PM_MODE_CSR_MASK))) | CY_PM_MODE_CSR_SLEEP);
1050   1      
1051   1          /* Recommended readback. */
1052   1          (void) CY_PM_MODE_CSR_REG;
1053   1      
1054   1          /* Two recommended NOPs to get into the mode. */
1055   1          CY_NOP;
1056   1          CY_NOP;
1057   1      
1058   1          /* Execute WFI instruction (for ARM-based devices only) */
1059   1          CY_PM_WFI;
1060   1      
1061   1          /* Point of return from Sleep Mode */
1062   1      
1063   1          /* Restore last moment IMO frequency change */
1064   1          if(CY_PM_ENABLED != cyPmBackup.imoActFreq12Mhz)
1065   1          {
1066   2              CY_PM_FASTCLK_IMO_CR_REG  = (CY_PM_FASTCLK_IMO_CR_REG & ((uint8)(~CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
             -) |
1067   2                                          cyPmBackup.imoActFreq;
1068   2          }
1069   1      
1070   1      
1071   1          /*******************************************************************
1072   1          * Do not use merge region below unless any component datasheet
1073   1          * suggest to do so.
1074   1          *******************************************************************/
1075   1          /* `#START CY_PM_JUST_AFTER_WAKEUP_FROM_SLEEP` */
1076   1      
1077   1          /* `#END` */
1078   1      
1079   1      
1080   1          /* Restore hardware configuration */
1081   1          CyPmSlpRestore();
1082   1      
1083   1      
1084   1          #if(!CY_PSOC5A)
1085   1      
1086   1              /* Restore current wake up configuration */
1087   1              CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
1088   1              CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
1089   1              CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
1090   1      
1091   1          #endif /* (!CY_PSOC5A) */
1092   1      
1093   1          /* Restore global interrupt enable state */
1094   1          CyExitCriticalSection(interruptState);
1095   1      }
1096          
1097          
1098          /*******************************************************************************
1099          * Function Name: CyPmHibernate
1100          ********************************************************************************
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 19  

1101          *
1102          * Summary:
1103          *  Puts the part into the Hibernate state.
1104          *
1105          *  PSoC 3 and PSoC 5LP:
1106          *  Before switching to Hibernate, the current status of the PICU wakeup source
1107          *  bit is saved and then set. This configures the device to wake up from the
1108          *  PICU. Make sure you have at least one pin configured to generate a PICU
1109          *  interrupt. For pin Px.y, the register "PICU_INTTYPE_PICUx_INTTYPEy" controls
1110          *  the PICU behavior. In the TRM, this register is "PICU[0..15]_INTTYPE[0..7]."
1111          *  In the Pins component datasheet, this register is referred to as the IRQ
1112          *  option. Once the wakeup occurs, the PICU wakeup source bit is restored and
1113          *  the PSoC returns to the Active state.
1114          *
1115          *  PSoC 5:
1116          *  The only method supported for waking up from the Hibernate state is a
1117          *  hardware reset of the device.  The PICU wakeup source cannot be used
1118          *  reliably, so the PICU interrupt sources are automatically disabled by this
1119          *  function before putting the device into the Hibernate state.
1120          *
1121          * Parameters:
1122          *  None
1123          *
1124          * Return:
1125          *  None
1126          *
1127          * Reentrant:
1128          *  No
1129          *
1130          * Side Effects:
1131          *  Applications must wait 20 us before re-entering hibernate or sleep after
1132          *  waking up from hibernate. The 20 us allows the sleep regulator time to
1133          *  stabilize before the next hibernate / sleep event occurs. The 20 us
1134          *  requirement begins when the device wakes up. There is no hardware check that
1135          *  this requirement is met. The specified delay should be done on ISR entry.
1136          *
1137          *  After wakeup PICU interrupt occurs, the Pin_ClearInterrupt() (where Pin is
1138          *  instance name of the Pins component) function must be called to clear the
1139          *  latched pin events to allow proper Hibernate mode entry andd to enable
1140          *  detection of future events.
1141          *
1142          *  The 1 kHz ILO clock is expected to be enabled for PSoC 3 and PSoC 5LP to
1143          *  measure Hibernate/Sleep regulator settling time after a reset. The holdoff
1144          *  delay is measured using rising edges of the 1 kHz ILO.
1145          *
1146          *******************************************************************************/
1147          void CyPmHibernate(void) 
1148          {
1149   1          uint8 interruptState;
1150   1      
1151   1          /* Save current global interrupt enable and disable it */
1152   1          interruptState = CyEnterCriticalSection();
1153   1      
1154   1          #if(CY_PSOC3 || CY_PSOC5LP)
1155   1      
1156   1              /***********************************************************************
1157   1              * The Hibernate/Sleep regulator has a settling time after a reset.
1158   1              * During this time, the system ignores requests to enter Sleep and
1159   1              * Hibernate modes. The holdoff delay is measured using rising edges of
1160   1              * the 1 kHz ILO.
1161   1              ***********************************************************************/
1162   1              if(0u == (CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_PWRUP_PULSE_Q))
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 20  

1163   1              {
1164   2                  /* Disable hold off - no action on restore */
1165   2                  CY_PM_PWRSYS_SLP_TR_REG &= CY_PM_PWRSYS_SLP_TR_HIBSLP_HOLDOFF_MASK;
1166   2              }
1167   1              else
1168   1              {
1169   2                  /* Abort, device is not ready for low power mode entry */
1170   2      
1171   2                  /* Restore global interrupt enable state */
1172   2                  CyExitCriticalSection(interruptState);
1173   2      
1174   2                  return;
1175   2              }
1176   1      
1177   1          #endif /* (CY_PSOC3 || CY_PSOC5LP) */
1178   1      
1179   1          /* Prepare device for proper Hibernate mode entry */
1180   1          CyPmHibSaveSet();
1181   1      
1182   1      
1183   1          #if(!CY_PSOC5A)
1184   1      
1185   1              /* Save and enable only wakeup on PICU */
1186   1              cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
1187   1              CY_PM_WAKEUP_CFG0_REG = CY_PM_WAKEUP_PICU;
1188   1      
1189   1              cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
1190   1              CY_PM_WAKEUP_CFG1_REG = 0x00u;
1191   1      
1192   1              cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
1193   1              CY_PM_WAKEUP_CFG2_REG = 0x00u;
1194   1      
1195   1          #endif  /* (!CY_PSOC5A) */
1196   1      
1197   1      
1198   1          /* Last moment IMO frequency change */
1199   1          if(0u == (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
1200   1          {
1201   2              /* IMO frequency is 12 MHz */
1202   2              cyPmBackup.imoActFreq12Mhz = CY_PM_ENABLED;
1203   2          }
1204   1          else
1205   1          {
1206   2              /* IMO frequency is not 12 MHz */
1207   2              cyPmBackup.imoActFreq12Mhz = CY_PM_DISABLED;
1208   2      
1209   2              /* Save IMO frequency */
1210   2              cyPmBackup.imoActFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
1211   2      
1212   2              /* Set IMO frequency to 12 MHz */
1213   2              CY_PM_FASTCLK_IMO_CR_REG &= ((uint8) (~CY_PM_FASTCLK_IMO_CR_FREQ_MASK));
1214   2          }
1215   1      
1216   1      
1217   1          /* Switch to Hibernate Mode */
1218   1          CY_PM_MODE_CSR_REG = (CY_PM_MODE_CSR_REG & ((uint8) (~CY_PM_MODE_CSR_MASK))) | CY_PM_MODE_CSR_HIBERNAT
             -E;
1219   1      
1220   1          /* Recommended readback. */
1221   1          (void) CY_PM_MODE_CSR_REG;
1222   1      
1223   1          /* Two recommended NOPs to get into the mode. */
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 21  

1224   1          CY_NOP;
1225   1          CY_NOP;
1226   1      
1227   1          /* Execute WFI instruction (for ARM-based devices only) */
1228   1          CY_PM_WFI;
1229   1      
1230   1          /* Point of return from Hibernate mode */
1231   1      
1232   1      
1233   1          /* Restore last moment IMO frequency change */
1234   1          if(CY_PM_ENABLED != cyPmBackup.imoActFreq12Mhz)
1235   1          {
1236   2              CY_PM_FASTCLK_IMO_CR_REG  = (CY_PM_FASTCLK_IMO_CR_REG & ((uint8)(~CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
             -) |
1237   2                                          cyPmBackup.imoActFreq;
1238   2          }
1239   1      
1240   1      
1241   1          /* Restore device for proper Hibernate mode exit*/
1242   1          CyPmHibRestore();
1243   1      
1244   1      
1245   1          #if(!CY_PSOC5A)
1246   1      
1247   1              /* Restore current wake up configuration */
1248   1              CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
1249   1              CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
1250   1              CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
1251   1      
1252   1          #endif /* (!CY_PSOC5A) */
1253   1      
1254   1          /* Restore global interrupt enable state */
1255   1          CyExitCriticalSection(interruptState);
1256   1      }
1257          
1258          
1259          /*******************************************************************************
1260          * Function Name: CyPmReadStatus
1261          ********************************************************************************
1262          *
1263          * Summary:
1264          *  Manages the Power Manager Interrupt Status Register.  This register has the
1265          *  interrupt status for the one pulse per second, central timewheel and fast
1266          *  timewheel timers.  This hardware register clears on read.  To allow for only
1267          *  clearing the bits of interest and preserving the other bits, this function
1268          *  uses a shadow register that retains the state.  This function reads the
1269          *  status register and ORs that value with the shadow register.  That is the
1270          *  value that is returned.  Then the bits in the mask that are set are cleared
1271          *  from this value and written back to the shadow register.
1272          *
1273          *  Note You must call this function within 1 ms (1 clock cycle of the ILO)
1274          *  after a CTW event has occurred.
1275          *
1276          * Parameters:
1277          *  mask: Bits in the shadow register to clear.
1278          *
1279          *       Define                      Source
1280          *  CY_PM_FTW_INT                Fast Timewheel
1281          *  CY_PM_CTW_INT                Central Timewheel
1282          *  CY_PM_ONEPPS_INT             One Pulse Per Second
1283          *
1284          * Return:
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 22  

1285          *  Status.  Same bits values as the mask parameter.
1286          *
1287          *******************************************************************************/
1288          uint8 CyPmReadStatus(uint8 mask) 
1289          {
1290   1          static uint8 interruptStatus;
1291   1          uint8 interruptState;
1292   1          uint8 tmpStatus;
1293   1      
1294   1          /* Enter critical section */
1295   1          interruptState = CyEnterCriticalSection();
1296   1      
1297   1          /* Save value of the register, copy it and clear desired bit */
1298   1          interruptStatus |= CY_PM_INT_SR_REG;
1299   1          tmpStatus = interruptStatus;
1300   1          interruptStatus &= ((uint8)(~mask));
1301   1      
1302   1          /* Exit critical section */
1303   1          CyExitCriticalSection(interruptState);
1304   1      
1305   1          return(tmpStatus);
1306   1      }
1307          
1308          
1309          /*******************************************************************************
1310          * Function Name: CyPmHibSaveSet
1311          ********************************************************************************
1312          *
1313          * Summary:
1314          *  Prepare device for proper Hibernate low power mode entry:
1315          *  - Disables I2C backup regulator
1316          *  - Save state of I2C backup regulator (PSoC 5)
1317          *  - Saves ILO power down mode state and enable it (all but PSoC 5)
1318          *  - Saves state of 1 kHz and 100 kHz ILO and disable them (all but PSoC 5)
1319          *  - Disables sleep regulator and shorts vccd to vpwrsleep (all but PSoC 5)
1320          *  - Save LVI/HVI configuration and disable them - CyPmHviLviSaveDisable()
1321          *  - CyPmHibSlpSaveSet() function is called
1322          *
1323          * Parameters:
1324          *  None
1325          *
1326          * Return:
1327          *  None
1328          *
1329          * Reentrant:
1330          *  No
1331          *
1332          *******************************************************************************/
1333          static void CyPmHibSaveSet(void) 
1334          {
1335   1          /* I2C backup reg must be off when the sleep regulator is unavailable */
1336   1          if(0u != (CY_PM_PWRSYS_CR1_REG & CY_PM_PWRSYS_CR1_I2CREG_BACKUP))
1337   1          {
1338   2              /***********************************************************************
1339   2              * If I2C backup regulator is enabled, all the fixed-function registers
1340   2              * store their values while device is in low power mode, otherwise their
1341   2              * configuration is lost. The I2C API makes a decision to restore or not
1342   2              * to restore I2C registers based on this. If this regulator will be
1343   2              * disabled and then enabled, I2C API will suppose that I2C block
1344   2              * registers preserved their values, while this is not true. So, the
1345   2              * backup regulator is disabled. And its value is restored only for
1346   2              * and PSoC 5 devices. The I2C sleep APIs is responsible for restoration.
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 23  

1347   2              ***********************************************************************/
1348   2      
1349   2              #if(CY_PSOC5A)
              
                          cyPmBackup.i2cRegBackup = CY_PM_ENABLED;
              
                      #endif /* (CY_PSOC5A) */
1354   2      
1355   2              /* Disable I2C backup register */
1356   2              CY_PM_PWRSYS_CR1_REG &= ((uint8)(~CY_PM_PWRSYS_CR1_I2CREG_BACKUP));
1357   2          }
1358   1          else
1359   1          {
1360   2              #if(CY_PSOC5A)
              
                          /* Save disabled state of the I2C backup regulator */
                          cyPmBackup.i2cRegBackup = CY_PM_DISABLED;
              
                      #endif /* (CY_PSOC5A) */
1366   2          }
1367   1      
1368   1      
1369   1          #if(!CY_PSOC5A)
1370   1      
1371   1              /* Save current ILO power mode and ensure low power mode */
1372   1              cyPmBackup.iloPowerMode = CyILO_SetPowerMode(CY_PM_POWERDOWN_MODE);
1373   1      
1374   1              /* Save current 1kHz ILO enable state. Disabled automatically. */
1375   1              cyPmBackup.ilo1kEnable = (0u == (CY_PM_SLOWCLK_ILO_CR0_REG & CY_PM_ILO_CR0_EN_1K)) ?
1376   1                                          CY_PM_DISABLED : CY_PM_ENABLED;
1377   1      
1378   1              /* Save current 100kHz ILO enable state. Disabled automatically. */
1379   1              cyPmBackup.ilo100kEnable = (0u == (CY_PM_SLOWCLK_ILO_CR0_REG & CY_PM_ILO_CR0_EN_100K)) ?
1380   1                                          CY_PM_DISABLED : CY_PM_ENABLED;
1381   1      
1382   1      
1383   1              /* Disable the sleep regulator and shorts vccd to vpwrsleep */
1384   1              if(0u == (CY_PM_PWRSYS_SLP_TR_REG & CY_PM_PWRSYS_SLP_TR_BYPASS))
1385   1              {
1386   2                  /* Save current bypass state */
1387   2                  cyPmBackup.slpTrBypass = CY_PM_DISABLED;
1388   2                  CY_PM_PWRSYS_SLP_TR_REG |= CY_PM_PWRSYS_SLP_TR_BYPASS;
1389   2              }
1390   1              else
1391   1              {
1392   2                  cyPmBackup.slpTrBypass = CY_PM_ENABLED;
1393   2              }
1394   1      
1395   1              /* LPCOMPs are always enabled (even when BOTH ext_vccd=1 and ext_vcca=1)*/
1396   1      
1397   1          #endif /* (!CY_PSOC5A) */
1398   1      
1399   1      
1400   1          /* Device is PSoC 5 and the revision is ES1 or earlier. */
1401   1          #if(CY_PSOC5A)
              
                      /* Disable all the PICU interrupts */
                      CyPmDisablePicuInterrupts();
              
                  #endif  /* (CY_PSOC5A) */
1407   1      
1408   1      
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 24  

1409   1          /***************************************************************************
1410   1          * LVI/HVI must be disabled in Hibernate
1411   1          ***************************************************************************/
1412   1      
1413   1          /* Save LVI/HVI configuration and disable them */
1414   1          CyPmHviLviSaveDisable();
1415   1      
1416   1      
1417   1          /* Make the same preparations for Hibernate and Sleep modes */
1418   1          CyPmHibSlpSaveSet();
1419   1      
1420   1      
1421   1          /***************************************************************************
1422   1          * Save and set power mode wakeup trim registers
1423   1          ***************************************************************************/
1424   1          #if(CY_PSOC3 || CY_PSOC5LP)
1425   1      
1426   1              cyPmBackup.wakeupTrim0 = CY_PM_PWRSYS_WAKE_TR0_REG;
1427   1              cyPmBackup.wakeupTrim1 = CY_PM_PWRSYS_WAKE_TR1_REG;
1428   1      
1429   1              CY_PM_PWRSYS_WAKE_TR0_REG = CY_PM_PWRSYS_WAKE_TR0;
1430   1              CY_PM_PWRSYS_WAKE_TR1_REG = CY_PM_PWRSYS_WAKE_TR1;
1431   1      
1432   1          #endif /* (CY_PSOC3 || CY_PSOC5LP) */
1433   1      
1434   1      }
1435          
1436          
1437          /*******************************************************************************
1438          * Function Name: CyPmHibRestore
1439          ********************************************************************************
1440          *
1441          * Summary:
1442          *  Restore device for proper Hibernate mode exit:
1443          *  - Restore LVI/HVI configuration - call CyPmHviLviRestore()
1444          *  - CyPmHibSlpSaveRestore() function is called
1445          *  - Restores state of I2C backup regulator (PSoC 5)
1446          *  - Restores ILO power down mode state and enable it (all but PSoC 5)
1447          *  - Restores state of 1 kHz and 100 kHz ILO and disable them (all but PSoC 5)
1448          *  - Restores sleep regulator settings (all but PSoC 5)
1449          *
1450          * Parameters:
1451          *  None
1452          *
1453          * Return:
1454          *  None
1455          *
1456          *******************************************************************************/
1457          static void CyPmHibRestore(void) 
1458          {
1459   1          /* Restore LVI/HVI configuration */
1460   1          CyPmHviLviRestore();
1461   1      
1462   1          /* Restore the same configuration for Hibernate and Sleep modes */
1463   1          CyPmHibSlpRestore();
1464   1      
1465   1          #if(CY_PSOC5A)
              
                      /* Restore I2C backup regulator configuration */
                      if(CY_PM_ENABLED == cyPmBackup.i2cRegBackup)
                      {
                          /* Enable I2C backup regulator state */
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 25  

                          CY_PM_PWRSYS_CR1_REG |= CY_PM_PWRSYS_CR1_I2CREG_BACKUP;
                      }
              
                  #endif /* (CY_PSOC5A) */
1475   1      
1476   1      
1477   1          #if(!CY_PSOC5A)
1478   1      
1479   1              /* Restore 1kHz ILO enable state */
1480   1              if(CY_PM_ENABLED == cyPmBackup.ilo1kEnable)
1481   1              {
1482   2                  /* Enable 1kHz ILO */
1483   2                  CyILO_Start1K();
1484   2              }
1485   1      
1486   1              /* Restore 100kHz ILO enable state */
1487   1              if(CY_PM_ENABLED == cyPmBackup.ilo100kEnable)
1488   1              {
1489   2                  /* Enable 100kHz ILO */
1490   2                  CyILO_Start100K();
1491   2              }
1492   1      
1493   1              /* Restore ILO power mode */
1494   1              (void) CyILO_SetPowerMode(cyPmBackup.iloPowerMode);
1495   1      
1496   1      
1497   1              if(CY_PM_DISABLED == cyPmBackup.slpTrBypass)
1498   1              {
1499   2                  /* Enable the sleep regulator */
1500   2                  CY_PM_PWRSYS_SLP_TR_REG &= ((uint8)(~CY_PM_PWRSYS_SLP_TR_BYPASS));
1501   2              }
1502   1      
1503   1          #endif /* (!CY_PSOC5A) */
1504   1      
1505   1      
1506   1          /***************************************************************************
1507   1          * Restore power mode wakeup trim registers
1508   1          ***************************************************************************/
1509   1          #if(CY_PSOC3 || CY_PSOC5LP)
1510   1      
1511   1              CY_PM_PWRSYS_WAKE_TR0_REG = cyPmBackup.wakeupTrim0;
1512   1              CY_PM_PWRSYS_WAKE_TR1_REG = cyPmBackup.wakeupTrim1;
1513   1      
1514   1          #endif /* (CY_PSOC3 || CY_PSOC5LP) */
1515   1      }
1516          
1517          
1518          /*******************************************************************************
1519          * Function Name: CyPmCtwSetInterval
1520          ********************************************************************************
1521          *
1522          * Summary:
1523          *  Performs CTW configuration:
1524          *  - Disables CTW interrupt
1525          *  - Enables 1 kHz ILO
1526          *  - Sets new CTW interval
1527          *
1528          * Parameters:
1529          *  ctwInterval: the CTW interval to be set.
1530          *
1531          * Return:
1532          *  None
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 26  

1533          *
1534          * Side Effects:
1535          *  Enables ILO 1 KHz clock and leaves it enabled.
1536          *
1537          *******************************************************************************/
1538          void CyPmCtwSetInterval(uint8 ctwInterval) 
1539          {
1540   1          /* Disable CTW interrupt enable */
1541   1          CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_CTW_IE));
1542   1      
1543   1          /* Enable 1kHz ILO (required for CTW operation) */
1544   1          CyILO_Start1K();
1545   1      
1546   1          /* Interval could be set only while CTW is disabled */
1547   1          if(0u != (CY_PM_TW_CFG2_REG & CY_PM_CTW_EN))
1548   1          {
1549   2              /* Set CTW interval if needed */
1550   2              if(CY_PM_TW_CFG1_REG != ctwInterval)
1551   2              {
1552   3                  /* Disable the CTW, set new CTW interval and enable it again */
1553   3                  CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_CTW_EN));
1554   3                  CY_PM_TW_CFG1_REG = ctwInterval;
1555   3                  CY_PM_TW_CFG2_REG |= CY_PM_CTW_EN;
1556   3              }   /* Required interval is already set */
1557   2          }
1558   1          else
1559   1          {
1560   2              /* Set CTW interval if needed */
1561   2              if(CY_PM_TW_CFG1_REG != ctwInterval)
1562   2              {
1563   3                  /* Set the new CTW interval. Could be changed if CTW is disabled */
1564   3                  CY_PM_TW_CFG1_REG = ctwInterval;
1565   3              }   /* Required interval is already set */
1566   2      
1567   2              /* Enable the CTW */
1568   2              CY_PM_TW_CFG2_REG |= CY_PM_CTW_EN;
1569   2          }
1570   1      }
1571          
1572          
1573          /*******************************************************************************
1574          * Function Name: CyPmOppsSet
1575          ********************************************************************************
1576          *
1577          * Summary:
1578          *  Performs 1PPS configuration:
1579          *  - Starts 32 KHz XTAL
1580          *  - Disables 1PPS interupts
1581          *  - Enables 1PPS
1582          *
1583          * Parameters:
1584          *  None
1585          *
1586          * Return:
1587          *  None
1588          *
1589          *******************************************************************************/
1590          void CyPmOppsSet(void) 
1591          {
1592   1          /* Enable 32kHz XTAL if needed */
1593   1          if(0u == (CY_PM_SLOWCLK_X32_CR_REG & CY_PM_X32_CR_X32EN))
1594   1          {
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 27  

1595   2              /* Enable 32kHz XTAL */
1596   2              CyXTAL_32KHZ_Start();
1597   2          }
1598   1      
1599   1          /* Disable 1PPS interrupt enable */
1600   1          CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_1PPS_IE));
1601   1      
1602   1          /* Enable 1PPS operation */
1603   1          CY_PM_TW_CFG2_REG |= CY_PM_1PPS_EN;
1604   1      }
1605          
1606          
1607          /*******************************************************************************
1608          * Function Name: CyPmFtwSetInterval
1609          ********************************************************************************
1610          *
1611          * Summary:
1612          *  Performs FTW configuration:
1613          *  - Disables FTW interrupt
1614          *  - Enables 100 kHz ILO
1615          *  - Sets new FTW interval.
1616          *
1617          * Parameters:
1618          *  ftwInterval - FTW counter interval.
1619          *
1620          * Return:
1621          *  None
1622          *
1623          * Side Effects:
1624          *  Enables ILO 100 KHz clock and leaves it enabled.
1625          *
1626          *******************************************************************************/
1627          void CyPmFtwSetInterval(uint8 ftwInterval) 
1628          {
1629   1          /* Disable FTW interrupt enable */
1630   1          CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_FTW_IE));
1631   1      
1632   1          /* Enable 100kHz ILO */
1633   1          CyILO_Start100K();
1634   1      
1635   1          /* Iterval could be set only while FTW is disabled */
1636   1          if(0u != (CY_PM_TW_CFG2_REG & CY_PM_FTW_EN))
1637   1          {
1638   2              /* Disable FTW, set new FTW interval if needed and enable it again */
1639   2              if(CY_PM_TW_CFG0_REG != ftwInterval)
1640   2              {
1641   3                  /* Disable the CTW, set new CTW interval and enable it again */
1642   3                  CY_PM_TW_CFG2_REG &= ((uint8)(~CY_PM_FTW_EN));
1643   3                  CY_PM_TW_CFG0_REG = ftwInterval;
1644   3                  CY_PM_TW_CFG2_REG |= CY_PM_FTW_EN;
1645   3              }   /* Required interval is already set */
1646   2          }
1647   1          else
1648   1          {
1649   2              /* Set new FTW counter interval if needed. FTW is disabled. */
1650   2              if(CY_PM_TW_CFG0_REG != ftwInterval)
1651   2              {
1652   3                  /* Set the new CTW interval. Could be changed if CTW is disabled */
1653   3                  CY_PM_TW_CFG0_REG = ftwInterval;
1654   3              }   /* Required interval is already set */
1655   2      
1656   2              /* Enable the FTW */
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 28  

1657   2              CY_PM_TW_CFG2_REG |= CY_PM_FTW_EN;
1658   2          }
1659   1      }
1660          
1661          
1662          #if(CY_PSOC5A)
              
                  /*******************************************************************************
                  * Function Name: CyPmSavePicuInterrupts
                  ********************************************************************************
                  *
                  * Summary:
                  *  Saves PICU interrupt type registers to the backup structure.
                  *
                  * Parameters:
                  *  None
                  *
                  * Return:
                  *  None
                  *
                  * Reentrant:
                  *  No
                  *
                  *******************************************************************************/
                  static void CyPmSavePicuInterrupts(void) 
                  {
                      /* Save all the PICU interrupt type */
                      (void) memcpy((void *) &cyPmBackup.picuIntType[0u],
                                    (void *) CY_PM_PICU_0_6_INT_BASE,
                                    CY_PM_PICU_0_6_INT_SIZE);
              
                      (void) memcpy((void *) &cyPmBackup.picuIntType[CY_PM_PICU_0_6_INT_SIZE],
                                    (void *) CY_PM_PICU_12_INT_BASE,
                                    CY_PM_PICU_12_INT_SIZE);
              
                      (void) memcpy((void *) &cyPmBackup.picuIntType[CY_PM_PICU_0_6_INT_SIZE + CY_PM_PICU_12_INT_SIZE],
                                    (void *) CY_PM_PICU_15_INT_BASE,
                                    CY_PM_PICU_15_INT_SIZE);
              
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyPmDisablePicuInterrupts
                  ********************************************************************************
                  *
                  * Summary:
                  *  Disableds PICU interrupts.
                  *
                  * Parameters:
                  *  None
                  *
                  * Return:
                  *  None
                  *
                  *******************************************************************************/
                  static void CyPmDisablePicuInterrupts(void) 
                  {
                      /* Disable all the PICU interrupts */
                      (void) memset((void *) CY_PM_PICU_0_6_INT_BASE, 0, CY_PM_PICU_0_6_INT_SIZE);
                      (void) memset((void *) CY_PM_PICU_12_INT_BASE,  0, CY_PM_PICU_12_INT_SIZE );
                      (void) memset((void *) CY_PM_PICU_15_INT_BASE,  0, CY_PM_PICU_15_INT_SIZE );
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 29  

                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyPmRestorePicuInterrupts
                  ********************************************************************************
                  *
                  * Summary:
                  *  Restores PICU interrupt type registers from the backup structure.
                  *
                  * Parameters:
                  *  None
                  *
                  * Return:
                  *  None
                  *
                  *******************************************************************************/
                  static void CyPmRestorePicuInterrupts(void) 
                  {
                      /* Save all the PICU interrupt type */
                      (void) memcpy((void *) CY_PM_PICU_0_6_INT_BASE,
                                    (void *) &cyPmBackup.picuIntType[0u],
                                    CY_PM_PICU_0_6_INT_SIZE);
              
                      (void) memcpy((void *) CY_PM_PICU_12_INT_BASE,
                                    (void *) &cyPmBackup.picuIntType[CY_PM_PICU_0_6_INT_SIZE],
                                    CY_PM_PICU_12_INT_SIZE);
              
                      (void) memcpy((void *) CY_PM_PICU_15_INT_BASE,
                                    (void *) &cyPmBackup.picuIntType[CY_PM_PICU_0_6_INT_SIZE + CY_PM_PICU_12_INT_SIZE],
                                    CY_PM_PICU_15_INT_SIZE);
              
                  }
              
              #endif  /* (CY_PSOC5A) */
1754          
1755          
1756          /*******************************************************************************
1757          * Function Name: CyPmSlpSaveSet
1758          ********************************************************************************
1759          *
1760          * Summary:
1761          *  Prepare device for proper Sleep low power mode entry:
1762          *  - Prepare CTW for Sleep mode entry (PSoC 5)
1763          *    * Save timewheels configuration
1764          *    * Disable FTW and 1PPS (enable and interrupt)
1765          *    * Reset CTW
1766          *    * Save and disable PICU interrupts
1767          *    * Save and disable PRES-A and PRES-D
1768          *  - Save and disable LVI/HVI configuration (PSoC 5)
1769          *  - Save and set to max buzz interval (PSoC 5)
1770          *  - CyPmHibSlpSaveSet() function is called
1771          *
1772          * Parameters:
1773          *  None
1774          *
1775          * Return:
1776          *  None
1777          *
1778          * Reentrant:
1779          *  No
1780          *
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 30  

1781          *******************************************************************************/
1782          static void CyPmSlpSaveSet(void) 
1783          {
1784   1          #if(CY_PSOC5A)
              
                      /* Preserve the Timewheel Configuration Register 2 */
                      cyPmBackup.pmTwCfg2 = CY_PM_TW_CFG2_REG;
              
                      /*  Clear the enable and interrupt enables for the FTW and ONEPPS */
                      CY_PM_TW_CFG2_REG &= ((uint8)(~(CY_PM_FTW_IE | CY_PM_FTW_EN | CY_PM_1PPS_EN | CY_PM_1PPS_IE)));
              
                      /* Reset free-running CTW counter to 0 and held it there */
                      CY_PM_WDT_CFG_REG |= CY_PM_WDT_CFG_CTW_RESET;
              
                      /* Exit CTW counter reset state */
                      CY_PM_WDT_CFG_REG &= ((uint8)(~CY_PM_WDT_CFG_CTW_RESET));
              
                      /* Save and disable PICU interrupts  */
                      CyPmSavePicuInterrupts();
                      CyPmDisablePicuInterrupts();
              
                      /* Save and disable PRES-A and PRES-D */
                      cyPmBackup.pres1 = CY_PM_RESET_CR1_REG & CY_PM_RESET_CR1_DIS_PRES1;
                      cyPmBackup.pres2 = CY_PM_RESET_CR3_REG & CY_PM_RESET_CR3_DIS_PRES2;
                      CY_PM_RESET_CR1_REG &= ((uint8)(~CY_PM_RESET_CR1_DIS_PRES1));
                      CY_PM_RESET_CR3_REG &= ((uint8)(~CY_PM_RESET_CR3_DIS_PRES2));
              
                  #endif /* (CY_PSOC5A) */
1809   1      
1810   1      
1811   1          #if(CY_PSOC5A)
              
                      /***************************************************************************
                      * LVI/HVI must be disabled as it doesn't work during buzzing.
                      *
                      * Using hardware buzz in conjunction with other device wakeup sources
                      * can cause the device to lockup, halting further code execution. The
                      * hardware buzz provides power supply supervising capability in sleep.
                      * It is enabled by default and there is no way to disable it. So the buzz
                      * interval is set to maximum (512 ms). The CTW must be configured to wake up
                      * at a rate less than hardware buzz interval.
                      ***************************************************************************/
              
                      /* Save and disable LVI/HVI */
                      CyPmHviLviSaveDisable();
              
                      /* Save buzz trim value */
                      cyPmBackup.buzzSleepTrim = CY_PM_PWRSYS_BUZZ_TR_REG & ((uint8)(~CY_PM_PWRSYS_BUZZ_TR_MASK));
              
                      /* Set buzz interval to maximum */
                      CY_PM_PWRSYS_BUZZ_TR_REG = CY_PM_PWRSYS_BUZZ_TR_512_TICKS |
                                                (CY_PM_PWRSYS_BUZZ_TR_REG & CY_PM_PWRSYS_BUZZ_TR_MASK);
              
                  #endif  /* (CY_PSOC5A) */
1835   1      
1836   1      
1837   1          /* Apply configuration that are same for Sleep and Hibernate */
1838   1          CyPmHibSlpSaveSet();
1839   1      }
1840          
1841          
1842          /*******************************************************************************
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 31  

1843          * Function Name: CyPmSlpRestore
1844          ********************************************************************************
1845          *
1846          * Summary:
1847          *  Restore device for proper Sleep mode exit:
1848          *  - Restore timewheel configuration (PSoC 5)
1849          *  - Restore PRES-A and PRES-D (PSoC 5)
1850          *  - Restore PICU interrupts (PSoC 5)
1851          *  - Restore buzz sleep trim value (PSoC 5)
1852          *  - Call to CyPmHibSlpSaveRestore()
1853          *
1854          * Parameters:
1855          *  None
1856          *
1857          * Return:
1858          *  None
1859          *
1860          *******************************************************************************/
1861          static void CyPmSlpRestore(void) 
1862          {
1863   1          #if(CY_PSOC5A)
              
                      /* Restore the Timewheel Configuration Register 2 */
                      CY_PM_TW_CFG2_REG = cyPmBackup.pmTwCfg2;
              
                      /* Restore PICU interrupts */
                      CyPmRestorePicuInterrupts();
              
                      /* Restore PRES-A and PRES-D (assumed they were disabled) */
                      CY_PM_RESET_CR1_REG |= cyPmBackup.pres1;
                      CY_PM_RESET_CR3_REG |= cyPmBackup.pres2;
              
                  #endif /* (CY_PSOC5A) */
1876   1      
1877   1      
1878   1          #if(CY_PSOC5A)
              
                      /* Restore LVI/HVI configuration */
                      CyPmHviLviRestore();
              
                      /* Restore buzz sleep trim value */
                      CY_PM_PWRSYS_BUZZ_TR_REG = cyPmBackup.buzzSleepTrim |
                                                (CY_PM_PWRSYS_BUZZ_TR_REG & CY_PM_PWRSYS_BUZZ_TR_MASK);
              
                  #endif  /* (CY_PSOC5A) */
1888   1      
1889   1      
1890   1          /* Restore configuration that are same for Sleep and Hibernate */
1891   1          CyPmHibSlpRestore();
1892   1      }
1893          
1894          
1895          /*******************************************************************************
1896          * Function Name: CyPmHibSlpSaveSet
1897          ********************************************************************************
1898          *
1899          * Summary:
1900          *  This API is used for preparing device for Sleep and Hibernate low power
1901          *  modes entry:
1902          *  - Saves COMP, VIDAC, DSM and SAR routing connections (PSoC 5)
1903          *  - Saves SC/CT routing connections (PSoC 3/5/5LP)
1904          *  - Disables Serial Wire Viewer (SWV) (PSoC 3)
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 32  

1905          *  - Save boost reference selection and set it to internal
1906          *
1907          * Parameters:
1908          *  None
1909          *
1910          * Return:
1911          *  None
1912          *
1913          * Reentrant:
1914          *  No
1915          *
1916          *******************************************************************************/
1917          static void CyPmHibSlpSaveSet(void) 
1918          {
1919   1          #if(CY_PSOC5A)
              
                      /* Save CMP routing registers */
                      cyPmBackup.cmpData[0u]  = CY_GET_REG8(CYREG_CMP0_SW0);
                      cyPmBackup.cmpData[1u]  = CY_GET_REG8(CYREG_CMP0_SW2);
                      cyPmBackup.cmpData[2u]  = CY_GET_REG8(CYREG_CMP0_SW3);
                      cyPmBackup.cmpData[3u]  = CY_GET_REG8(CYREG_CMP0_SW4);
                      cyPmBackup.cmpData[4u]  = CY_GET_REG8(CYREG_CMP0_SW6);
              
                      cyPmBackup.cmpData[5u]  = CY_GET_REG8(CYREG_CMP1_SW0);
                      cyPmBackup.cmpData[6u]  = CY_GET_REG8(CYREG_CMP1_SW2);
                      cyPmBackup.cmpData[7u]  = CY_GET_REG8(CYREG_CMP1_SW3);
                      cyPmBackup.cmpData[8u]  = CY_GET_REG8(CYREG_CMP1_SW4);
                      cyPmBackup.cmpData[9u]  = CY_GET_REG8(CYREG_CMP1_SW6);
              
                      cyPmBackup.cmpData[10u] = CY_GET_REG8(CYREG_CMP2_SW0);
                      cyPmBackup.cmpData[11u] = CY_GET_REG8(CYREG_CMP2_SW2);
                      cyPmBackup.cmpData[12u] = CY_GET_REG8(CYREG_CMP2_SW3);
                      cyPmBackup.cmpData[13u] = CY_GET_REG8(CYREG_CMP2_SW4);
                      cyPmBackup.cmpData[14u] = CY_GET_REG8(CYREG_CMP2_SW6);
              
                      cyPmBackup.cmpData[15u] = CY_GET_REG8(CYREG_CMP3_SW0);
                      cyPmBackup.cmpData[16u] = CY_GET_REG8(CYREG_CMP3_SW2);
                      cyPmBackup.cmpData[17u] = CY_GET_REG8(CYREG_CMP3_SW3);
                      cyPmBackup.cmpData[18u] = CY_GET_REG8(CYREG_CMP3_SW4);
                      cyPmBackup.cmpData[19u] = CY_GET_REG8(CYREG_CMP3_SW6);
              
              
                      /* Clear CMP routing registers */
                      CY_SET_REG8(CYREG_CMP0_SW0 , 0u);
                      CY_SET_REG8(CYREG_CMP0_SW2 , 0u);
                      CY_SET_REG8(CYREG_CMP0_SW3 , 0u);
                      CY_SET_REG8(CYREG_CMP0_SW4 , 0u);
                      CY_SET_REG8(CYREG_CMP0_SW6 , 0u);
              
                      CY_SET_REG8(CYREG_CMP1_SW0 , 0u);
                      CY_SET_REG8(CYREG_CMP1_SW2 , 0u);
                      CY_SET_REG8(CYREG_CMP1_SW3 , 0u);
                      CY_SET_REG8(CYREG_CMP1_SW4 , 0u);
                      CY_SET_REG8(CYREG_CMP1_SW6 , 0u);
              
                      CY_SET_REG8(CYREG_CMP2_SW0 , 0u);
                      CY_SET_REG8(CYREG_CMP2_SW2 , 0u);
                      CY_SET_REG8(CYREG_CMP2_SW3 , 0u);
                      CY_SET_REG8(CYREG_CMP2_SW4 , 0u);
                      CY_SET_REG8(CYREG_CMP2_SW6 , 0u);
              
                      CY_SET_REG8(CYREG_CMP3_SW0 , 0u);
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 33  

                      CY_SET_REG8(CYREG_CMP3_SW2 , 0u);
                      CY_SET_REG8(CYREG_CMP3_SW3 , 0u);
                      CY_SET_REG8(CYREG_CMP3_SW4 , 0u);
                      CY_SET_REG8(CYREG_CMP3_SW6 , 0u);
              
              
                      /* Save DAC routing registers */
                      cyPmBackup.dacData[0u]  = CY_GET_REG8(CYREG_DAC0_SW0);
                      cyPmBackup.dacData[1u]  = CY_GET_REG8(CYREG_DAC0_SW2);
                      cyPmBackup.dacData[2u]  = CY_GET_REG8(CYREG_DAC0_SW3);
                      cyPmBackup.dacData[3u]  = CY_GET_REG8(CYREG_DAC0_SW4);
              
                      cyPmBackup.dacData[4u]  = CY_GET_REG8(CYREG_DAC1_SW0);
                      cyPmBackup.dacData[5u]  = CY_GET_REG8(CYREG_DAC1_SW2);
                      cyPmBackup.dacData[6u]  = CY_GET_REG8(CYREG_DAC1_SW3);
                      cyPmBackup.dacData[7u]  = CY_GET_REG8(CYREG_DAC1_SW4);
              
                      cyPmBackup.dacData[8u]  = CY_GET_REG8(CYREG_DAC2_SW0);
                      cyPmBackup.dacData[9u]  = CY_GET_REG8(CYREG_DAC2_SW2);
                      cyPmBackup.dacData[10u] = CY_GET_REG8(CYREG_DAC2_SW3);
                      cyPmBackup.dacData[11u] = CY_GET_REG8(CYREG_DAC2_SW4);
              
                      cyPmBackup.dacData[12u] = CY_GET_REG8(CYREG_DAC3_SW0);
                      cyPmBackup.dacData[13u] = CY_GET_REG8(CYREG_DAC3_SW2);
                      cyPmBackup.dacData[14u] = CY_GET_REG8(CYREG_DAC3_SW3);
                      cyPmBackup.dacData[15u] = CY_GET_REG8(CYREG_DAC3_SW4);
              
                      /* Clear DAC routing registers */
                      CY_SET_REG8(CYREG_DAC0_SW0 , 0u);
                      CY_SET_REG8(CYREG_DAC0_SW2 , 0u);
                      CY_SET_REG8(CYREG_DAC0_SW3 , 0u);
                      CY_SET_REG8(CYREG_DAC0_SW4 , 0u);
              
                      CY_SET_REG8(CYREG_DAC1_SW0 , 0u);
                      CY_SET_REG8(CYREG_DAC1_SW2 , 0u);
                      CY_SET_REG8(CYREG_DAC1_SW3 , 0u);
                      CY_SET_REG8(CYREG_DAC1_SW4 , 0u);
              
                      CY_SET_REG8(CYREG_DAC2_SW0 , 0u);
                      CY_SET_REG8(CYREG_DAC2_SW2 , 0u);
                      CY_SET_REG8(CYREG_DAC2_SW3 , 0u);
                      CY_SET_REG8(CYREG_DAC2_SW4 , 0u);
              
                      CY_SET_REG8(CYREG_DAC3_SW0 , 0u);
                      CY_SET_REG8(CYREG_DAC3_SW2 , 0u);
                      CY_SET_REG8(CYREG_DAC3_SW3 , 0u);
                      CY_SET_REG8(CYREG_DAC3_SW4 , 0u);
              
              
                      /* Save DSM routing registers */
                      cyPmBackup.dsmData[0u]  = CY_GET_REG8(CYREG_DSM0_SW0);
                      cyPmBackup.dsmData[1u]  = CY_GET_REG8(CYREG_DSM0_SW2);
                      cyPmBackup.dsmData[2u]  = CY_GET_REG8(CYREG_DSM0_SW3);
                      cyPmBackup.dsmData[3u]  = CY_GET_REG8(CYREG_DSM0_SW4);
                      cyPmBackup.dsmData[4u]  = CY_GET_REG8(CYREG_DSM0_SW6);
              
                      /* Clear DSM routing registers */
                      CY_SET_REG8(CYREG_DSM0_SW0 , 0u);
                      CY_SET_REG8(CYREG_DSM0_SW2 , 0u);
                      CY_SET_REG8(CYREG_DSM0_SW3 , 0u);
                      CY_SET_REG8(CYREG_DSM0_SW4 , 0u);
                      CY_SET_REG8(CYREG_DSM0_SW6 , 0u);
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 34  

              
              
                      /* Save SAR routing registers */
                      cyPmBackup.sarData[0u]  = CY_GET_REG8(CYREG_SAR0_SW0);
                      cyPmBackup.sarData[1u]  = CY_GET_REG8(CYREG_SAR0_SW2);
                      cyPmBackup.sarData[2u]  = CY_GET_REG8(CYREG_SAR0_SW3);
                      cyPmBackup.sarData[3u]  = CY_GET_REG8(CYREG_SAR0_SW4);
                      cyPmBackup.sarData[4u]  = CY_GET_REG8(CYREG_SAR0_SW6);
              
                      cyPmBackup.sarData[5u]  = CY_GET_REG8(CYREG_SAR1_SW0);
                      cyPmBackup.sarData[6u]  = CY_GET_REG8(CYREG_SAR1_SW2);
                      cyPmBackup.sarData[7u]  = CY_GET_REG8(CYREG_SAR1_SW3);
                      cyPmBackup.sarData[8u]  = CY_GET_REG8(CYREG_SAR1_SW4);
                      cyPmBackup.sarData[9u]  = CY_GET_REG8(CYREG_SAR1_SW6);
              
              
                      /* Clear SAR routing registers */
                      CY_SET_REG8(CYREG_SAR0_SW0 , 0u);
                      CY_SET_REG8(CYREG_SAR0_SW2 , 0u);
                      CY_SET_REG8(CYREG_SAR0_SW3 , 0u);
                      CY_SET_REG8(CYREG_SAR0_SW4 , 0u);
                      CY_SET_REG8(CYREG_SAR0_SW6 , 0u);
              
                      CY_SET_REG8(CYREG_SAR1_SW0 , 0u);
                      CY_SET_REG8(CYREG_SAR1_SW2 , 0u);
                      CY_SET_REG8(CYREG_SAR1_SW3 , 0u);
                      CY_SET_REG8(CYREG_SAR1_SW4 , 0u);
                      CY_SET_REG8(CYREG_SAR1_SW6 , 0u);
              
                  #endif  /* (CY_PSOC5A) */
2059   1      
2060   1      
2061   1          #if(CY_PSOC3 || CY_PSOC5A || CY_PSOC5LP)
2062   1      
2063   1              /* Save SC/CT routing registers */
2064   1              cyPmBackup.scctData[0u]   = CY_GET_REG8(CYREG_SC0_SW0 );
2065   1              cyPmBackup.scctData[1u]   = CY_GET_REG8(CYREG_SC0_SW2 );
2066   1              cyPmBackup.scctData[2u]   = CY_GET_REG8(CYREG_SC0_SW3 );
2067   1              cyPmBackup.scctData[3u]   = CY_GET_REG8(CYREG_SC0_SW4 );
2068   1              cyPmBackup.scctData[4u]   = CY_GET_REG8(CYREG_SC0_SW6 );
2069   1              cyPmBackup.scctData[5u]   = CY_GET_REG8(CYREG_SC0_SW8 );
2070   1              cyPmBackup.scctData[6u]   = CY_GET_REG8(CYREG_SC0_SW10);
2071   1      
2072   1              cyPmBackup.scctData[7u]   = CY_GET_REG8(CYREG_SC1_SW0 );
2073   1              cyPmBackup.scctData[8u]   = CY_GET_REG8(CYREG_SC1_SW2 );
2074   1              cyPmBackup.scctData[9u]   = CY_GET_REG8(CYREG_SC1_SW3 );
2075   1              cyPmBackup.scctData[10u]  = CY_GET_REG8(CYREG_SC1_SW4 );
2076   1              cyPmBackup.scctData[11u]  = CY_GET_REG8(CYREG_SC1_SW6 );
2077   1              cyPmBackup.scctData[12u]  = CY_GET_REG8(CYREG_SC1_SW8 );
2078   1              cyPmBackup.scctData[13u]  = CY_GET_REG8(CYREG_SC1_SW10);
2079   1      
2080   1              cyPmBackup.scctData[14u]  = CY_GET_REG8(CYREG_SC2_SW0 );
2081   1              cyPmBackup.scctData[15u]  = CY_GET_REG8(CYREG_SC2_SW2 );
2082   1              cyPmBackup.scctData[16u]  = CY_GET_REG8(CYREG_SC2_SW3 );
2083   1              cyPmBackup.scctData[17u]  = CY_GET_REG8(CYREG_SC2_SW4 );
2084   1              cyPmBackup.scctData[18u]  = CY_GET_REG8(CYREG_SC2_SW6 );
2085   1              cyPmBackup.scctData[19u]  = CY_GET_REG8(CYREG_SC2_SW8 );
2086   1              cyPmBackup.scctData[20u]  = CY_GET_REG8(CYREG_SC2_SW10);
2087   1      
2088   1              cyPmBackup.scctData[21u]  = CY_GET_REG8(CYREG_SC3_SW0 );
2089   1              cyPmBackup.scctData[22u]  = CY_GET_REG8(CYREG_SC3_SW2 );
2090   1              cyPmBackup.scctData[23u]  = CY_GET_REG8(CYREG_SC3_SW3 );
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 35  

2091   1              cyPmBackup.scctData[24u]  = CY_GET_REG8(CYREG_SC3_SW4 );
2092   1              cyPmBackup.scctData[25u]  = CY_GET_REG8(CYREG_SC3_SW6 );
2093   1              cyPmBackup.scctData[26u]  = CY_GET_REG8(CYREG_SC3_SW8 );
2094   1              cyPmBackup.scctData[27u]  = CY_GET_REG8(CYREG_SC3_SW10);
2095   1      
2096   1              CY_SET_REG8(CYREG_SC0_SW0 , 0u);
2097   1              CY_SET_REG8(CYREG_SC0_SW2 , 0u);
2098   1              CY_SET_REG8(CYREG_SC0_SW3 , 0u);
2099   1              CY_SET_REG8(CYREG_SC0_SW4 , 0u);
2100   1              CY_SET_REG8(CYREG_SC0_SW6 , 0u);
2101   1              CY_SET_REG8(CYREG_SC0_SW8 , 0u);
2102   1              CY_SET_REG8(CYREG_SC0_SW10, 0u);
2103   1      
2104   1              CY_SET_REG8(CYREG_SC1_SW0 , 0u);
2105   1              CY_SET_REG8(CYREG_SC1_SW2 , 0u);
2106   1              CY_SET_REG8(CYREG_SC1_SW3 , 0u);
2107   1              CY_SET_REG8(CYREG_SC1_SW4 , 0u);
2108   1              CY_SET_REG8(CYREG_SC1_SW6 , 0u);
2109   1              CY_SET_REG8(CYREG_SC1_SW8 , 0u);
2110   1              CY_SET_REG8(CYREG_SC1_SW10, 0u);
2111   1      
2112   1              CY_SET_REG8(CYREG_SC2_SW0 , 0u);
2113   1              CY_SET_REG8(CYREG_SC2_SW2 , 0u);
2114   1              CY_SET_REG8(CYREG_SC2_SW3 , 0u);
2115   1              CY_SET_REG8(CYREG_SC2_SW4 , 0u);
2116   1              CY_SET_REG8(CYREG_SC2_SW6 , 0u);
2117   1              CY_SET_REG8(CYREG_SC2_SW8 , 0u);
2118   1              CY_SET_REG8(CYREG_SC2_SW10, 0u);
2119   1      
2120   1              CY_SET_REG8(CYREG_SC3_SW0 , 0u);
2121   1              CY_SET_REG8(CYREG_SC3_SW2 , 0u);
2122   1              CY_SET_REG8(CYREG_SC3_SW3 , 0u);
2123   1              CY_SET_REG8(CYREG_SC3_SW4 , 0u);
2124   1              CY_SET_REG8(CYREG_SC3_SW6 , 0u);
2125   1              CY_SET_REG8(CYREG_SC3_SW8 , 0u);
2126   1              CY_SET_REG8(CYREG_SC3_SW10, 0u);
2127   1      
2128   1          #endif  /* (CY_PSOC3 || CY_PSOC5A || CY_PSOC5LP) */
2129   1      
2130   1      
2131   1          #if(CY_PSOC3)
2132   1      
2133   1              /* Serial Wire Viewer (SWV) workaround */
2134   1      
2135   1              /* Disable SWV before entering low power mode */
2136   1              if(0u != (CY_PM_MLOGIC_DBG_REG & CY_PM_MLOGIC_DBG_SWV_CLK_EN))
2137   1              {
2138   2                  /* Save SWV clock enabled state */
2139   2                  cyPmBackup.swvClkEnabled = CY_PM_ENABLED;
2140   2      
2141   2                  /* Save current ports drive mode settings */
2142   2                  cyPmBackup.prt1Dm = CY_PM_PRT1_PC3_REG & ((uint8)(~CY_PM_PRT1_PC3_DM_MASK));
2143   2      
2144   2                  /* Set drive mode to strong output */
2145   2                  CY_PM_PRT1_PC3_REG = (CY_PM_PRT1_PC3_REG & CY_PM_PRT1_PC3_DM_MASK) |
2146   2                                      CY_PM_PRT1_PC3_DM_STRONG;
2147   2      
2148   2                  /* Disable SWV clocks */
2149   2                  CY_PM_MLOGIC_DBG_REG &= ((uint8)(~CY_PM_MLOGIC_DBG_SWV_CLK_EN));
2150   2              }
2151   1              else
2152   1              {
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 36  

2153   2                  /* Save SWV clock disabled state */
2154   2                  cyPmBackup.swvClkEnabled = CY_PM_DISABLED;
2155   2              }
2156   1      
2157   1          #endif  /* (CY_PSOC3) */
2158   1      
2159   1      
2160   1          /***************************************************************************
2161   1          * Save boost reference and set it to boost's internal by clearing the bit.
2162   1          * External (chip bandgap) reference is not available in Sleep and Hibernate.
2163   1          ***************************************************************************/
2164   1          if(0u != (CY_PM_BOOST_CR2_REG & CY_PM_BOOST_CR2_EREFSEL_EXT))
2165   1          {
2166   2              cyPmBackup.boostRefExt = CY_PM_ENABLED;
2167   2              CY_PM_BOOST_CR2_REG &= ((uint8)(~CY_PM_BOOST_CR2_EREFSEL_EXT));
2168   2          }
2169   1          else
2170   1          {
2171   2              cyPmBackup.boostRefExt = CY_PM_DISABLED;
2172   2          }
2173   1      }
2174          
2175          
2176          /*******************************************************************************
2177          * Function Name: CyPmHibSlpRestore
2178          ********************************************************************************
2179          *
2180          * Summary:
2181          *  This API is used for restoring device configurations after wakeup from Sleep
2182          *  and Hibernate low power modes:
2183          *  - Restores COMP, VIDAC, DSM and SAR routing connections (PSoC 5)
2184          *  - Restores SC/CT routing connections (PSoC 3/5/5LP)
2185          *  - Restores enable state of Serial Wire Viewer (SWV) (PSoC 3)
2186          *  - Restores initial buzz rate (PSoC 5)
2187          *  - Restore boost reference selection
2188          *
2189          * Parameters:
2190          *  None
2191          *
2192          * Return:
2193          *  None
2194          *
2195          *******************************************************************************/
2196          static void CyPmHibSlpRestore(void) 
2197          {
2198   1          #if(CY_PSOC5A)
              
                      /* Restore COMP routing registers */
                      CY_SET_REG8(CYREG_CMP0_SW0 , cyPmBackup.cmpData[0u] );
                      CY_SET_REG8(CYREG_CMP0_SW2 , cyPmBackup.cmpData[1u] );
                      CY_SET_REG8(CYREG_CMP0_SW3 , cyPmBackup.cmpData[2u] );
                      CY_SET_REG8(CYREG_CMP0_SW4 , cyPmBackup.cmpData[3u] );
                      CY_SET_REG8(CYREG_CMP0_SW6 , cyPmBackup.cmpData[4u] );
              
                      CY_SET_REG8(CYREG_CMP1_SW0 , cyPmBackup.cmpData[5u] );
                      CY_SET_REG8(CYREG_CMP1_SW2 , cyPmBackup.cmpData[6u] );
                      CY_SET_REG8(CYREG_CMP1_SW3 , cyPmBackup.cmpData[7u] );
                      CY_SET_REG8(CYREG_CMP1_SW4 , cyPmBackup.cmpData[8u] );
                      CY_SET_REG8(CYREG_CMP1_SW6 , cyPmBackup.cmpData[9u] );
              
                      CY_SET_REG8(CYREG_CMP2_SW0 , cyPmBackup.cmpData[10u]);
                      CY_SET_REG8(CYREG_CMP2_SW2 , cyPmBackup.cmpData[11u]);
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 37  

                      CY_SET_REG8(CYREG_CMP2_SW3 , cyPmBackup.cmpData[12u]);
                      CY_SET_REG8(CYREG_CMP2_SW4 , cyPmBackup.cmpData[13u]);
                      CY_SET_REG8(CYREG_CMP2_SW6 , cyPmBackup.cmpData[14u]);
              
                      CY_SET_REG8(CYREG_CMP3_SW0 , cyPmBackup.cmpData[15u]);
                      CY_SET_REG8(CYREG_CMP3_SW2 , cyPmBackup.cmpData[16u]);
                      CY_SET_REG8(CYREG_CMP3_SW3 , cyPmBackup.cmpData[17u]);
                      CY_SET_REG8(CYREG_CMP3_SW4 , cyPmBackup.cmpData[18u]);
                      CY_SET_REG8(CYREG_CMP3_SW6 , cyPmBackup.cmpData[19u]);
              
                      /* Restore DAC routing registers */
                      CY_SET_REG8(CYREG_DAC0_SW0 , cyPmBackup.dacData[0u] );
                      CY_SET_REG8(CYREG_DAC0_SW2 , cyPmBackup.dacData[1u] );
                      CY_SET_REG8(CYREG_DAC0_SW3 , cyPmBackup.dacData[2u] );
                      CY_SET_REG8(CYREG_DAC0_SW4 , cyPmBackup.dacData[3u] );
              
                      CY_SET_REG8(CYREG_DAC1_SW0 , cyPmBackup.dacData[4u] );
                      CY_SET_REG8(CYREG_DAC1_SW2 , cyPmBackup.dacData[5u] );
                      CY_SET_REG8(CYREG_DAC1_SW3 , cyPmBackup.dacData[6u] );
                      CY_SET_REG8(CYREG_DAC1_SW4 , cyPmBackup.dacData[7u] );
              
                      CY_SET_REG8(CYREG_DAC2_SW0 , cyPmBackup.dacData[8u] );
                      CY_SET_REG8(CYREG_DAC2_SW2 , cyPmBackup.dacData[9u] );
                      CY_SET_REG8(CYREG_DAC2_SW3 , cyPmBackup.dacData[10u]);
                      CY_SET_REG8(CYREG_DAC2_SW4 , cyPmBackup.dacData[11u]);
              
                      CY_SET_REG8(CYREG_DAC3_SW0 , cyPmBackup.dacData[12u]);
                      CY_SET_REG8(CYREG_DAC3_SW2 , cyPmBackup.dacData[13u]);
                      CY_SET_REG8(CYREG_DAC3_SW3 , cyPmBackup.dacData[14u]);
                      CY_SET_REG8(CYREG_DAC3_SW4 , cyPmBackup.dacData[15u]);
              
              
                      /* Restore DSM routing registers */
                      CY_SET_REG8(CYREG_DSM0_SW0 , cyPmBackup.dsmData[0u]);
                      CY_SET_REG8(CYREG_DSM0_SW2 , cyPmBackup.dsmData[1u]);
                      CY_SET_REG8(CYREG_DSM0_SW3 , cyPmBackup.dsmData[2u]);
                      CY_SET_REG8(CYREG_DSM0_SW4 , cyPmBackup.dsmData[3u]);
                      CY_SET_REG8(CYREG_DSM0_SW6 , cyPmBackup.dsmData[4u]);
              
              
                      /* Restore SAR routing registers */
                      CY_SET_REG8(CYREG_SAR0_SW0 , cyPmBackup.sarData[0u]);
                      CY_SET_REG8(CYREG_SAR0_SW2 , cyPmBackup.sarData[1u]);
                      CY_SET_REG8(CYREG_SAR0_SW3 , cyPmBackup.sarData[2u]);
                      CY_SET_REG8(CYREG_SAR0_SW4 , cyPmBackup.sarData[3u]);
                      CY_SET_REG8(CYREG_SAR0_SW6 , cyPmBackup.sarData[4u]);
              
                      CY_SET_REG8(CYREG_SAR1_SW0 , cyPmBackup.sarData[5u]);
                      CY_SET_REG8(CYREG_SAR1_SW2 , cyPmBackup.sarData[6u]);
                      CY_SET_REG8(CYREG_SAR1_SW3 , cyPmBackup.sarData[7u]);
                      CY_SET_REG8(CYREG_SAR1_SW4 , cyPmBackup.sarData[8u]);
                      CY_SET_REG8(CYREG_SAR1_SW6 , cyPmBackup.sarData[9u]);
              
                  #endif  /* (CY_PSOC5A) */
2269   1      
2270   1          #if(CY_PSOC3 || CY_PSOC5A || CY_PSOC5LP)
2271   1      
2272   1              /* Restore SC/CT routing registers */
2273   1              CY_SET_REG8(CYREG_SC0_SW0 , cyPmBackup.scctData[0u] );
2274   1              CY_SET_REG8(CYREG_SC0_SW2 , cyPmBackup.scctData[1u] );
2275   1              CY_SET_REG8(CYREG_SC0_SW3 , cyPmBackup.scctData[2u] );
2276   1              CY_SET_REG8(CYREG_SC0_SW4 , cyPmBackup.scctData[3u] );
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 38  

2277   1              CY_SET_REG8(CYREG_SC0_SW6 , cyPmBackup.scctData[4u] );
2278   1              CY_SET_REG8(CYREG_SC0_SW8 , cyPmBackup.scctData[5u] );
2279   1              CY_SET_REG8(CYREG_SC0_SW10, cyPmBackup.scctData[6u] );
2280   1      
2281   1              CY_SET_REG8(CYREG_SC1_SW0 , cyPmBackup.scctData[7u] );
2282   1              CY_SET_REG8(CYREG_SC1_SW2 , cyPmBackup.scctData[8u] );
2283   1              CY_SET_REG8(CYREG_SC1_SW3 , cyPmBackup.scctData[9u] );
2284   1              CY_SET_REG8(CYREG_SC1_SW4 , cyPmBackup.scctData[10u]);
2285   1              CY_SET_REG8(CYREG_SC1_SW6 , cyPmBackup.scctData[11u]);
2286   1              CY_SET_REG8(CYREG_SC1_SW8 , cyPmBackup.scctData[12u]);
2287   1              CY_SET_REG8(CYREG_SC1_SW10, cyPmBackup.scctData[13u]);
2288   1      
2289   1              CY_SET_REG8(CYREG_SC2_SW0 , cyPmBackup.scctData[14u]);
2290   1              CY_SET_REG8(CYREG_SC2_SW2 , cyPmBackup.scctData[15u]);
2291   1              CY_SET_REG8(CYREG_SC2_SW3 , cyPmBackup.scctData[16u]);
2292   1              CY_SET_REG8(CYREG_SC2_SW4 , cyPmBackup.scctData[17u]);
2293   1              CY_SET_REG8(CYREG_SC2_SW6 , cyPmBackup.scctData[18u]);
2294   1              CY_SET_REG8(CYREG_SC2_SW8 , cyPmBackup.scctData[19u]);
2295   1              CY_SET_REG8(CYREG_SC2_SW10, cyPmBackup.scctData[20u]);
2296   1      
2297   1              CY_SET_REG8(CYREG_SC3_SW0 , cyPmBackup.scctData[21u]);
2298   1              CY_SET_REG8(CYREG_SC3_SW2 , cyPmBackup.scctData[22u]);
2299   1              CY_SET_REG8(CYREG_SC3_SW3 , cyPmBackup.scctData[23u]);
2300   1              CY_SET_REG8(CYREG_SC3_SW4 , cyPmBackup.scctData[24u]);
2301   1              CY_SET_REG8(CYREG_SC3_SW6 , cyPmBackup.scctData[25u]);
2302   1              CY_SET_REG8(CYREG_SC3_SW8 , cyPmBackup.scctData[26u]);
2303   1              CY_SET_REG8(CYREG_SC3_SW10, cyPmBackup.scctData[27u]);
2304   1      
2305   1          #endif  /* (CY_PSOC3 || CY_PSOC5A || CY_PSOC5LP) */
2306   1      
2307   1      
2308   1          #if(CY_PSOC3)
2309   1      
2310   1              /* Serial Wire Viewer (SWV) workaround */
2311   1              if(CY_PM_ENABLED == cyPmBackup.swvClkEnabled)
2312   1              {
2313   2                  /* Restore ports drive mode */
2314   2                  CY_PM_PRT1_PC3_REG = (CY_PM_PRT1_PC3_REG & CY_PM_PRT1_PC3_DM_MASK) |
2315   2                                          cyPmBackup.prt1Dm;
2316   2      
2317   2                  /* Enable SWV clocks */
2318   2                  CY_PM_MLOGIC_DBG_REG |= CY_PM_MLOGIC_DBG_SWV_CLK_EN;
2319   2              }
2320   1      
2321   1          #endif /* (CY_PSOC3) */
2322   1      
2323   1      
2324   1          #if(CY_PSOC5A)
              
                      /* Restore buzz sleep trim value */
                      CY_PM_PWRSYS_BUZZ_TR_REG = cyPmBackup.buzzSleepTrim | \
                                                (CY_PM_PWRSYS_BUZZ_TR_REG & CY_PM_PWRSYS_BUZZ_TR_MASK);
              
                  #endif  /* (CY_PSOC5A) */
2331   1      
2332   1      
2333   1          /* Restore boost reference */
2334   1          if(CY_PM_ENABLED == cyPmBackup.boostRefExt)
2335   1          {
2336   2              CY_PM_BOOST_CR2_REG |= CY_PM_BOOST_CR2_EREFSEL_EXT;
2337   2          }
2338   1      }
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 39  

2339          
2340          
2341          /*******************************************************************************
2342          * Function Name: CyPmHviLviSaveDisable
2343          ********************************************************************************
2344          *
2345          * Summary:
2346          *  Saves analog and digital LVI and HVI configuration and disables them.
2347          *
2348          * Parameters:
2349          *  None
2350          *
2351          * Return:
2352          *  None
2353          *
2354          * Reentrant:
2355          *  No
2356          *
2357          *******************************************************************************/
2358          static void CyPmHviLviSaveDisable(void) 
2359          {
2360   1          if(0u != (CY_VD_LVI_HVI_CONTROL_REG & CY_VD_LVID_EN))
2361   1          {
2362   2              cyPmBackup.lvidEn = CY_PM_ENABLED;
2363   2              cyPmBackup.lvidTrip = CY_VD_LVI_TRIP_REG & CY_VD_LVI_TRIP_LVID_MASK;
2364   2      
2365   2              /* Save state of reset device at a specified Vddd threshold */
2366   2              #if(CY_PSOC5A)
              
                          /* Not applicable PSoC 5 */
                          cyPmBackup.lvidRst = CY_PM_DISABLED;
              
                      #else
2372   2      
2373   2                  cyPmBackup.lvidRst = (0u == (CY_VD_PRES_CONTROL_REG & CY_VD_PRESD_EN)) ? \
2374   2                                          CY_PM_DISABLED : CY_PM_ENABLED;
2375   2      
2376   2              #endif  /* (CY_PSOC5A) */
2377   2      
2378   2              CyVdLvDigitDisable();
2379   2          }
2380   1          else
2381   1          {
2382   2              cyPmBackup.lvidEn = CY_PM_DISABLED;
2383   2          }
2384   1      
2385   1          if(0u != (CY_VD_LVI_HVI_CONTROL_REG & CY_VD_LVIA_EN))
2386   1          {
2387   2              cyPmBackup.lviaEn = CY_PM_ENABLED;
2388   2              cyPmBackup.lviaTrip = CY_VD_LVI_TRIP_REG >> 4u;
2389   2      
2390   2              /* Save state of reset device at a specified Vdda threshold */
2391   2              #if(CY_PSOC5A)
              
                          /* Not applicable PSoC 5 */
                          cyPmBackup.lviaRst = CY_PM_DISABLED;
              
                      #else
2397   2      
2398   2                  cyPmBackup.lviaRst = (0u == (CY_VD_PRES_CONTROL_REG & CY_VD_PRESA_EN)) ? \
2399   2                                          CY_PM_DISABLED : CY_PM_ENABLED;
2400   2      
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 40  

2401   2              #endif  /* (CY_PSOC5A) */
2402   2      
2403   2              CyVdLvAnalogDisable();
2404   2          }
2405   1          else
2406   1          {
2407   2              cyPmBackup.lviaEn = CY_PM_DISABLED;
2408   2          }
2409   1      
2410   1          if(0u != (CY_VD_LVI_HVI_CONTROL_REG & CY_VD_HVIA_EN))
2411   1          {
2412   2              cyPmBackup.hviaEn = CY_PM_ENABLED;
2413   2              CyVdHvAnalogDisable();
2414   2          }
2415   1          else
2416   1          {
2417   2              cyPmBackup.hviaEn = CY_PM_DISABLED;
2418   2          }
2419   1      }
2420          
2421          
2422          /*******************************************************************************
2423          * Function Name: CyPmHviLviRestore
2424          ********************************************************************************
2425          *
2426          * Summary:
2427          *  Restores analog and digital LVI and HVI configuration.
2428          *
2429          * Parameters:
2430          *  None
2431          *
2432          * Return:
2433          *  None
2434          *
2435          * Reentrant:
2436          *  No
2437          *
2438          *******************************************************************************/
2439          static void CyPmHviLviRestore(void) 
2440          {
2441   1          /* Restore LVI/HVI configuration */
2442   1          if(CY_PM_ENABLED == cyPmBackup.lvidEn)
2443   1          {
2444   2              CyVdLvDigitEnable(cyPmBackup.lvidRst, cyPmBackup.lvidTrip);
2445   2          }
2446   1      
2447   1          if(CY_PM_ENABLED == cyPmBackup.lviaEn)
2448   1          {
2449   2              CyVdLvAnalogEnable(cyPmBackup.lviaRst, cyPmBackup.lviaTrip);
2450   2          }
2451   1      
2452   1          if(CY_PM_ENABLED == cyPmBackup.hviaEn)
2453   1          {
2454   2              CyVdHvAnalogEnable();
2455   2          }
2456   1      }
2457          
2458          
2459          /* [] END OF FILE */
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 41  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CyPmSaveClocks (BEGIN)
                                           ; SOURCE LINE # 101
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 104
0000 9043A1            MOV     DPTR,#043A1H
0003 E0                MOVX    A,@DPTR
0004 540F              ANL     A,#0FH
0006 900000      R     MOV     DPTR,#cyPmClockBackup
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
000A 9043A2            MOV     DPTR,#043A2H
000D E0                MOVX    A,@DPTR
000E 900000      R     MOV     DPTR,#cyPmClockBackup+01H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0012 9043A1            MOV     DPTR,#043A1H
0015 E0                MOVX    A,@DPTR
0016 54F0              ANL     A,#0F0H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
0019 A3                INC     DPTR
001A E0                MOVX    A,@DPTR
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
001D 904800            MOV     DPTR,#04800H
0020 E0                MOVX    A,@DPTR
0021 54C0              ANL     A,#0C0H
0023 900000      R     MOV     DPTR,#cyPmClockBackup+05H
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
0027 7F2D              MOV     R7,#02DH
0029 120000      E     LCALL   _CyFlash_SetWaitCycles
                                           ; SOURCE LINE # 114
002C 904200            MOV     DPTR,#04200H
002F E0                MOVX    A,@DPTR
0030 5407              ANL     A,#07H
0032 900000      R     MOV     DPTR,#cyPmClockBackup+03H
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
0036 904200            MOV     DPTR,#04200H
0039 E0                MOVX    A,@DPTR
003A 5440              ANL     A,#040H
003C 900000      R     MOV     DPTR,#cyPmClockBackup+04H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 118
0040 904200            MOV     DPTR,#04200H
0043 E0                MOVX    A,@DPTR
0044 5410              ANL     A,#010H
0046 6008              JZ      ?C0001
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 121
0048 900000      R     MOV     DPTR,#cyPmClockBackup+09H
004B 7401              MOV     A,#01H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
004E 8005              SJMP    ?C0002
0050         ?C0001:
                                           ; SOURCE LINE # 124
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 42  

                                           ; SOURCE LINE # 126
0050 E4                CLR     A
0051 900000      R     MOV     DPTR,#cyPmClockBackup+09H
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
0055         ?C0002:
                                           ; SOURCE LINE # 130
0055 7F04              MOV     R7,#04H
0057 120000      E     LCALL   _CyIMO_SetFreq
                                           ; SOURCE LINE # 133
005A 9043A0            MOV     DPTR,#043A0H
005D E0                MOVX    A,@DPTR
005E 5410              ANL     A,#010H
0060 6008              JZ      ?C0003
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 136
0062 900000      R     MOV     DPTR,#cyPmClockBackup+06H
0065 7401              MOV     A,#01H
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
0068 8009              SJMP    ?C0004
006A         ?C0003:
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 141
006A E4                CLR     A
006B 900000      R     MOV     DPTR,#cyPmClockBackup+06H
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
006F FF                MOV     R7,A
0070 120000      E     LCALL   _CyIMO_Start
                                           ; SOURCE LINE # 145
0073         ?C0004:
                                           ; SOURCE LINE # 148
0073 904200            MOV     DPTR,#04200H
0076 E0                MOVX    A,@DPTR
0077 5420              ANL     A,#020H
0079 601A              JZ      ?C0005
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 152
007B 904000            MOV     DPTR,#04000H
007E E0                MOVX    A,@DPTR
007F 5440              ANL     A,#040H
0081 7004              JNZ     ?C0006
0083 7F02              MOV     R7,#02H
0085 8002              SJMP    ?C0007
0087         ?C0006:
0087 7F01              MOV     R7,#01H
0089         ?C0007:
0089 900000      R     MOV     DPTR,#cyPmClockBackup+07H
008C EF                MOV     A,R7
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
008E E4                CLR     A
008F FF                MOV     R7,A
0090 120000      E     LCALL   _CyIMO_SetSource
                                           ; SOURCE LINE # 156
0093 8005              SJMP    ?C0008
0095         ?C0005:
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 160
0095 E4                CLR     A
0096 900000      R     MOV     DPTR,#cyPmClockBackup+07H
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 43  

0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
009A         ?C0008:
                                           ; SOURCE LINE # 164
009A 904000            MOV     DPTR,#04000H
009D E0                MOVX    A,@DPTR
009E 5430              ANL     A,#030H
00A0 900000      R     MOV     DPTR,#cyPmClockBackup+08H
00A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
00A4 E0                MOVX    A,@DPTR
00A5 6007              JZ      ?C0009
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 170
00A7 904000            MOV     DPTR,#04000H
00AA E0                MOVX    A,@DPTR
00AB 54CF              ANL     A,#0CFH
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
00AE         ?C0009:
                                           ; SOURCE LINE # 175
00AE 904200            MOV     DPTR,#04200H
00B1 E0                MOVX    A,@DPTR
00B2 5410              ANL     A,#010H
00B4 6003              JZ      ?C0010
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 177
00B6 120000      E     LCALL   CyIMO_DisableDoubler
                                           ; SOURCE LINE # 178
00B9         ?C0010:
                                           ; SOURCE LINE # 181
00B9 904004            MOV     DPTR,#04004H
00BC E0                MOVX    A,@DPTR
00BD 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
00C1 E0                MOVX    A,@DPTR
00C2 6005              JZ      ?C0011
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 184
00C4 E4                CLR     A
00C5 FF                MOV     R7,A
00C6 120000      E     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 185
00C9         ?C0011:
                                           ; SOURCE LINE # 188
00C9 904005            MOV     DPTR,#04005H
00CC E0                MOVX    A,@DPTR
00CD 5403              ANL     A,#03H
00CF 900000      R     MOV     DPTR,#cyPmClockBackup+02H
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
00D3 E0                MOVX    A,@DPTR
00D4 6005              JZ      ?C0012
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
00D6 E4                CLR     A
00D7 FF                MOV     R7,A
00D8 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 194
00DB         ?C0012:
                                           ; SOURCE LINE # 197
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 44  

00DB 904007            MOV     DPTR,#04007H
00DE E0                MOVX    A,@DPTR
00DF FE                MOV     R6,A
00E0 904006            MOV     DPTR,#04006H
00E3 E0                MOVX    A,@DPTR
00E4 FD                MOV     R5,A
00E5 EE                MOV     A,R6
00E6 ED                MOV     A,R5
00E7 FF                MOV     R7,A
00E8 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
00EB EE                MOV     A,R6
00EC F0                MOVX    @DPTR,A
00ED A3                INC     DPTR
00EE EF                MOV     A,R7
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 198
00F0 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
00F3 E0                MOVX    A,@DPTR
00F4 7002              JNZ     ?C0116
00F6 A3                INC     DPTR
00F7 E0                MOVX    A,@DPTR
00F8         ?C0116:
00F8 6006              JZ      ?C0013
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
00FA E4                CLR     A
00FB FF                MOV     R7,A
00FC FE                MOV     R6,A
00FD 120000      E     LCALL   _CyBusClk_SetDivider
                                           ; SOURCE LINE # 201
0100         ?C0013:
                                           ; SOURCE LINE # 204
0100 904005            MOV     DPTR,#04005H
0103 E0                MOVX    A,@DPTR
0104 54F0              ANL     A,#0F0H
0106 FF                MOV     R7,A
0107 E4                CLR     A
0108 C4                SWAP    A
0109 F8                MOV     R0,A
010A 54F0              ANL     A,#0F0H
010C C8                XCH     A,R0
010D 68                XRL     A,R0
010E EF                MOV     A,R7
010F C4                SWAP    A
0110 540F              ANL     A,#0FH
0112 48                ORL     A,R0
0113 04                INC     A
0114 FF                MOV     R7,A
0115 FB                MOV     R3,A
0116 E4                CLR     A
0117 FA                MOV     R2,A
0118 F9                MOV     R1,A
0119 F8                MOV     R0,A
011A 904200            MOV     DPTR,#04200H
011D E0                MOVX    A,@DPTR
011E 5407              ANL     A,#07H
0120 900000      R     MOV     DPTR,#cyPmImoFreqReg2Mhz
0123 93                MOVC    A,@A+DPTR
0124 FF                MOV     R7,A
0125 E4                CLR     A
0126 FC                MOV     R4,A
0127 FD                MOV     R5,A
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 45  

0128 FE                MOV     R6,A
0129 120000      E     LCALL   ?C?ULDIV
012C 120000      E     LCALL   _CyFlash_SetWaitCycles
                                           ; SOURCE LINE # 207
012F 904220            MOV     DPTR,#04220H
0132 E0                MOVX    A,@DPTR
0133 5401              ANL     A,#01H
0135 600B              JZ      ?C0014
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 210
0137 900000      R     MOV     DPTR,#cyPmClockBackup+0DH
013A 7401              MOV     A,#01H
013C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
013D 120000      E     LCALL   CyPLL_OUT_Stop
                                           ; SOURCE LINE # 212
0140 8005              SJMP    ?C0015
0142         ?C0014:
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 216
0142 E4                CLR     A
0143 900000      R     MOV     DPTR,#cyPmClockBackup+0DH
0146 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
0147         ?C0015:
                                           ; SOURCE LINE # 220
0147 904210            MOV     DPTR,#04210H
014A E0                MOVX    A,@DPTR
014B 5401              ANL     A,#01H
014D 600B              JZ      ?C0016
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 223
014F 900000      R     MOV     DPTR,#cyPmClockBackup+0EH
0152 7401              MOV     A,#01H
0154 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 224
0155 120000      E     LCALL   CyXTAL_Stop
                                           ; SOURCE LINE # 225
0158 8005              SJMP    ?C0017
015A         ?C0016:
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 229
015A E4                CLR     A
015B 900000      R     MOV     DPTR,#cyPmClockBackup+0EH
015E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
015F         ?C0017:
                                           ; SOURCE LINE # 238
015F 90400B            MOV     DPTR,#0400BH
0162 E0                MOVX    A,@DPTR
0163 5404              ANL     A,#04H
0165 6007              JZ      ?C0018
                                           ; SOURCE LINE # 239
                                           ; SOURCE LINE # 240
0167 900000      R     MOV     DPTR,#cyPmClockBackup+0FH
016A 7401              MOV     A,#01H
016C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 241
016D 22                RET     
016E         ?C0018:
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 46  

016E E4                CLR     A
016F 900000      R     MOV     DPTR,#cyPmClockBackup+0FH
0172 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
0173         ?C0020:
0173 22                RET     
             ; FUNCTION CyPmSaveClocks (END)

             ; FUNCTION CyPmRestoreClocks (BEGIN)
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 280
0000 900000      R     MOV     DPTR,#status
0003 7410              MOV     A,#010H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
0006 900000      R     MOV     DPTR,#cyPmClockBackup+0FH
0009 E0                MOVX    A,@DPTR
000A 6401              XRL     A,#01H
000C 703F              JNZ     ?C0021
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 296
000E 904005            MOV     DPTR,#04005H
0011 E0                MOVX    A,@DPTR
0012 54F0              ANL     A,#0F0H
0014 FF                MOV     R7,A
0015 E4                CLR     A
0016 C4                SWAP    A
0017 F8                MOV     R0,A
0018 54F0              ANL     A,#0F0H
001A C8                XCH     A,R0
001B 68                XRL     A,R0
001C EF                MOV     A,R7
001D C4                SWAP    A
001E 540F              ANL     A,#0FH
0020 48                ORL     A,R0
0021 04                INC     A
0022 FF                MOV     R7,A
0023 FB                MOV     R3,A
0024 E4                CLR     A
0025 FA                MOV     R2,A
0026 F9                MOV     R1,A
0027 F8                MOV     R0,A
0028 904200            MOV     DPTR,#04200H
002B E0                MOVX    A,@DPTR
002C 5407              ANL     A,#07H
002E 900000      R     MOV     DPTR,#cyPmImoFreqReg2Mhz
0031 93                MOVC    A,@A+DPTR
0032 FF                MOV     R7,A
0033 E4                CLR     A
0034 FC                MOV     R4,A
0035 FD                MOV     R5,A
0036 FE                MOV     R6,A
0037 120000      E     LCALL   ?C?ULDIV
003A E4                CLR     A
003B 7B4B              MOV     R3,#04BH
003D FA                MOV     R2,A
003E F9                MOV     R1,A
003F F8                MOV     R0,A
0040 120000      E     LCALL   ?C?LMUL
0043 120000      E     LCALL   _CyDelayCycles
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 47  

                                           ; SOURCE LINE # 298
0046 90400B            MOV     DPTR,#0400BH
0049 E0                MOVX    A,@DPTR
004A 4404              ORL     A,#04H
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 299
004D         ?C0021:
                                           ; SOURCE LINE # 302
004D 900000      R     MOV     DPTR,#cyPmClockBackup+0EH
0050 E0                MOVX    A,@DPTR
0051 6401              XRL     A,#01H
0053 7073              JNZ     ?C0022
                                           ; SOURCE LINE # 303
                                           ; SOURCE LINE # 312
0055 FF                MOV     R7,A
0056 120000      E     LCALL   _CyXTAL_Start
                                           ; SOURCE LINE # 322
0059 904210            MOV     DPTR,#04210H
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
                                           ; SOURCE LINE # 325
005E 900000      R     MOV     DPTR,#i
0061 E4                CLR     A
0062 F0                MOVX    @DPTR,A
0063 A3                INC     DPTR
0064 7405              MOV     A,#05H
0066 F0                MOVX    @DPTR,A
0067         ?C0023:
0067 D3                SETB    C
0068 900000      R     MOV     DPTR,#i+01H
006B E0                MOVX    A,@DPTR
006C 9400              SUBB    A,#00H
006E 900000      R     MOV     DPTR,#i
0071 E0                MOVX    A,@DPTR
0072 9400              SUBB    A,#00H
0074 4052              JC      ?C0024
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 328
0076 904005            MOV     DPTR,#04005H
0079 E0                MOVX    A,@DPTR
007A 54F0              ANL     A,#0F0H
007C FF                MOV     R7,A
007D E4                CLR     A
007E C4                SWAP    A
007F F8                MOV     R0,A
0080 54F0              ANL     A,#0F0H
0082 C8                XCH     A,R0
0083 68                XRL     A,R0
0084 EF                MOV     A,R7
0085 C4                SWAP    A
0086 540F              ANL     A,#0FH
0088 48                ORL     A,R0
0089 04                INC     A
008A FF                MOV     R7,A
008B FB                MOV     R3,A
008C E4                CLR     A
008D FA                MOV     R2,A
008E F9                MOV     R1,A
008F F8                MOV     R0,A
0090 904200            MOV     DPTR,#04200H
0093 E0                MOVX    A,@DPTR
0094 5407              ANL     A,#07H
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 48  

0096 900000      R     MOV     DPTR,#cyPmImoFreqReg2Mhz
0099 93                MOVC    A,@A+DPTR
009A FF                MOV     R7,A
009B E4                CLR     A
009C FC                MOV     R4,A
009D FD                MOV     R5,A
009E FE                MOV     R6,A
009F 120000      E     LCALL   ?C?ULDIV
00A2 E4                CLR     A
00A3 7BC8              MOV     R3,#0C8H
00A5 FA                MOV     R2,A
00A6 F9                MOV     R1,A
00A7 F8                MOV     R0,A
00A8 120000      E     LCALL   ?C?LMUL
00AB 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 331
00AE 904210            MOV     DPTR,#04210H
00B1 E0                MOVX    A,@DPTR
00B2 5480              ANL     A,#080H
00B4 7006              JNZ     ?C0025
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 333
00B6 900000      R     MOV     DPTR,#status
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 334
00BA 800C              SJMP    ?C0024
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 336
00BC         ?C0025:
00BC 900000      R     MOV     DPTR,#i
00BF 74FF              MOV     A,#0FFH
00C1 F5F0              MOV     B,A
00C3 120000      E     LCALL   ?C?IILDX
00C6 809F              SJMP    ?C0023
00C8         ?C0024:
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 352
00C8         ?C0022:
                                           ; SOURCE LINE # 356
00C8 7F2D              MOV     R7,#02DH
00CA 120000      E     LCALL   _CyFlash_SetWaitCycles
                                           ; SOURCE LINE # 359
00CD 900000      R     MOV     DPTR,#cyPmClockBackup+02H
00D0 E0                MOVX    A,@DPTR
00D1 FF                MOV     R7,A
00D2 6402              XRL     A,#02H
00D4 6004              JZ      ?C0029
00D6 EF                MOV     A,R7
00D7 B40317            CJNE    A,#03H,?C0028
00DA         ?C0029:
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 363
00DA 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
00DD E0                MOVX    A,@DPTR
00DE FF                MOV     R7,A
00DF 904004            MOV     DPTR,#04004H
00E2 E0                MOVX    A,@DPTR
00E3 6F                XRL     A,R7
00E4 6003              JZ      ?C0030
                                           ; SOURCE LINE # 364
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 49  

                                           ; SOURCE LINE # 366
00E6 120000      E     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 367
00E9         ?C0030:
                                           ; SOURCE LINE # 370
00E9 900000      R     MOV     DPTR,#cyPmClockBackup+02H
00EC E0                MOVX    A,@DPTR
00ED FF                MOV     R7,A
00EE 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 371
00F1         ?C0028:
                                           ; SOURCE LINE # 374
00F1 900000      R     MOV     DPTR,#cyPmClockBackup+04H
00F4 E0                MOVX    A,@DPTR
00F5 5440              ANL     A,#040H
00F7 6012              JZ      ?C0031
00F9 900000      R     MOV     DPTR,#cyPmClockBackup+03H
00FC E0                MOVX    A,@DPTR
00FD 900000      R     MOV     DPTR,#cyPmImoFreqMhz2Reg
0100 93                MOVC    A,@A+DPTR
0101 B40307            CJNE    A,#03H,?C0031
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 378
0104 7F08              MOV     R7,#08H
0106 120000      E     LCALL   _CyIMO_SetFreq
                                           ; SOURCE LINE # 379
0109 8024              SJMP    ?C0032
010B         ?C0031:
                                           ; SOURCE LINE # 381
                                           ; SOURCE LINE # 383
010B 900000      R     MOV     DPTR,#cyPmClockBackup+03H
010E E0                MOVX    A,@DPTR
010F 900000      R     MOV     DPTR,#cyPmImoFreqMhz2Reg
0112 93                MOVC    A,@A+DPTR
0113 FF                MOV     R7,A
0114 120000      E     LCALL   _CyIMO_SetFreq
                                           ; SOURCE LINE # 385
0117 900000      R     MOV     DPTR,#cyPmClockBackup+04H
011A E0                MOVX    A,@DPTR
011B 5440              ANL     A,#040H
011D 6009              JZ      ?C0033
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
011F 904200            MOV     DPTR,#04200H
0122 E0                MOVX    A,@DPTR
0123 4440              ORL     A,#040H
0125 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
0126 8007              SJMP    ?C0032
0128         ?C0033:
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 391
0128 904200            MOV     DPTR,#04200H
012B E0                MOVX    A,@DPTR
012C 54BF              ANL     A,#0BFH
012E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 393
012F         ?C0032:
                                           ; SOURCE LINE # 397
012F 900000      R     MOV     DPTR,#cyPmClockBackup+06H
0132 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 50  

0133 B4010C            CJNE    A,#01H,?C0035
0136 9043A0            MOV     DPTR,#043A0H
0139 E0                MOVX    A,@DPTR
013A 5410              ANL     A,#010H
013C 7004              JNZ     ?C0035
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 400
013E FF                MOV     R7,A
013F 120000      E     LCALL   _CyIMO_Start
                                           ; SOURCE LINE # 401
0142         ?C0035:
                                           ; SOURCE LINE # 405
0142 900000      R     MOV     DPTR,#cyPmClockBackup+06H
0145 E0                MOVX    A,@DPTR
0146 700B              JNZ     ?C0036
0148 9043A0            MOV     DPTR,#043A0H
014B E0                MOVX    A,@DPTR
014C 5410              ANL     A,#010H
014E 6003              JZ      ?C0036
                                           ; SOURCE LINE # 406
                                           ; SOURCE LINE # 407
0150 120000      E     LCALL   CyIMO_Stop
                                           ; SOURCE LINE # 408
0153         ?C0036:
                                           ; SOURCE LINE # 411
0153 900000      R     MOV     DPTR,#cyPmClockBackup+07H
0156 E0                MOVX    A,@DPTR
0157 FF                MOV     R7,A
0158 120000      E     LCALL   _CyIMO_SetSource
                                           ; SOURCE LINE # 414
015B 900000      R     MOV     DPTR,#cyPmClockBackup+09H
015E E0                MOVX    A,@DPTR
015F B40103            CJNE    A,#01H,?C0037
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 416
0162 120000      E     LCALL   CyIMO_EnableDoubler
                                           ; SOURCE LINE # 417
0165         ?C0037:
                                           ; SOURCE LINE # 420
0165 904000            MOV     DPTR,#04000H
0168 E0                MOVX    A,@DPTR
0169 5430              ANL     A,#030H
016B FF                MOV     R7,A
016C 900000      R     MOV     DPTR,#cyPmClockBackup+08H
016F E0                MOVX    A,@DPTR
0170 FD                MOV     R5,A
0171 6F                XRL     A,R7
0172 7001              JNZ     ?C0117
0174 E4                CLR     A
0175         ?C0117:
0175 600A              JZ      ?C0038
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
0177 904000            MOV     DPTR,#04000H
017A E0                MOVX    A,@DPTR
017B 54CF              ANL     A,#0CFH
017D FF                MOV     R7,A
017E ED                MOV     A,R5
017F 4F                ORL     A,R7
0180 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 424
0181         ?C0038:
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 51  

                                           ; SOURCE LINE # 427
0181 900000      R     MOV     DPTR,#cyPmClockBackup+0DH
0184 E0                MOVX    A,@DPTR
0185 6401              XRL     A,#01H
0187 703C              JNZ     ?C0039
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 437
0189 FF                MOV     R7,A
018A 120000      E     LCALL   _CyPLL_OUT_Start
                                           ; SOURCE LINE # 440
018D 904005            MOV     DPTR,#04005H
0190 E0                MOVX    A,@DPTR
0191 54F0              ANL     A,#0F0H
0193 FF                MOV     R7,A
0194 E4                CLR     A
0195 C4                SWAP    A
0196 F8                MOV     R0,A
0197 54F0              ANL     A,#0F0H
0199 C8                XCH     A,R0
019A 68                XRL     A,R0
019B EF                MOV     A,R7
019C C4                SWAP    A
019D 540F              ANL     A,#0FH
019F 48                ORL     A,R0
01A0 04                INC     A
01A1 FF                MOV     R7,A
01A2 FB                MOV     R3,A
01A3 E4                CLR     A
01A4 FA                MOV     R2,A
01A5 F9                MOV     R1,A
01A6 F8                MOV     R0,A
01A7 904200            MOV     DPTR,#04200H
01AA E0                MOVX    A,@DPTR
01AB 5407              ANL     A,#07H
01AD 900000      R     MOV     DPTR,#cyPmImoFreqReg2Mhz
01B0 93                MOVC    A,@A+DPTR
01B1 FF                MOV     R7,A
01B2 E4                CLR     A
01B3 FC                MOV     R4,A
01B4 FD                MOV     R5,A
01B5 FE                MOV     R6,A
01B6 120000      E     LCALL   ?C?ULDIV
01B9 E4                CLR     A
01BA 7BFA              MOV     R3,#0FAH
01BC FA                MOV     R2,A
01BD F9                MOV     R1,A
01BE F8                MOV     R0,A
01BF 120000      E     LCALL   ?C?LMUL
01C2 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 441
01C5         ?C0039:
                                           ; SOURCE LINE # 445
01C5 900000      R     MOV     DPTR,#cyPmClockBackup+02H
01C8 E0                MOVX    A,@DPTR
01C9 FF                MOV     R7,A
01CA 6003              JZ      ?C0041
01CC B40117            CJNE    A,#01H,?C0040
01CF         ?C0041:
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 449
01CF 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
01D2 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 52  

01D3 FF                MOV     R7,A
01D4 904004            MOV     DPTR,#04004H
01D7 E0                MOVX    A,@DPTR
01D8 6F                XRL     A,R7
01D9 6003              JZ      ?C0042
                                           ; SOURCE LINE # 450
                                           ; SOURCE LINE # 451
01DB 120000      E     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 452
01DE         ?C0042:
                                           ; SOURCE LINE # 455
01DE 900000      R     MOV     DPTR,#cyPmClockBackup+02H
01E1 E0                MOVX    A,@DPTR
01E2 FF                MOV     R7,A
01E3 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 456
01E6         ?C0040:
                                           ; SOURCE LINE # 459
01E6 904007            MOV     DPTR,#04007H
01E9 E0                MOVX    A,@DPTR
01EA FE                MOV     R6,A
01EB 904006            MOV     DPTR,#04006H
01EE E0                MOVX    A,@DPTR
01EF FD                MOV     R5,A
01F0 EE                MOV     A,R6
01F1 FC                MOV     R4,A
01F2 ED                MOV     A,R5
01F3 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
01F6 E0                MOVX    A,@DPTR
01F7 FE                MOV     R6,A
01F8 A3                INC     DPTR
01F9 E0                MOVX    A,@DPTR
01FA FF                MOV     R7,A
01FB 6D                XRL     A,R5
01FC 7002              JNZ     ?C0118
01FE EE                MOV     A,R6
01FF 6C                XRL     A,R4
0200         ?C0118:
0200 6003              JZ      ?C0043
                                           ; SOURCE LINE # 460
                                           ; SOURCE LINE # 461
0202 120000      E     LCALL   _CyBusClk_SetDivider
                                           ; SOURCE LINE # 462
0205         ?C0043:
                                           ; SOURCE LINE # 465
0205 904800            MOV     DPTR,#04800H
0208 E0                MOVX    A,@DPTR
0209 543F              ANL     A,#03FH
020B FF                MOV     R7,A
020C 900000      R     MOV     DPTR,#cyPmClockBackup+05H
020F E0                MOVX    A,@DPTR
0210 4F                ORL     A,R7
0211 904800            MOV     DPTR,#04800H
0214 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 469
0215 900000      R     MOV     DPTR,#cyPmClockBackup
0218 E0                MOVX    A,@DPTR
0219 9043A1            MOV     DPTR,#043A1H
021C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 470
021D 900000      R     MOV     DPTR,#cyPmClockBackup+01H
0220 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 53  

0221 9043A2            MOV     DPTR,#043A2H
0224 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 471
0225 22                RET     
             ; FUNCTION CyPmRestoreClocks (END)

             ; FUNCTION _CyPmAltAct (BEGIN)
                                           ; SOURCE LINE # 637
0000 900000      R     MOV     DPTR,#wakeupSource
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#wakeupTime
000B EE                MOV     A,R6
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 638
                                           ; SOURCE LINE # 667
0010 C3                CLR     C
0011 940F              SUBB    A,#0FH
0013 EE                MOV     A,R6
0014 9400              SUBB    A,#00H
0016 4021              JC      ?C0045
0018 900000      R     MOV     DPTR,#wakeupTime
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 D3                SETB    C
0021 940E              SUBB    A,#0EH
0023 EE                MOV     A,R6
0024 9401              SUBB    A,#01H
0026 5011              JNC     ?C0045
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 669
0028 EF                MOV     A,R7
0029 24F2              ADD     A,#0F2H
002B FF                MOV     R7,A
002C 120000      R     LCALL   _CyPmFtwSetInterval
                                           ; SOURCE LINE # 672
002F 900000      R     MOV     DPTR,#wakeupSource
0032 E0                MOVX    A,@DPTR
0033 4404              ORL     A,#04H
0035 F0                MOVX    @DPTR,A
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 673
0039         ?C0045:
                                           ; SOURCE LINE # 676
0039 900000      R     MOV     DPTR,#wakeupTime
003C E0                MOVX    A,@DPTR
003D FE                MOV     R6,A
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 C3                CLR     C
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 54  

0042 9402              SUBB    A,#02H
0044 EE                MOV     A,R6
0045 9400              SUBB    A,#00H
0047 4019              JC      ?C0046
0049 D3                SETB    C
004A EF                MOV     A,R7
004B 940D              SUBB    A,#0DH
004D EE                MOV     A,R6
004E 9400              SUBB    A,#00H
0050 5010              JNC     ?C0046
                                           ; SOURCE LINE # 677
                                           ; SOURCE LINE # 679
0052 EF                MOV     A,R7
0053 14                DEC     A
0054 FF                MOV     R7,A
0055 120000      R     LCALL   _CyPmCtwSetInterval
                                           ; SOURCE LINE # 682
0058 900000      R     MOV     DPTR,#wakeupSource
005B E0                MOVX    A,@DPTR
005C 4408              ORL     A,#08H
005E F0                MOVX    @DPTR,A
005F A3                INC     DPTR
0060 E0                MOVX    A,@DPTR
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 683
0062         ?C0046:
                                           ; SOURCE LINE # 686
0062 900000      R     MOV     DPTR,#wakeupTime
0065 E0                MOVX    A,@DPTR
0066 7004              JNZ     ?C0119
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A 6401              XRL     A,#01H
006C         ?C0119:
006C 700D              JNZ     ?C0047
                                           ; SOURCE LINE # 687
                                           ; SOURCE LINE # 689
006E 120000      R     LCALL   CyPmOppsSet
                                           ; SOURCE LINE # 692
0071 900000      R     MOV     DPTR,#wakeupSource
0074 E0                MOVX    A,@DPTR
0075 4408              ORL     A,#08H
0077 F0                MOVX    @DPTR,A
0078 A3                INC     DPTR
0079 E0                MOVX    A,@DPTR
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 693
007B         ?C0047:
                                           ; SOURCE LINE # 703
007B 904398            MOV     DPTR,#04398H
007E E0                MOVX    A,@DPTR
007F 900000      R     MOV     DPTR,#cyPmBackup+06H
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 704
0083 900000      R     MOV     DPTR,#wakeupSource
0086 E0                MOVX    A,@DPTR
0087 FC                MOV     R4,A
0088 A3                INC     DPTR
0089 E0                MOVX    A,@DPTR
008A FD                MOV     R5,A
008B EC                MOV     A,R4
008C C4                SWAP    A
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 55  

008D F8                MOV     R0,A
008E 54F0              ANL     A,#0F0H
0090 C8                XCH     A,R0
0091 68                XRL     A,R0
0092 ED                MOV     A,R5
0093 C4                SWAP    A
0094 540F              ANL     A,#0FH
0096 48                ORL     A,R0
0097 904398            MOV     DPTR,#04398H
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 707
009B A3                INC     DPTR
009C E0                MOVX    A,@DPTR
009D 900000      R     MOV     DPTR,#cyPmBackup+07H
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 708
00A1 ED                MOV     A,R5
00A2 540F              ANL     A,#0FH
00A4 904399            MOV     DPTR,#04399H
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 711
00A8 A3                INC     DPTR
00A9 E0                MOVX    A,@DPTR
00AA 900000      R     MOV     DPTR,#cyPmBackup+08H
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 712
00AE 900000      R     MOV     DPTR,#wakeupSource
00B1 E0                MOVX    A,@DPTR
00B2 C4                SWAP    A
00B3 5401              ANL     A,#01H
00B5 90439A            MOV     DPTR,#0439AH
00B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 718
00B9 904393            MOV     DPTR,#04393H
00BC E0                MOVX    A,@DPTR
00BD 54F8              ANL     A,#0F8H
00BF 4401              ORL     A,#01H
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 721
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
                                           ; SOURCE LINE # 724
00C4 00                NOP     
                                           ; SOURCE LINE # 725
00C5 00                NOP     
                                           ; SOURCE LINE # 728
00C6 00                NOP     
                                           ; SOURCE LINE # 735
00C7 900000      R     MOV     DPTR,#cyPmBackup+06H
00CA E0                MOVX    A,@DPTR
00CB 904398            MOV     DPTR,#04398H
00CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 736
00CF 900000      R     MOV     DPTR,#cyPmBackup+07H
00D2 E0                MOVX    A,@DPTR
00D3 904399            MOV     DPTR,#04399H
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 737
00D7 900000      R     MOV     DPTR,#cyPmBackup+08H
00DA E0                MOVX    A,@DPTR
00DB 90439A            MOV     DPTR,#0439AH
00DE F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 56  

                                           ; SOURCE LINE # 740
00DF 22                RET     
             ; FUNCTION _CyPmAltAct (END)

             ; FUNCTION _CyPmSleep (BEGIN)
                                           ; SOURCE LINE # 888
0000 900000      R     MOV     DPTR,#wakeupTime
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 889
                                           ; SOURCE LINE # 893
000B 120000      E     LCALL   CyEnterCriticalSection
000E 900000      R     MOV     DPTR,#interruptState
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 904
0013 904393            MOV     DPTR,#04393H
0016 E0                MOVX    A,@DPTR
0017 5408              ANL     A,#08H
0019 7009              JNZ     ?C0049
                                           ; SOURCE LINE # 905
                                           ; SOURCE LINE # 907
001B 904683            MOV     DPTR,#04683H
001E E0                MOVX    A,@DPTR
001F 541F              ANL     A,#01FH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 908
0022 8009              SJMP    ?C0050
0024         ?C0049:
                                           ; SOURCE LINE # 910
                                           ; SOURCE LINE # 914
0024 900000      R     MOV     DPTR,#interruptState
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 120000      E     LCALL   _CyExitCriticalSection
002C 22                RET     
                                           ; SOURCE LINE # 917
002D         ?C0050:
                                           ; SOURCE LINE # 925
002D 9046EC            MOV     DPTR,#046ECH
0030 E0                MOVX    A,@DPTR
0031 C3                CLR     C
0032 9405              SUBB    A,#05H
0034 5005              JNC     ?C0052
                                           ; SOURCE LINE # 926
                                           ; SOURCE LINE # 931
0036 9046F5            MOV     DPTR,#046F5H
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
                                           ; SOURCE LINE # 933
                                           ; SOURCE LINE # 935
                                           ; SOURCE LINE # 936
003B         ?C0052:
                                           ; SOURCE LINE # 974
003B 120000      R     LCALL   CyPmSlpSaveSet
                                           ; SOURCE LINE # 980
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 57  

003E 900000      R     MOV     DPTR,#wakeupTime
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 C3                CLR     C
0044 9402              SUBB    A,#02H
0046 4016              JC      ?C0054
0048 EF                MOV     A,R7
0049 D3                SETB    C
004A 940D              SUBB    A,#0DH
004C 5010              JNC     ?C0054
                                           ; SOURCE LINE # 981
                                           ; SOURCE LINE # 983
004E EF                MOV     A,R7
004F 14                DEC     A
0050 FF                MOV     R7,A
0051 120000      R     LCALL   _CyPmCtwSetInterval
                                           ; SOURCE LINE # 986
0054 900000      R     MOV     DPTR,#wakeupSource
0057 E0                MOVX    A,@DPTR
0058 4408              ORL     A,#08H
005A F0                MOVX    @DPTR,A
005B A3                INC     DPTR
005C E0                MOVX    A,@DPTR
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 987
005E         ?C0054:
                                           ; SOURCE LINE # 990
005E 900000      R     MOV     DPTR,#wakeupTime
0061 E0                MOVX    A,@DPTR
0062 B4010D            CJNE    A,#01H,?C0055
                                           ; SOURCE LINE # 991
                                           ; SOURCE LINE # 993
0065 120000      R     LCALL   CyPmOppsSet
                                           ; SOURCE LINE # 996
0068 900000      R     MOV     DPTR,#wakeupSource
006B E0                MOVX    A,@DPTR
006C 4408              ORL     A,#08H
006E F0                MOVX    @DPTR,A
006F A3                INC     DPTR
0070 E0                MOVX    A,@DPTR
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 997
0072         ?C0055:
                                           ; SOURCE LINE # 1007
0072 904398            MOV     DPTR,#04398H
0075 E0                MOVX    A,@DPTR
0076 900000      R     MOV     DPTR,#cyPmBackup+06H
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1008
007A 900000      R     MOV     DPTR,#wakeupSource
007D E0                MOVX    A,@DPTR
007E FC                MOV     R4,A
007F A3                INC     DPTR
0080 E0                MOVX    A,@DPTR
0081 FD                MOV     R5,A
0082 EC                MOV     A,R4
0083 C4                SWAP    A
0084 F8                MOV     R0,A
0085 54F0              ANL     A,#0F0H
0087 C8                XCH     A,R0
0088 68                XRL     A,R0
0089 ED                MOV     A,R5
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 58  

008A C4                SWAP    A
008B 540F              ANL     A,#0FH
008D 48                ORL     A,R0
008E 904398            MOV     DPTR,#04398H
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1011
0092 A3                INC     DPTR
0093 E0                MOVX    A,@DPTR
0094 900000      R     MOV     DPTR,#cyPmBackup+07H
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1012
0098 ED                MOV     A,R5
0099 540F              ANL     A,#0FH
009B 904399            MOV     DPTR,#04399H
009E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1015
009F A3                INC     DPTR
00A0 E0                MOVX    A,@DPTR
00A1 900000      R     MOV     DPTR,#cyPmBackup+08H
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1016
00A5 900000      R     MOV     DPTR,#wakeupSource
00A8 E0                MOVX    A,@DPTR
00A9 C4                SWAP    A
00AA 5401              ANL     A,#01H
00AC 90439A            MOV     DPTR,#0439AH
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1031
00B0 904200            MOV     DPTR,#04200H
00B3 E0                MOVX    A,@DPTR
00B4 5407              ANL     A,#07H
00B6 7007              JNZ     ?C0056
                                           ; SOURCE LINE # 1032
                                           ; SOURCE LINE # 1034
00B8 900000      R     MOV     DPTR,#cyPmBackup+02FH
00BB 04                INC     A
00BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1035
00BD 8016              SJMP    ?C0057
00BF         ?C0056:
                                           ; SOURCE LINE # 1037
                                           ; SOURCE LINE # 1039
00BF E4                CLR     A
00C0 900000      R     MOV     DPTR,#cyPmBackup+02FH
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1042
00C4 904200            MOV     DPTR,#04200H
00C7 E0                MOVX    A,@DPTR
00C8 5407              ANL     A,#07H
00CA 900000      R     MOV     DPTR,#cyPmBackup+02EH
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1045
00CE 904200            MOV     DPTR,#04200H
00D1 E0                MOVX    A,@DPTR
00D2 54F8              ANL     A,#0F8H
00D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1046
00D5         ?C0057:
                                           ; SOURCE LINE # 1049
00D5 904393            MOV     DPTR,#04393H
00D8 E0                MOVX    A,@DPTR
00D9 54F8              ANL     A,#0F8H
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 59  

00DB 4403              ORL     A,#03H
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1052
00DE E0                MOVX    A,@DPTR
00DF FF                MOV     R7,A
                                           ; SOURCE LINE # 1055
00E0 00                NOP     
                                           ; SOURCE LINE # 1056
00E1 00                NOP     
                                           ; SOURCE LINE # 1059
00E2 00                NOP     
                                           ; SOURCE LINE # 1064
00E3 900000      R     MOV     DPTR,#cyPmBackup+02FH
00E6 E0                MOVX    A,@DPTR
00E7 6401              XRL     A,#01H
00E9 6010              JZ      ?C0058
                                           ; SOURCE LINE # 1065
                                           ; SOURCE LINE # 1066
00EB 904200            MOV     DPTR,#04200H
00EE E0                MOVX    A,@DPTR
00EF 54F8              ANL     A,#0F8H
00F1 FF                MOV     R7,A
00F2 900000      R     MOV     DPTR,#cyPmBackup+02EH
00F5 E0                MOVX    A,@DPTR
00F6 4F                ORL     A,R7
00F7 904200            MOV     DPTR,#04200H
00FA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1068
00FB         ?C0058:
                                           ; SOURCE LINE # 1081
00FB 120000      R     LCALL   CyPmSlpRestore
                                           ; SOURCE LINE # 1087
00FE 900000      R     MOV     DPTR,#cyPmBackup+06H
0101 E0                MOVX    A,@DPTR
0102 904398            MOV     DPTR,#04398H
0105 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1088
0106 900000      R     MOV     DPTR,#cyPmBackup+07H
0109 E0                MOVX    A,@DPTR
010A 904399            MOV     DPTR,#04399H
010D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1089
010E 900000      R     MOV     DPTR,#cyPmBackup+08H
0111 E0                MOVX    A,@DPTR
0112 90439A            MOV     DPTR,#0439AH
0115 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1094
0116 900000      R     MOV     DPTR,#interruptState
0119 E0                MOVX    A,@DPTR
011A FF                MOV     R7,A
011B 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1095
011E         ?C0051:
011E 22                RET     
             ; FUNCTION _CyPmSleep (END)

             ; FUNCTION CyPmHibernate (BEGIN)
                                           ; SOURCE LINE # 1147
                                           ; SOURCE LINE # 1148
                                           ; SOURCE LINE # 1152
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 60  

0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1162
0008 904393            MOV     DPTR,#04393H
000B E0                MOVX    A,@DPTR
000C 5408              ANL     A,#08H
000E 7009              JNZ     ?C0059
                                           ; SOURCE LINE # 1163
                                           ; SOURCE LINE # 1165
0010 904683            MOV     DPTR,#04683H
0013 E0                MOVX    A,@DPTR
0014 541F              ANL     A,#01FH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1166
0017 8009              SJMP    ?C0060
0019         ?C0059:
                                           ; SOURCE LINE # 1168
                                           ; SOURCE LINE # 1172
0019 900000      R     MOV     DPTR,#interruptState
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 120000      E     LCALL   _CyExitCriticalSection
0021 22                RET     
                                           ; SOURCE LINE # 1175
0022         ?C0060:
                                           ; SOURCE LINE # 1180
0022 120000      R     LCALL   CyPmHibSaveSet
                                           ; SOURCE LINE # 1186
0025 904398            MOV     DPTR,#04398H
0028 E0                MOVX    A,@DPTR
0029 900000      R     MOV     DPTR,#cyPmBackup+06H
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1187
002D 904398            MOV     DPTR,#04398H
0030 7404              MOV     A,#04H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1189
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 900000      R     MOV     DPTR,#cyPmBackup+07H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1190
0039 904399            MOV     DPTR,#04399H
003C E4                CLR     A
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1192
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 900000      R     MOV     DPTR,#cyPmBackup+08H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1193
0044 90439A            MOV     DPTR,#0439AH
0047 E4                CLR     A
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1199
0049 904200            MOV     DPTR,#04200H
004C E0                MOVX    A,@DPTR
004D 5407              ANL     A,#07H
004F 7007              JNZ     ?C0062
                                           ; SOURCE LINE # 1200
                                           ; SOURCE LINE # 1202
0051 900000      R     MOV     DPTR,#cyPmBackup+02FH
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 61  

0054 04                INC     A
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1203
0056 8016              SJMP    ?C0063
0058         ?C0062:
                                           ; SOURCE LINE # 1205
                                           ; SOURCE LINE # 1207
0058 E4                CLR     A
0059 900000      R     MOV     DPTR,#cyPmBackup+02FH
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1210
005D 904200            MOV     DPTR,#04200H
0060 E0                MOVX    A,@DPTR
0061 5407              ANL     A,#07H
0063 900000      R     MOV     DPTR,#cyPmBackup+02EH
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1213
0067 904200            MOV     DPTR,#04200H
006A E0                MOVX    A,@DPTR
006B 54F8              ANL     A,#0F8H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1214
006E         ?C0063:
                                           ; SOURCE LINE # 1218
006E 904393            MOV     DPTR,#04393H
0071 E0                MOVX    A,@DPTR
0072 54F8              ANL     A,#0F8H
0074 4404              ORL     A,#04H
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1221
0077 E0                MOVX    A,@DPTR
0078 FF                MOV     R7,A
                                           ; SOURCE LINE # 1224
0079 00                NOP     
                                           ; SOURCE LINE # 1225
007A 00                NOP     
                                           ; SOURCE LINE # 1228
007B 00                NOP     
                                           ; SOURCE LINE # 1234
007C 900000      R     MOV     DPTR,#cyPmBackup+02FH
007F E0                MOVX    A,@DPTR
0080 6401              XRL     A,#01H
0082 6010              JZ      ?C0064
                                           ; SOURCE LINE # 1235
                                           ; SOURCE LINE # 1236
0084 904200            MOV     DPTR,#04200H
0087 E0                MOVX    A,@DPTR
0088 54F8              ANL     A,#0F8H
008A FF                MOV     R7,A
008B 900000      R     MOV     DPTR,#cyPmBackup+02EH
008E E0                MOVX    A,@DPTR
008F 4F                ORL     A,R7
0090 904200            MOV     DPTR,#04200H
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1238
0094         ?C0064:
                                           ; SOURCE LINE # 1242
0094 120000      R     LCALL   CyPmHibRestore
                                           ; SOURCE LINE # 1248
0097 900000      R     MOV     DPTR,#cyPmBackup+06H
009A E0                MOVX    A,@DPTR
009B 904398            MOV     DPTR,#04398H
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 62  

009E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1249
009F 900000      R     MOV     DPTR,#cyPmBackup+07H
00A2 E0                MOVX    A,@DPTR
00A3 904399            MOV     DPTR,#04399H
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1250
00A7 900000      R     MOV     DPTR,#cyPmBackup+08H
00AA E0                MOVX    A,@DPTR
00AB 90439A            MOV     DPTR,#0439AH
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1255
00AF 900000      R     MOV     DPTR,#interruptState
00B2 E0                MOVX    A,@DPTR
00B3 FF                MOV     R7,A
00B4 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1256
00B7         ?C0061:
00B7 22                RET     
             ; FUNCTION CyPmHibernate (END)

             ; FUNCTION _CyPmReadStatus (BEGIN)
                                           ; SOURCE LINE # 1288
0000 900000      R     MOV     DPTR,#mask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1289
                                           ; SOURCE LINE # 1295
0005 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'interruptState' assigned to Register 'R4' ----
0008 AC07              MOV     R4,AR7
                                           ; SOURCE LINE # 1298
000A 900000      R     MOV     DPTR,#interruptStatus
000D E0                MOVX    A,@DPTR
000E FE                MOV     R6,A
000F 904390            MOV     DPTR,#04390H
0012 E0                MOVX    A,@DPTR
0013 FD                MOV     R5,A
0014 EE                MOV     A,R6
0015 4D                ORL     A,R5
0016 900000      R     MOV     DPTR,#interruptStatus
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1299
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C 900000      R     MOV     DPTR,#tmpStatus
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1300
0020 900000      R     MOV     DPTR,#mask
0023 E0                MOVX    A,@DPTR
0024 F4                CPL     A
0025 FE                MOV     R6,A
0026 EF                MOV     A,R7
0027 5E                ANL     A,R6
0028 900000      R     MOV     DPTR,#interruptStatus
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1303
002C AF04              MOV     R7,AR4
002E 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1305
0031 900000      R     MOV     DPTR,#tmpStatus
0034 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 63  

0035 FF                MOV     R7,A
                                           ; SOURCE LINE # 1306
0036         ?C0065:
0036 22                RET     
             ; FUNCTION _CyPmReadStatus (END)

             ; FUNCTION CyPmHibSaveSet (BEGIN)
                                           ; SOURCE LINE # 1333
                                           ; SOURCE LINE # 1334
                                           ; SOURCE LINE # 1336
0000 904331            MOV     DPTR,#04331H
0003 E0                MOVX    A,@DPTR
0004 5404              ANL     A,#04H
0006 6004              JZ      ?C0067
                                           ; SOURCE LINE # 1337
                                           ; SOURCE LINE # 1356
0008 E0                MOVX    A,@DPTR
0009 54FB              ANL     A,#0FBH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1357
                                           ; SOURCE LINE # 1359
                                           ; SOURCE LINE # 1366
000C         ?C0067:
                                           ; SOURCE LINE # 1372
000C 7F01              MOV     R7,#01H
000E 120000      E     LCALL   _CyILO_SetPowerMode
0011 900000      R     MOV     DPTR,#cyPmBackup
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1375
0016 904300            MOV     DPTR,#04300H
0019 E0                MOVX    A,@DPTR
001A 5402              ANL     A,#02H
001C 7003              JNZ     ?C0068
001E FF                MOV     R7,A
001F 8002              SJMP    ?C0069
0021         ?C0068:
0021 7F01              MOV     R7,#01H
0023         ?C0069:
0023 900000      R     MOV     DPTR,#cyPmBackup+01H
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1379
0028 904300            MOV     DPTR,#04300H
002B E0                MOVX    A,@DPTR
002C 5404              ANL     A,#04H
002E 7003              JNZ     ?C0070
0030 FF                MOV     R7,A
0031 8002              SJMP    ?C0071
0033         ?C0070:
0033 7F01              MOV     R7,#01H
0035         ?C0071:
0035 900000      R     MOV     DPTR,#cyPmBackup+02H
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1384
003A 904683            MOV     DPTR,#04683H
003D E0                MOVX    A,@DPTR
003E 5410              ANL     A,#010H
0040 700D              JNZ     ?C0072
                                           ; SOURCE LINE # 1385
                                           ; SOURCE LINE # 1387
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 64  

0042 900000      R     MOV     DPTR,#cyPmBackup+03H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1388
0046 904683            MOV     DPTR,#04683H
0049 E0                MOVX    A,@DPTR
004A 4410              ORL     A,#010H
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1389
004D 8006              SJMP    ?C0073
004F         ?C0072:
                                           ; SOURCE LINE # 1391
                                           ; SOURCE LINE # 1392
004F 900000      R     MOV     DPTR,#cyPmBackup+03H
0052 7401              MOV     A,#01H
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1393
0055         ?C0073:
                                           ; SOURCE LINE # 1414
0055 120000      R     LCALL   CyPmHviLviSaveDisable
                                           ; SOURCE LINE # 1418
0058 120000      R     LCALL   CyPmHibSlpSaveSet
                                           ; SOURCE LINE # 1426
005B 904685            MOV     DPTR,#04685H
005E E0                MOVX    A,@DPTR
005F 900000      R     MOV     DPTR,#cyPmBackup+09H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1427
0063 904686            MOV     DPTR,#04686H
0066 E0                MOVX    A,@DPTR
0067 900000      R     MOV     DPTR,#cyPmBackup+0AH
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1429
006B 904685            MOV     DPTR,#04685H
006E 74FF              MOV     A,#0FFH
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1430
0071 A3                INC     DPTR
0072 7490              MOV     A,#090H
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1434
0075 22                RET     
             ; FUNCTION CyPmHibSaveSet (END)

             ; FUNCTION CyPmHibRestore (BEGIN)
                                           ; SOURCE LINE # 1457
                                           ; SOURCE LINE # 1458
                                           ; SOURCE LINE # 1460
0000 120000      R     LCALL   CyPmHviLviRestore
                                           ; SOURCE LINE # 1463
0003 120000      R     LCALL   CyPmHibSlpRestore
                                           ; SOURCE LINE # 1480
0006 900000      R     MOV     DPTR,#cyPmBackup+01H
0009 E0                MOVX    A,@DPTR
000A B40103            CJNE    A,#01H,?C0075
                                           ; SOURCE LINE # 1481
                                           ; SOURCE LINE # 1483
000D 120000      E     LCALL   CyILO_Start1K
                                           ; SOURCE LINE # 1484
0010         ?C0075:
                                           ; SOURCE LINE # 1487
0010 900000      R     MOV     DPTR,#cyPmBackup+02H
0013 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 65  

0014 B40103            CJNE    A,#01H,?C0076
                                           ; SOURCE LINE # 1488
                                           ; SOURCE LINE # 1490
0017 120000      E     LCALL   CyILO_Start100K
                                           ; SOURCE LINE # 1491
001A         ?C0076:
                                           ; SOURCE LINE # 1494
001A 900000      R     MOV     DPTR,#cyPmBackup
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 120000      E     LCALL   _CyILO_SetPowerMode
                                           ; SOURCE LINE # 1497
0022 900000      R     MOV     DPTR,#cyPmBackup+03H
0025 E0                MOVX    A,@DPTR
0026 7007              JNZ     ?C0077
                                           ; SOURCE LINE # 1498
                                           ; SOURCE LINE # 1500
0028 904683            MOV     DPTR,#04683H
002B E0                MOVX    A,@DPTR
002C 54EF              ANL     A,#0EFH
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1501
002F         ?C0077:
                                           ; SOURCE LINE # 1511
002F 900000      R     MOV     DPTR,#cyPmBackup+09H
0032 E0                MOVX    A,@DPTR
0033 904685            MOV     DPTR,#04685H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1512
0037 900000      R     MOV     DPTR,#cyPmBackup+0AH
003A E0                MOVX    A,@DPTR
003B 904686            MOV     DPTR,#04686H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1515
003F 22                RET     
             ; FUNCTION CyPmHibRestore (END)

             ; FUNCTION _CyPmCtwSetInterval (BEGIN)
                                           ; SOURCE LINE # 1538
0000 900000      R     MOV     DPTR,#ctwInterval
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1539
                                           ; SOURCE LINE # 1541
0005 904382            MOV     DPTR,#04382H
0008 E0                MOVX    A,@DPTR
0009 54F7              ANL     A,#0F7H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1544
000C 120000      E     LCALL   CyILO_Start1K
                                           ; SOURCE LINE # 1547
000F 904382            MOV     DPTR,#04382H
0012 E0                MOVX    A,@DPTR
0013 5404              ANL     A,#04H
0015 601C              JZ      ?C0079
                                           ; SOURCE LINE # 1548
                                           ; SOURCE LINE # 1550
0017 900000      R     MOV     DPTR,#ctwInterval
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C 904381            MOV     DPTR,#04381H
001F E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 66  

0020 6F                XRL     A,R7
0021 6025              JZ      ?C0083
                                           ; SOURCE LINE # 1551
                                           ; SOURCE LINE # 1553
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 54FB              ANL     A,#0FBH
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1554
0028 904381            MOV     DPTR,#04381H
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1555
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F 4404              ORL     A,#04H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1556
                                           ; SOURCE LINE # 1557
0032 22                RET     
0033         ?C0079:
                                           ; SOURCE LINE # 1559
                                           ; SOURCE LINE # 1561
0033 900000      R     MOV     DPTR,#ctwInterval
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 904381            MOV     DPTR,#04381H
003B E0                MOVX    A,@DPTR
003C 6F                XRL     A,R7
003D 6002              JZ      ?C0082
                                           ; SOURCE LINE # 1562
                                           ; SOURCE LINE # 1564
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1565
0041         ?C0082:
                                           ; SOURCE LINE # 1568
0041 904382            MOV     DPTR,#04382H
0044 E0                MOVX    A,@DPTR
0045 4404              ORL     A,#04H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1569
                                           ; SOURCE LINE # 1570
0048         ?C0083:
0048 22                RET     
             ; FUNCTION _CyPmCtwSetInterval (END)

             ; FUNCTION CyPmOppsSet (BEGIN)
                                           ; SOURCE LINE # 1590
                                           ; SOURCE LINE # 1591
                                           ; SOURCE LINE # 1593
0000 904308            MOV     DPTR,#04308H
0003 E0                MOVX    A,@DPTR
0004 5401              ANL     A,#01H
0006 7003              JNZ     ?C0084
                                           ; SOURCE LINE # 1594
                                           ; SOURCE LINE # 1596
0008 120000      E     LCALL   CyXTAL_32KHZ_Start
                                           ; SOURCE LINE # 1597
000B         ?C0084:
                                           ; SOURCE LINE # 1600
000B 904382            MOV     DPTR,#04382H
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 67  

000E E0                MOVX    A,@DPTR
000F 54DF              ANL     A,#0DFH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1603
0012 E0                MOVX    A,@DPTR
0013 4410              ORL     A,#010H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1604
0016 22                RET     
             ; FUNCTION CyPmOppsSet (END)

             ; FUNCTION _CyPmFtwSetInterval (BEGIN)
                                           ; SOURCE LINE # 1627
0000 900000      R     MOV     DPTR,#ftwInterval
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1628
                                           ; SOURCE LINE # 1630
0005 904382            MOV     DPTR,#04382H
0008 E0                MOVX    A,@DPTR
0009 54FD              ANL     A,#0FDH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1633
000C 120000      E     LCALL   CyILO_Start100K
                                           ; SOURCE LINE # 1636
000F 904382            MOV     DPTR,#04382H
0012 E0                MOVX    A,@DPTR
0013 5401              ANL     A,#01H
0015 6020              JZ      ?C0086
                                           ; SOURCE LINE # 1637
                                           ; SOURCE LINE # 1639
0017 900000      R     MOV     DPTR,#ftwInterval
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C 904380            MOV     DPTR,#04380H
001F E0                MOVX    A,@DPTR
0020 6F                XRL     A,R7
0021 6029              JZ      ?C0090
                                           ; SOURCE LINE # 1640
                                           ; SOURCE LINE # 1642
0023 904382            MOV     DPTR,#04382H
0026 E0                MOVX    A,@DPTR
0027 54FE              ANL     A,#0FEH
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1643
002A 904380            MOV     DPTR,#04380H
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1644
002F 904382            MOV     DPTR,#04382H
0032 E0                MOVX    A,@DPTR
0033 4401              ORL     A,#01H
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1645
                                           ; SOURCE LINE # 1646
0036 22                RET     
0037         ?C0086:
                                           ; SOURCE LINE # 1648
                                           ; SOURCE LINE # 1650
0037 900000      R     MOV     DPTR,#ftwInterval
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 68  

003C 904380            MOV     DPTR,#04380H
003F E0                MOVX    A,@DPTR
0040 6F                XRL     A,R7
0041 6002              JZ      ?C0089
                                           ; SOURCE LINE # 1651
                                           ; SOURCE LINE # 1653
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1654
0045         ?C0089:
                                           ; SOURCE LINE # 1657
0045 904382            MOV     DPTR,#04382H
0048 E0                MOVX    A,@DPTR
0049 4401              ORL     A,#01H
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1658
                                           ; SOURCE LINE # 1659
004C         ?C0090:
004C 22                RET     
             ; FUNCTION _CyPmFtwSetInterval (END)

             ; FUNCTION CyPmSlpSaveSet (BEGIN)
                                           ; SOURCE LINE # 1782
                                           ; SOURCE LINE # 1783
                                           ; SOURCE LINE # 1838
0000 120000      R     LCALL   CyPmHibSlpSaveSet
                                           ; SOURCE LINE # 1839
0003 22                RET     
             ; FUNCTION CyPmSlpSaveSet (END)

             ; FUNCTION CyPmSlpRestore (BEGIN)
                                           ; SOURCE LINE # 1861
                                           ; SOURCE LINE # 1862
                                           ; SOURCE LINE # 1891
0000 120000      R     LCALL   CyPmHibSlpRestore
                                           ; SOURCE LINE # 1892
0003 22                RET     
             ; FUNCTION CyPmSlpRestore (END)

             ; FUNCTION CyPmHibSlpSaveSet (BEGIN)
                                           ; SOURCE LINE # 1917
                                           ; SOURCE LINE # 1918
                                           ; SOURCE LINE # 2064
0000 905A00            MOV     DPTR,#05A00H
0003 E0                MOVX    A,@DPTR
0004 900000      R     MOV     DPTR,#cyPmBackup+0BH
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2065
0008 905A02            MOV     DPTR,#05A02H
000B E0                MOVX    A,@DPTR
000C 900000      R     MOV     DPTR,#cyPmBackup+0CH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2066
0010 905A03            MOV     DPTR,#05A03H
0013 E0                MOVX    A,@DPTR
0014 900000      R     MOV     DPTR,#cyPmBackup+0DH
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2067
0018 905A04            MOV     DPTR,#05A04H
001B E0                MOVX    A,@DPTR
001C 900000      R     MOV     DPTR,#cyPmBackup+0EH
001F F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 69  

                                           ; SOURCE LINE # 2068
0020 905A06            MOV     DPTR,#05A06H
0023 E0                MOVX    A,@DPTR
0024 900000      R     MOV     DPTR,#cyPmBackup+0FH
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2069
0028 905A08            MOV     DPTR,#05A08H
002B E0                MOVX    A,@DPTR
002C 900000      R     MOV     DPTR,#cyPmBackup+010H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2070
0030 905A0A            MOV     DPTR,#05A0AH
0033 E0                MOVX    A,@DPTR
0034 900000      R     MOV     DPTR,#cyPmBackup+011H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2072
0038 905A10            MOV     DPTR,#05A10H
003B E0                MOVX    A,@DPTR
003C 900000      R     MOV     DPTR,#cyPmBackup+012H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2073
0040 905A12            MOV     DPTR,#05A12H
0043 E0                MOVX    A,@DPTR
0044 900000      R     MOV     DPTR,#cyPmBackup+013H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2074
0048 905A13            MOV     DPTR,#05A13H
004B E0                MOVX    A,@DPTR
004C 900000      R     MOV     DPTR,#cyPmBackup+014H
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2075
0050 905A14            MOV     DPTR,#05A14H
0053 E0                MOVX    A,@DPTR
0054 900000      R     MOV     DPTR,#cyPmBackup+015H
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2076
0058 905A16            MOV     DPTR,#05A16H
005B E0                MOVX    A,@DPTR
005C 900000      R     MOV     DPTR,#cyPmBackup+016H
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2077
0060 905A18            MOV     DPTR,#05A18H
0063 E0                MOVX    A,@DPTR
0064 900000      R     MOV     DPTR,#cyPmBackup+017H
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2078
0068 905A1A            MOV     DPTR,#05A1AH
006B E0                MOVX    A,@DPTR
006C 900000      R     MOV     DPTR,#cyPmBackup+018H
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2080
0070 905A20            MOV     DPTR,#05A20H
0073 E0                MOVX    A,@DPTR
0074 900000      R     MOV     DPTR,#cyPmBackup+019H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2081
0078 905A22            MOV     DPTR,#05A22H
007B E0                MOVX    A,@DPTR
007C 900000      R     MOV     DPTR,#cyPmBackup+01AH
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2082
0080 905A23            MOV     DPTR,#05A23H
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 70  

0083 E0                MOVX    A,@DPTR
0084 900000      R     MOV     DPTR,#cyPmBackup+01BH
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2083
0088 905A24            MOV     DPTR,#05A24H
008B E0                MOVX    A,@DPTR
008C 900000      R     MOV     DPTR,#cyPmBackup+01CH
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2084
0090 905A26            MOV     DPTR,#05A26H
0093 E0                MOVX    A,@DPTR
0094 900000      R     MOV     DPTR,#cyPmBackup+01DH
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2085
0098 905A28            MOV     DPTR,#05A28H
009B E0                MOVX    A,@DPTR
009C 900000      R     MOV     DPTR,#cyPmBackup+01EH
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2086
00A0 905A2A            MOV     DPTR,#05A2AH
00A3 E0                MOVX    A,@DPTR
00A4 900000      R     MOV     DPTR,#cyPmBackup+01FH
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2088
00A8 905A30            MOV     DPTR,#05A30H
00AB E0                MOVX    A,@DPTR
00AC 900000      R     MOV     DPTR,#cyPmBackup+020H
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2089
00B0 905A32            MOV     DPTR,#05A32H
00B3 E0                MOVX    A,@DPTR
00B4 900000      R     MOV     DPTR,#cyPmBackup+021H
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2090
00B8 905A33            MOV     DPTR,#05A33H
00BB E0                MOVX    A,@DPTR
00BC 900000      R     MOV     DPTR,#cyPmBackup+022H
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2091
00C0 905A34            MOV     DPTR,#05A34H
00C3 E0                MOVX    A,@DPTR
00C4 900000      R     MOV     DPTR,#cyPmBackup+023H
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2092
00C8 905A36            MOV     DPTR,#05A36H
00CB E0                MOVX    A,@DPTR
00CC 900000      R     MOV     DPTR,#cyPmBackup+024H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2093
00D0 905A38            MOV     DPTR,#05A38H
00D3 E0                MOVX    A,@DPTR
00D4 900000      R     MOV     DPTR,#cyPmBackup+025H
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2094
00D8 905A3A            MOV     DPTR,#05A3AH
00DB E0                MOVX    A,@DPTR
00DC 900000      R     MOV     DPTR,#cyPmBackup+026H
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2096
00E0 905A00            MOV     DPTR,#05A00H
00E3 E4                CLR     A
00E4 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 71  

                                           ; SOURCE LINE # 2097
00E5 905A02            MOV     DPTR,#05A02H
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2098
00E9 A3                INC     DPTR
00EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2099
00EB A3                INC     DPTR
00EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2100
00ED 905A06            MOV     DPTR,#05A06H
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2101
00F1 905A08            MOV     DPTR,#05A08H
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2102
00F5 905A0A            MOV     DPTR,#05A0AH
00F8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2104
00F9 905A10            MOV     DPTR,#05A10H
00FC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2105
00FD 905A12            MOV     DPTR,#05A12H
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2106
0101 A3                INC     DPTR
0102 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2107
0103 A3                INC     DPTR
0104 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2108
0105 905A16            MOV     DPTR,#05A16H
0108 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2109
0109 905A18            MOV     DPTR,#05A18H
010C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2110
010D 905A1A            MOV     DPTR,#05A1AH
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2112
0111 905A20            MOV     DPTR,#05A20H
0114 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2113
0115 905A22            MOV     DPTR,#05A22H
0118 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2114
0119 A3                INC     DPTR
011A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2115
011B A3                INC     DPTR
011C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2116
011D 905A26            MOV     DPTR,#05A26H
0120 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2117
0121 905A28            MOV     DPTR,#05A28H
0124 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2118
0125 905A2A            MOV     DPTR,#05A2AH
0128 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2120
0129 905A30            MOV     DPTR,#05A30H
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 72  

012C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2121
012D 905A32            MOV     DPTR,#05A32H
0130 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2122
0131 A3                INC     DPTR
0132 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2123
0133 A3                INC     DPTR
0134 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2124
0135 905A36            MOV     DPTR,#05A36H
0138 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2125
0139 905A38            MOV     DPTR,#05A38H
013C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2126
013D 905A3A            MOV     DPTR,#05A3AH
0140 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2136
0141 9046E8            MOV     DPTR,#046E8H
0144 E0                MOVX    A,@DPTR
0145 5404              ANL     A,#04H
0147 6022              JZ      ?C0093
                                           ; SOURCE LINE # 2137
                                           ; SOURCE LINE # 2139
0149 900000      R     MOV     DPTR,#cyPmBackup+04H
014C 7401              MOV     A,#01H
014E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2142
014F 90500B            MOV     DPTR,#0500BH
0152 E0                MOVX    A,@DPTR
0153 540E              ANL     A,#0EH
0155 900000      R     MOV     DPTR,#cyPmBackup+05H
0158 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2145
0159 90500B            MOV     DPTR,#0500BH
015C E0                MOVX    A,@DPTR
015D 54F1              ANL     A,#0F1H
015F 440C              ORL     A,#0CH
0161 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2149
0162 9046E8            MOV     DPTR,#046E8H
0165 E0                MOVX    A,@DPTR
0166 54FB              ANL     A,#0FBH
0168 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2150
0169 8005              SJMP    ?C0094
016B         ?C0093:
                                           ; SOURCE LINE # 2152
                                           ; SOURCE LINE # 2154
016B E4                CLR     A
016C 900000      R     MOV     DPTR,#cyPmBackup+04H
016F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2155
0170         ?C0094:
                                           ; SOURCE LINE # 2164
0170 904322            MOV     DPTR,#04322H
0173 E0                MOVX    A,@DPTR
0174 5408              ANL     A,#08H
0176 600E              JZ      ?C0095
                                           ; SOURCE LINE # 2165
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 73  

                                           ; SOURCE LINE # 2166
0178 900000      R     MOV     DPTR,#cyPmBackup+030H
017B 7401              MOV     A,#01H
017D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2167
017E 904322            MOV     DPTR,#04322H
0181 E0                MOVX    A,@DPTR
0182 54F7              ANL     A,#0F7H
0184 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2168
0185 22                RET     
0186         ?C0095:
                                           ; SOURCE LINE # 2170
                                           ; SOURCE LINE # 2171
0186 E4                CLR     A
0187 900000      R     MOV     DPTR,#cyPmBackup+030H
018A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2172
                                           ; SOURCE LINE # 2173
018B         ?C0097:
018B 22                RET     
             ; FUNCTION CyPmHibSlpSaveSet (END)

             ; FUNCTION CyPmHibSlpRestore (BEGIN)
                                           ; SOURCE LINE # 2196
                                           ; SOURCE LINE # 2197
                                           ; SOURCE LINE # 2273
0000 900000      R     MOV     DPTR,#cyPmBackup+0BH
0003 E0                MOVX    A,@DPTR
0004 905A00            MOV     DPTR,#05A00H
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2274
0008 900000      R     MOV     DPTR,#cyPmBackup+0CH
000B E0                MOVX    A,@DPTR
000C 905A02            MOV     DPTR,#05A02H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2275
0010 900000      R     MOV     DPTR,#cyPmBackup+0DH
0013 E0                MOVX    A,@DPTR
0014 905A03            MOV     DPTR,#05A03H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2276
0018 900000      R     MOV     DPTR,#cyPmBackup+0EH
001B E0                MOVX    A,@DPTR
001C 905A04            MOV     DPTR,#05A04H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2277
0020 900000      R     MOV     DPTR,#cyPmBackup+0FH
0023 E0                MOVX    A,@DPTR
0024 905A06            MOV     DPTR,#05A06H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2278
0028 900000      R     MOV     DPTR,#cyPmBackup+010H
002B E0                MOVX    A,@DPTR
002C 905A08            MOV     DPTR,#05A08H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2279
0030 900000      R     MOV     DPTR,#cyPmBackup+011H
0033 E0                MOVX    A,@DPTR
0034 905A0A            MOV     DPTR,#05A0AH
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2281
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 74  

0038 900000      R     MOV     DPTR,#cyPmBackup+012H
003B E0                MOVX    A,@DPTR
003C 905A10            MOV     DPTR,#05A10H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2282
0040 900000      R     MOV     DPTR,#cyPmBackup+013H
0043 E0                MOVX    A,@DPTR
0044 905A12            MOV     DPTR,#05A12H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2283
0048 900000      R     MOV     DPTR,#cyPmBackup+014H
004B E0                MOVX    A,@DPTR
004C 905A13            MOV     DPTR,#05A13H
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2284
0050 900000      R     MOV     DPTR,#cyPmBackup+015H
0053 E0                MOVX    A,@DPTR
0054 905A14            MOV     DPTR,#05A14H
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2285
0058 900000      R     MOV     DPTR,#cyPmBackup+016H
005B E0                MOVX    A,@DPTR
005C 905A16            MOV     DPTR,#05A16H
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2286
0060 900000      R     MOV     DPTR,#cyPmBackup+017H
0063 E0                MOVX    A,@DPTR
0064 905A18            MOV     DPTR,#05A18H
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2287
0068 900000      R     MOV     DPTR,#cyPmBackup+018H
006B E0                MOVX    A,@DPTR
006C 905A1A            MOV     DPTR,#05A1AH
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2289
0070 900000      R     MOV     DPTR,#cyPmBackup+019H
0073 E0                MOVX    A,@DPTR
0074 905A20            MOV     DPTR,#05A20H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2290
0078 900000      R     MOV     DPTR,#cyPmBackup+01AH
007B E0                MOVX    A,@DPTR
007C 905A22            MOV     DPTR,#05A22H
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2291
0080 900000      R     MOV     DPTR,#cyPmBackup+01BH
0083 E0                MOVX    A,@DPTR
0084 905A23            MOV     DPTR,#05A23H
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2292
0088 900000      R     MOV     DPTR,#cyPmBackup+01CH
008B E0                MOVX    A,@DPTR
008C 905A24            MOV     DPTR,#05A24H
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2293
0090 900000      R     MOV     DPTR,#cyPmBackup+01DH
0093 E0                MOVX    A,@DPTR
0094 905A26            MOV     DPTR,#05A26H
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2294
0098 900000      R     MOV     DPTR,#cyPmBackup+01EH
009B E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 75  

009C 905A28            MOV     DPTR,#05A28H
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2295
00A0 900000      R     MOV     DPTR,#cyPmBackup+01FH
00A3 E0                MOVX    A,@DPTR
00A4 905A2A            MOV     DPTR,#05A2AH
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2297
00A8 900000      R     MOV     DPTR,#cyPmBackup+020H
00AB E0                MOVX    A,@DPTR
00AC 905A30            MOV     DPTR,#05A30H
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2298
00B0 900000      R     MOV     DPTR,#cyPmBackup+021H
00B3 E0                MOVX    A,@DPTR
00B4 905A32            MOV     DPTR,#05A32H
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2299
00B8 900000      R     MOV     DPTR,#cyPmBackup+022H
00BB E0                MOVX    A,@DPTR
00BC 905A33            MOV     DPTR,#05A33H
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2300
00C0 900000      R     MOV     DPTR,#cyPmBackup+023H
00C3 E0                MOVX    A,@DPTR
00C4 905A34            MOV     DPTR,#05A34H
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2301
00C8 900000      R     MOV     DPTR,#cyPmBackup+024H
00CB E0                MOVX    A,@DPTR
00CC 905A36            MOV     DPTR,#05A36H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2302
00D0 900000      R     MOV     DPTR,#cyPmBackup+025H
00D3 E0                MOVX    A,@DPTR
00D4 905A38            MOV     DPTR,#05A38H
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2303
00D8 900000      R     MOV     DPTR,#cyPmBackup+026H
00DB E0                MOVX    A,@DPTR
00DC 905A3A            MOV     DPTR,#05A3AH
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2311
00E0 900000      R     MOV     DPTR,#cyPmBackup+04H
00E3 E0                MOVX    A,@DPTR
00E4 B40117            CJNE    A,#01H,?C0098
                                           ; SOURCE LINE # 2312
                                           ; SOURCE LINE # 2314
00E7 90500B            MOV     DPTR,#0500BH
00EA E0                MOVX    A,@DPTR
00EB 54F1              ANL     A,#0F1H
00ED FF                MOV     R7,A
00EE 900000      R     MOV     DPTR,#cyPmBackup+05H
00F1 E0                MOVX    A,@DPTR
00F2 4F                ORL     A,R7
00F3 90500B            MOV     DPTR,#0500BH
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2318
00F7 9046E8            MOV     DPTR,#046E8H
00FA E0                MOVX    A,@DPTR
00FB 4404              ORL     A,#04H
00FD F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 76  

                                           ; SOURCE LINE # 2319
00FE         ?C0098:
                                           ; SOURCE LINE # 2334
00FE 900000      R     MOV     DPTR,#cyPmBackup+030H
0101 E0                MOVX    A,@DPTR
0102 B40107            CJNE    A,#01H,?C0100
                                           ; SOURCE LINE # 2335
                                           ; SOURCE LINE # 2336
0105 904322            MOV     DPTR,#04322H
0108 E0                MOVX    A,@DPTR
0109 4408              ORL     A,#08H
010B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2337
                                           ; SOURCE LINE # 2338
010C         ?C0100:
010C 22                RET     
             ; FUNCTION CyPmHibSlpRestore (END)

             ; FUNCTION CyPmHviLviSaveDisable (BEGIN)
                                           ; SOURCE LINE # 2358
                                           ; SOURCE LINE # 2359
                                           ; SOURCE LINE # 2360
0000 9046F5            MOV     DPTR,#046F5H
0003 E0                MOVX    A,@DPTR
0004 5401              ANL     A,#01H
0006 6027              JZ      ?C0101
                                           ; SOURCE LINE # 2361
                                           ; SOURCE LINE # 2362
0008 900000      R     MOV     DPTR,#cyPmBackup+027H
000B 7401              MOV     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2363
000E 9046F4            MOV     DPTR,#046F4H
0011 E0                MOVX    A,@DPTR
0012 540F              ANL     A,#0FH
0014 900000      R     MOV     DPTR,#cyPmBackup+028H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2373
0018 9046F7            MOV     DPTR,#046F7H
001B E0                MOVX    A,@DPTR
001C 5440              ANL     A,#040H
001E 7003              JNZ     ?C0102
0020 FF                MOV     R7,A
0021 8002              SJMP    ?C0103
0023         ?C0102:
0023 7F01              MOV     R7,#01H
0025         ?C0103:
0025 900000      R     MOV     DPTR,#cyPmBackup+02CH
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2378
002A 120000      E     LCALL   CyVdLvDigitDisable
                                           ; SOURCE LINE # 2379
002D 8005              SJMP    ?C0104
002F         ?C0101:
                                           ; SOURCE LINE # 2381
                                           ; SOURCE LINE # 2382
002F E4                CLR     A
0030 900000      R     MOV     DPTR,#cyPmBackup+027H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2383
0034         ?C0104:
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 77  

                                           ; SOURCE LINE # 2385
0034 9046F5            MOV     DPTR,#046F5H
0037 E0                MOVX    A,@DPTR
0038 5402              ANL     A,#02H
003A 6029              JZ      ?C0105
                                           ; SOURCE LINE # 2386
                                           ; SOURCE LINE # 2387
003C 900000      R     MOV     DPTR,#cyPmBackup+029H
003F 7401              MOV     A,#01H
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2388
0042 9046F4            MOV     DPTR,#046F4H
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 C4                SWAP    A
0048 540F              ANL     A,#0FH
004A 900000      R     MOV     DPTR,#cyPmBackup+02AH
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2398
004E 9046F7            MOV     DPTR,#046F7H
0051 E0                MOVX    A,@DPTR
0052 5480              ANL     A,#080H
0054 7003              JNZ     ?C0106
0056 FF                MOV     R7,A
0057 8002              SJMP    ?C0107
0059         ?C0106:
0059 7F01              MOV     R7,#01H
005B         ?C0107:
005B 900000      R     MOV     DPTR,#cyPmBackup+02DH
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2403
0060 120000      E     LCALL   CyVdLvAnalogDisable
                                           ; SOURCE LINE # 2404
0063 8005              SJMP    ?C0108
0065         ?C0105:
                                           ; SOURCE LINE # 2406
                                           ; SOURCE LINE # 2407
0065 E4                CLR     A
0066 900000      R     MOV     DPTR,#cyPmBackup+029H
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2408
006A         ?C0108:
                                           ; SOURCE LINE # 2410
006A 9046F5            MOV     DPTR,#046F5H
006D E0                MOVX    A,@DPTR
006E 5404              ANL     A,#04H
0070 600A              JZ      ?C0109
                                           ; SOURCE LINE # 2411
                                           ; SOURCE LINE # 2412
0072 900000      R     MOV     DPTR,#cyPmBackup+02BH
0075 7401              MOV     A,#01H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2413
0078 120000      E     LCALL   CyVdHvAnalogDisable
                                           ; SOURCE LINE # 2414
007B 22                RET     
007C         ?C0109:
                                           ; SOURCE LINE # 2416
                                           ; SOURCE LINE # 2417
007C E4                CLR     A
007D 900000      R     MOV     DPTR,#cyPmBackup+02BH
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 78  

0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2418
                                           ; SOURCE LINE # 2419
0081         ?C0111:
0081 22                RET     
             ; FUNCTION CyPmHviLviSaveDisable (END)

             ; FUNCTION CyPmHviLviRestore (BEGIN)
                                           ; SOURCE LINE # 2439
                                           ; SOURCE LINE # 2440
                                           ; SOURCE LINE # 2442
0000 900000      R     MOV     DPTR,#cyPmBackup+027H
0003 E0                MOVX    A,@DPTR
0004 B4010D            CJNE    A,#01H,?C0112
                                           ; SOURCE LINE # 2443
                                           ; SOURCE LINE # 2444
0007 900000      R     MOV     DPTR,#cyPmBackup+02CH
000A E0                MOVX    A,@DPTR
000B FF                MOV     R7,A
000C 900000      R     MOV     DPTR,#cyPmBackup+028H
000F E0                MOVX    A,@DPTR
0010 FD                MOV     R5,A
0011 120000      E     LCALL   _CyVdLvDigitEnable
                                           ; SOURCE LINE # 2445
0014         ?C0112:
                                           ; SOURCE LINE # 2447
0014 900000      R     MOV     DPTR,#cyPmBackup+029H
0017 E0                MOVX    A,@DPTR
0018 B4010D            CJNE    A,#01H,?C0113
                                           ; SOURCE LINE # 2448
                                           ; SOURCE LINE # 2449
001B 900000      R     MOV     DPTR,#cyPmBackup+02DH
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#cyPmBackup+02AH
0023 E0                MOVX    A,@DPTR
0024 FD                MOV     R5,A
0025 120000      E     LCALL   _CyVdLvAnalogEnable
                                           ; SOURCE LINE # 2450
0028         ?C0113:
                                           ; SOURCE LINE # 2452
0028 900000      R     MOV     DPTR,#cyPmBackup+02BH
002B E0                MOVX    A,@DPTR
002C B40103            CJNE    A,#01H,?C0115
                                           ; SOURCE LINE # 2453
                                           ; SOURCE LINE # 2454
002F 120000      E     LCALL   CyVdHvAnalogEnable
                                           ; SOURCE LINE # 2455
                                           ; SOURCE LINE # 2456
0032         ?C0115:
0032 22                RET     
             ; FUNCTION CyPmHviLviRestore (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2881    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =     66      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.03   CYPM                                                                  07/27/2013 12:49:48 PAGE 79  

   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
