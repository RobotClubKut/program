C51 COMPILER V9.03   CYFITTER_CFG                                                          07/27/2013 12:49:50 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Release\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.2\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Release\cyfitter_cfg.lst) CD 
                    -DB NOIP OT(8,SIZE) DF(NDEBUG) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Release\cyfitter_cfg.obj)

line level    source

*** MESSAGE C286 IN LINE 0 OF (null): license limits optimization to level 5
   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator 2.2 Component Pack 6
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.  Except for the user defined sections in
   8          * CyClockStartupError(), this file should not be modified.
   9          *
  10          ********************************************************************************
  11          * Copyright 2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <string.h>
  18          #include <cytypes.h>
  19          #include <cydevice_trm.h>
  20          #include <cyfitter.h>
  21          #include <CyLib.h>
  22          #include <cyfitter_cfg.h>
  23          
  24          /* Clock startup error codes                                                   */
  25          #define CYCLOCKSTART_NO_ERROR    0u
  26          #define CYCLOCKSTART_XTAL_ERROR  1u
  27          #define CYCLOCKSTART_32KHZ_ERROR 2u
  28          #define CYCLOCKSTART_PLL_ERROR   3u
  29          
  30          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
              /*******************************************************************************
              * Function Name: CyClockStartupError
              ********************************************************************************
              * Summary:
              *  If an error is encountered during clock configuration (crystal startup error,
              *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
              *  the customer, this function will stop in an infinite loop.
              *
              * Parameters:
              *   void
              *
              * Return:
              *   void
              *
              *******************************************************************************/
              #if defined(__GNUC__) || defined(__ARMCC_VERSION)
              __attribute__ ((unused))
              #endif
              static void CyClockStartupError(uint8 errorCode);
              #if defined(__GNUC__) || defined(__ARMCC_VERSION)
              __attribute__ ((unused))
              #endif
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/27/2013 12:49:50 PAGE 2   

              static void CyClockStartupError(uint8 errorCode)
              {
                  /* To remove the compiler warning if errorCode not used.                */
                  errorCode = errorCode;
              
                  /* `#START CyClockStartupError` */
              
                  /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
                  /* we will end up here to allow the customer to implement something to  */
                  /* deal with the clock condition.                                       */
              
                  /* `#END` */
              
                  /* If nothing else, stop here since the clocks have not started         */
                  /* correctly.                                                           */
                  while(1) {}
              }
              #endif
  71          
  72          
  73          #if defined(__C51__) || defined(__CX51__)
  74                  #define CYPACKED
  75                  #define CYALIGNED
  76                  
  77                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  78          
  79          
  80          
  81                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  82                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  83                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  84          #else
                      #error Unsupported toolchain
              #endif
  87          
  88          #define cfg_byte_table ((const void CYFAR *)0x080000u)
  89          /* IOPINS0_7 Address: CYREG_PRT12_DR Size (bytes): 10 */
  90          #define BS_IOPINS0_7_VAL ((const uint8 CYFAR *)0x000800E0u)
  91          
  92          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
  93          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x000800ECu)
  94          
  95          /* IOPINS0_6 Address: CYREG_PRT6_DR Size (bytes): 10 */
  96          #define BS_IOPINS0_6_VAL ((const uint8 CYFAR *)0x000800F4u)
  97          
  98          
  99          /*******************************************************************************
 100          * Function Name: ClockSetup
 101          ********************************************************************************
 102          *
 103          * Summary:
 104          *  Performs the initialization of all of the clocks in the device based on the
 105          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 106          *  clocks and setting the necessary dividers to produce the desired frequency. 
 107          *
 108          * Parameters:
 109          *  void
 110          *
 111          * Return:
 112          *  void
 113          *
 114          *******************************************************************************/
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/27/2013 12:49:50 PAGE 3   

 115          static void ClockSetup(void);
 116          static void ClockSetup(void)
 117          {
 118   1              uint32 timeout;
 119   1              uint8 pllLock;
 120   1      
 121   1      
 122   1              /* Configure Digital Clocks based on settings from Clock DWR */
 123   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x001Du);
 124   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x19u);
 125   1      
 126   1              /* Configure ILO based on settings from Clock DWR */
 127   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
 128   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 129   1      
 130   1              /* Configure IMO based on settings from Clock DWR */
 131   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03u);
 132   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_3MHZ)));
 133   1      
 134   1              /* Configure PLL based on settings from Clock DWR */
 135   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0010u);
 136   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1051u);
 137   1              /* Wait up to 250us for the PLL to lock */
 138   1              pllLock = 0u;
 139   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--) { 
 140   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 141   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 142   2              }
 143   1      
 144   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 145   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 146   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 147   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 148   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 149   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 150   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 151   1      
 152   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x01u
             -)));
 153   1      }
 154          
 155          
 156          /* Analog API Functions */
 157          
 158          
 159          /*******************************************************************************
 160          * Function Name: AnalogSetDefault
 161          ********************************************************************************
 162          *
 163          * Summary:
 164          *  Sets up the analog portions of the chip to default values based on chip
 165          *  configuration options from the project.
 166          *
 167          * Parameters:
 168          *  void
 169          *
 170          * Return:
 171          *  void
 172          *
 173          *******************************************************************************/
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/27/2013 12:49:50 PAGE 4   

 174          static void AnalogSetDefault(void);
 175          static void AnalogSetDefault(void)
 176          {
 177   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 178   1              CY_SET_REG8((void CYXDATA *)CYREG_BG_DFT0, bg_xover_inl_trim & 0x07u);
 179   1              CY_SET_REG8((void CYXDATA *)CYREG_BG_DFT1, ((uint8)((uint8)bg_xover_inl_trim >> 4)) & 0x0Fu);
 180   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 181   1      }
 182          
 183          
 184          /*******************************************************************************
 185          * Function Name: SetAnalogRoutingPumps
 186          ********************************************************************************
 187          *
 188          * Summary:
 189          * Enables or disables the analog pumps feeding analog routing switches.
 190          * Intended to be called at startup, based on the Vdda system configuration;
 191          * may be called during operation when the user informs us that the Vdda voltage
 192          * crossed the pump threshold.
 193          *
 194          * Parameters:
 195          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 196          *
 197          * Return:
 198          *  void
 199          *
 200          *******************************************************************************/
 201          void SetAnalogRoutingPumps(uint8 enabled)
 202          {
 203   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 204   1              if (enabled != 0u)
 205   1              {
 206   2                      regValue |= 0x00u;
 207   2              }
 208   1              else
 209   1              {
 210   2                      regValue &= (uint8)~0x00u;
 211   2              }
 212   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 213   1      }
 214          
 215          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 216          
 217          
 218          /*******************************************************************************
 219          * Function Name: cyfitter_cfg
 220          ********************************************************************************
 221          * Summary:
 222          *  This function is called by the start-up code for the selected device. It
 223          *  performs all of the necessary device configuration based on the design
 224          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 225          *  as Clocks and Pins as well as any component configuration that is necessary.
 226          *
 227          * Parameters:  
 228          *   void
 229          *
 230          * Return:
 231          *   void
 232          *
 233          *******************************************************************************/
 234          
 235          void cyfitter_cfg(void)
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/27/2013 12:49:50 PAGE 5   

 236          {
 237   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 238   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 239   1      
 240   1              {
 241   2      
 242   2                      typedef struct {
 243   2                              void CYFAR *address;
 244   2                              uint16 size;
 245   2                      } CYPACKED cfg_memset_t;
 246   2      
 247   2                      static const cfg_memset_t CYCODE cfg_memset_list [] = {
 248   2                              /* address, size */
 249   2                              {(void CYFAR *)(CYREG_I2C_XCFG), 21u},
 250   2                              {(void CYFAR *)(CYREG_TMR0_CFG0), 12u},
 251   2                              {(void CYFAR *)(CYREG_PRT0_DR), 32u},
 252   2                              {(void CYFAR *)(CYREG_PRT3_DR), 48u},
 253   2                              {(void CYFAR *)(CYREG_PRT15_DR), 16u},
 254   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 255   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 256   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 257   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 258   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 259   2                      };
 260   2      
 261   2                      uint8 CYDATA i;
 262   2      
 263   2                      /* Zero out critical memory blocks before beginning configuration */
 264   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 265   2                      {
 266   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 267   3                              CYMEMZERO(ms->address, ms->size);
 268   3                      }
 269   2      
 270   2                      cfg_write_bytes(cfg_byte_table);
 271   2      
 272   2                      /* Enable digital routing */
 273   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 274   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 275   2      
 276   2                      /* Enable UDB array */
 277   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 278   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 279   2              }
 280   1      
 281   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 282   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT12_DR), (const void CYFAR *)(BS_IOPINS0_7_VAL), 10u);
 283   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (const void CYFAR *)(BS_IOPINS0_2_VAL), 8u);
 284   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT6_DR), (const void CYFAR *)(BS_IOPINS0_6_VAL), 10u);
 285   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 286   1      
 287   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 288   1              CY_SET_REG8((void CYXDATA *)CYDEV_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYDEV_BOOST_CR2) | 0x08u));
 289   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 290   1              {
 291   2                      CY_SET_REG8((void CYXDATA *)CYDEV_MFGCFG_PWRSYS_WAKE_TR2, 0x3Au);
 292   2              }
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/27/2013 12:49:50 PAGE 6   

 293   1      
 294   1      
 295   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 296   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 297   1              /* Setup clocks based on selections from Clock DWR */
 298   1              ClockSetup();
 299   1      
 300   1              /* Perform basic analog initialization to defaults */
 301   1              AnalogSetDefault();
 302   1      
 303   1              /* Configure alternate active mode */
 304   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 305   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 306   1      }
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/27/2013 12:49:50 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 123
0000 7B00              MOV     R3,#00H
0002 7A40              MOV     R2,#040H
0004 7980              MOV     R1,#080H
0006 7D1D              MOV     R5,#01DH
0008 7C00              MOV     R4,#00H
000A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 124
000D 904082            MOV     DPTR,#04082H
0010 7419              MOV     A,#019H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
0013 904300            MOV     DPTR,#04300H
0016 7402              MOV     A,#02H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
0019 904000            MOV     DPTR,#04000H
001C 7408              MOV     A,#08H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 131
001F 904200            MOV     DPTR,#04200H
0022 7403              MOV     A,#03H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
0025 7B0C              MOV     R3,#0CH
0027 7A01              MOV     R2,#01H
0029 7908              MOV     R1,#08H
002B 120000      E     LCALL   _cyread8
002E 9046A1            MOV     DPTR,#046A1H
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
0033 7B00              MOV     R3,#00H
0035 7A42              MOV     R2,#042H
0037 7922              MOV     R1,#022H
0039 7D10              MOV     R5,#010H
003B 7C00              MOV     R4,#00H
003D 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 136
0040 7B00              MOV     R3,#00H
0042 7A42              MOV     R2,#042H
0044 7920              MOV     R1,#020H
0046 7D51              MOV     R5,#051H
0048 7C10              MOV     R4,#010H
004A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 138
004D E4                CLR     A
004E 900000      R     MOV     DPTR,#pllLock
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
0052 7F19              MOV     R7,#019H
0054 FE                MOV     R6,A
0055 FD                MOV     R5,A
0056 FC                MOV     R4,A
0057 900000      R     MOV     DPTR,#timeout
005A 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/27/2013 12:49:50 PAGE 8   

005D         ?C0001:
005D 900000      R     MOV     DPTR,#timeout
0060 120000      E     LCALL   ?C?LLDXDATA
0063 D3                SETB    C
0064 EF                MOV     A,R7
0065 9400              SUBB    A,#00H
0067 EE                MOV     A,R6
0068 9400              SUBB    A,#00H
006A 403B              JC      ?C0002
006C 900000      R     MOV     DPTR,#pllLock
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 6403              XRL     A,#03H
0073 6032              JZ      ?C0002
                                           ; SOURCE LINE # 140
0075 904225            MOV     DPTR,#04225H
0078 E0                MOVX    A,@DPTR
0079 5401              ANL     A,#01H
007B FE                MOV     R6,A
007C EF                MOV     A,R7
007D 25E0              ADD     A,ACC
007F 4E                ORL     A,R6
0080 5403              ANL     A,#03H
0082 900000      R     MOV     DPTR,#pllLock
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
0086 E4                CLR     A
0087 7FE0              MOV     R7,#0E0H
0089 7E01              MOV     R6,#01H
008B FD                MOV     R5,A
008C FC                MOV     R4,A
008D 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 142
0090 900000      R     MOV     DPTR,#timeout
0093 120000      E     LCALL   ?C?LLDXDATA
0096 74FF              MOV     A,#0FFH
0098 FB                MOV     R3,A
0099 FA                MOV     R2,A
009A F9                MOV     R1,A
009B F8                MOV     R0,A
009C 120000      E     LCALL   ?C?LADD
009F 900000      R     MOV     DPTR,#timeout
00A2 120000      E     LCALL   ?C?LSTXDATA
00A5 80B6              SJMP    ?C0001
00A7         ?C0002:
                                           ; SOURCE LINE # 145
00A7 7B00              MOV     R3,#00H
00A9 7A40              MOV     R2,#040H
00AB 7904              MOV     R1,#04H
00AD 7D00              MOV     R5,#00H
00AF 7C01              MOV     R4,#01H
00B1 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 146
00B4 904004            MOV     DPTR,#04004H
00B7 7407              MOV     A,#07H
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
00BA 904006            MOV     DPTR,#04006H
00BD E4                CLR     A
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
00BF 904008            MOV     DPTR,#04008H
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/27/2013 12:49:50 PAGE 9   

00C2 7448              MOV     A,#048H
00C4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
00C5 904004            MOV     DPTR,#04004H
00C8 E4                CLR     A
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
00CA 904001            MOV     DPTR,#04001H
00CD 7402              MOV     A,#02H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
00D0 9043A2            MOV     DPTR,#043A2H
00D3 E0                MOVX    A,@DPTR
00D4 4401              ORL     A,#01H
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
00D7 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 177
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
;---- Variable 'bg_xover_inl_trim' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 178
0009 EF                MOV     A,R7
000A 5407              ANL     A,#07H
000C 90586E            MOV     DPTR,#0586EH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
0010 EF                MOV     A,R7
0011 C4                SWAP    A
0012 540F              ANL     A,#0FH
0014 A3                INC     DPTR
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
0016 905876            MOV     DPTR,#05876H
0019 7444              MOV     A,#044H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
001C 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 201
;---- Variable 'enabled' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
0000 905876            MOV     DPTR,#05876H
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
;---- Variable 'regValue' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 204
0005 EF                MOV     A,R7
0006 6003              JZ      ?C0006
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
0008 EE                MOV     A,R6
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/27/2013 12:49:50 PAGE 10  

                                           ; SOURCE LINE # 207
0009 8001              SJMP    ?C0007
000B         ?C0006:
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
000B EE                MOV     A,R6
                                           ; SOURCE LINE # 211
000C         ?C0007:
                                           ; SOURCE LINE # 212
000C AF06              MOV     R7,AR6
000E 905876            MOV     DPTR,#05876H
0011 EE                MOV     A,R6
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
0013 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 238
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4405              ORL     A,#05H
000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 264
0016 E4                CLR     A
0017 F500        R     MOV     i,A
0019         ?C0009:
0019 E500        R     MOV     A,i
001B C3                CLR     C
001C 940A              SUBB    A,#0AH
001E 502C              JNC     ?C0010
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
0020 E500        R     MOV     A,i
0022 75F005            MOV     B,#05H
0025 A4                MUL     AB
0026 2400        R     ADD     A,#LOW cfg_memset_list
0028 F582              MOV     DPL,A
002A E4                CLR     A
002B 3400        R     ADDC    A,#HIGH cfg_memset_list
002D AF82              MOV     R7,DPL
002F F500        R     MOV     ms,A
0031 8F00        R     MOV     ms+01H,R7
                                           ; SOURCE LINE # 267
0033 F583              MOV     DPH,A
0035 120000      E     LCALL   ?C?PLDCODE
0038 8F82              MOV     DPL,R7
003A 850083      R     MOV     DPH,ms
003D 7403              MOV     A,#03H
003F 93                MOVC    A,@A+DPTR
0040 FC                MOV     R4,A
0041 7404              MOV     A,#04H
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/27/2013 12:49:50 PAGE 11  

0043 93                MOVC    A,@A+DPTR
0044 FD                MOV     R5,A
0045 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 268
0048 0500        R     INC     i
004A 80CD              SJMP    ?C0009
004C         ?C0010:
                                           ; SOURCE LINE # 270
004C 7B08              MOV     R3,#08H
004E 7A00              MOV     R2,#00H
0050 7900              MOV     R1,#00H
0052 120000      E     LCALL   _cfg_write_bytes
                                           ; SOURCE LINE # 273
0055 7B01              MOV     R3,#01H
0057 7A50              MOV     R2,#050H
0059 7903              MOV     R1,#03H
005B 120000      E     LCALL   _cyread8
005E EF                MOV     A,R7
005F 4402              ORL     A,#02H
0061 FD                MOV     R5,A
0062 7B01              MOV     R3,#01H
0064 7A50              MOV     R2,#050H
0066 7903              MOV     R1,#03H
0068 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 274
006B 7B01              MOV     R3,#01H
006D 7A50              MOV     R2,#050H
006F 7913              MOV     R1,#013H
0071 120000      E     LCALL   _cyread8
0074 EF                MOV     A,R7
0075 4402              ORL     A,#02H
0077 FD                MOV     R5,A
0078 7B01              MOV     R3,#01H
007A 7A50              MOV     R2,#050H
007C 7913              MOV     R1,#013H
007E 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 277
0081 9043A0            MOV     DPTR,#043A0H
0084 E0                MOVX    A,@DPTR
0085 4440              ORL     A,#040H
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
0088 9043C2            MOV     DPTR,#043C2H
008B E0                MOVX    A,@DPTR
008C 4410              ORL     A,#010H
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 282
008F 7B08              MOV     R3,#08H
0091 7A00              MOV     R2,#00H
0093 79E0              MOV     R1,#0E0H
0095 C003              PUSH    AR3
0097 C002              PUSH    AR2
0099 C001              PUSH    AR1
009B 7B00              MOV     R3,#00H
009D 7A51              MOV     R2,#051H
009F 79C0              MOV     R1,#0C0H
00A1 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00A4 120000      E     LCALL   ?C?PSTXDATA
00A7 D001              POP     AR1
00A9 D002              POP     AR2
00AB D003              POP     AR3
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/27/2013 12:49:50 PAGE 12  

00AD 7F0A              MOV     R7,#0AH
00AF 7E00              MOV     R6,#00H
00B1 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 283
00B4 7B08              MOV     R3,#08H
00B6 7A00              MOV     R2,#00H
00B8 79EC              MOV     R1,#0ECH
00BA C003              PUSH    AR3
00BC C002              PUSH    AR2
00BE C001              PUSH    AR1
00C0 7B00              MOV     R3,#00H
00C2 7A51              MOV     R2,#051H
00C4 7922              MOV     R1,#022H
00C6 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00C9 120000      E     LCALL   ?C?PSTXDATA
00CC D001              POP     AR1
00CE D002              POP     AR2
00D0 D003              POP     AR3
00D2 7F08              MOV     R7,#08H
00D4 7E00              MOV     R6,#00H
00D6 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 284
00D9 7B08              MOV     R3,#08H
00DB 7A00              MOV     R2,#00H
00DD 79F4              MOV     R1,#0F4H
00DF C003              PUSH    AR3
00E1 C002              PUSH    AR2
00E3 C001              PUSH    AR1
00E5 7B00              MOV     R3,#00H
00E7 7A51              MOV     R2,#051H
00E9 7960              MOV     R1,#060H
00EB 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00EE 120000      E     LCALL   ?C?PSTXDATA
00F1 D001              POP     AR1
00F3 D002              POP     AR2
00F5 D003              POP     AR3
00F7 7F0A              MOV     R7,#0AH
00F9 7E00              MOV     R6,#00H
00FB 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 285
00FE 9044F4            MOV     DPTR,#044F4H
0101 7401              MOV     A,#01H
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 288
0104 904322            MOV     DPTR,#04322H
0107 E0                MOVX    A,@DPTR
0108 4408              ORL     A,#08H
010A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 289
010B 9046EC            MOV     DPTR,#046ECH
010E E0                MOVX    A,@DPTR
010F C3                CLR     C
0110 9405              SUBB    A,#05H
0112 5006              JNC     ?C0012
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 291
0114 904689            MOV     DPTR,#04689H
0117 743A              MOV     A,#03AH
0119 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
011A         ?C0012:
                                           ; SOURCE LINE # 296
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/27/2013 12:49:50 PAGE 13  

011A 904800            MOV     DPTR,#04800H
011D 74F1              MOV     A,#0F1H
011F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 298
0120 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 301
0123 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 304
0126 7B00              MOV     R3,#00H
0128 7A43              MOV     R2,#043H
012A 79A0              MOV     R1,#0A0H
012C C001              PUSH    AR1
012E 79B0              MOV     R1,#0B0H
0130 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0133 120000      E     LCALL   ?C?PSTXDATA
0136 D001              POP     AR1
0138 7F0E              MOV     R7,#0EH
013A 7E00              MOV     R6,#00H
013C 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 305
013F 9043B0            MOV     DPTR,#043B0H
0142 E0                MOVX    A,@DPTR
0143 54FD              ANL     A,#0FDH
0145 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
0146 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    592    ----
   CONSTANT SIZE    =     50    ----
   XDATA SIZE       =   ----       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
