/******************************************************************************
*  Generated by PSoC Designer 5.4.2946
******************************************************************************/
#include <m8c.h>
// analog_z address and mask defines
#pragma	ioport	analog_z_Data_ADDR:	0x0
BYTE			analog_z_Data_ADDR;
#pragma	ioport	analog_z_DriveMode_0_ADDR:	0x100
BYTE			analog_z_DriveMode_0_ADDR;
#pragma	ioport	analog_z_DriveMode_1_ADDR:	0x101
BYTE			analog_z_DriveMode_1_ADDR;
#pragma	ioport	analog_z_DriveMode_2_ADDR:	0x3
BYTE			analog_z_DriveMode_2_ADDR;
#pragma	ioport	analog_z_GlobalSelect_ADDR:	0x2
BYTE			analog_z_GlobalSelect_ADDR;
#pragma	ioport	analog_z_IntCtrl_0_ADDR:	0x102
BYTE			analog_z_IntCtrl_0_ADDR;
#pragma	ioport	analog_z_IntCtrl_1_ADDR:	0x103
BYTE			analog_z_IntCtrl_1_ADDR;
#pragma	ioport	analog_z_IntEn_ADDR:	0x1
BYTE			analog_z_IntEn_ADDR;
#define analog_z_MASK 0x8
// analog_y address and mask defines
#pragma	ioport	analog_y_Data_ADDR:	0x0
BYTE			analog_y_Data_ADDR;
#pragma	ioport	analog_y_DriveMode_0_ADDR:	0x100
BYTE			analog_y_DriveMode_0_ADDR;
#pragma	ioport	analog_y_DriveMode_1_ADDR:	0x101
BYTE			analog_y_DriveMode_1_ADDR;
#pragma	ioport	analog_y_DriveMode_2_ADDR:	0x3
BYTE			analog_y_DriveMode_2_ADDR;
#pragma	ioport	analog_y_GlobalSelect_ADDR:	0x2
BYTE			analog_y_GlobalSelect_ADDR;
#pragma	ioport	analog_y_IntCtrl_0_ADDR:	0x102
BYTE			analog_y_IntCtrl_0_ADDR;
#pragma	ioport	analog_y_IntCtrl_1_ADDR:	0x103
BYTE			analog_y_IntCtrl_1_ADDR;
#pragma	ioport	analog_y_IntEn_ADDR:	0x1
BYTE			analog_y_IntEn_ADDR;
#define analog_y_MASK 0x10
// analog_x address and mask defines
#pragma	ioport	analog_x_Data_ADDR:	0x0
BYTE			analog_x_Data_ADDR;
#pragma	ioport	analog_x_DriveMode_0_ADDR:	0x100
BYTE			analog_x_DriveMode_0_ADDR;
#pragma	ioport	analog_x_DriveMode_1_ADDR:	0x101
BYTE			analog_x_DriveMode_1_ADDR;
#pragma	ioport	analog_x_DriveMode_2_ADDR:	0x3
BYTE			analog_x_DriveMode_2_ADDR;
#pragma	ioport	analog_x_GlobalSelect_ADDR:	0x2
BYTE			analog_x_GlobalSelect_ADDR;
#pragma	ioport	analog_x_IntCtrl_0_ADDR:	0x102
BYTE			analog_x_IntCtrl_0_ADDR;
#pragma	ioport	analog_x_IntCtrl_1_ADDR:	0x103
BYTE			analog_x_IntCtrl_1_ADDR;
#pragma	ioport	analog_x_IntEn_ADDR:	0x1
BYTE			analog_x_IntEn_ADDR;
#define analog_x_MASK 0x20
// m_x_1 address and mask defines
#pragma	ioport	m_x_1_Data_ADDR:	0x8
BYTE			m_x_1_Data_ADDR;
#pragma	ioport	m_x_1_DriveMode_0_ADDR:	0x108
BYTE			m_x_1_DriveMode_0_ADDR;
#pragma	ioport	m_x_1_DriveMode_1_ADDR:	0x109
BYTE			m_x_1_DriveMode_1_ADDR;
#pragma	ioport	m_x_1_DriveMode_2_ADDR:	0xb
BYTE			m_x_1_DriveMode_2_ADDR;
#pragma	ioport	m_x_1_GlobalSelect_ADDR:	0xa
BYTE			m_x_1_GlobalSelect_ADDR;
#pragma	ioport	m_x_1_IntCtrl_0_ADDR:	0x10a
BYTE			m_x_1_IntCtrl_0_ADDR;
#pragma	ioport	m_x_1_IntCtrl_1_ADDR:	0x10b
BYTE			m_x_1_IntCtrl_1_ADDR;
#pragma	ioport	m_x_1_IntEn_ADDR:	0x9
BYTE			m_x_1_IntEn_ADDR;
#define m_x_1_MASK 0x1
// m_x_2 address and mask defines
#pragma	ioport	m_x_2_Data_ADDR:	0x8
BYTE			m_x_2_Data_ADDR;
#pragma	ioport	m_x_2_DriveMode_0_ADDR:	0x108
BYTE			m_x_2_DriveMode_0_ADDR;
#pragma	ioport	m_x_2_DriveMode_1_ADDR:	0x109
BYTE			m_x_2_DriveMode_1_ADDR;
#pragma	ioport	m_x_2_DriveMode_2_ADDR:	0xb
BYTE			m_x_2_DriveMode_2_ADDR;
#pragma	ioport	m_x_2_GlobalSelect_ADDR:	0xa
BYTE			m_x_2_GlobalSelect_ADDR;
#pragma	ioport	m_x_2_IntCtrl_0_ADDR:	0x10a
BYTE			m_x_2_IntCtrl_0_ADDR;
#pragma	ioport	m_x_2_IntCtrl_1_ADDR:	0x10b
BYTE			m_x_2_IntCtrl_1_ADDR;
#pragma	ioport	m_x_2_IntEn_ADDR:	0x9
BYTE			m_x_2_IntEn_ADDR;
#define m_x_2_MASK 0x2
// m_y_1 address and mask defines
#pragma	ioport	m_y_1_Data_ADDR:	0x8
BYTE			m_y_1_Data_ADDR;
#pragma	ioport	m_y_1_DriveMode_0_ADDR:	0x108
BYTE			m_y_1_DriveMode_0_ADDR;
#pragma	ioport	m_y_1_DriveMode_1_ADDR:	0x109
BYTE			m_y_1_DriveMode_1_ADDR;
#pragma	ioport	m_y_1_DriveMode_2_ADDR:	0xb
BYTE			m_y_1_DriveMode_2_ADDR;
#pragma	ioport	m_y_1_GlobalSelect_ADDR:	0xa
BYTE			m_y_1_GlobalSelect_ADDR;
#pragma	ioport	m_y_1_IntCtrl_0_ADDR:	0x10a
BYTE			m_y_1_IntCtrl_0_ADDR;
#pragma	ioport	m_y_1_IntCtrl_1_ADDR:	0x10b
BYTE			m_y_1_IntCtrl_1_ADDR;
#pragma	ioport	m_y_1_IntEn_ADDR:	0x9
BYTE			m_y_1_IntEn_ADDR;
#define m_y_1_MASK 0x4
// m_y_2 address and mask defines
#pragma	ioport	m_y_2_Data_ADDR:	0x8
BYTE			m_y_2_Data_ADDR;
#pragma	ioport	m_y_2_DriveMode_0_ADDR:	0x108
BYTE			m_y_2_DriveMode_0_ADDR;
#pragma	ioport	m_y_2_DriveMode_1_ADDR:	0x109
BYTE			m_y_2_DriveMode_1_ADDR;
#pragma	ioport	m_y_2_DriveMode_2_ADDR:	0xb
BYTE			m_y_2_DriveMode_2_ADDR;
#pragma	ioport	m_y_2_GlobalSelect_ADDR:	0xa
BYTE			m_y_2_GlobalSelect_ADDR;
#pragma	ioport	m_y_2_IntCtrl_0_ADDR:	0x10a
BYTE			m_y_2_IntCtrl_0_ADDR;
#pragma	ioport	m_y_2_IntCtrl_1_ADDR:	0x10b
BYTE			m_y_2_IntCtrl_1_ADDR;
#pragma	ioport	m_y_2_IntEn_ADDR:	0x9
BYTE			m_y_2_IntEn_ADDR;
#define m_y_2_MASK 0x8
// m_z_1 address and mask defines
#pragma	ioport	m_z_1_Data_ADDR:	0x8
BYTE			m_z_1_Data_ADDR;
#pragma	ioport	m_z_1_DriveMode_0_ADDR:	0x108
BYTE			m_z_1_DriveMode_0_ADDR;
#pragma	ioport	m_z_1_DriveMode_1_ADDR:	0x109
BYTE			m_z_1_DriveMode_1_ADDR;
#pragma	ioport	m_z_1_DriveMode_2_ADDR:	0xb
BYTE			m_z_1_DriveMode_2_ADDR;
#pragma	ioport	m_z_1_GlobalSelect_ADDR:	0xa
BYTE			m_z_1_GlobalSelect_ADDR;
#pragma	ioport	m_z_1_IntCtrl_0_ADDR:	0x10a
BYTE			m_z_1_IntCtrl_0_ADDR;
#pragma	ioport	m_z_1_IntCtrl_1_ADDR:	0x10b
BYTE			m_z_1_IntCtrl_1_ADDR;
#pragma	ioport	m_z_1_IntEn_ADDR:	0x9
BYTE			m_z_1_IntEn_ADDR;
#define m_z_1_MASK 0x20
// m_z_2 address and mask defines
#pragma	ioport	m_z_2_Data_ADDR:	0x8
BYTE			m_z_2_Data_ADDR;
#pragma	ioport	m_z_2_DriveMode_0_ADDR:	0x108
BYTE			m_z_2_DriveMode_0_ADDR;
#pragma	ioport	m_z_2_DriveMode_1_ADDR:	0x109
BYTE			m_z_2_DriveMode_1_ADDR;
#pragma	ioport	m_z_2_DriveMode_2_ADDR:	0xb
BYTE			m_z_2_DriveMode_2_ADDR;
#pragma	ioport	m_z_2_GlobalSelect_ADDR:	0xa
BYTE			m_z_2_GlobalSelect_ADDR;
#pragma	ioport	m_z_2_IntCtrl_0_ADDR:	0x10a
BYTE			m_z_2_IntCtrl_0_ADDR;
#pragma	ioport	m_z_2_IntCtrl_1_ADDR:	0x10b
BYTE			m_z_2_IntCtrl_1_ADDR;
#pragma	ioport	m_z_2_IntEn_ADDR:	0x9
BYTE			m_z_2_IntEn_ADDR;
#define m_z_2_MASK 0x80
