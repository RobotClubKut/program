FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 04 57 LJMP  _TRIADC_1_CNT1_ISR (0149)     ljmp	_TRIADC_1_CNT1_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 04 60 LJMP  _TRIADC_1_PWM16_ISR(0157)     ljmp	_TRIADC_1_PWM16_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 04 5A LJMP  _TRIADC_1_CNT2_ISR (0161)     ljmp	_TRIADC_1_CNT2_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 04 5D LJMP  _TRIADC_1_CNT3_ISR (0165)     ljmp	_TRIADC_1_CNT3_ISR
0033: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 08 11 LJMP  _PWM8_1_ISR        (0169)     ljmp	_PWM8_1_ISR
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
0038: 7D 07 CA LJMP  _PWM8_2_ISR        (0173)     ljmp	_PWM8_2_ISR
003B: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
0040: 7D 07 3C LJMP  _PWM8_4_ISR        (0181)     ljmp	_PWM8_4_ISR
0043: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
0044: 7D 07 83 LJMP  _PWM8_3_ISR        (0185)     ljmp	_PWM8_3_ISR
0047: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
0048: 7D 06 AE LJMP  _PWM8_6_ISR        (0189)     ljmp	_PWM8_6_ISR
004B: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
0054: 7D 06 F5 LJMP  _PWM8_5_ISR        (0201)     ljmp	_PWM8_5_ISR
0057: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
005C: 7D 08 58 LJMP  _PWM16_1_ISR       (0209)     ljmp	_PWM16_1_ISR
005F: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [0xF8],0x0         (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [0xF9],0x0         (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 03 E7 LCALL 0x03E7             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 02    MOV   A,0x2              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 E0    MOV   X,0xE0             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 0C    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 0C    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 0C    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 0B    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 0C    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 0C FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 0B    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 0B    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 0C    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 0C FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 0B    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 09 75 LCALL __UserModules_end|__text_start|_main|_main(0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
02E2: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_ira2kai_Bank1
                                        (0019) export LoadConfigTBL_ira2kai_Bank0
                                        (0020) export LoadConfigTBL_ira2kai_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_ira2kai_Bank0:
                                        (0023) ;  Instance name PGA_1, User Module PGA
                                        (0024) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0025) 	db		71h, feh		;PGA_1_GAIN_CR0(ACB00CR0)
                                        (0026) 	db		72h, 21h		;PGA_1_GAIN_CR1(ACB00CR1)
                                        (0027) 	db		73h, 20h		;PGA_1_GAIN_CR2(ACB00CR2)
                                        (0028) 	db		70h, 00h		;PGA_1_GAIN_CR3(ACB00CR3)
                                        (0029) ;  Instance name PGA_2, User Module PGA
                                        (0030) ;       Instance name PGA_2, Block Name GAIN(ACB01)
                                        (0031) 	db		75h, feh		;PGA_2_GAIN_CR0(ACB01CR0)
                                        (0032) 	db		76h, 21h		;PGA_2_GAIN_CR1(ACB01CR1)
                                        (0033) 	db		77h, 20h		;PGA_2_GAIN_CR2(ACB01CR2)
                                        (0034) 	db		74h, 00h		;PGA_2_GAIN_CR3(ACB01CR3)
                                        (0035) ;  Instance name PGA_3, User Module PGA
                                        (0036) ;       Instance name PGA_3, Block Name GAIN(ACB02)
                                        (0037) 	db		79h, feh		;PGA_3_GAIN_CR0(ACB02CR0)
                                        (0038) 	db		7ah, 21h		;PGA_3_GAIN_CR1(ACB02CR1)
                                        (0039) 	db		7bh, 20h		;PGA_3_GAIN_CR2(ACB02CR2)
                                        (0040) 	db		78h, 00h		;PGA_3_GAIN_CR3(ACB02CR3)
                                        (0041) ;  Instance name PWM16_1, User Module PWM16
                                        (0042) ;       Instance name PWM16_1, Block Name PWM16_LSB(DCB32)
                                        (0043) 	db		5bh, 00h		;PWM16_1_CONTROL_LSB_REG(DCB32CR0)
                                        (0044) 	db		59h, c0h		;PWM16_1_PERIOD_LSB_REG(DCB32DR1)
                                        (0045) 	db		5ah, 00h		;PWM16_1_COMPARE_LSB_REG(DCB32DR2)
                                        (0046) ;       Instance name PWM16_1, Block Name PWM16_MSB(DCB33)
                                        (0047) 	db		5fh, 00h		;PWM16_1_CONTROL_MSB_REG(DCB33CR0)
                                        (0048) 	db		5dh, 5dh		;PWM16_1_PERIOD_MSB_REG(DCB33DR1)
                                        (0049) 	db		5eh, 00h		;PWM16_1_COMPARE_MSB_REG(DCB33DR2)
                                        (0050) ;  Instance name PWM8_1, User Module PWM8
                                        (0051) ;       Instance name PWM8_1, Block Name PWM8(DBB11)
                                        (0052) 	db		37h, 00h		;PWM8_1_CONTROL_REG(DBB11CR0)
                                        (0053) 	db		35h, ffh		;PWM8_1_PERIOD_REG(DBB11DR1)
                                        (0054) 	db		36h, 00h		;PWM8_1_COMPARE_REG(DBB11DR2)
                                        (0055) ;  Instance name PWM8_2, User Module PWM8
                                        (0056) ;       Instance name PWM8_2, Block Name PWM8(DCB12)
                                        (0057) 	db		3bh, 00h		;PWM8_2_CONTROL_REG(DCB12CR0)
                                        (0058) 	db		39h, ffh		;PWM8_2_PERIOD_REG(DCB12DR1)
                                        (0059) 	db		3ah, 00h		;PWM8_2_COMPARE_REG(DCB12DR2)
                                        (0060) ;  Instance name PWM8_3, User Module PWM8
                                        (0061) ;       Instance name PWM8_3, Block Name PWM8(DBB21)
                                        (0062) 	db		47h, 00h		;PWM8_3_CONTROL_REG(DBB21CR0)
                                        (0063) 	db		45h, ffh		;PWM8_3_PERIOD_REG(DBB21DR1)
                                        (0064) 	db		46h, 00h		;PWM8_3_COMPARE_REG(DBB21DR2)
                                        (0065) ;  Instance name PWM8_4, User Module PWM8
                                        (0066) ;       Instance name PWM8_4, Block Name PWM8(DBB20)
                                        (0067) 	db		43h, 00h		;PWM8_4_CONTROL_REG(DBB20CR0)
                                        (0068) 	db		41h, ffh		;PWM8_4_PERIOD_REG(DBB20DR1)
                                        (0069) 	db		42h, 00h		;PWM8_4_COMPARE_REG(DBB20DR2)
                                        (0070) ;  Instance name PWM8_5, User Module PWM8
                                        (0071) ;       Instance name PWM8_5, Block Name PWM8(DBB31)
                                        (0072) 	db		57h, 00h		;PWM8_5_CONTROL_REG(DBB31CR0)
                                        (0073) 	db		55h, ffh		;PWM8_5_PERIOD_REG(DBB31DR1)
                                        (0074) 	db		56h, 00h		;PWM8_5_COMPARE_REG(DBB31DR2)
                                        (0075) ;  Instance name PWM8_6, User Module PWM8
                                        (0076) ;       Instance name PWM8_6, Block Name PWM8(DCB22)
                                        (0077) 	db		4bh, 00h		;PWM8_6_CONTROL_REG(DCB22CR0)
                                        (0078) 	db		49h, ffh		;PWM8_6_PERIOD_REG(DCB22DR1)
                                        (0079) 	db		4ah, 00h		;PWM8_6_COMPARE_REG(DCB22DR2)
                                        (0080) ;  Instance name TRIADC_1, User Module TRIADC
                                        (0081) ;       Instance name TRIADC_1, Block Name ADC1(ASC10)
                                        (0082) 	db		80h, 90h		;TRIADC_1_bfADC1cr0(ASC10CR0)
                                        (0083) 	db		81h, 00h		;TRIADC_1_bfADC1cr1(ASC10CR1)
                                        (0084) 	db		82h, 61h		;TRIADC_1_bfADC1cr2(ASC10CR2)
                                        (0085) 	db		83h, f0h		;TRIADC_1_bfADC1cr3(ASC10CR3)
                                        (0086) ;       Instance name TRIADC_1, Block Name ADC2(ASD11)
                                        (0087) 	db		84h, 90h		;TRIADC_1_bfADC2cr0(ASD11CR0)
                                        (0088) 	db		85h, 00h		;TRIADC_1_bfADC2cr1(ASD11CR1)
                                        (0089) 	db		86h, 60h		;TRIADC_1_bfADC2cr2(ASD11CR2)
                                        (0090) 	db		87h, f0h		;TRIADC_1_bfADC2cr3(ASD11CR3)
                                        (0091) ;       Instance name TRIADC_1, Block Name ADC3(ASC12)
                                        (0092) 	db		88h, 90h		;TRIADC_1_bfADC3cr0(ASC12CR0)
                                        (0093) 	db		89h, 00h		;TRIADC_1_bfADC3cr1(ASC12CR1)
                                        (0094) 	db		8ah, 60h		;TRIADC_1_bfADC3cr2(ASC12CR2)
                                        (0095) 	db		8bh, f0h		;TRIADC_1_bfADC3cr3(ASC12CR3)
                                        (0096) ;       Instance name TRIADC_1, Block Name CNT1(DBB00)
                                        (0097) 	db		23h, 00h		;TRIADC_1_bCounter1_CR0(DBB00CR0)
                                        (0098) 	db		21h, 00h		;TRIADC_1_bPeriod1(DBB00DR1)
                                        (0099) 	db		22h, 00h		;TRIADC_1_bCompare1(DBB00DR2)
                                        (0100) ;       Instance name TRIADC_1, Block Name CNT2(DCB03)
                                        (0101) 	db		2fh, 00h		;TRIADC_1_bCounter2_CR0(DCB03CR0)
                                        (0102) 	db		2dh, 00h		;TRIADC_1_bPeriod2(DCB03DR1)
                                        (0103) 	db		2eh, 00h		;TRIADC_1_bCompare2(DCB03DR2)
                                        (0104) ;       Instance name TRIADC_1, Block Name CNT3(DBB10)
                                        (0105) 	db		33h, 00h		;TRIADC_1_bCounter3_CR0(DBB10CR0)
                                        (0106) 	db		31h, 00h		;TRIADC_1_bPeriod3(DBB10DR1)
                                        (0107) 	db		32h, 00h		;TRIADC_1_bCompare3(DBB10DR2)
                                        (0108) ;       Instance name TRIADC_1, Block Name PWM16_LSB(DBB01)
                                        (0109) 	db		27h, 00h		;TRIADC_1_fPWM_LSB_CR0(DBB01CR0)
                                        (0110) 	db		25h, 00h		;TRIADC_1_bPWM_Period_LSB(DBB01DR1)
                                        (0111) 	db		26h, 00h		;TRIADC_1_bPWM_IntTime_LSB(DBB01DR2)
                                        (0112) ;       Instance name TRIADC_1, Block Name PWM16_MSB(DCB02)
                                        (0113) 	db		2bh, 00h		;TRIADC_1_fPWM_MSB_CR0(DCB02CR0)
                                        (0114) 	db		29h, 00h		;TRIADC_1_bPWM_Period_MSB(DCB02DR1)
                                        (0115) 	db		2ah, 00h		;TRIADC_1_bPWM_IntTime_MSB(DCB02DR2)
                                        (0116) ;  Global Register values Bank 0
                                        (0117) 	db		60h, 1ah		; AnalogColumnInputSelect register (AMX_IN)
                                        (0118) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0119) 	db		63h, 17h		; AnalogReferenceControl register (ARF_CR)
                                        (0120) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0121) 	db		e6h, 70h		; DecimatorControl_0 register (DEC_CR0)
                                        (0122) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0123) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0124) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0125) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0126) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0127) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0128) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0129) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0130) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0131) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0132) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0133) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0134) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0135) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0136) 	db		bdh, 11h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0137) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0138) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0139) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0140) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0141) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0142) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0143) 	db		c5h, 24h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0144) 	db		c6h, 10h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0145) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0146) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0147) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0148) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0149) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0150) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0151) 	db		ceh, 21h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0152) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0153) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0154) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0155) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0156) 	db		ffh
                                        (0157) LoadConfigTBL_ira2kai_Bank1:
                                        (0158) ;  Instance name PGA_1, User Module PGA
                                        (0159) ;       Instance name PGA_1, Block Name GAIN(ACB00)
                                        (0160) ;  Instance name PGA_2, User Module PGA
                                        (0161) ;       Instance name PGA_2, Block Name GAIN(ACB01)
                                        (0162) ;  Instance name PGA_3, User Module PGA
                                        (0163) ;       Instance name PGA_3, Block Name GAIN(ACB02)
                                        (0164) ;  Instance name PWM16_1, User Module PWM16
                                        (0165) ;       Instance name PWM16_1, Block Name PWM16_LSB(DCB32)
                                        (0166) 	db		58h, 11h		;PWM16_1_FUNC_LSB_REG(DCB32FN)
                                        (0167) 	db		59h, 16h		;PWM16_1_INPUT_LSB_REG(DCB32IN)
                                        (0168) 	db		5ah, 40h		;PWM16_1_OUTPUT_LSB_REG(DCB32OU)
                                        (0169) ;       Instance name PWM16_1, Block Name PWM16_MSB(DCB33)
                                        (0170) 	db		5ch, 39h		;PWM16_1_FUNC_MSB_REG(DCB33FN)
                                        (0171) 	db		5dh, 36h		;PWM16_1_INPUT_MSB_REG(DCB33IN)
                                        (0172) 	db		5eh, 46h		;PWM16_1_OUTPUT_MSB_REG(DCB33OU)
                                        (0173) ;  Instance name PWM8_1, User Module PWM8
                                        (0174) ;       Instance name PWM8_1, Block Name PWM8(DBB11)
                                        (0175) 	db		34h, 39h		;PWM8_1_FUNC_REG(DBB11FN)
                                        (0176) 	db		35h, 16h		;PWM8_1_INPUT_REG(DBB11IN)
                                        (0177) 	db		36h, 44h		;PWM8_1_OUTPUT_REG(DBB11OU)
                                        (0178) ;  Instance name PWM8_2, User Module PWM8
                                        (0179) ;       Instance name PWM8_2, Block Name PWM8(DCB12)
                                        (0180) 	db		38h, 39h		;PWM8_2_FUNC_REG(DCB12FN)
                                        (0181) 	db		39h, 16h		;PWM8_2_INPUT_REG(DCB12IN)
                                        (0182) 	db		3ah, 45h		;PWM8_2_OUTPUT_REG(DCB12OU)
                                        (0183) ;  Instance name PWM8_3, User Module PWM8
                                        (0184) ;       Instance name PWM8_3, Block Name PWM8(DBB21)
                                        (0185) 	db		44h, 39h		;PWM8_3_FUNC_REG(DBB21FN)
                                        (0186) 	db		45h, 16h		;PWM8_3_INPUT_REG(DBB21IN)
                                        (0187) 	db		46h, 44h		;PWM8_3_OUTPUT_REG(DBB21OU)
                                        (0188) ;  Instance name PWM8_4, User Module PWM8
                                        (0189) ;       Instance name PWM8_4, Block Name PWM8(DBB20)
                                        (0190) 	db		40h, 39h		;PWM8_4_FUNC_REG(DBB20FN)
                                        (0191) 	db		41h, 16h		;PWM8_4_INPUT_REG(DBA20IN)
                                        (0192) 	db		42h, 47h		;PWM8_4_OUTPUT_REG(DBA20OU)
                                        (0193) ;  Instance name PWM8_5, User Module PWM8
                                        (0194) ;       Instance name PWM8_5, Block Name PWM8(DBB31)
                                        (0195) 	db		54h, 39h		;PWM8_5_FUNC_REG(DBB31FN)
                                        (0196) 	db		55h, 16h		;PWM8_5_INPUT_REG(DBB31IN)
                                        (0197) 	db		56h, 47h		;PWM8_5_OUTPUT_REG(DBB31OU)
                                        (0198) ;  Instance name PWM8_6, User Module PWM8
                                        (0199) ;       Instance name PWM8_6, Block Name PWM8(DCB22)
                                        (0200) 	db		48h, 39h		;PWM8_6_FUNC_REG(DCB22FN)
                                        (0201) 	db		49h, 16h		;PWM8_6_INPUT_REG(DCB22IN)
                                        (0202) 	db		4ah, 45h		;PWM8_6_OUTPUT_REG(DCB22OU)
                                        (0203) ;  Instance name TRIADC_1, User Module TRIADC
                                        (0204) ;       Instance name TRIADC_1, Block Name ADC1(ASC10)
                                        (0205) ;       Instance name TRIADC_1, Block Name ADC2(ASD11)
                                        (0206) ;       Instance name TRIADC_1, Block Name ADC3(ASC12)
                                        (0207) ;       Instance name TRIADC_1, Block Name CNT1(DBB00)
                                        (0208) 	db		20h, 21h		;TRIADC_1_fCounter1FN(DBB00FN)
                                        (0209) 	db		21h, 45h		;TRIADC_1_fCounter1SL(DBB00IN)
                                        (0210) 	db		22h, 40h		;TRIADC_1_fCounter1OS(DBB00OU)
                                        (0211) ;       Instance name TRIADC_1, Block Name CNT2(DCB03)
                                        (0212) 	db		2ch, 21h		;TRIADC_1_fCounter2FN(DCB03FN)
                                        (0213) 	db		2dh, 55h		;TRIADC_1_fCounter2SL(DCB03IN)
                                        (0214) 	db		2eh, 40h		;TRIADC_1_fCounter2OS(DCB03OU)
                                        (0215) ;       Instance name TRIADC_1, Block Name CNT3(DBB10)
                                        (0216) 	db		30h, 21h		;TRIADC_1_fCounter3FN(DBB10FN)
                                        (0217) 	db		31h, 65h		;TRIADC_1_fCounter3SL(DBB10IN)
                                        (0218) 	db		32h, 40h		;TRIADC_1_fCounter3OS(DBB10OU)
                                        (0219) ;       Instance name TRIADC_1, Block Name PWM16_LSB(DBB01)
                                        (0220) 	db		24h, 01h		;TRIADC_1_bfPWM_LSB_FN(DBB01FN)
                                        (0221) 	db		25h, 15h		;TRIADC_1_(DBB01IN)
                                        (0222) 	db		26h, 40h		;TRIADC_1_(DBB01OU)
                                        (0223) ;       Instance name TRIADC_1, Block Name PWM16_MSB(DCB02)
                                        (0224) 	db		28h, 21h		;TRIADC_1_bfPWM_MSB_FN(DCB02FN)
                                        (0225) 	db		29h, 35h		;TRIADC_1_(DCB02IN)
                                        (0226) 	db		2ah, 40h		;TRIADC_1_(DCB02OU)
                                        (0227) ;  Global Register values Bank 1
                                        (0228) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0229) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0230) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0231) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0232) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0233) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0234) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0235) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0236) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0237) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0238) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0239) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0240) 	db		e1h, 19h		; OscillatorControl_1 register (OSC_CR1)
                                        (0241) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0242) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0243) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0244) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0245) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0246) 	db		ffh
                                        (0247) AREA psoc_config(rom, rel)
                                        (0248) LoadConfigTBL_ira2kai_Ordered:
                                        (0249) ;  Ordered Global Register values
                                        (0250) 	M8C_SetBank0
02E4: 62 00 00 MOV   REG[0x0],0x0       (0251) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
02E7: 71 10    OR    F,0x10             
                                        (0252) 	M8C_SetBank1
02E9: 62 00 04 MOV   REG[0x0],0x4       (0253) 	mov	reg[00h], 04h		; Port_0_DriveMode_0 register (PRT0DM0)
02EC: 62 01 FB MOV   REG[0x1],0xFB      (0254) 	mov	reg[01h], fbh		; Port_0_DriveMode_1 register (PRT0DM1)
02EF: 70 EF    AND   F,0xEF             
                                        (0255) 	M8C_SetBank0
02F1: 62 03 FB MOV   REG[0x3],0xFB      (0256) 	mov	reg[03h], fbh		; Port_0_DriveMode_2 register (PRT0DM2)
02F4: 62 02 04 MOV   REG[0x2],0x4       (0257) 	mov	reg[02h], 04h		; Port_0_GlobalSelect register (PRT0GS)
02F7: 71 10    OR    F,0x10             
                                        (0258) 	M8C_SetBank1
02F9: 62 02 00 MOV   REG[0x2],0x0       (0259) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
02FC: 62 03 00 MOV   REG[0x3],0x0       (0260) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
02FF: 70 EF    AND   F,0xEF             
                                        (0261) 	M8C_SetBank0
0301: 62 01 00 MOV   REG[0x1],0x0       (0262) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0304: 62 04 00 MOV   REG[0x4],0x0       (0263) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0307: 71 10    OR    F,0x10             
                                        (0264) 	M8C_SetBank1
0309: 62 04 01 MOV   REG[0x4],0x1       (0265) 	mov	reg[04h], 01h		; Port_1_DriveMode_0 register (PRT1DM0)
030C: 62 05 00 MOV   REG[0x5],0x0       (0266) 	mov	reg[05h], 00h		; Port_1_DriveMode_1 register (PRT1DM1)
030F: 70 EF    AND   F,0xEF             
                                        (0267) 	M8C_SetBank0
0311: 62 07 00 MOV   REG[0x7],0x0       (0268) 	mov	reg[07h], 00h		; Port_1_DriveMode_2 register (PRT1DM2)
0314: 62 06 01 MOV   REG[0x6],0x1       (0269) 	mov	reg[06h], 01h		; Port_1_GlobalSelect register (PRT1GS)
0317: 71 10    OR    F,0x10             
                                        (0270) 	M8C_SetBank1
0319: 62 06 00 MOV   REG[0x6],0x0       (0271) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
031C: 62 07 00 MOV   REG[0x7],0x0       (0272) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
031F: 70 EF    AND   F,0xEF             
                                        (0273) 	M8C_SetBank0
0321: 62 05 00 MOV   REG[0x5],0x0       (0274) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0324: 62 08 00 MOV   REG[0x8],0x0       (0275) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0327: 71 10    OR    F,0x10             
                                        (0276) 	M8C_SetBank1
0329: 62 08 AB MOV   REG[0x8],0xAB      (0277) 	mov	reg[08h], abh		; Port_2_DriveMode_0 register (PRT2DM0)
032C: 62 09 54 MOV   REG[0x9],0x54      (0278) 	mov	reg[09h], 54h		; Port_2_DriveMode_1 register (PRT2DM1)
032F: 70 EF    AND   F,0xEF             
                                        (0279) 	M8C_SetBank0
0331: 62 0B 54 MOV   REG[0xB],0x54      (0280) 	mov	reg[0bh], 54h		; Port_2_DriveMode_2 register (PRT2DM2)
0334: 62 0A AB MOV   REG[0xA],0xAB      (0281) 	mov	reg[0ah], abh		; Port_2_GlobalSelect register (PRT2GS)
0337: 71 10    OR    F,0x10             
                                        (0282) 	M8C_SetBank1
0339: 62 0A 00 MOV   REG[0xA],0x0       (0283) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
033C: 62 0B 00 MOV   REG[0xB],0x0       (0284) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
033F: 70 EF    AND   F,0xEF             
                                        (0285) 	M8C_SetBank0
0341: 62 09 00 MOV   REG[0x9],0x0       (0286) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0344: 62 0C 00 MOV   REG[0xC],0x0       (0287) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0347: 71 10    OR    F,0x10             
                                        (0288) 	M8C_SetBank1
0349: 62 0C 00 MOV   REG[0xC],0x0       (0289) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
034C: 62 0D 00 MOV   REG[0xD],0x0       (0290) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
034F: 70 EF    AND   F,0xEF             
                                        (0291) 	M8C_SetBank0
0351: 62 0F 00 MOV   REG[0xF],0x0       (0292) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0354: 62 0E 00 MOV   REG[0xE],0x0       (0293) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0357: 71 10    OR    F,0x10             
                                        (0294) 	M8C_SetBank1
0359: 62 0E 00 MOV   REG[0xE],0x0       (0295) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
035C: 62 0F 00 MOV   REG[0xF],0x0       (0296) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
035F: 70 EF    AND   F,0xEF             
                                        (0297) 	M8C_SetBank0
0361: 62 0D 00 MOV   REG[0xD],0x0       (0298) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0364: 62 10 00 MOV   REG[0x10],0x0      (0299) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0367: 71 10    OR    F,0x10             
                                        (0300) 	M8C_SetBank1
0369: 62 10 00 MOV   REG[0x10],0x0      (0301) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
036C: 62 11 00 MOV   REG[0x11],0x0      (0302) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
036F: 70 EF    AND   F,0xEF             
                                        (0303) 	M8C_SetBank0
0371: 62 13 00 MOV   REG[0x13],0x0      (0304) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0374: 62 12 00 MOV   REG[0x12],0x0      (0305) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0377: 71 10    OR    F,0x10             
                                        (0306) 	M8C_SetBank1
0379: 62 12 00 MOV   REG[0x12],0x0      (0307) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
037C: 62 13 00 MOV   REG[0x13],0x0      (0308) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
037F: 70 EF    AND   F,0xEF             
                                        (0309) 	M8C_SetBank0
0381: 62 11 00 MOV   REG[0x11],0x0      (0310) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0384: 62 14 00 MOV   REG[0x14],0x0      (0311) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0387: 71 10    OR    F,0x10             
                                        (0312) 	M8C_SetBank1
0389: 62 14 00 MOV   REG[0x14],0x0      (0313) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
038C: 62 15 00 MOV   REG[0x15],0x0      (0314) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
038F: 70 EF    AND   F,0xEF             
                                        (0315) 	M8C_SetBank0
0391: 62 17 00 MOV   REG[0x17],0x0      (0316) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0394: 62 16 00 MOV   REG[0x16],0x0      (0317) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0397: 71 10    OR    F,0x10             
                                        (0318) 	M8C_SetBank1
0399: 62 16 00 MOV   REG[0x16],0x0      (0319) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
039C: 62 17 00 MOV   REG[0x17],0x0      (0320) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
039F: 70 EF    AND   F,0xEF             
                                        (0321) 	M8C_SetBank0
03A1: 62 15 00 MOV   REG[0x15],0x0      (0322) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
03A4: 62 18 00 MOV   REG[0x18],0x0      (0323) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
03A7: 71 10    OR    F,0x10             
                                        (0324) 	M8C_SetBank1
03A9: 62 18 00 MOV   REG[0x18],0x0      (0325) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
03AC: 62 19 00 MOV   REG[0x19],0x0      (0326) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
03AF: 70 EF    AND   F,0xEF             
                                        (0327) 	M8C_SetBank0
03B1: 62 1B 00 MOV   REG[0x1B],0x0      (0328) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
03B4: 62 1A 00 MOV   REG[0x1A],0x0      (0329) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
03B7: 71 10    OR    F,0x10             
                                        (0330) 	M8C_SetBank1
03B9: 62 1A 00 MOV   REG[0x1A],0x0      (0331) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
03BC: 62 1B 00 MOV   REG[0x1B],0x0      (0332) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
03BF: 70 EF    AND   F,0xEF             
                                        (0333) 	M8C_SetBank0
03C1: 62 19 00 MOV   REG[0x19],0x0      (0334) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
03C4: 62 1C 00 MOV   REG[0x1C],0x0      (0335) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
03C7: 71 10    OR    F,0x10             
                                        (0336) 	M8C_SetBank1
03C9: 62 1C 00 MOV   REG[0x1C],0x0      (0337) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
03CC: 62 1D 00 MOV   REG[0x1D],0x0      (0338) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
03CF: 70 EF    AND   F,0xEF             
                                        (0339) 	M8C_SetBank0
03D1: 62 1F 00 MOV   REG[0x1F],0x0      (0340) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
03D4: 62 1E 00 MOV   REG[0x1E],0x0      (0341) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
03D7: 71 10    OR    F,0x10             
                                        (0342) 	M8C_SetBank1
03D9: 62 1E 00 MOV   REG[0x1E],0x0      (0343) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
03DC: 62 1F 00 MOV   REG[0x1F],0x0      (0344) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
03DF: 70 EF    AND   F,0xEF             
                                        (0345) 	M8C_SetBank0
03E1: 62 1D 00 MOV   REG[0x1D],0x0      (0346) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
03E4: 70 EF    AND   F,0xEF             
                                        (0347) 	M8C_SetBank0
03E6: 7F       RET                      (0348) 	ret
                                        (0349) 
                                        (0350) 
                                        (0351) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_ira2kai
                                        (0026) export _LoadConfig_ira2kai
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
03E7: 7C 03 EE LCALL 0x03EE             (0058) 	lcall	LoadConfig_ira2kai
03EA: 7C 02 E2 LCALL 0x02E2             (0059) 	lcall	LoadConfigTBL_ira2kai_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
03ED: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration ira2kai
                                        (0067) ;
                                        (0068) ;    Load configuration registers for ira2kai.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_ira2kai:
                                        (0085)  LoadConfig_ira2kai:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
03EE: 10       PUSH  X                  (0088) 	push	x
03EF: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
03F1: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
03F3: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
03F4: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_ira2kai_Bank0
03F6: 57 A0    MOV   X,0xA0             (0094)     mov     X, <LoadConfigTBL_ira2kai_Bank0
03F8: 7C 04 09 LCALL 0x0409             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
03FB: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
03FD: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
03FE: 50 02    MOV   A,0x2              (0100)     mov     A, >LoadConfigTBL_ira2kai_Bank1
0400: 57 6D    MOV   X,0x6D             (0101)     mov     X, <LoadConfigTBL_ira2kai_Bank1
0402: 7C 04 09 LCALL 0x0409             (0102)     lcall   LoadConfig              ; Load the bank 1 values
0405: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
0407: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
0408: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
0409: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
040B: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
040C: 08       PUSH  A                  (0132)     push    A
040D: 4F       MOV   X,SP               (0133)     mov     X, SP
040E: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
0411: D0 04    JNC   0x0416             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0413: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
0416: 18       POP   A                  (0138)     pop     A
0417: 20       POP   X                  (0139)     pop     X
0418: 70 EF    AND   F,0xEF             
041A: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
041D: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
041E: 08       PUSH  A                  (0145)     push    A
041F: 28       ROMX                     (0146)     romx                            ; Load register address from table
0420: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
0422: A0 1F    JZ    0x0442             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
0424: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
0425: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
0428: A0 03    JZ    0x042C             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
042A: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
042C: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
042E: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
042F: 20       POP   X                  (0156)     pop     X
0430: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
0431: 09 00    ADC   A,0x0              (0158)     adc     A, 0
0433: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
0434: 08       PUSH  A                  (0160)     push    A
0435: 28       ROMX                     (0161)     romx                            ; load config data from the table
0436: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
0437: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
0439: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
043B: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
043C: 20       POP   X                  (0166)     pop     X
043D: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
043E: 09 00    ADC   A,0x0              (0168)     adc     A, 0
0440: 8F D7    JMP   0x0418             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
0442: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
0444: 70 3F    AND   F,0x3F             
0446: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
0448: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\triadc_1int.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   TRIADC_1INT.asm
                                        (0004) ;;  Version: 2.20, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: TriADC Interrupt Service Routines
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "TRIADC_1.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export _TRIADC_1_CNT1_ISR
                                        (0021) export _TRIADC_1_CNT2_ISR
                                        (0022) export _TRIADC_1_CNT3_ISR
                                        (0023) export _TRIADC_1_PWM16_ISR
                                        (0024) export  TRIADC_1_cCounter1U
                                        (0025) export  TRIADC_1_cCounter2U
                                        (0026) export  TRIADC_1_cCounter3U
                                        (0027) export _TRIADC_1_iResult1
                                        (0028) export  TRIADC_1_iResult1
                                        (0029) export _TRIADC_1_iResult2
                                        (0030) export  TRIADC_1_iResult2
                                        (0031) export _TRIADC_1_iResult3
                                        (0032) export  TRIADC_1_iResult3
                                        (0033) export _TRIADC_1_bfStatus
                                        (0034) export  TRIADC_1_bfStatus
                                        (0035) export  TRIADC_1_bSampC
                                        (0036) 
                                        (0037) ;-----------------------------------------------
                                        (0038) ; Variable Allocation
                                        (0039) ;-----------------------------------------------
                                        (0040) AREA InterruptRAM(RAM, REL, CON)
                                        (0041) 
                                        (0042)  TRIADC_1_cCounter1U:     BLK   1  ;The Upper byte of the Counter
                                        (0043)  TRIADC_1_cCounter2U:     BLK   1  ;The Upper byte of the Counter
                                        (0044)  TRIADC_1_cCounter3U:     BLK   1  ;The Upper byte of the Counter
                                        (0045) _TRIADC_1_iResult1:
                                        (0046)  TRIADC_1_iResult1:       BLK   2  ;A/D value
                                        (0047) _TRIADC_1_iResult2:
                                        (0048)  TRIADC_1_iResult2:       BLK   2  ;A/D value
                                        (0049) _TRIADC_1_iResult3:
                                        (0050)  TRIADC_1_iResult3:       BLK   2  ;A/D value
                                        (0051) _TRIADC_1_bfStatus:
                                        (0052)  TRIADC_1_bfStatus:       BLK   1  ;Data Valid Flag
                                        (0053)  TRIADC_1_bSampC:         BLK   1  ;# of times to run A/D
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  EQUATES and TABLES
                                        (0058) ;-----------------------------------------------
                                        (0059) ; Constant Definitions
                                        (0060) LowByte:   equ 1
                                        (0061) HighByte:  equ 0
                                        (0062) 
                                        (0063) 
                                        (0064) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0065) ;---------------------------------------------------
                                        (0066) ; Insert your custom declarations below this banner
                                        (0067) ;---------------------------------------------------
                                        (0068) 
                                        (0069) ;------------------------
                                        (0070) ; Includes
                                        (0071) ;------------------------
                                        (0072) 
                                        (0073) 	
                                        (0074) ;------------------------
                                        (0075) ;  Constant Definitions
                                        (0076) ;------------------------
                                        (0077) 
                                        (0078) 
                                        (0079) ;------------------------
                                        (0080) ; Variable Allocation
                                        (0081) ;------------------------
                                        (0082) 
                                        (0083) 
                                        (0084) ;---------------------------------------------------
                                        (0085) ; Insert your custom declarations above this banner
                                        (0086) ;---------------------------------------------------
                                        (0087) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0088) 
                                        (0089) 
                                        (0090) AREA UserModules (ROM, REL)
                                        (0091) .LITERAL
                                        (0092) TRIADC_1MaxNegX4Table:
                                        (0093) ; Bits  7    8    9   10   11   12   13
                                        (0094)    DB  FFh, FEh, FCh, F8h, F0h, E0h, C0h
                                        (0095) 
                                        (0096) TRIADC_1MaxPosX4Table:
                                        (0097) IF (TRIADC_1_DATA_FORMAT)
                                        (0098) ; Bits (signed)    7    8    9   10   11   12   13
                                        (0099)               DB  01h, 02h, 04h, 08h, 10h, 20h, 40h
                                        (0100) ELSE
                                        (0101) ; Bits (unsigned)  7    8    9   10   11   12   13
                                        (0102)               DB  02h, 04h, 08h, 10h, 20h, 40h, 80h
                                        (0103) ENDIF
                                        (0104) .ENDLITERAL
                                        (0105) 
                                        (0106) 
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;  FUNCTION NAME: TRIADC_1_CNT1_ISR (Counter8 Interrupt)
                                        (0109) ;
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;    Increment the upper (software) half on the counter whenever the
                                        (0113) ;    lower (hardware) half of the counter underflows.  This counter
                                        (0114) ;    should start out at the most negative value (0xFF). (Channel 1)
                                        (0115) ;
                                        (0116) ;-----------------------------------------------------------------------------
                                        (0117) ;
                                        (0118) _TRIADC_1_CNT1_ISR:
0457: 76 00    INC   [0x0]              (0119)    inc [TRIADC_1_cCounter1U]
                                        (0120)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0121)    ;---------------------------------------------------
                                        (0122)    ; Insert your custom assembly code below this banner
                                        (0123)    ;---------------------------------------------------
                                        (0124)    ;   NOTE: interrupt service routines must preserve
                                        (0125)    ;   the values of the A and X CPU registers.
                                        (0126)    
                                        (0127)    ;---------------------------------------------------
                                        (0128)    ; Insert your custom assembly code above this banner
                                        (0129)    ;---------------------------------------------------
                                        (0130)    
                                        (0131)    ;---------------------------------------------------
                                        (0132)    ; Insert a lcall to a C function below this banner
                                        (0133)    ; and un-comment the lines between these banners
                                        (0134)    ;---------------------------------------------------
                                        (0135)    
                                        (0136)    ;PRESERVE_CPU_CONTEXT
                                        (0137)    ;lcall _My_C_Function
                                        (0138)    ;RESTORE_CPU_CONTEXT
                                        (0139)    
                                        (0140)    ;---------------------------------------------------
                                        (0141)    ; Insert a lcall to a C function above this banner
                                        (0142)    ; and un-comment the lines between these banners
                                        (0143)    ;---------------------------------------------------
                                        (0144)    ;@PSoC_UserCode_END@ (Do not change this line.)
0459: 7E       RETI                     (0145)    reti
                                        (0146) 
                                        (0147) ;-----------------------------------------------------------------------------
                                        (0148) ;  FUNCTION NAME: TRIADC_1_CNT2_ISR (Counter8 Interrupt)
                                        (0149) ;
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;    Increment the upper (software) half on the counter whenever the
                                        (0153) ;    lower (hardware) half of the counter underflows.  This counter
                                        (0154) ;    should start out at the most negative value (0xFF). (Channel 2)
                                        (0155) ;
                                        (0156) ;-----------------------------------------------------------------------------
                                        (0157) ;
                                        (0158) _TRIADC_1_CNT2_ISR:
045A: 76 01    INC   [0x1]              (0159)    inc [TRIADC_1_cCounter2U]
                                        (0160)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0161)    ;---------------------------------------------------
                                        (0162)    ; Insert your custom assembly code below this banner
                                        (0163)    ;---------------------------------------------------
                                        (0164)    ;   NOTE: interrupt service routines must preserve
                                        (0165)    ;   the values of the A and X CPU registers.
                                        (0166)    
                                        (0167)    ;---------------------------------------------------
                                        (0168)    ; Insert your custom assembly code above this banner
                                        (0169)    ;---------------------------------------------------
                                        (0170)    
                                        (0171)    ;---------------------------------------------------
                                        (0172)    ; Insert a lcall to a C function below this banner
                                        (0173)    ; and un-comment the lines between these banners
                                        (0174)    ;---------------------------------------------------
                                        (0175)    
                                        (0176)    ;PRESERVE_CPU_CONTEXT
                                        (0177)    ;lcall _My_C_Function
                                        (0178)    ;RESTORE_CPU_CONTEXT
                                        (0179)    
                                        (0180)    ;---------------------------------------------------
                                        (0181)    ; Insert a lcall to a C function above this banner
                                        (0182)    ; and un-comment the lines between these banners
                                        (0183)    ;---------------------------------------------------
                                        (0184)    ;@PSoC_UserCode_END@ (Do not change this line.)
045C: 7E       RETI                     (0185)    reti
                                        (0186) 
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: TRIADC_1_CNT3_ISR (Counter8 Interrupt)
                                        (0189) ;
                                        (0190) ;
                                        (0191) ;  DESCRIPTION:
                                        (0192) ;    Increment the upper (software) half on the counter whenever the
                                        (0193) ;    lower (hardware) half of the counter underflows.  This counter
                                        (0194) ;    should start out at the most negative value (0xFF). (Channel 3)
                                        (0195) ;
                                        (0196) ;-----------------------------------------------------------------------------
                                        (0197) ;
                                        (0198) _TRIADC_1_CNT3_ISR:
045D: 76 02    INC   [0x2]              (0199)    inc [TRIADC_1_cCounter3U]
                                        (0200)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0201)    ;---------------------------------------------------
                                        (0202)    ; Insert your custom assembly code below this banner
                                        (0203)    ;---------------------------------------------------
                                        (0204)    ;   NOTE: interrupt service routines must preserve
                                        (0205)    ;   the values of the A and X CPU registers.
                                        (0206)    
                                        (0207)    ;---------------------------------------------------
                                        (0208)    ; Insert your custom assembly code above this banner
                                        (0209)    ;---------------------------------------------------
                                        (0210)    
                                        (0211)    ;---------------------------------------------------
                                        (0212)    ; Insert a lcall to a C function below this banner
                                        (0213)    ; and un-comment the lines between these banners
                                        (0214)    ;---------------------------------------------------
                                        (0215)    
                                        (0216)    ;PRESERVE_CPU_CONTEXT
                                        (0217)    ;lcall _My_C_Function
                                        (0218)    ;RESTORE_CPU_CONTEXT
                                        (0219)    
                                        (0220)    ;---------------------------------------------------
                                        (0221)    ; Insert a lcall to a C function above this banner
                                        (0222)    ; and un-comment the lines between these banners
                                        (0223)    ;---------------------------------------------------
                                        (0224)    ;@PSoC_UserCode_END@ (Do not change this line.)
045F: 7E       RETI                     (0225)    reti
                                        (0226) 
                                        (0227) ;-----------------------------------------------------------------------------
                                        (0228) ;  FUNCTION NAME: TRIADC_1_PWM16_ISR  (PWM16 Interrupt)
                                        (0229) ;
                                        (0230) ;  DESCRIPTION:
                                        (0231) ;  This ISR is called when the ADC has completed an integrate cycle.
                                        (0232) ;  The ADC values are calculated and stored in a global locations before
                                        (0233) ;  the end of the ISR.
                                        (0234) ;
                                        (0235) ;-----------------------------------------------------------------------------
                                        (0236) ;
                                        (0237) _TRIADC_1_PWM16_ISR:
0460: 41 23 FE AND   REG[0x23],0xFE     (0238)    and   reg[TRIADC_1_bCounter1_CR0], ~TRIADC_1_fDBLK_ENABLE  ; Disable Counter
0463: 41 2F FE AND   REG[0x2F],0xFE     (0239)    and   reg[TRIADC_1_bCounter2_CR0], ~TRIADC_1_fDBLK_ENABLE  ; Disable Counter
0466: 41 33 FE AND   REG[0x33],0xFE     (0240)    and   reg[TRIADC_1_bCounter3_CR0], ~TRIADC_1_fDBLK_ENABLE  ; Disable Counter
                                        (0241) IF TRIADC_1_NoAZ
0469: 43 82 20 OR    REG[0x82],0x20     (0242)    or    reg[TRIADC_1_bfADC1cr2], TRIADC_1_fAutoZero       ; Put Integrator in AutoZero
046C: 43 86 20 OR    REG[0x86],0x20     (0243)    or    reg[TRIADC_1_bfADC2cr2], TRIADC_1_fAutoZero       ; Put Integrator in AutoZero
046F: 43 8A 20 OR    REG[0x8A],0x20     (0244)    or    reg[TRIADC_1_bfADC3cr2], TRIADC_1_fAutoZero       ; Put Integrator in AutoZero
                                        (0245) ENDIF
0472: 43 83 10 OR    REG[0x83],0x10     (0246)    or   reg[TRIADC_1_bfADC1cr3],TRIADC_1_fFSW0             ; Put Integrator in reset
0475: 43 87 10 OR    REG[0x87],0x10     (0247)    or   reg[TRIADC_1_bfADC2cr3],TRIADC_1_fFSW0             ; Put Integrator in reset
0478: 43 8B 10 OR    REG[0x8B],0x10     (0248)    or   reg[TRIADC_1_bfADC3cr3],TRIADC_1_fFSW0             ; Put Integrator in reset
047B: 71 01    OR    F,0x1              
                                        (0249) 
                                        (0250)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0251)                                                            ; Make sure we didn't have a counter interrupt ready to fire
                                        (0252)    M8C_EnableGInt
047D: 40       NOP                      (0253)    nop                                                     ; Wait a couple cycles
047E: 70 FE    AND   F,0xFE             
                                        (0254)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
0480: 08       PUSH  A                  (0255)    push  A                                                 ; Save the Accumulator
                                        (0256) 
                                        (0257) 
                                        (0258)    ; Get ADC1 result
0481: 5D 20    MOV   A,REG[0x20]        (0259)    mov   A,reg[TRIADC_1_bCount1]                           ; Read counter value  (Bogus read puts value in Period register)
0483: 5D 22    MOV   A,REG[0x22]        (0260)    mov   A,reg[TRIADC_1_bCompare1]                         ; Read counter value
0485: 78       DEC   A                  (0261)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
0486: 73       CPL   A                  (0262)    cpl   A                                                 ; Invert the value
0487: D0 03    JNC   0x048B             (0263)    jnc   TRIADC_1_INT_CALCV1                               ; if carry, then inc MSB as well
0489: 76 00    INC   [0x0]              (0264)    inc   [TRIADC_1_cCounter1U]
                                        (0265) TRIADC_1_INT_CALCV1:
048B: 53 04    MOV   [0x4],A            (0266)    mov   [(TRIADC_1_iResult1 + LowByte)],A                 ; Store LSB value
048D: 51 00    MOV   A,[0x0]            (0267)    mov   A, [TRIADC_1_cCounter1U]                          ; Store MSB from temp counter
048F: 53 03    MOV   [0x3],A            (0268)    mov   [(TRIADC_1_iResult1 + HighByte)],A
                                        (0269) 
                                        (0270)    ; Get ADC2 result
0491: 5D 2C    MOV   A,REG[0x2C]        (0271)    mov   A,reg[TRIADC_1_bCount2]                           ; Read counter value  (Bogus read puts value in Period register)
0493: 5D 2E    MOV   A,REG[0x2E]        (0272)    mov   A,reg[TRIADC_1_bCompare2]                         ; Read counter value
0495: 78       DEC   A                  (0273)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
0496: 73       CPL   A                  (0274)    cpl   A                                                 ; Invert the value
0497: D0 03    JNC   0x049B             (0275)    jnc   TRIADC_1_INT_CALCV2                               ; if carry, then inc MSB as well
0499: 76 01    INC   [0x1]              (0276)    inc   [TRIADC_1_cCounter2U]
                                        (0277) TRIADC_1_INT_CALCV2:
049B: 53 06    MOV   [0x6],A            (0278)    mov   [(TRIADC_1_iResult2 + LowByte)],A                 ; Store LSB value
049D: 51 01    MOV   A,[0x1]            (0279)    mov   A, [TRIADC_1_cCounter2U]                          ; Store MSB from temp counter
049F: 53 05    MOV   [0x5],A            (0280)    mov   [(TRIADC_1_iResult2 + HighByte)],A
                                        (0281) 
                                        (0282)    ; Get ADC3 result
04A1: 5D 30    MOV   A,REG[0x30]        (0283)    mov   A,reg[TRIADC_1_bCount3]                           ; Read counter value  (Bogus read puts value in Period register)
04A3: 5D 32    MOV   A,REG[0x32]        (0284)    mov   A,reg[TRIADC_1_bCompare3]                         ; Read counter value
04A5: 78       DEC   A                  (0285)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
04A6: 73       CPL   A                  (0286)    cpl   A                                                 ; Invert the value
04A7: D0 03    JNC   0x04AB             (0287)    jnc   TRIADC_1_INT_CALCV3                               ; if carry, then inc MSB as well
04A9: 76 02    INC   [0x2]              (0288)    inc   [TRIADC_1_cCounter3U]
                                        (0289) TRIADC_1_INT_CALCV3:
04AB: 53 08    MOV   [0x8],A            (0290)    mov   [(TRIADC_1_iResult3 + LowByte)],A                 ; Store LSB value
04AD: 51 02    MOV   A,[0x2]            (0291)    mov   A, [TRIADC_1_cCounter3U]                          ; Store MSB from temp counter
04AF: 53 07    MOV   [0x7],A            (0292)    mov   [(TRIADC_1_iResult3 + HighByte)],A
                                        (0293) 
                                        (0294)                                                            ; The new value has been stored,
                                        (0295)                                                            ; so get counters ready for next reading first.
04B1: 62 21 FF MOV   REG[0x21],0xFF     (0296)    mov   reg[TRIADC_1_bPeriod1], ffh                       ; Initialize counter1 to FF - Set to overflow after 256 counts
04B4: 62 2D FF MOV   REG[0x2D],0xFF     (0297)    mov   reg[TRIADC_1_bPeriod2], ffh                       ; Initialize counter2 to FF - Set to overflow after 256 counts
04B7: 62 31 FF MOV   REG[0x31],0xFF     (0298)    mov   reg[TRIADC_1_bPeriod3], ffh                       ; Initialize counter3 to FF - Set to overflow after 256 counts
04BA: 43 23 01 OR    REG[0x23],0x1      (0299)    or    reg[TRIADC_1_bCounter1_CR0],TRIADC_1_fDBLK_ENABLE ; Enable Counter1
04BD: 43 2F 01 OR    REG[0x2F],0x1      (0300)    or    reg[TRIADC_1_bCounter2_CR0],TRIADC_1_fDBLK_ENABLE ; Enable Counter2
04C0: 43 33 01 OR    REG[0x33],0x1      (0301)    or    reg[TRIADC_1_bCounter3_CR0],TRIADC_1_fDBLK_ENABLE ; Enable Counter3
                                        (0302) 
                                        (0303) 
                                        (0304) IF (TRIADC_1_DATA_FORMAT)                                  ; Only check for Negative numbers if SIGNED result
                                        (0305)    mov   A, [TRIADC_1_bfStatus]                            ; Get Status with Resolution
                                        (0306)    and   A, TRIADC_1_bRES_MASK                             ; Mask of resolution
                                        (0307)    index TRIADC_1MaxNegX4Table                             ; Get Maximum negative value from table
                                        (0308)    mov   [TRIADC_1_cCounter1U], A                          ; Place result back into MSB of counter
                                        (0309)    mov   [TRIADC_1_cCounter2U], A                          ; Place result back into MSB of counter
                                        (0310)    mov   [TRIADC_1_cCounter3U], A                          ; Place result back into MSB of counter
                                        (0311) ELSE
04C3: 55 00 00 MOV   [0x0],0x0          (0312)    mov   [TRIADC_1_cCounter1U], 00h                        ; Place result back into MSB of counter
04C6: 55 01 00 MOV   [0x1],0x0          (0313)    mov   [TRIADC_1_cCounter2U], 00h                        ; Place result back into MSB of counter
04C9: 55 02 00 MOV   [0x2],0x0          (0314)    mov   [TRIADC_1_cCounter3U], 00h                        ; Place result back into MSB of counter
                                        (0315) ENDIF
                                        (0316) 
                                        (0317)    ;***********************************************
                                        (0318)    ; If the input is muxed with multiple inputs
                                        (0319)    ; this is a good place to change inputs.
                                        (0320)    ;***********************************************
                                        (0321)    ;@PSoC_UserCode_BODY_4@ (Do not change this line.)
                                        (0322)    ;---------------------------------------------------
                                        (0323)    ; Insert your custom code below this banner
                                        (0324)    ;---------------------------------------------------
                                        (0325)    ;   NOTE: interrupt service routines must preserve
                                        (0326)    ;   the values of the A and X CPU registers. At this
                                        (0327)    ;   point A has been preserved on the stack and will
                                        (0328)    ;   be restored before the return from interrupt.
                                        (0329)    ;   However, if you use the X register, you must
                                        (0330)    ;   preserve its value and restore it here.
                                        (0331) 
                                        (0332)    ;---------------------------------------------------
                                        (0333)    ; Insert your custom code above this banner
                                        (0334)    ;---------------------------------------------------
                                        (0335)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0336) 
04CC: 41 83 EF AND   REG[0x83],0xEF     (0337)    and   reg[TRIADC_1_bfADC1cr3],~TRIADC_1_fFSW0           ; Take Integrator out of reset
04CF: 41 87 EF AND   REG[0x87],0xEF     (0338)    and   reg[TRIADC_1_bfADC2cr3],~TRIADC_1_fFSW0           ; Take Integrator out of reset
04D2: 41 8B EF AND   REG[0x8B],0xEF     (0339)    and   reg[TRIADC_1_bfADC3cr3],~TRIADC_1_fFSW0           ; Take Integrator out of reset
                                        (0340) IF TRIADC_1_NoAZ
04D5: 41 82 DF AND   REG[0x82],0xDF     (0341)    and   reg[TRIADC_1_bfADC1cr2],~TRIADC_1_fAutoZero       ; Take Integrator out of AutoZero
04D8: 41 86 DF AND   REG[0x86],0xDF     (0342)    and   reg[TRIADC_1_bfADC2cr2],~TRIADC_1_fAutoZero       ; Take Integrator out of AutoZero
04DB: 41 8A DF AND   REG[0x8A],0xDF     (0343)    and   reg[TRIADC_1_bfADC3cr2],~TRIADC_1_fAutoZero       ; Take Integrator out of AutoZero
                                        (0344) ENDIF
                                        (0345) 
                                        (0346)    ;****************************************************************************
                                        (0347)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0348)    ;                          ; if stack space isn't at a premium.
                                        (0349)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0350)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0351)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0352)    ;        successful acquisition of the next byte.
                                        (0353)    ;****************************************************************************
                                        (0354) 
                                        (0355) ; ADC1
                                        (0356) IF (TRIADC_1_DATA_FORMAT)                        ; Only check for Negative numbers if SIGNED result
                                        (0357)                                                  ; Negative Overflow Check
                                        (0358)    tst   [(TRIADC_1_iResult1 + HighByte)],80h
                                        (0359)    jnz   TRIADC_1_NOT_2POVFL1
                                        (0360) 
                                        (0361) ENDIF
                                        (0362)                                                  ; Postive Overflow Check
                                        (0363)                                                  ; Get MSB of Max Positive value x4 + 1
04DE: 51 09    MOV   A,[0x9]            (0364)    mov   A,[TRIADC_1_bfStatus]                   ; Get Status with Resolution
04E0: 21 0F    AND   A,0xF              (0365)    and   A,TRIADC_1_bRES_MASK                    ; Mask of resolution normalized to 0
04E2: FF 6C    INDEX 0x0450             (0366)    index TRIADC_1MaxPosX4Table                   ; Get Maximum positive value x4 + 1 from table
04E4: 08       PUSH  A                  (0367)    push  A
04E5: 22 03    AND   A,[0x3]            (0368)    and   A, [(TRIADC_1_iResult1 + HighByte)]
04E7: A0 0B    JZ    0x04F3             (0369)    jz    TRIADC_1_NOT_POVFL1
                                        (0370)                                                  ; Positive overflow, fix it - set to Max Positive + 1
04E9: 18       POP   A                  (0371)    pop   A
04EA: 11 01    SUB   A,0x1              (0372)    sub   A, 01h
                                        (0373)                                                  ; Force most positive * 4 into result
04EC: 53 03    MOV   [0x3],A            (0374)    mov   [(TRIADC_1_iResult1 + HighByte)], A
04EE: 55 04 FF MOV   [0x4],0xFF         (0375)    mov   [(TRIADC_1_iResult1 + LowByte)], ffh
04F1: 80 02    JMP   0x04F4             (0376)    jmp   TRIADC_1_NOT_2POVFL1
                                        (0377) TRIADC_1_NOT_POVFL1:
04F3: 18       POP   A                  (0378)    pop   A
                                        (0379) 
                                        (0380) TRIADC_1_NOT_2POVFL1:
04F4: 68 03    ASR   [0x3]              (0381)    asr   [(TRIADC_1_iResult1 + HighByte)]        ; Shift MSB and LSB right twice to divide by four
04F6: 6E 04    RRC   [0x4]              (0382)    rrc   [(TRIADC_1_iResult1 + LowByte)]         ; Remember digital clock 4 times analog clock
04F8: 68 03    ASR   [0x3]              (0383)    asr   [(TRIADC_1_iResult1 + HighByte)]
04FA: 6E 04    RRC   [0x4]              (0384)    rrc   [(TRIADC_1_iResult1 + LowByte)]
                                        (0385) 
                                        (0386) ; ADC2
                                        (0387) IF (TRIADC_1_DATA_FORMAT)                        ; Only check for Negative numbers if SIGNED result
                                        (0388)                                                  ; Negative Overflow Check
                                        (0389)    tst   [(TRIADC_1_iResult2 + HighByte)],80h
                                        (0390)    jnz   TRIADC_1_NOT_2POVFL2
                                        (0391) 
                                        (0392) ENDIF
                                        (0393)                                                  ; Postive Overflow Check
                                        (0394)                                                  ; Get MSB of Max Positive value x4 + 1
04FC: 51 09    MOV   A,[0x9]            (0395)    mov   A,[TRIADC_1_bfStatus]                   ; Get Status with Resolution
04FE: 21 0F    AND   A,0xF              (0396)    and   A,TRIADC_1_bRES_MASK                    ; Mask of resolution normalized to 0
0500: FF 4E    INDEX 0x0450             (0397)    index TRIADC_1MaxPosX4Table                   ; Get Maximum positive value x4 + 1 from table
0502: 08       PUSH  A                  (0398)    push  A
0503: 22 05    AND   A,[0x5]            (0399)    and   A, [(TRIADC_1_iResult2 + HighByte)]
0505: A0 0B    JZ    0x0511             (0400)    jz    TRIADC_1_NOT_POVFL2
                                        (0401)                                                  ; Positive overflow, fix it - set to Max Positive + 1
0507: 18       POP   A                  (0402)    pop   A
0508: 11 01    SUB   A,0x1              (0403)    sub   A, 01h
                                        (0404)                                                  ; Force most positive * 4 into result
050A: 53 05    MOV   [0x5],A            (0405)    mov   [(TRIADC_1_iResult2 + HighByte)], A
050C: 55 06 FF MOV   [0x6],0xFF         (0406)    mov   [(TRIADC_1_iResult2 + LowByte)], ffh
050F: 80 02    JMP   0x0512             (0407)    jmp   TRIADC_1_NOT_2POVFL2
                                        (0408) TRIADC_1_NOT_POVFL2:
0511: 18       POP   A                  (0409)    pop   A
                                        (0410) 
                                        (0411) TRIADC_1_NOT_2POVFL2:
0512: 68 05    ASR   [0x5]              (0412)    asr   [(TRIADC_1_iResult2 + HighByte)]        ; Shift MSB and LSB right twice to divide by four
0514: 6E 06    RRC   [0x6]              (0413)    rrc   [(TRIADC_1_iResult2 + LowByte)]         ; Remember digital clock 4 times analog clock
0516: 68 05    ASR   [0x5]              (0414)    asr   [(TRIADC_1_iResult2 + HighByte)]
0518: 6E 06    RRC   [0x6]              (0415)    rrc   [(TRIADC_1_iResult2 + LowByte)]
                                        (0416) 
                                        (0417) ; ADC3
                                        (0418) IF (TRIADC_1_DATA_FORMAT)                        ; Only check for Negative numbers if SIGNED result
                                        (0419)                                                  ; Negative Overflow Check
                                        (0420)    tst   [(TRIADC_1_iResult3 + HighByte)],80h
                                        (0421)    jnz   TRIADC_1_NOT_2POVFL3
                                        (0422) 
                                        (0423) ENDIF
                                        (0424)                                                  ; Postive Overflow Check
                                        (0425)                                                  ; Get MSB of Max Positive value x4 + 1
051A: 51 09    MOV   A,[0x9]            (0426)    mov   A,[TRIADC_1_bfStatus]                   ; Get Status with Resolution
051C: 21 0F    AND   A,0xF              (0427)    and   A,TRIADC_1_bRES_MASK                    ; Mask of resolution normalized to 0
051E: FF 30    INDEX 0x0450             (0428)    index TRIADC_1MaxPosX4Table                   ; Get Maximum positive value x4 + 1 from table
0520: 08       PUSH  A                  (0429)    push  A
0521: 22 07    AND   A,[0x7]            (0430)    and   A, [(TRIADC_1_iResult3 + HighByte)]
0523: A0 0B    JZ    0x052F             (0431)    jz    TRIADC_1_NOT_POVFL3
                                        (0432)                                                  ; Positive overflow, fix it - set to Max Positive + 1
0525: 18       POP   A                  (0433)    pop   A
0526: 11 01    SUB   A,0x1              (0434)    sub   A, 01h
                                        (0435)                                                  ; Force most positive * 4 into result
0528: 53 07    MOV   [0x7],A            (0436)    mov   [(TRIADC_1_iResult3 + HighByte)], A
052A: 55 08 FF MOV   [0x8],0xFF         (0437)    mov   [(TRIADC_1_iResult3 + LowByte)], ffh
052D: 80 02    JMP   0x0530             (0438)    jmp   TRIADC_1_NOT_2POVFL3
                                        (0439) TRIADC_1_NOT_POVFL3:
052F: 18       POP   A                  (0440)    pop   A
                                        (0441) 
                                        (0442) TRIADC_1_NOT_2POVFL3:
0530: 68 07    ASR   [0x7]              (0443)    asr   [(TRIADC_1_iResult3 + HighByte)]        ; Shift MSB and LSB right twice to divide by four
0532: 6E 08    RRC   [0x8]              (0444)    rrc   [(TRIADC_1_iResult3 + LowByte)]         ; Remember digital clock 4 times analog clock
0534: 68 07    ASR   [0x7]              (0445)    asr   [(TRIADC_1_iResult3 + HighByte)]
0536: 6E 08    RRC   [0x8]              (0446)    rrc   [(TRIADC_1_iResult3 + LowByte)]
                                        (0447) 
                                        (0448) 
                                        (0449)    ;**********************************************
                                        (0450)    ; Data is ready at this point.
                                        (0451)    ; If processing Data at Interrupt level - add
                                        (0452)    ;     User Code to handle the data
                                        (0453)    ;**********************************************
                                        (0454)    ;@PSoC_UserCode_BODY_5@ (Do not change this line.)
                                        (0455)    ;---------------------------------------------------
                                        (0456)    ; Insert your custom code below this banner
                                        (0457)    ;---------------------------------------------------
                                        (0458)    ;   NOTE: interrupt service routines must preserve
                                        (0459)    ;   the values of the A and X CPU registers. At this
                                        (0460)    ;   point A has been preserved on the stack and will
                                        (0461)    ;   be restored before the return from interrupt.
                                        (0462)    ;   However, if you use the X register, you must
                                        (0463)    ;   preserve its value and restore it here.
                                        (0464) 
                                        (0465)    ;---------------------------------------------------
                                        (0466)    ; Insert your custom code above this banner
                                        (0467)    ;---------------------------------------------------
                                        (0468)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0469) 
0538: 18       POP   A                  (0470)    pop   A                                       ; Restore A, not used any more
                                        (0471) 
0539: 2E 09 10 OR    [0x9],0x10         (0472)    or    [TRIADC_1_bfStatus],TRIADC_1_fDATA_READY  ; Set Data ready bit
                                        (0473) 
053C: 47 0A FF TST   [0xA],0xFF         (0474)    tst   [TRIADC_1_bSampC], ffh                  ; If sample_counter == 0 -->> continuous data collection
053F: A0 2F    JZ    0x056F             (0475)    jz    TRIADC_1_END_PWM16_ISR
                                        (0476) 
0541: 7A 0A    DEC   [0xA]              (0477)    dec   [TRIADC_1_bSampC]                       ; Dec sample counter and check for zero
0543: B0 2B    JNZ   0x056F             (0478)    jnz   TRIADC_1_END_PWM16_ISR
                                        (0479) 
                                        (0480)    ;**********************************************
                                        (0481)    ; Turn off ADC
                                        (0482)    ;**********************************************
0545: 41 27 FE AND   REG[0x27],0xFE     (0483)    and   reg[TRIADC_1_fPWM_LSB_CR0], ~TRIADC_1_fDBLK_ENABLE    ; Disable the PWM
                                        (0484) 
0548: 41 23 FE AND   REG[0x23],0xFE     (0485)    and   reg[TRIADC_1_bCounter1_CR0], ~TRIADC_1_fDBLK_ENABLE           ; Disable the Counter
054B: 41 2F FE AND   REG[0x2F],0xFE     (0486)    and   reg[TRIADC_1_bCounter2_CR0], ~TRIADC_1_fDBLK_ENABLE           ; Disable the Counter
054E: 41 33 FE AND   REG[0x33],0xFE     (0487)    and   reg[TRIADC_1_bCounter3_CR0], ~TRIADC_1_fDBLK_ENABLE           ; Disable the Counter
                                        (0488) 
                                        (0489) IF TRIADC_1_NoAZ
0551: 43 82 20 OR    REG[0x82],0x20     (0490)    or    reg[TRIADC_1_bfADC1cr2], TRIADC_1_fAutoZero           ; Put the Integrator into Autozero mode
0554: 43 86 20 OR    REG[0x86],0x20     (0491)    or    reg[TRIADC_1_bfADC2cr2], TRIADC_1_fAutoZero           ; Put the Integrator into Autozero mode
0557: 43 8A 20 OR    REG[0x8A],0x20     (0492)    or    reg[TRIADC_1_bfADC3cr2], TRIADC_1_fAutoZero           ; Put the Integrator into Autozero mode
                                        (0493) ENDIF
                                        (0494) 
055A: 43 83 10 OR    REG[0x83],0x10     (0495)    or    reg[TRIADC_1_bfADC1cr3], TRIADC_1_fFSW0               ; Put Integrator into reset
055D: 43 87 10 OR    REG[0x87],0x10     (0496)    or    reg[TRIADC_1_bfADC2cr3], TRIADC_1_fFSW0               ; Put Integrator into reset
0560: 43 8B 10 OR    REG[0x8B],0x10     (0497)    or    reg[TRIADC_1_bfADC3cr3], TRIADC_1_fFSW0               ; Put Integrator into reset
                                        (0498) 
0563: 41 E1 FB AND   REG[0xE1],0xFB     (0499)    and   reg[TRIADC_1_bfPWM16_INT_REG], ~TRIADC_1_bfPWM16_Mask      ; Disable interrupts
0566: 41 E1 FE AND   REG[0xE1],0xFE     (0500)    and   reg[TRIADC_1_bfCounter1_INT_REG], ~TRIADC_1_bfCounter1_Mask
0569: 41 E1 F7 AND   REG[0xE1],0xF7     (0501)    and   reg[TRIADC_1_bfCounter2_INT_REG], ~TRIADC_1_bfCounter2_Mask
056C: 41 E1 EF AND   REG[0xE1],0xEF     (0502)    and   reg[TRIADC_1_bfCounter3_INT_REG], ~TRIADC_1_bfCounter3_Mask
                                        (0503) 
                                        (0504) 
                                        (0505) TRIADC_1_END_PWM16_ISR:
056F: 7E       RETI                     (0506)    reti
                                        (0507) 
                                        (0508) TRIADC_1_APIINT_END:
FILE: lib\triadc_1.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0570: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME:   TRIADC_1.asm
                                        (0004) ;;  Version: 2.20, Updated on 2013/5/19 at 10:44:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: TriADC User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "TRIADC_1.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  TRIADC_1_Start
                                        (0030) export _TRIADC_1_Start
                                        (0031) export  TRIADC_1_SetPower
                                        (0032) export _TRIADC_1_SetPower
                                        (0033) export  TRIADC_1_Stop
                                        (0034) export _TRIADC_1_Stop
                                        (0035) export  TRIADC_1_GetSamples
                                        (0036) export _TRIADC_1_GetSamples
                                        (0037) export  TRIADC_1_StopAD
                                        (0038) export _TRIADC_1_StopAD
                                        (0039) export  TRIADC_1_fIsData
                                        (0040) export _TRIADC_1_fIsData
                                        (0041) export  TRIADC_1_fIsDataAvailable
                                        (0042) export _TRIADC_1_fIsDataAvailable
                                        (0043) export  TRIADC_1_iGetData1
                                        (0044) export _TRIADC_1_iGetData1
                                        (0045) export  TRIADC_1_iGetData2
                                        (0046) export _TRIADC_1_iGetData2
                                        (0047) export  TRIADC_1_iGetData3
                                        (0048) export _TRIADC_1_iGetData3
                                        (0049) export  TRIADC_1_ClearFlag
                                        (0050) export _TRIADC_1_ClearFlag
                                        (0051) export  TRIADC_1_iGetData1ClearFlag
                                        (0052) export _TRIADC_1_iGetData1ClearFlag
                                        (0053) export  TRIADC_1_iGetData2ClearFlag
                                        (0054) export _TRIADC_1_iGetData2ClearFlag
                                        (0055) export  TRIADC_1_iGetData3ClearFlag
                                        (0056) export _TRIADC_1_iGetData3ClearFlag
                                        (0057) export  TRIADC_1_SetResolution
                                        (0058) export _TRIADC_1_SetResolution
                                        (0059) 
                                        (0060) ;-----------------------------------------------
                                        (0061) ;  EQUATES
                                        (0062) ;-----------------------------------------------
                                        (0063) ; Calctime parameters
                                        (0064) wCalcTime:     equ   TRIADC_1_bCALCTIME
                                        (0065) 
                                        (0066) ; Constants
                                        (0067) LowByte:       equ 1
                                        (0068) HighByte:      equ 0
                                        (0069) 
                                        (0070) AREA UserModules (ROM, REL)
                                        (0071) .SECTION
                                        (0072) ;-----------------------------------------------------------------------------
                                        (0073) ;  FUNCTION NAME: TRIADC_1_Start
                                        (0074) ;  FUNCTION NAME: TRIADC_1_SetPower
                                        (0075) ;
                                        (0076) ;  DESCRIPTION:
                                        (0077) ;     Applies power setting to the module's analog PSoc block.
                                        (0078) ;
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:
                                        (0082) ;    A contains the power setting (0 - 3)
                                        (0083) ;
                                        (0084) ;  RETURNS: none
                                        (0085) ;
                                        (0086) ;  SIDE EFFECTS:
                                        (0087) ;    The A and X registers may be modified by this or future implementations
                                        (0088) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0089) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0090) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0091) ;    functions.
                                        (0092) ;          
                                        (0093) ;    Currently only the page pointer registers listed below are modified: 
                                        (0094) ;          CUR_PP
                                        (0095) ;
                                        (0096)  TRIADC_1_Start:
                                        (0097) _TRIADC_1_Start:
                                        (0098)  TRIADC_1_SetPower:
                                        (0099) _TRIADC_1_SetPower:
                                        (0100)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0102)    RAM_SETPAGE_CUR >TRIADC_1_bfStatus
0573: 21 03    AND   A,0x3              (0103)    and   A,TRIADC_1_bfPOWERMASK                      ; Mask only the valid power setting bits
0575: 4F       MOV   X,SP               (0104)    mov   X, SP                                       ; Get location of next location on stack
0576: 08       PUSH  A                  (0105)    push  A                                           ; Save power value on temp location
                                        (0106) 
                                        (0107)                                                      ; Set power for ADC1
0577: 5D 83    MOV   A,REG[0x83]        (0108)    mov   A, reg[TRIADC_1_bfADC1cr3]                  ; Get current value of ADC1cr3
0579: 21 FC    AND   A,0xFC             (0109)    and   A, ~TRIADC_1_bfPOWERMASK                    ; Mask off old power value
057B: 2B 00    OR    A,[X+0]            (0110)    or    A, [X]                                      ; OR in new power value
057D: 29 F0    OR    A,0xF0             (0111)    or    A, f0h                                      ; Make sure other register is set correctly
057F: 60 83    MOV   REG[0x83],A        (0112)    mov   reg[TRIADC_1_bfADC1cr3], A                  ; Reload CR with new power value
                                        (0113) 
                                        (0114)                                                      ; Set power for ADC2
0581: 5D 87    MOV   A,REG[0x87]        (0115)    mov   A, reg[TRIADC_1_bfADC2cr3]                  ; Get current value of ADC2cr3
0583: 21 FC    AND   A,0xFC             (0116)    and   A, ~TRIADC_1_bfPOWERMASK                    ; Mask off old power value
0585: 2B 00    OR    A,[X+0]            (0117)    or    A, [X]                                      ; OR in new power value
0587: 29 F0    OR    A,0xF0             (0118)    or    A, f0h                                      ; Make sure other register is set correctly
0589: 60 87    MOV   REG[0x87],A        (0119)    mov   reg[TRIADC_1_bfADC2cr3], A                  ; Reload CR with new power value
                                        (0120) 
                                        (0121)                                                      ; Set power for ADC3
058B: 5D 8B    MOV   A,REG[0x8B]        (0122)    mov   A, reg[TRIADC_1_bfADC3cr3]                  ; Get current value of ADC3cr3
058D: 21 FC    AND   A,0xFC             (0123)    and   A, ~TRIADC_1_bfPOWERMASK                    ; Mask off old power value
058F: 2B 00    OR    A,[X+0]            (0124)    or    A, [X]                                      ; OR in new power value
0591: 29 F0    OR    A,0xF0             (0125)    or    A, f0h                                      ; Make sure other register is set correctly
0593: 60 8B    MOV   REG[0x8B],A        (0126)    mov   reg[TRIADC_1_bfADC3cr3], A                  ; Reload CR with new power value
                                        (0127) 
0595: 49 82 01 TST   REG[0x82],0x1      (0128)    tst   reg[TRIADC_1_bfADC1cr2], TRIADC_1_fRES_SET
0598: A0 05    JZ    0x059E             (0129)    jz    .DoNotLoadRes
059A: 50 01    MOV   A,0x1              (0130)    mov   A,TRIADC_1_bNUMBITS - TRIADC_1_bMINRES                 ; get and set the resolution
059C: 53 09    MOV   [0x9],A            (0131)    mov   [TRIADC_1_bfStatus], A              ; place it in the status variable
                                        (0132) .DoNotLoadRes:
                                        (0133) 
059E: 18       POP   A                  (0134)    pop   A                                           ; Restore the stack and power value
059F: 70 3F    AND   F,0x3F             
05A1: 71 C0    OR    F,0xC0             
                                        (0135)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0136)    RAM_EPILOGUE RAM_USE_CLASS_4
05A3: 7F       RET                      (0137)    ret
                                        (0138) .ENDSECTION
                                        (0139) 
                                        (0140) .SECTION
                                        (0141) ;-----------------------------------------------------------------------------
                                        (0142) ;  FUNCTION NAME: TRIADC_1_Stop
                                        (0143) ;
                                        (0144) ;  DESCRIPTION:
                                        (0145) ;    Removes power from the module's analog PSoc block, but the digital
                                        (0146) ;    blocks keep on running.
                                        (0147) ;
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;
                                        (0150) ;  ARGUMENTS:  none
                                        (0151) ;
                                        (0152) ;  RETURNS:  none
                                        (0153) ;
                                        (0154) ;  SIDE EFFECTS:
                                        (0155) ;    The A and X registers may be modified by this or future implementations
                                        (0156) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0157) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0158) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0159) ;    functions.
                                        (0160) ;
                                        (0161)  TRIADC_1_Stop:
                                        (0162) _TRIADC_1_Stop:
                                        (0163)    RAM_PROLOGUE RAM_USE_CLASS_1
05A4: 41 83 FC AND   REG[0x83],0xFC     (0164)    and   reg[TRIADC_1_bfADC1cr3], ~TRIADC_1_bfPOWERMASK
05A7: 41 87 FC AND   REG[0x87],0xFC     (0165)    and   reg[TRIADC_1_bfADC2cr3], ~TRIADC_1_bfPOWERMASK
05AA: 41 8B FC AND   REG[0x8B],0xFC     (0166)    and   reg[TRIADC_1_bfADC3cr3], ~TRIADC_1_bfPOWERMASK
                                        (0167)    RAM_EPILOGUE RAM_USE_CLASS_1
05AD: 7F       RET                      (0168)    ret
05AE: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0169) .ENDSECTION
                                        (0170) 
                                        (0171) .SECTION
                                        (0172) ;-----------------------------------------------------------------------------
                                        (0173) ;  FUNCTION NAME: TRIADC_1_Get_Samples
                                        (0174) ;
                                        (0175) ;  DESCRIPTION:
                                        (0176) ;    Starts the A/D convertor and will place data is memory.  A flag
                                        (0177) ;    is set whenever a new data value is available.
                                        (0178) ;
                                        (0179) ;-----------------------------------------------------------------------------
                                        (0180) ;
                                        (0181) ;  ARGUMENTS:
                                        (0182) ;    A Contains the number of samples to perform. (0 is continous)
                                        (0183) ;
                                        (0184) ;  RETURNS: none
                                        (0185) ;
                                        (0186) ;  SIDE EFFECTS:
                                        (0187) ;    The A and X registers may be modified by this or future implementations
                                        (0188) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0189) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0190) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0191) ;    functions.
                                        (0192) ;          
                                        (0193) ;    Currently only the page pointer registers listed below are modified: 
                                        (0194) ;          CUR_PP
                                        (0195) ;
                                        (0196)  TRIADC_1_GetSamples:
                                        (0197) _TRIADC_1_GetSamples:
                                        (0198)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0199)    RAM_SETPAGE_CUR >TRIADC_1_bSampC
05B1: 53 0A    MOV   [0xA],A            (0200)    mov   [TRIADC_1_bSampC], A                              ; Store sample count
                                        (0201) 
05B3: 51 09    MOV   A,[0x9]            (0202)    mov   A,[TRIADC_1_bfStatus]                             ; get and set the resolution
05B5: 21 0F    AND   A,0xF              (0203)    and   A,TRIADC_1_bRES_MASK
05B7: 01 07    ADD   A,0x7              (0204)    add   A,TRIADC_1_bMINRES
05B9: 90 C0    CALL  _TRIADC_1_SetResolution(0205)    call  TRIADC_1_SetResolution
05BB: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0206) 
                                        (0207) TRIADC_1_LoadMSBCounter:                                   ; The PWM has been setup by SetResolution, now set the upper
                                        (0208)                                                            ; counter which will be the same as the period.
                                        (0209)                                                            ; Reset MSB of counter to most negative value
                                        (0210)    RAM_SETPAGE_CUR >TRIADC_1_cCounter1U
05BE: 5D 2A    MOV   A,REG[0x2A]        (0211)    mov   A,reg[TRIADC_1_bPWM_IntTime_MSB]                  ; Get MSB of PWM and move it into RAM
05C0: 53 00    MOV   [0x0],A            (0212)    mov   [TRIADC_1_cCounter1U], A                          ; Use counter as temp location
05C2: 50 00    MOV   A,0x0              (0213)    mov   A, 00h                                            ; Load A with zero for the calculation
05C4: 12 00    SUB   A,[0x0]            (0214)    sub   A, [TRIADC_1_cCounter1U]                          ; 0 - MSB_PWM = MSB_of_most_neg_value
05C6: 67       ASR   A                  (0215)    asr   A                                                 ; Half the range (+ and -)
                                        (0216) IF (TRIADC_1_DATA_FORMAT)
                                        (0217)    mov   [TRIADC_1_cCounter1U], A                          ; Place result back into MSB of counter1
                                        (0218)    mov   [TRIADC_1_cCounter2U], A                          ; Place result back into MSB of counter2
                                        (0219)    mov   [TRIADC_1_cCounter3U], A                          ; Place result back into MSB of counter3
                                        (0220) ELSE
05C7: 55 00 00 MOV   [0x0],0x0          (0221)    mov   [TRIADC_1_cCounter1U], 00h                        ; Always start at zero for unsigned values for ADC1
05CA: 55 01 00 MOV   [0x1],0x0          (0222)    mov   [TRIADC_1_cCounter2U], 00h                        ; Always start at zero for unsigned values for ADC2
05CD: 55 02 00 MOV   [0x2],0x0          (0223)    mov   [TRIADC_1_cCounter3U], 00h                        ; Always start at zero for unsigned values for ADC3
                                        (0224) ENDIF
05D0: 5D 26    MOV   A,REG[0x26]        (0225)    mov   A, reg[TRIADC_1_bPWM_IntTime_LSB]                 ; Dummy Read  - required do not remove
05D2: 62 21 FF MOV   REG[0x21],0xFF     (0226)    mov   reg[TRIADC_1_bPeriod1], FFh                       ; Make sure counter1 starts at FF
05D5: 62 2D FF MOV   REG[0x2D],0xFF     (0227)    mov   reg[TRIADC_1_bPeriod2], FFh                       ; Make sure counter1 starts at FF
05D8: 62 31 FF MOV   REG[0x31],0xFF     (0228)    mov   reg[TRIADC_1_bPeriod3], FFh                       ; Make sure counter1 starts at FF
                                        (0229) 
05DB: 41 83 EF AND   REG[0x83],0xEF     (0230)    and   reg[TRIADC_1_bfADC1cr3],~TRIADC_1_fFSW0           ; Take Integrator out of reset
05DE: 41 87 EF AND   REG[0x87],0xEF     (0231)    and   reg[TRIADC_1_bfADC2cr3],~TRIADC_1_fFSW0           ; Take Integrator out of reset
05E1: 41 8B EF AND   REG[0x8B],0xEF     (0232)    and   reg[TRIADC_1_bfADC3cr3],~TRIADC_1_fFSW0           ; Take Integrator out of reset
                                        (0233) IF TRIADC_1_NoAZ
05E4: 41 82 DF AND   REG[0x82],0xDF     (0234)     and  reg[TRIADC_1_bfADC1cr2],~TRIADC_1_fAutoZero       ; Take Integrator out of AutoZero
05E7: 41 86 DF AND   REG[0x86],0xDF     (0235)     and  reg[TRIADC_1_bfADC2cr2],~TRIADC_1_fAutoZero       ; Take Integrator out of AutoZero
05EA: 41 8A DF AND   REG[0x8A],0xDF     (0236)     and  reg[TRIADC_1_bfADC3cr2],~TRIADC_1_fAutoZero       ; Take Integrator out of AutoZero
                                        (0237) ENDIF
                                        (0238) 
                                        (0239)                                                                ; Enable the A/D and Start it!
05ED: 43 23 05 OR    REG[0x23],0x5      (0240)    or    reg[TRIADC_1_bCounter1_CR0], (TRIADC_1_fDBLK_ENABLE|TRIADC_1_fPULSE_WIDE)   ; Enable the Counter
05F0: 43 2F 05 OR    REG[0x2F],0x5      (0241)    or    reg[TRIADC_1_bCounter2_CR0], (TRIADC_1_fDBLK_ENABLE|TRIADC_1_fPULSE_WIDE)   ; Enable the Counter
05F3: 43 33 05 OR    REG[0x33],0x5      (0242)    or    reg[TRIADC_1_bCounter3_CR0], (TRIADC_1_fDBLK_ENABLE|TRIADC_1_fPULSE_WIDE)   ; Enable the Counter
05F6: 43 27 01 OR    REG[0x27],0x1      (0243)    or    reg[TRIADC_1_fPWM_LSB_CR0], TRIADC_1_fDBLK_ENABLE          ; Enable PWM
05F9: 43 E1 04 OR    REG[0xE1],0x4      (0244)    or    reg[TRIADC_1_bfPWM16_INT_REG], TRIADC_1_bfPWM16_Mask  ; Enable PWM and Counter interrupts
05FC: 43 E1 01 OR    REG[0xE1],0x1      (0245)    or    reg[TRIADC_1_bfCounter1_INT_REG], TRIADC_1_bfCounter1_Mask
05FF: 43 E1 08 OR    REG[0xE1],0x8      (0246)    or    reg[TRIADC_1_bfCounter2_INT_REG], TRIADC_1_bfCounter2_Mask
0602: 43 E1 10 OR    REG[0xE1],0x10     (0247)    or    reg[TRIADC_1_bfCounter3_INT_REG], TRIADC_1_bfCounter3_Mask
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_4
0605: 7F       RET                      (0249)    ret
                                        (0250) .ENDSECTION
                                        (0251) 
                                        (0252) .SECTION
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;  FUNCTION NAME: TRIADC_1_StopAD
                                        (0255) ;
                                        (0256) ;  DESCRIPTION:
                                        (0257) ;    Completely shuts down the A/D is an orderly manner.  Both the
                                        (0258) ;    Timer and Counter are disabled and their interrupts are deactivated.
                                        (0259) ;
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS: none
                                        (0263) ;
                                        (0264) ;  RETURNS: none
                                        (0265) ;
                                        (0266) ;  SIDE EFFECTS:
                                        (0267) ;    The A and X registers may be modified by this or future implementations
                                        (0268) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0269) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0270) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0271) ;    functions.
                                        (0272) ;
                                        (0273)  TRIADC_1_StopAD:
                                        (0274) _TRIADC_1_StopAD:
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
0606: 41 27 FE AND   REG[0x27],0xFE     (0276)    and   reg[TRIADC_1_fPWM_LSB_CR0], ~TRIADC_1_fDBLK_ENABLE    ; Disable the PWM
                                        (0277) 
0609: 41 23 FE AND   REG[0x23],0xFE     (0278)    and   reg[TRIADC_1_bCounter1_CR0], ~TRIADC_1_fDBLK_ENABLE           ; Disable the Counter
060C: 41 2F FE AND   REG[0x2F],0xFE     (0279)    and   reg[TRIADC_1_bCounter2_CR0], ~TRIADC_1_fDBLK_ENABLE           ; Disable the Counter
060F: 41 33 FE AND   REG[0x33],0xFE     (0280)    and   reg[TRIADC_1_bCounter3_CR0], ~TRIADC_1_fDBLK_ENABLE           ; Disable the Counter
                                        (0281) 
                                        (0282) IF TRIADC_1_NoAZ
0612: 43 82 20 OR    REG[0x82],0x20     (0283)    or    reg[TRIADC_1_bfADC1cr2], TRIADC_1_fAutoZero           ; Put the Integrator into Autozero mode
0615: 43 86 20 OR    REG[0x86],0x20     (0284)    or    reg[TRIADC_1_bfADC2cr2], TRIADC_1_fAutoZero           ; Put the Integrator into Autozero mode
0618: 43 8A 20 OR    REG[0x8A],0x20     (0285)    or    reg[TRIADC_1_bfADC3cr2], TRIADC_1_fAutoZero           ; Put the Integrator into Autozero mode
                                        (0286) ENDIF
                                        (0287) 
061B: 43 83 10 OR    REG[0x83],0x10     (0288)    or   reg[TRIADC_1_bfADC1cr3], TRIADC_1_fFSW0                ; Put Integrator into reset
061E: 43 87 10 OR    REG[0x87],0x10     (0289)    or   reg[TRIADC_1_bfADC2cr3], TRIADC_1_fFSW0                ; Put Integrator into reset
0621: 43 8B 10 OR    REG[0x8B],0x10     (0290)    or   reg[TRIADC_1_bfADC3cr3], TRIADC_1_fFSW0                ; Put Integrator into reset
                                        (0291) 
0624: 08       PUSH  A                  (0292)    push A
0625: 41 E1 FB AND   REG[0xE1],0xFB     
0628: 41 E1 FE AND   REG[0xE1],0xFE     
062B: 41 E1 F7 AND   REG[0xE1],0xF7     
062E: 41 E1 EF AND   REG[0xE1],0xEF     
                                        (0293)    M8C_DisableIntMask TRIADC_1_bfPWM16_INT_REG, TRIADC_1_bfPWM16_Mask      ; Disable interrupts
                                        (0294)    M8C_DisableIntMask TRIADC_1_bfCounter1_INT_REG, TRIADC_1_bfCounter1_Mask
                                        (0295)    M8C_DisableIntMask TRIADC_1_bfCounter2_INT_REG, TRIADC_1_bfCounter2_Mask
                                        (0296)    M8C_DisableIntMask TRIADC_1_bfCounter3_INT_REG, TRIADC_1_bfCounter3_Mask
0631: 18       POP   A                  (0297)    pop  A
                                        (0298)    RAM_EPILOGUE RAM_USE_CLASS_1
0632: 7F       RET                      (0299)    ret
0633: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0300) .ENDSECTION
                                        (0301) 
                                        (0302) .SECTION
                                        (0303) ;-----------------------------------------------------------------------------
                                        (0304) ;  FUNCTION NAME: TRIADC_1_fIsData
                                        (0305) ;  FUNCTION NAME: TRIADC_1_fIsDataAvailable
                                        (0306) ;
                                        (0307) ;  DESCRIPTION:
                                        (0308) ;    Returns the status of the A/D Data is set whenever a new data value
                                        (0309) ;    is available.
                                        (0310) ;
                                        (0311) ;-----------------------------------------------------------------------------
                                        (0312) ;
                                        (0313) ;  ARGUMENTS: none
                                        (0314) ;
                                        (0315) ;  RETURNS: A returns data status in A.  A != 0  Data available
                                        (0316) ;                                        A  = 0  Data not available
                                        (0317) ;
                                        (0318) ;  SIDE EFFECTS:
                                        (0319) ;    The A and X registers may be modified by this or future implementations
                                        (0320) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0321) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0322) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0323) ;    functions.
                                        (0324) ;          
                                        (0325) ;    Currently only the page pointer registers listed below are modified: 
                                        (0326) ;          CUR_PP
                                        (0327) ;
                                        (0328)  TRIADC_1_fIsData:
                                        (0329) _TRIADC_1_fIsData:
                                        (0330)  TRIADC_1_fIsDataAvailable:
                                        (0331) _TRIADC_1_fIsDataAvailable:
                                        (0332)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0333)    RAM_SETPAGE_CUR >TRIADC_1_bfStatus
0636: 51 09    MOV   A,[0x9]            (0334)    mov   A, [TRIADC_1_bfStatus]                       ; Get status byte
0638: 21 10    AND   A,0x10             (0335)    and   A, TRIADC_1_fDATA_READY                      ; Mask off other bits
                                        (0336)    RAM_EPILOGUE RAM_USE_CLASS_4
063A: 7F       RET                      (0337)    ret
063B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0338) .ENDSECTION
                                        (0339) 
                                        (0340) .SECTION
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) ;  FUNCTION NAME: TRIADC_1_iGetData1
                                        (0343) ;  FUNCTION NAME: TRIADC_1_iGetData1ClearFlag
                                        (0344) ;
                                        (0345) ;  DESCRIPTION:
                                        (0346) ;    Returns the data from the A/D.  Does not check if data is available.
                                        (0347) ;
                                        (0348) ;-----------------------------------------------------------------------------
                                        (0349) ;
                                        (0350) ;  ARGUMENTS: none
                                        (0351) ;
                                        (0352) ;  RETURNS:
                                        (0353) ;     X:A contains 16 bit ADC result.  X = MSB, A = LSB
                                        (0354) ;
                                        (0355) ;  SIDE EFFECTS:
                                        (0356) ;    The A and X registers may be modified by this or future implementations
                                        (0357) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0358) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0359) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0360) ;    functions.
                                        (0361) ;          
                                        (0362) ;    Currently only the page pointer registers listed below are modified: 
                                        (0363) ;          CUR_PP
                                        (0364) ;
                                        (0365)  TRIADC_1_iGetData1ClearFlag:
                                        (0366) _TRIADC_1_iGetData1ClearFlag:
                                        (0367)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0368)    RAM_SETPAGE_CUR >TRIADC_1_bfStatus
063E: 26 09 EF AND   [0x9],0xEF         (0369)    and   [TRIADC_1_bfStatus], ~TRIADC_1_fDATA_READY  ; Clear Data ready bit
0641: 58 03    MOV   X,[0x3]            (0370)    mov   X, [(TRIADC_1_iResult1 + HighByte)]
0643: 51 04    MOV   A,[0x4]            (0371)    mov   A, [(TRIADC_1_iResult1 + LowByte)]
                                        (0372)    RAM_EPILOGUE RAM_USE_CLASS_4
0645: 7F       RET                      (0373)    ret
0646: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0374) 
                                        (0375)  TRIADC_1_iGetData1:
                                        (0376) _TRIADC_1_iGetData1:
                                        (0377)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0378)    RAM_SETPAGE_CUR >TRIADC_1_bfStatus
0649: 58 03    MOV   X,[0x3]            (0379)    mov   X, [(TRIADC_1_iResult1 + HighByte)]
064B: 51 04    MOV   A,[0x4]            (0380)    mov   A, [(TRIADC_1_iResult1 + LowByte)]
                                        (0381)    RAM_EPILOGUE RAM_USE_CLASS_4
064D: 7F       RET                      (0382)    ret
064E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0383) .ENDSECTION
                                        (0384) 
                                        (0385) .SECTION
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;  FUNCTION NAME: TRIADC_1_iGetData2
                                        (0388) ;  FUNCTION NAME: TRIADC_1_iGetData2ClearFlag
                                        (0389) ;
                                        (0390) ;  DESCRIPTION:
                                        (0391) ;    Returns the data from the A/D.  Does not check if data is available.
                                        (0392) ;
                                        (0393) ;-----------------------------------------------------------------------------
                                        (0394) ;
                                        (0395) ;  ARGUMENTS: none
                                        (0396) ;
                                        (0397) ;  RETURNS:
                                        (0398) ;     X:A contains 16 bit ADC result.  X = MSB, A = LSB
                                        (0399) ;
                                        (0400) ;  SIDE EFFECTS:
                                        (0401) ;    The A and X registers may be modified by this or future implementations
                                        (0402) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0403) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0404) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0405) ;    functions.
                                        (0406) ;          
                                        (0407) ;    Currently only the page pointer registers listed below are modified: 
                                        (0408) ;          CUR_PP
                                        (0409) ;
                                        (0410)  TRIADC_1_iGetData2ClearFlag:
                                        (0411) _TRIADC_1_iGetData2ClearFlag:
                                        (0412)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0413)    RAM_SETPAGE_CUR >TRIADC_1_bfStatus
0651: 26 09 EF AND   [0x9],0xEF         (0414)    and   [TRIADC_1_bfStatus], ~TRIADC_1_fDATA_READY  ; Clear Data ready bit
0654: 58 05    MOV   X,[0x5]            (0415)    mov   X, [(TRIADC_1_iResult2 + HighByte)]
0656: 51 06    MOV   A,[0x6]            (0416)    mov   A, [(TRIADC_1_iResult2 + LowByte)]
                                        (0417)    RAM_EPILOGUE RAM_USE_CLASS_4
0658: 7F       RET                      (0418)    ret
0659: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0419) 
                                        (0420)  TRIADC_1_iGetData2:
                                        (0421) _TRIADC_1_iGetData2:
                                        (0422)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0423)    RAM_SETPAGE_CUR >TRIADC_1_bfStatus
065C: 58 05    MOV   X,[0x5]            (0424)    mov   X, [(TRIADC_1_iResult2 + HighByte)]
065E: 51 06    MOV   A,[0x6]            (0425)    mov   A, [(TRIADC_1_iResult2 + LowByte)]
                                        (0426)    RAM_EPILOGUE RAM_USE_CLASS_4
0660: 7F       RET                      (0427)    ret
0661: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0428) .ENDSECTION
                                        (0429) 
                                        (0430) .SECTION
                                        (0431) ;-----------------------------------------------------------------------------
                                        (0432) ;  FUNCTION NAME: TRIADC_1_iGetData3
                                        (0433) ;  FUNCTION NAME: TRIADC_1_iGetData3ClearFlag
                                        (0434) ;
                                        (0435) ;  DESCRIPTION:
                                        (0436) ;    Returns the data from the A/D.  Does not check if data is available.
                                        (0437) ;
                                        (0438) ;-----------------------------------------------------------------------------
                                        (0439) ;
                                        (0440) ;  ARGUMENTS:
                                        (0441) ;
                                        (0442) ;  RETURNS:
                                        (0443) ;     X:A contains 16 bit ADC result.  X = MSB, A = LSB
                                        (0444) ;
                                        (0445) ;  SIDE EFFECTS:
                                        (0446) ;    The A and X registers may be modified by this or future implementations
                                        (0447) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0448) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0449) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0450) ;    functions.
                                        (0451) ;          
                                        (0452) ;    Currently only the page pointer registers listed below are modified: 
                                        (0453) ;          CUR_PP
                                        (0454) ;
                                        (0455)  TRIADC_1_iGetData3ClearFlag:
                                        (0456) _TRIADC_1_iGetData3ClearFlag:
                                        (0457)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0458)    RAM_SETPAGE_CUR >TRIADC_1_bfStatus
0664: 26 09 EF AND   [0x9],0xEF         (0459)    and   [TRIADC_1_bfStatus], ~TRIADC_1_fDATA_READY  ; Clear Data ready bit
0667: 58 07    MOV   X,[0x7]            (0460)    mov   X, [(TRIADC_1_iResult3 + HighByte)]
0669: 51 08    MOV   A,[0x8]            (0461)    mov   A, [(TRIADC_1_iResult3 + LowByte)]
                                        (0462)    RAM_EPILOGUE RAM_USE_CLASS_4
066B: 7F       RET                      (0463)    ret
066C: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0464) 
                                        (0465)  TRIADC_1_iGetData3:
                                        (0466) _TRIADC_1_iGetData3:
                                        (0467)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0468)    RAM_SETPAGE_CUR >TRIADC_1_bfStatus
066F: 58 07    MOV   X,[0x7]            (0469)    mov   X, [(TRIADC_1_iResult3 + HighByte)]
0671: 51 08    MOV   A,[0x8]            (0470)    mov   A, [(TRIADC_1_iResult3 + LowByte)]
                                        (0471)    RAM_EPILOGUE RAM_USE_CLASS_4
0673: 7F       RET                      (0472)    ret
0674: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0473) .ENDSECTION
                                        (0474) 
                                        (0475) .SECTION
                                        (0476) ;-----------------------------------------------------------------------------
                                        (0477) ;  FUNCTION NAME: TRIADC_1_ClearFlag
                                        (0478) ;
                                        (0479) ;  DESCRIPTION:
                                        (0480) ;    Clears the data ready flag.
                                        (0481) ;
                                        (0482) ;-----------------------------------------------------------------------------
                                        (0483) ;
                                        (0484) ;  ARGUMENTS: none
                                        (0485) ;
                                        (0486) ;  RETURNS: none
                                        (0487) ;
                                        (0488) ;  SIDE EFFECTS:
                                        (0489) ;    The A and X registers may be modified by this or future implementations
                                        (0490) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0491) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0492) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0493) ;    functions.
                                        (0494) ;          
                                        (0495) ;    Currently only the page pointer registers listed below are modified: 
                                        (0496) ;          CUR_PP
                                        (0497) ;
                                        (0498)  TRIADC_1_ClearFlag:
                                        (0499) _TRIADC_1_ClearFlag:
                                        (0500)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0501)    RAM_SETPAGE_CUR >TRIADC_1_bfStatus
0677: 26 09 EF AND   [0x9],0xEF         (0502)    and   [TRIADC_1_bfStatus], ~TRIADC_1_fDATA_READY  ; Clear Data ready bit
                                        (0503)    RAM_EPILOGUE RAM_USE_CLASS_4
067A: 7F       RET                      (0504)    ret
067B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0505) .ENDSECTION
                                        (0506) 
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: TRIADC_1_SetResolution
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;    Sets A/D resolution between 7 and 13 bits.
                                        (0513) ;
                                        (0514) ;-----------------------------------------------------------------------------
                                        (0515) ;
                                        (0516) ;  ARGUMENTS:
                                        (0517) ;   A => passes the number of bits of resolution. ( 7 to 13)
                                        (0518) ;
                                        (0519) ;  RETURNS:
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;          
                                        (0528) ;    Currently only the page pointer registers listed below are modified: 
                                        (0529) ;          CUR_PP
                                        (0530) ;
                                        (0531) ;    This function halts the PWM and the counter to sync the A/D , but
                                        (0532) ;    does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
                                        (0533) ;    should be called.
                                        (0534) ;
                                        (0535)  TRIADC_1_SetResolution:
                                        (0536) _TRIADC_1_SetResolution:
                                        (0537)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0538)    RAM_SETPAGE_CUR >TRIADC_1_bfStatus
                                        (0539)    
067E: 41 82 FE AND   REG[0x82],0xFE     (0540)    and   reg[TRIADC_1_bfADC1cr2], ~TRIADC_1_fRES_SET
                                        (0541) 
0681: 9F 83    CALL  _TRIADC_1_StopAD   (0542)    call  TRIADC_1_StopAD                           ; Stop the A/D if it is running
0683: 55 09 00 MOV   [0x9],0x0          (0543)    mov   [TRIADC_1_bfStatus], 00h                  ; and clear status and old resolution
                                        (0544) 
                                        (0545)                                                    ; Check for resolution to be within min and max values
0686: 39 07    CMP   A,0x7              (0546)    cmp   A,TRIADC_1_bMINRES                        ; Check low end of resolution
0688: D0 05    JNC   0x068E             (0547)    jnc   TRIADC_1_CHECKHI
068A: 50 07    MOV   A,0x7              (0548)    mov   A,TRIADC_1_bMINRES                        ; Too low - load legal low value
068C: 80 07    JMP   0x0694             (0549)    jmp   TRIADC_1_RES_OK
                                        (0550) 
                                        (0551) TRIADC_1_CHECKHI:                                  ; Check high end of resolution
068E: 39 0D    CMP   A,0xD              (0552)    cmp   A,TRIADC_1_bMAXRES
0690: C0 03    JC    0x0694             (0553)    jc    TRIADC_1_RES_OK
0692: 50 0D    MOV   A,0xD              (0554)    mov   A,TRIADC_1_bMAXRES                        ; Too high - load legal Max value
                                        (0555) 
                                        (0556) TRIADC_1_RES_OK:
                                        (0557)                                                    ; Calculate compare value for the PWM which
                                        (0558)                                                    ; computes the integrate time
0694: 11 07    SUB   A,0x7              (0559)    sub   A, TRIADC_1_bMINRES                       ; Normalize with min resolution
0696: 2C 09    OR    [0x9],A            (0560)    or    [TRIADC_1_bfStatus], A
                                        (0561)                                                    ; Since min resolution is 7, 2^^7 = 128, the clock
                                        (0562)                                                    ; is running 4x so 128*4=512 or 0x0200
0698: 01 01    ADD   A,0x1              (0563)    add   A,01h                                     ; The MSB is 02h.
069A: 5C       MOV   X,A                (0564)    mov   X,A
069B: 50 01    MOV   A,0x1              (0565)    mov   A,01h
                                        (0566) 
                                        (0567) TRIADC_1_CALC_INTTIME:                             ; Now shift the MSB left for every bit of resolution of min (7).
069D: 64       ASL   A                  (0568)    asl   A
069E: 79       DEC   X                  (0569)    dec   X
069F: BF FD    JNZ   0x069D             (0570)    jnz   TRIADC_1_CALC_INTTIME
                                        (0571) 
                                        (0572) TRIADC_1_LOAD_INTTIME:                             ; Load compare value and Calc time into registers
                                        (0573)                                                    ; Since minimum resolution is 7 bits, this value will always start at 0
06A1: 62 26 00 MOV   REG[0x26],0x0      (0574)    mov   reg[TRIADC_1_bPWM_IntTime_LSB], 00h
06A4: 60 2A    MOV   REG[0x2A],A        (0575)    mov   reg[TRIADC_1_bPWM_IntTime_MSB], A
                                        (0576) 
                                        (0577)                                                    ; Load the CalcTime into the PWM Period
06A6: 62 25 20 MOV   REG[0x25],0x20     (0578)    mov   reg[TRIADC_1_bPWM_Period_LSB], <wCalcTime
06A9: 01 4E    ADD   A,0x4E             (0579)    add   A, >wCalcTime
06AB: 60 29    MOV   REG[0x29],A        (0580)    mov   reg[TRIADC_1_bPWM_Period_MSB],A
                                        (0581)    RAM_EPILOGUE RAM_USE_CLASS_4
06AD: 7F       RET                      (0582)    ret
                                        (0583) .ENDSECTION
                                        (0584) 
                                        (0585) ; End of File TRIADC_1.asm
FILE: lib\pwm8_6int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_6INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_6.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_6_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_6_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_6_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
06AE: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_6INT.asm
FILE: lib\pwm8_6.asm                    (0001) ;;*****************************************************************************
06AF: 43 DF 04 OR    REG[0xDF],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_6.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_6.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_6_EnableInt
                                        (0030) export _PWM8_6_EnableInt
                                        (0031) export  PWM8_6_DisableInt
                                        (0032) export _PWM8_6_DisableInt
                                        (0033) export  PWM8_6_Start
                                        (0034) export _PWM8_6_Start
                                        (0035) export  PWM8_6_Stop
                                        (0036) export _PWM8_6_Stop
                                        (0037) export  PWM8_6_WritePeriod
                                        (0038) export _PWM8_6_WritePeriod
                                        (0039) export  PWM8_6_WritePulseWidth
                                        (0040) export _PWM8_6_WritePulseWidth
                                        (0041) export  PWM8_6_bReadPulseWidth
                                        (0042) export _PWM8_6_bReadPulseWidth
                                        (0043) export  PWM8_6_bReadCounter
                                        (0044) export _PWM8_6_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_6_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_6_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_6_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_6_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA ira2kai_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_6_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_6_EnableInt:
                                        (0091) _PWM8_6_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_6_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
06B2: 7F       RET                      (0095)    ret
06B3: 41 DF FB AND   REG[0xDF],0xFB     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_6_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_6_DisableInt:
                                        (0119) _PWM8_6_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_6_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
06B6: 7F       RET                      (0123)    ret
06B7: 43 4B 01 OR    REG[0x4B],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_6_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_6_Start:
                                        (0148) _PWM8_6_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_6_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
06BA: 7F       RET                      (0152)    ret
06BB: 41 4B FE AND   REG[0x4B],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_6_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_6_Stop:
                                        (0176) _PWM8_6_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_6_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
06BE: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_6_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_6_WritePeriod:
                                        (0206) _PWM8_6_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
06BF: 60 49    MOV   REG[0x49],A        (0208)    mov   reg[PWM8_6_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
06C1: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_6_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_6_WritePulseWidth:
                                        (0233) _PWM8_6_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
06C2: 60 4A    MOV   REG[0x4A],A        (0235)    mov   reg[PWM8_6_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
06C4: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_6_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_6_bReadPulseWidth:
                                        (0260) _PWM8_6_bReadPulseWidth:
                                        (0261)  bPWM8_6_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_6_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
06C5: 5D 4A    MOV   A,REG[0x4A]        (0264)    mov   A, reg[PWM8_6_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
06C7: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_6_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_6_bReadCounter:
                                        (0293) _PWM8_6_bReadCounter:
                                        (0294)  bPWM8_6_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_6_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
06C8: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
06C9: 5D 4A    MOV   A,REG[0x4A]        (0304)    mov   A, reg[PWM8_6_COMPARE_REG]              ; Save the Compare register on the stack
06CB: 08       PUSH  A                  (0305)    push  A                                       ;
06CC: 41 4B FE AND   REG[0x4B],0xFE     
06CF: 71 10    OR    F,0x10             
                                        (0306)    PWM8_6_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
06D1: 5D 49    MOV   A,REG[0x49]        (0308)    mov   A, reg[PWM8_6_INPUT_REG]                ; save the clock input setting
06D3: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
06D4: 62 49 00 MOV   REG[0x49],0x0      (0311)    mov   reg[PWM8_6_INPUT_REG], INPUT_REG_NULL
06D7: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
06D9: 5D 48    MOV   A,REG[0x48]        (0314)    mov   A, reg[PWM8_6_COUNTER_REG]              ; DR2 <- DR0
06DB: 5D 4A    MOV   A,REG[0x4A]        (0315)    mov   A, reg[PWM8_6_COMPARE_REG]              ; Stash the Count on the stack
06DD: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
06DE: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
06E0: 60 4A    MOV   REG[0x4A],A        (0318)    mov   reg[PWM8_6_COMPARE_REG], A
06E2: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
06E4: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
06E6: 60 49    MOV   REG[0x49],A        (0321)    mov   reg[PWM8_6_INPUT_REG], A                ;
06E8: 70 EF    AND   F,0xEF             
06EA: 43 4B 01 OR    REG[0x4B],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_6_Start_M                                ;   then re-enable the PWM.
06ED: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
06EE: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
06F0: 70 3F    AND   F,0x3F             
06F2: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
06F4: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_6.asm
FILE: lib\pwm8_5int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_5INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_5.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_5_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_5_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_5_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
06F5: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_5INT.asm
FILE: lib\pwm8_5.asm                    (0001) ;;*****************************************************************************
06F6: 43 DF 20 OR    REG[0xDF],0x20     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_5.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_5.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_5_EnableInt
                                        (0030) export _PWM8_5_EnableInt
                                        (0031) export  PWM8_5_DisableInt
                                        (0032) export _PWM8_5_DisableInt
                                        (0033) export  PWM8_5_Start
                                        (0034) export _PWM8_5_Start
                                        (0035) export  PWM8_5_Stop
                                        (0036) export _PWM8_5_Stop
                                        (0037) export  PWM8_5_WritePeriod
                                        (0038) export _PWM8_5_WritePeriod
                                        (0039) export  PWM8_5_WritePulseWidth
                                        (0040) export _PWM8_5_WritePulseWidth
                                        (0041) export  PWM8_5_bReadPulseWidth
                                        (0042) export _PWM8_5_bReadPulseWidth
                                        (0043) export  PWM8_5_bReadCounter
                                        (0044) export _PWM8_5_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_5_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_5_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_5_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_5_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA ira2kai_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_5_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_5_EnableInt:
                                        (0091) _PWM8_5_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_5_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
06F9: 7F       RET                      (0095)    ret
06FA: 41 DF DF AND   REG[0xDF],0xDF     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_5_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_5_DisableInt:
                                        (0119) _PWM8_5_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_5_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
06FD: 7F       RET                      (0123)    ret
06FE: 43 57 01 OR    REG[0x57],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_5_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_5_Start:
                                        (0148) _PWM8_5_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_5_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0701: 7F       RET                      (0152)    ret
0702: 41 57 FE AND   REG[0x57],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_5_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_5_Stop:
                                        (0176) _PWM8_5_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_5_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0705: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_5_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_5_WritePeriod:
                                        (0206) _PWM8_5_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0706: 60 55    MOV   REG[0x55],A        (0208)    mov   reg[PWM8_5_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0708: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_5_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_5_WritePulseWidth:
                                        (0233) _PWM8_5_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0709: 60 56    MOV   REG[0x56],A        (0235)    mov   reg[PWM8_5_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
070B: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_5_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_5_bReadPulseWidth:
                                        (0260) _PWM8_5_bReadPulseWidth:
                                        (0261)  bPWM8_5_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_5_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
070C: 5D 56    MOV   A,REG[0x56]        (0264)    mov   A, reg[PWM8_5_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
070E: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_5_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_5_bReadCounter:
                                        (0293) _PWM8_5_bReadCounter:
                                        (0294)  bPWM8_5_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_5_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
070F: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
0710: 5D 56    MOV   A,REG[0x56]        (0304)    mov   A, reg[PWM8_5_COMPARE_REG]              ; Save the Compare register on the stack
0712: 08       PUSH  A                  (0305)    push  A                                       ;
0713: 41 57 FE AND   REG[0x57],0xFE     
0716: 71 10    OR    F,0x10             
                                        (0306)    PWM8_5_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
0718: 5D 55    MOV   A,REG[0x55]        (0308)    mov   A, reg[PWM8_5_INPUT_REG]                ; save the clock input setting
071A: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
071B: 62 55 00 MOV   REG[0x55],0x0      (0311)    mov   reg[PWM8_5_INPUT_REG], INPUT_REG_NULL
071E: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0720: 5D 54    MOV   A,REG[0x54]        (0314)    mov   A, reg[PWM8_5_COUNTER_REG]              ; DR2 <- DR0
0722: 5D 56    MOV   A,REG[0x56]        (0315)    mov   A, reg[PWM8_5_COMPARE_REG]              ; Stash the Count on the stack
0724: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0725: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0727: 60 56    MOV   REG[0x56],A        (0318)    mov   reg[PWM8_5_COMPARE_REG], A
0729: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
072B: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
072D: 60 55    MOV   REG[0x55],A        (0321)    mov   reg[PWM8_5_INPUT_REG], A                ;
072F: 70 EF    AND   F,0xEF             
0731: 43 57 01 OR    REG[0x57],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_5_Start_M                                ;   then re-enable the PWM.
0734: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0735: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0737: 70 3F    AND   F,0x3F             
0739: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
073B: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_5.asm
FILE: lib\pwm8_4int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_4INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_4.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_4_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_4_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_4_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
073C: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_4INT.asm
FILE: lib\pwm8_4.asm                    (0001) ;;*****************************************************************************
073D: 43 DF 01 OR    REG[0xDF],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_4.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_4.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_4_EnableInt
                                        (0030) export _PWM8_4_EnableInt
                                        (0031) export  PWM8_4_DisableInt
                                        (0032) export _PWM8_4_DisableInt
                                        (0033) export  PWM8_4_Start
                                        (0034) export _PWM8_4_Start
                                        (0035) export  PWM8_4_Stop
                                        (0036) export _PWM8_4_Stop
                                        (0037) export  PWM8_4_WritePeriod
                                        (0038) export _PWM8_4_WritePeriod
                                        (0039) export  PWM8_4_WritePulseWidth
                                        (0040) export _PWM8_4_WritePulseWidth
                                        (0041) export  PWM8_4_bReadPulseWidth
                                        (0042) export _PWM8_4_bReadPulseWidth
                                        (0043) export  PWM8_4_bReadCounter
                                        (0044) export _PWM8_4_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_4_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_4_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_4_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_4_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA ira2kai_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_4_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_4_EnableInt:
                                        (0091) _PWM8_4_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_4_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0740: 7F       RET                      (0095)    ret
0741: 41 DF FE AND   REG[0xDF],0xFE     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_4_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_4_DisableInt:
                                        (0119) _PWM8_4_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_4_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0744: 7F       RET                      (0123)    ret
0745: 43 43 01 OR    REG[0x43],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_4_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_4_Start:
                                        (0148) _PWM8_4_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_4_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0748: 7F       RET                      (0152)    ret
0749: 41 43 FE AND   REG[0x43],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_4_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_4_Stop:
                                        (0176) _PWM8_4_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_4_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
074C: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_4_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_4_WritePeriod:
                                        (0206) _PWM8_4_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
074D: 60 41    MOV   REG[0x41],A        (0208)    mov   reg[PWM8_4_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
074F: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_4_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_4_WritePulseWidth:
                                        (0233) _PWM8_4_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0750: 60 42    MOV   REG[0x42],A        (0235)    mov   reg[PWM8_4_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0752: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_4_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_4_bReadPulseWidth:
                                        (0260) _PWM8_4_bReadPulseWidth:
                                        (0261)  bPWM8_4_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_4_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0753: 5D 42    MOV   A,REG[0x42]        (0264)    mov   A, reg[PWM8_4_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0755: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_4_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_4_bReadCounter:
                                        (0293) _PWM8_4_bReadCounter:
                                        (0294)  bPWM8_4_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_4_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0756: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
0757: 5D 42    MOV   A,REG[0x42]        (0304)    mov   A, reg[PWM8_4_COMPARE_REG]              ; Save the Compare register on the stack
0759: 08       PUSH  A                  (0305)    push  A                                       ;
075A: 41 43 FE AND   REG[0x43],0xFE     
075D: 71 10    OR    F,0x10             
                                        (0306)    PWM8_4_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
075F: 5D 41    MOV   A,REG[0x41]        (0308)    mov   A, reg[PWM8_4_INPUT_REG]                ; save the clock input setting
0761: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0762: 62 41 00 MOV   REG[0x41],0x0      (0311)    mov   reg[PWM8_4_INPUT_REG], INPUT_REG_NULL
0765: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0767: 5D 40    MOV   A,REG[0x40]        (0314)    mov   A, reg[PWM8_4_COUNTER_REG]              ; DR2 <- DR0
0769: 5D 42    MOV   A,REG[0x42]        (0315)    mov   A, reg[PWM8_4_COMPARE_REG]              ; Stash the Count on the stack
076B: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
076C: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
076E: 60 42    MOV   REG[0x42],A        (0318)    mov   reg[PWM8_4_COMPARE_REG], A
0770: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0772: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0774: 60 41    MOV   REG[0x41],A        (0321)    mov   reg[PWM8_4_INPUT_REG], A                ;
0776: 70 EF    AND   F,0xEF             
0778: 43 43 01 OR    REG[0x43],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_4_Start_M                                ;   then re-enable the PWM.
077B: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
077C: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
077E: 70 3F    AND   F,0x3F             
0780: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0782: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_4.asm
FILE: lib\pwm8_3int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_3INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_3.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_3_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_3_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_3_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0783: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_3INT.asm
FILE: lib\pwm8_3.asm                    (0001) ;;*****************************************************************************
0784: 43 DF 02 OR    REG[0xDF],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_3.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_3.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_3_EnableInt
                                        (0030) export _PWM8_3_EnableInt
                                        (0031) export  PWM8_3_DisableInt
                                        (0032) export _PWM8_3_DisableInt
                                        (0033) export  PWM8_3_Start
                                        (0034) export _PWM8_3_Start
                                        (0035) export  PWM8_3_Stop
                                        (0036) export _PWM8_3_Stop
                                        (0037) export  PWM8_3_WritePeriod
                                        (0038) export _PWM8_3_WritePeriod
                                        (0039) export  PWM8_3_WritePulseWidth
                                        (0040) export _PWM8_3_WritePulseWidth
                                        (0041) export  PWM8_3_bReadPulseWidth
                                        (0042) export _PWM8_3_bReadPulseWidth
                                        (0043) export  PWM8_3_bReadCounter
                                        (0044) export _PWM8_3_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_3_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_3_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_3_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_3_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA ira2kai_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_3_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_3_EnableInt:
                                        (0091) _PWM8_3_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_3_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0787: 7F       RET                      (0095)    ret
0788: 41 DF FD AND   REG[0xDF],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_3_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_3_DisableInt:
                                        (0119) _PWM8_3_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_3_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
078B: 7F       RET                      (0123)    ret
078C: 43 47 01 OR    REG[0x47],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_3_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_3_Start:
                                        (0148) _PWM8_3_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_3_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
078F: 7F       RET                      (0152)    ret
0790: 41 47 FE AND   REG[0x47],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_3_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_3_Stop:
                                        (0176) _PWM8_3_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_3_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0793: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_3_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_3_WritePeriod:
                                        (0206) _PWM8_3_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0794: 60 45    MOV   REG[0x45],A        (0208)    mov   reg[PWM8_3_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0796: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_3_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_3_WritePulseWidth:
                                        (0233) _PWM8_3_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0797: 60 46    MOV   REG[0x46],A        (0235)    mov   reg[PWM8_3_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0799: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_3_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_3_bReadPulseWidth:
                                        (0260) _PWM8_3_bReadPulseWidth:
                                        (0261)  bPWM8_3_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_3_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
079A: 5D 46    MOV   A,REG[0x46]        (0264)    mov   A, reg[PWM8_3_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
079C: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_3_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_3_bReadCounter:
                                        (0293) _PWM8_3_bReadCounter:
                                        (0294)  bPWM8_3_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_3_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
079D: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
079E: 5D 46    MOV   A,REG[0x46]        (0304)    mov   A, reg[PWM8_3_COMPARE_REG]              ; Save the Compare register on the stack
07A0: 08       PUSH  A                  (0305)    push  A                                       ;
07A1: 41 47 FE AND   REG[0x47],0xFE     
07A4: 71 10    OR    F,0x10             
                                        (0306)    PWM8_3_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
07A6: 5D 45    MOV   A,REG[0x45]        (0308)    mov   A, reg[PWM8_3_INPUT_REG]                ; save the clock input setting
07A8: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
07A9: 62 45 00 MOV   REG[0x45],0x0      (0311)    mov   reg[PWM8_3_INPUT_REG], INPUT_REG_NULL
07AC: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
07AE: 5D 44    MOV   A,REG[0x44]        (0314)    mov   A, reg[PWM8_3_COUNTER_REG]              ; DR2 <- DR0
07B0: 5D 46    MOV   A,REG[0x46]        (0315)    mov   A, reg[PWM8_3_COMPARE_REG]              ; Stash the Count on the stack
07B2: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
07B3: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
07B5: 60 46    MOV   REG[0x46],A        (0318)    mov   reg[PWM8_3_COMPARE_REG], A
07B7: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
07B9: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
07BB: 60 45    MOV   REG[0x45],A        (0321)    mov   reg[PWM8_3_INPUT_REG], A                ;
07BD: 70 EF    AND   F,0xEF             
07BF: 43 47 01 OR    REG[0x47],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_3_Start_M                                ;   then re-enable the PWM.
07C2: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
07C3: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
07C5: 70 3F    AND   F,0x3F             
07C7: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
07C9: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_3.asm
FILE: lib\pwm8_2int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_2INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_2.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_2_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_2_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_2_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
07CA: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_2INT.asm
FILE: lib\pwm8_2.asm                    (0001) ;;*****************************************************************************
07CB: 43 E1 40 OR    REG[0xE1],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_2.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_2.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_2_EnableInt
                                        (0030) export _PWM8_2_EnableInt
                                        (0031) export  PWM8_2_DisableInt
                                        (0032) export _PWM8_2_DisableInt
                                        (0033) export  PWM8_2_Start
                                        (0034) export _PWM8_2_Start
                                        (0035) export  PWM8_2_Stop
                                        (0036) export _PWM8_2_Stop
                                        (0037) export  PWM8_2_WritePeriod
                                        (0038) export _PWM8_2_WritePeriod
                                        (0039) export  PWM8_2_WritePulseWidth
                                        (0040) export _PWM8_2_WritePulseWidth
                                        (0041) export  PWM8_2_bReadPulseWidth
                                        (0042) export _PWM8_2_bReadPulseWidth
                                        (0043) export  PWM8_2_bReadCounter
                                        (0044) export _PWM8_2_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_2_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_2_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_2_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_2_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA ira2kai_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_2_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_2_EnableInt:
                                        (0091) _PWM8_2_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_2_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
07CE: 7F       RET                      (0095)    ret
07CF: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_2_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_2_DisableInt:
                                        (0119) _PWM8_2_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_2_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
07D2: 7F       RET                      (0123)    ret
07D3: 43 3B 01 OR    REG[0x3B],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_2_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_2_Start:
                                        (0148) _PWM8_2_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_2_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
07D6: 7F       RET                      (0152)    ret
07D7: 41 3B FE AND   REG[0x3B],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_2_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_2_Stop:
                                        (0176) _PWM8_2_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_2_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
07DA: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_2_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_2_WritePeriod:
                                        (0206) _PWM8_2_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
07DB: 60 39    MOV   REG[0x39],A        (0208)    mov   reg[PWM8_2_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
07DD: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_2_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_2_WritePulseWidth:
                                        (0233) _PWM8_2_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
07DE: 60 3A    MOV   REG[0x3A],A        (0235)    mov   reg[PWM8_2_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
07E0: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_2_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_2_bReadPulseWidth:
                                        (0260) _PWM8_2_bReadPulseWidth:
                                        (0261)  bPWM8_2_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_2_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
07E1: 5D 3A    MOV   A,REG[0x3A]        (0264)    mov   A, reg[PWM8_2_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
07E3: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_2_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_2_bReadCounter:
                                        (0293) _PWM8_2_bReadCounter:
                                        (0294)  bPWM8_2_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_2_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
07E4: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
07E5: 5D 3A    MOV   A,REG[0x3A]        (0304)    mov   A, reg[PWM8_2_COMPARE_REG]              ; Save the Compare register on the stack
07E7: 08       PUSH  A                  (0305)    push  A                                       ;
07E8: 41 3B FE AND   REG[0x3B],0xFE     
07EB: 71 10    OR    F,0x10             
                                        (0306)    PWM8_2_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
07ED: 5D 39    MOV   A,REG[0x39]        (0308)    mov   A, reg[PWM8_2_INPUT_REG]                ; save the clock input setting
07EF: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
07F0: 62 39 00 MOV   REG[0x39],0x0      (0311)    mov   reg[PWM8_2_INPUT_REG], INPUT_REG_NULL
07F3: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
07F5: 5D 38    MOV   A,REG[0x38]        (0314)    mov   A, reg[PWM8_2_COUNTER_REG]              ; DR2 <- DR0
07F7: 5D 3A    MOV   A,REG[0x3A]        (0315)    mov   A, reg[PWM8_2_COMPARE_REG]              ; Stash the Count on the stack
07F9: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
07FA: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
07FC: 60 3A    MOV   REG[0x3A],A        (0318)    mov   reg[PWM8_2_COMPARE_REG], A
07FE: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0800: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0802: 60 39    MOV   REG[0x39],A        (0321)    mov   reg[PWM8_2_INPUT_REG], A                ;
0804: 70 EF    AND   F,0xEF             
0806: 43 3B 01 OR    REG[0x3B],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_2_Start_M                                ;   then re-enable the PWM.
0809: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
080A: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
080C: 70 3F    AND   F,0x3F             
080E: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0810: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_2.asm
FILE: lib\pwm8_1int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_1INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_1.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0811: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_1INT.asm
FILE: lib\pwm8_1.asm                    (0001) ;;*****************************************************************************
0812: 43 E1 20 OR    REG[0xE1],0x20     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_1.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_1_EnableInt
                                        (0030) export _PWM8_1_EnableInt
                                        (0031) export  PWM8_1_DisableInt
                                        (0032) export _PWM8_1_DisableInt
                                        (0033) export  PWM8_1_Start
                                        (0034) export _PWM8_1_Start
                                        (0035) export  PWM8_1_Stop
                                        (0036) export _PWM8_1_Stop
                                        (0037) export  PWM8_1_WritePeriod
                                        (0038) export _PWM8_1_WritePeriod
                                        (0039) export  PWM8_1_WritePulseWidth
                                        (0040) export _PWM8_1_WritePulseWidth
                                        (0041) export  PWM8_1_bReadPulseWidth
                                        (0042) export _PWM8_1_bReadPulseWidth
                                        (0043) export  PWM8_1_bReadCounter
                                        (0044) export _PWM8_1_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_1_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_1_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_1_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA ira2kai_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_1_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_1_EnableInt:
                                        (0091) _PWM8_1_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_1_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0815: 7F       RET                      (0095)    ret
0816: 41 E1 DF AND   REG[0xE1],0xDF     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_1_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_1_DisableInt:
                                        (0119) _PWM8_1_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_1_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0819: 7F       RET                      (0123)    ret
081A: 43 37 01 OR    REG[0x37],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_1_Start:
                                        (0148) _PWM8_1_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_1_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
081D: 7F       RET                      (0152)    ret
081E: 41 37 FE AND   REG[0x37],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_1_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_1_Stop:
                                        (0176) _PWM8_1_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_1_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0821: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_1_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_1_WritePeriod:
                                        (0206) _PWM8_1_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0822: 60 35    MOV   REG[0x35],A        (0208)    mov   reg[PWM8_1_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0824: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_1_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_1_WritePulseWidth:
                                        (0233) _PWM8_1_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0825: 60 36    MOV   REG[0x36],A        (0235)    mov   reg[PWM8_1_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0827: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_1_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_1_bReadPulseWidth:
                                        (0260) _PWM8_1_bReadPulseWidth:
                                        (0261)  bPWM8_1_ReadPulseWidth:                         ; this name deprecated
                                        (0262) _bPWM8_1_ReadPulseWidth:                         ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0828: 5D 36    MOV   A,REG[0x36]        (0264)    mov   A, reg[PWM8_1_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
082A: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_1_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_1_bReadCounter:
                                        (0293) _PWM8_1_bReadCounter:
                                        (0294)  bPWM8_1_ReadCounter:                            ; this name deprecated
                                        (0295) _bPWM8_1_ReadCounter:                            ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
082B: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
082C: 5D 36    MOV   A,REG[0x36]        (0304)    mov   A, reg[PWM8_1_COMPARE_REG]              ; Save the Compare register on the stack
082E: 08       PUSH  A                  (0305)    push  A                                       ;
082F: 41 37 FE AND   REG[0x37],0xFE     
0832: 71 10    OR    F,0x10             
                                        (0306)    PWM8_1_Stop_M                                 ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
0834: 5D 35    MOV   A,REG[0x35]        (0308)    mov   A, reg[PWM8_1_INPUT_REG]                ; save the clock input setting
0836: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0837: 62 35 00 MOV   REG[0x35],0x0      (0311)    mov   reg[PWM8_1_INPUT_REG], INPUT_REG_NULL
083A: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
083C: 5D 34    MOV   A,REG[0x34]        (0314)    mov   A, reg[PWM8_1_COUNTER_REG]              ; DR2 <- DR0
083E: 5D 36    MOV   A,REG[0x36]        (0315)    mov   A, reg[PWM8_1_COMPARE_REG]              ; Stash the Count on the stack
0840: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0841: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0843: 60 36    MOV   REG[0x36],A        (0318)    mov   reg[PWM8_1_COMPARE_REG], A
0845: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0847: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0849: 60 35    MOV   REG[0x35],A        (0321)    mov   reg[PWM8_1_INPUT_REG], A                ;
084B: 70 EF    AND   F,0xEF             
084D: 43 37 01 OR    REG[0x37],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_1_Start_M                                ;   then re-enable the PWM.
0850: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0851: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0853: 70 3F    AND   F,0x3F             
0855: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0857: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_1.asm
FILE: lib\pwm16_1int.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_1INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM16_1.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM16_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM16_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM16_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0858: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM16_1INT.asm
FILE: lib\pwm16_1.asm                   (0001) ;;*****************************************************************************
0859: 43 DF 80 OR    REG[0xDF],0x80     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_1.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM16_1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM16_1_EnableInt
                                        (0030) export _PWM16_1_EnableInt
                                        (0031) export  PWM16_1_DisableInt
                                        (0032) export _PWM16_1_DisableInt
                                        (0033) export  PWM16_1_Start
                                        (0034) export _PWM16_1_Start
                                        (0035) export  PWM16_1_Stop
                                        (0036) export _PWM16_1_Stop
                                        (0037) export  PWM16_1_WritePeriod
                                        (0038) export _PWM16_1_WritePeriod
                                        (0039) export  PWM16_1_WritePulseWidth
                                        (0040) export _PWM16_1_WritePulseWidth
                                        (0041) export  PWM16_1_wReadPulseWidth
                                        (0042) export _PWM16_1_wReadPulseWidth
                                        (0043) export  PWM16_1_wReadCounter
                                        (0044) export _PWM16_1_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWM16_1_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWM16_1_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWM16_1_ReadCounter       ; deprecated
                                        (0051) export _wPWM16_1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA ira2kai_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM16_1_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM16_1_EnableInt:
                                        (0091) _PWM16_1_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM16_1_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
085C: 7F       RET                      (0095)    ret
085D: 41 DF 7F AND   REG[0xDF],0x7F     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM16_1_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM16_1_DisableInt:
                                        (0119) _PWM16_1_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM16_1_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0860: 7F       RET                      (0123)    ret
0861: 43 5B 01 OR    REG[0x5B],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM16_1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM16_1_Start:
                                        (0148) _PWM16_1_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM16_1_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0864: 7F       RET                      (0152)    ret
0865: 41 5B FE AND   REG[0x5B],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM16_1_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM16_1_Stop:
                                        (0176) _PWM16_1_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM16_1_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0868: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM16_1_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM16_1_WritePeriod:
                                        (0206) _PWM16_1_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0869: 60 59    MOV   REG[0x59],A        (0208)    mov   reg[PWM16_1_PERIOD_LSB_REG], A
086B: 5B       MOV   A,X                (0209)    mov   A, X
086C: 60 5D    MOV   REG[0x5D],A        (0210)    mov   reg[PWM16_1_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
086E: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWM16_1_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWM16_1_WritePulseWidth:
                                        (0235) _PWM16_1_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
086F: 60 5A    MOV   REG[0x5A],A        (0237)    mov   reg[PWM16_1_COMPARE_LSB_REG], A
0871: 5B       MOV   A,X                (0238)    mov   A, X
0872: 60 5E    MOV   REG[0x5E],A        (0239)    mov   reg[PWM16_1_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
0874: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWM16_1_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWM16_1_wReadPulseWidth:
                                        (0264) _PWM16_1_wReadPulseWidth:
                                        (0265)  wPWM16_1_ReadPulseWidth:                        ; this name deprecated
                                        (0266) _wPWM16_1_ReadPulseWidth:                        ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
0875: 5D 5E    MOV   A,REG[0x5E]        (0268)    mov   A, reg[PWM16_1_COMPARE_MSB_REG]
0877: 5C       MOV   X,A                (0269)    mov   X, A
0878: 5D 5A    MOV   A,REG[0x5A]        (0270)    mov   A, reg[PWM16_1_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
087A: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWM16_1_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWM16_1_wReadCounter:
                                        (0299) _PWM16_1_wReadCounter:
                                        (0300)  wPWM16_1_ReadCounter:                           ; this name deprecated
                                        (0301) _wPWM16_1_ReadCounter:                           ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
087B: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
087C: 5D 5E    MOV   A,REG[0x5E]        (0310)    mov   A, reg[PWM16_1_COMPARE_MSB_REG]         ; Save the Compare register on the stack
087E: 08       PUSH  A                  (0311)    push  A                                          ;
087F: 5D 5A    MOV   A,REG[0x5A]        (0312)    mov   A, reg[PWM16_1_COMPARE_LSB_REG]         ;
0881: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
0882: 41 5B FE AND   REG[0x5B],0xFE     
0885: 71 10    OR    F,0x10             
                                        (0314)    PWM16_1_Stop_M                                ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
0887: 5D 59    MOV   A,REG[0x59]        (0316)    mov   A, reg[PWM16_1_INPUT_LSB_REG]           ; save the LSB clock input setting
0889: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
088A: 62 59 00 MOV   REG[0x59],0x0      (0319)    mov   reg[PWM16_1_INPUT_LSB_REG], INPUT_REG_NULL
088D: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
088F: 5D 5C    MOV   A,REG[0x5C]        (0321)    mov   A, reg[PWM16_1_COUNTER_MSB_REG]         ; DR2 <- DR0 (in the MSB block)
0891: 5D 5E    MOV   A,REG[0x5E]        (0322)    mov   A, reg[PWM16_1_COMPARE_MSB_REG]         ; Stash the Count MSB on the stack
0893: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
0894: 5D 58    MOV   A,REG[0x58]        (0324)    mov   A, reg[PWM16_1_COUNTER_LSB_REG]         ; DR2 <- DR0 (in the LSB block)
0896: 5D 5A    MOV   A,REG[0x5A]        (0325)    mov   A, reg[PWM16_1_COMPARE_LSB_REG]         ; Stash the Count LSB on the stack
0898: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
0899: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
089B: 60 5E    MOV   REG[0x5E],A        (0328)    mov   reg[PWM16_1_COMPARE_MSB_REG], A         ;
089D: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
089F: 60 5A    MOV   REG[0x5A],A        (0330)    mov   reg[PWM16_1_COMPARE_LSB_REG], A         ;
08A1: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
08A3: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
08A5: 60 59    MOV   REG[0x59],A        (0333)    mov   reg[PWM16_1_INPUT_LSB_REG], A           ;    and restore it
08A7: 70 EF    AND   F,0xEF             
08A9: 43 5B 01 OR    REG[0x5B],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWM16_1_Start_M                               ; Now re-enable the PWM function
08AC: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
08AD: 20       POP   X                  (0337)    pop   X                                          ;
08AE: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
08B0: 70 3F    AND   F,0x3F             
08B2: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
08B4: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWM16_1.asm
FILE: lib\pga_3.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_3.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2013/5/19 at 10:43:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_3.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_3_Start
                                        (0060) export _PGA_3_Start
                                        (0061) export  PGA_3_SetPower
                                        (0062) export _PGA_3_SetPower
                                        (0063) 
                                        (0064) export  PGA_3_SetGain
                                        (0065) export _PGA_3_SetGain
                                        (0066) 
                                        (0067) export  PGA_3_Stop
                                        (0068) export _PGA_3_Stop
                                        (0069) 
                                        (0070) IF (PGA_3_AGNDBUFAPI)
                                        (0071) export  PGA_3_EnableAGNDBuffer
                                        (0072) export _PGA_3_EnableAGNDBuffer
                                        (0073) export  PGA_3_DisableAGNDBuffer
                                        (0074) export _PGA_3_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_3_Start
                                        (0092) ;  FUNCTION NAME: PGA_3_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_3_Start:
                                        (0111) _PGA_3_Start:
                                        (0112)  PGA_3_SetPower:
                                        (0113) _PGA_3_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
08B5: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
08B7: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
08B8: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
08B9: 5D 7B    MOV   A,REG[0x7B]        (0120)    mov  A, reg[PGA_3_GAIN_CR2]                             ; read power value
08BB: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
08BD: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
08BF: 60 7B    MOV   REG[0x7B],A        (0123)    mov  reg[PGA_3_GAIN_CR2], A                        ; move complete value back to register
08C1: 18       POP   A                  (0124)    pop  A
08C2: 70 3F    AND   F,0x3F             
08C4: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
08C6: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_3_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_3_SetGain:
                                        (0154) _PGA_3_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
08C7: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
08C9: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
08CA: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
08CB: 5D 79    MOV   A,REG[0x79]        (0161)    mov  A, reg[PGA_3_GAIN_CR0]                             ; read mux settings
08CD: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
08CF: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
08D2: B0 0E    JNZ   0x08E1             (0164)    jnz  .SETHIGHGAIN
08D4: 41 78 FE AND   REG[0x78],0xFE     (0165)    and  reg[PGA_3_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
08D7: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
08D9: 60 79    MOV   REG[0x79],A        (0167)    mov  reg[PGA_3_GAIN_CR0], A                             ; move complete value back to register
08DB: 18       POP   A                  (0168)    pop  A
08DC: 70 3F    AND   F,0x3F             
08DE: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
08E0: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
08E1: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
08E4: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
08E6: 60 79    MOV   REG[0x79],A        (0175)    mov  reg[PGA_3_GAIN_CR0], A                             ; move complete value back to register
08E8: 43 78 01 OR    REG[0x78],0x1      (0176)    or   reg[PGA_3_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
08EB: 18       POP   A                  (0177)    pop  A
08EC: 70 3F    AND   F,0x3F             
08EE: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
08F0: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_3_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_3_Stop:
                                        (0203) _PGA_3_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
08F1: 41 7B FC AND   REG[0x7B],0xFC     (0206)    and REG[PGA_3_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
08F4: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_3_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_3_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_3_EnableAGNDBuffer:
                                        (0233) _PGA_3_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_3_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_3_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_3_DisableAGNDBuffer:
                                        (0261) _PGA_3_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_3_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_3.asm
FILE: lib\pga_2.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_2.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2013/5/19 at 10:43:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_2.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_2_Start
                                        (0060) export _PGA_2_Start
                                        (0061) export  PGA_2_SetPower
                                        (0062) export _PGA_2_SetPower
                                        (0063) 
                                        (0064) export  PGA_2_SetGain
                                        (0065) export _PGA_2_SetGain
                                        (0066) 
                                        (0067) export  PGA_2_Stop
                                        (0068) export _PGA_2_Stop
                                        (0069) 
                                        (0070) IF (PGA_2_AGNDBUFAPI)
                                        (0071) export  PGA_2_EnableAGNDBuffer
                                        (0072) export _PGA_2_EnableAGNDBuffer
                                        (0073) export  PGA_2_DisableAGNDBuffer
                                        (0074) export _PGA_2_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_2_Start
                                        (0092) ;  FUNCTION NAME: PGA_2_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_2_Start:
                                        (0111) _PGA_2_Start:
                                        (0112)  PGA_2_SetPower:
                                        (0113) _PGA_2_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
08F5: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
08F7: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
08F8: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
08F9: 5D 77    MOV   A,REG[0x77]        (0120)    mov  A, reg[PGA_2_GAIN_CR2]                             ; read power value
08FB: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
08FD: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
08FF: 60 77    MOV   REG[0x77],A        (0123)    mov  reg[PGA_2_GAIN_CR2], A                        ; move complete value back to register
0901: 18       POP   A                  (0124)    pop  A
0902: 70 3F    AND   F,0x3F             
0904: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0906: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_2_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_2_SetGain:
                                        (0154) _PGA_2_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0907: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0909: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
090A: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
090B: 5D 75    MOV   A,REG[0x75]        (0161)    mov  A, reg[PGA_2_GAIN_CR0]                             ; read mux settings
090D: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
090F: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0912: B0 0E    JNZ   0x0921             (0164)    jnz  .SETHIGHGAIN
0914: 41 74 FE AND   REG[0x74],0xFE     (0165)    and  reg[PGA_2_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
0917: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0919: 60 75    MOV   REG[0x75],A        (0167)    mov  reg[PGA_2_GAIN_CR0], A                             ; move complete value back to register
091B: 18       POP   A                  (0168)    pop  A
091C: 70 3F    AND   F,0x3F             
091E: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0920: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0921: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
0924: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0926: 60 75    MOV   REG[0x75],A        (0175)    mov  reg[PGA_2_GAIN_CR0], A                             ; move complete value back to register
0928: 43 74 01 OR    REG[0x74],0x1      (0176)    or   reg[PGA_2_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
092B: 18       POP   A                  (0177)    pop  A
092C: 70 3F    AND   F,0x3F             
092E: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0930: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_2_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_2_Stop:
                                        (0203) _PGA_2_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0931: 41 77 FC AND   REG[0x77],0xFC     (0206)    and REG[PGA_2_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0934: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_2_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_2_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_2_EnableAGNDBuffer:
                                        (0233) _PGA_2_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_2_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_2_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_2_DisableAGNDBuffer:
                                        (0261) _PGA_2_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_2_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_2.asm
FILE: lib\pga_1.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_1.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2013/5/19 at 10:43:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_1.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_1_Start
                                        (0060) export _PGA_1_Start
                                        (0061) export  PGA_1_SetPower
                                        (0062) export _PGA_1_SetPower
                                        (0063) 
                                        (0064) export  PGA_1_SetGain
                                        (0065) export _PGA_1_SetGain
                                        (0066) 
                                        (0067) export  PGA_1_Stop
                                        (0068) export _PGA_1_Stop
                                        (0069) 
                                        (0070) IF (PGA_1_AGNDBUFAPI)
                                        (0071) export  PGA_1_EnableAGNDBuffer
                                        (0072) export _PGA_1_EnableAGNDBuffer
                                        (0073) export  PGA_1_DisableAGNDBuffer
                                        (0074) export _PGA_1_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_1_Start
                                        (0092) ;  FUNCTION NAME: PGA_1_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_1_Start:
                                        (0111) _PGA_1_Start:
                                        (0112)  PGA_1_SetPower:
                                        (0113) _PGA_1_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0935: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0937: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0938: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0939: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_1_GAIN_CR2]                             ; read power value
093B: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
093D: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
093F: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_1_GAIN_CR2], A                        ; move complete value back to register
0941: 18       POP   A                  (0124)    pop  A
0942: 70 3F    AND   F,0x3F             
0944: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0946: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_1_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_1_SetGain:
                                        (0154) _PGA_1_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0947: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0949: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
094A: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
094B: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_1_GAIN_CR0]                             ; read mux settings
094D: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
094F: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0952: B0 0E    JNZ   0x0961             (0164)    jnz  .SETHIGHGAIN
0954: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_1_GAIN_CR3],~EXGAIN                        ; Clear High Gain bit.
0957: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0959: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
095B: 18       POP   A                  (0168)    pop  A
095C: 70 3F    AND   F,0x3F             
095E: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0960: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0961: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
0964: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0966: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_1_GAIN_CR0], A                             ; move complete value back to register
0968: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_1_GAIN_CR3], EXGAIN                        ; Set High Gain bit.
096B: 18       POP   A                  (0177)    pop  A
096C: 70 3F    AND   F,0x3F             
096E: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0970: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_1_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_1_Stop:
                                        (0203) _PGA_1_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0971: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_1_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0974: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_1_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_1_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_1_EnableAGNDBuffer:
                                        (0233) _PGA_1_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_1_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_1_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_1_DisableAGNDBuffer:
                                        (0261) _PGA_1_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_1_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_1.asm
FILE: C:\Users\MATSUD~1\DOCUME~1\PSOCDE~1.4PR\ira2kai\ira2kai\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) 
(0009) void main(void)
(0010) {
__UserModules_end|__text_start|_main|_main:
  z_result             --> X+2
  y_result             --> X+1
  x_result             --> X+0
    0975: 10       PUSH  X
    0976: 4F       MOV   X,SP
    0977: 38 03    ADD   SP,0x3
(0011) 	unsigned char x_result,y_result,z_result;
(0012) 	M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
    0979: 71 01    OR    F,0x1
(0013) 	// Insert your main routine code here.
(0014) 	PWM8_1_Start();
    097B: 10       PUSH  X
    097C: 7C 08 1A LCALL _PWM8_1_Start
(0015) 	PWM8_2_Start();
    097F: 7C 07 D3 LCALL _PWM8_2_Start
(0016) 	PWM8_3_Start();
    0982: 7C 07 8C LCALL _PWM8_3_Start
(0017) 	PWM8_4_Start();
    0985: 7C 07 45 LCALL _PWM8_4_Start
(0018) 	PWM8_5_Start();
    0988: 7C 06 FE LCALL _PWM8_5_Start
(0019) 	PWM8_6_Start();
    098B: 7C 06 B7 LCALL _PWM8_6_Start
(0020) 	PWM16_1_Start();
    098E: 7C 08 61 LCALL _PWM16_1_Start
(0021) 	TRIADC_1_Start(3);
    0991: 50 03    MOV   A,0x3
    0993: 7C 05 70 LCALL _TRIADC_1_Start|_TRIADC_1_SetPower|TRIADC_1_SetPower
(0022) 	TRIADC_1_GetSamples(0);
    0996: 50 00    MOV   A,0x0
    0998: 7C 05 AE LCALL _TRIADC_1_GetSamples
(0023) 	PGA_1_Start(3);
    099B: 50 03    MOV   A,0x3
    099D: 7C 09 35 LCALL _PGA_1_SetPower|_PGA_1_Start|PGA_1_Start
(0024) 	PGA_2_Start(3);
    09A0: 50 03    MOV   A,0x3
    09A2: 7C 08 F5 LCALL _PGA_2_Start|_PGA_2_SetPower|PGA_2_Start|PGA_2_SetPower
(0025) 	PGA_3_Start(3);
    09A5: 50 03    MOV   A,0x3
    09A7: 7C 08 B5 LCALL _PGA_3_SetPower|_PGA_3_Start|PGA_3_SetPower|PGA_3_Start
    09AA: 20       POP   X
    09AB: 81 D1    JMP   0x0B7D
(0026) 	
(0027) /*	while (1){
(0028) 		PWM8_1_WritePulseWidth(255);
(0029) 		PWM8_2_WritePulseWidth(255);
(0030) 		PWM8_3_WritePulseWidth(255);
(0031) 		PWM8_4_WritePulseWidth(255);
(0032) 		PWM8_5_WritePulseWidth(255);
(0033) 		PWM8_6_WritePulseWidth(255);
(0034) 	
(0035) 	}*/	
(0036) 	while (1){
(0037) 		
(0038) 		while(TRIADC_1_fIsDataAvailable() == 0);	///AD変換待ち
    09AD: 10       PUSH  X
    09AE: 7C 06 33 LCALL _TRIADC_1_fIsData|_TRIADC_1_fIsDataAvailable|TRIADC_1_fIsDataAvailable|TRIADC_1_fIsData
    09B1: 20       POP   X
    09B2: 62 D0 00 MOV   REG[0xD0],0x0
    09B5: 39 00    CMP   A,0x0
    09B7: AF F5    JZ    0x09AD
(0039) 		
(0040) 		x_result = TRIADC_1_iGetData1();			///x,y,zの値を取得
    09B9: 10       PUSH  X
    09BA: 7C 06 46 LCALL _TRIADC_1_iGetData1
    09BD: 62 D0 00 MOV   REG[0xD0],0x0
    09C0: 20       POP   X
    09C1: 54 00    MOV   [X+0],A
(0041) 		y_result = TRIADC_1_iGetData2();			
    09C3: 10       PUSH  X
    09C4: 7C 06 59 LCALL _TRIADC_1_iGetData2
    09C7: 62 D0 00 MOV   REG[0xD0],0x0
    09CA: 20       POP   X
    09CB: 54 01    MOV   [X+1],A
(0042) 		z_result = TRIADC_1_iGetData3ClearFlag();	
    09CD: 10       PUSH  X
    09CE: 7C 06 61 LCALL _TRIADC_1_iGetData3ClearFlag
    09D1: 62 D0 00 MOV   REG[0xD0],0x0
    09D4: 20       POP   X
    09D5: 54 02    MOV   [X+2],A
(0043) 		
(0044) 		/////x軸のプログラム//////////////////////////////////
(0045) 		
(0046) 		/////x軸の正の方向かつリミットスイッチ１反応なし///////////
(0047) 		if ((x_result > 150) && (!(PRT1DR & (1 << 1)))){
    09D7: 50 96    MOV   A,0x96
    09D9: 3B 00    CMP   A,[X+0]
    09DB: D0 19    JNC   0x09F5
    09DD: 5D 04    MOV   A,REG[0x4]
    09DF: 62 D0 00 MOV   REG[0xD0],0x0
    09E2: 53 0C    MOV   [__r0],A
    09E4: 47 0C 02 TST   [__r0],0x2
    09E7: B0 0D    JNZ   0x09F5
(0048) 				
(0049) 			PWM8_2_WritePulseWidth(x_result);
    09E9: 10       PUSH  X
    09EA: 52 00    MOV   A,[X+0]
    09EC: 7C 07 DE LCALL _PWM8_2_WritePulseWidth
(0050) 			PWM8_1_WritePulseWidth(0);
    09EF: 50 00    MOV   A,0x0
    09F1: 7C 08 25 LCALL _PWM8_1_WritePulseWidth
    09F4: 20       POP   X
(0051) 
(0052) 		}
(0053) 		/////x軸の負の方向かつリミットスイッチ２反応なし////////////
(0054) 		if ((x_result < 100) && (!(PRT1DR & (1 << 2)))){
    09F5: 3D 00 64 CMP   [X+0],0x64
    09F8: D0 20    JNC   0x0A19
    09FA: 5D 04    MOV   A,REG[0x4]
    09FC: 62 D0 00 MOV   REG[0xD0],0x0
    09FF: 53 0C    MOV   [__r0],A
    0A01: 47 0C 04 TST   [__r0],0x4
    0A04: B0 14    JNZ   0x0A19
(0055) 				
(0056) 			PWM8_2_WritePulseWidth(0);
    0A06: 10       PUSH  X
    0A07: 50 00    MOV   A,0x0
    0A09: 7C 07 DE LCALL _PWM8_2_WritePulseWidth
    0A0C: 20       POP   X
(0057) 			PWM8_1_WritePulseWidth(255-x_result);
    0A0D: 62 D0 00 MOV   REG[0xD0],0x0
    0A10: 50 FF    MOV   A,0xFF
    0A12: 13 00    SUB   A,[X+0]
    0A14: 10       PUSH  X
    0A15: 7C 08 25 LCALL _PWM8_1_WritePulseWidth
    0A18: 20       POP   X
(0058) 			
(0059) 		}
(0060) 		/////x軸の中央またはリミットスイッチ１反応あり///////////////		
(0061) 		if (((x_result >= 100) && (x_result <= 150)) || (PRT1DR & (1 << 1))){
    0A19: 3D 00 64 CMP   [X+0],0x64
    0A1C: C0 07    JC    0x0A24
    0A1E: 50 96    MOV   A,0x96
    0A20: 3B 00    CMP   A,[X+0]
    0A22: D0 0D    JNC   0x0A30
    0A24: 5D 04    MOV   A,REG[0x4]
    0A26: 62 D0 00 MOV   REG[0xD0],0x0
    0A29: 53 0C    MOV   [__r0],A
    0A2B: 47 0C 02 TST   [__r0],0x2
    0A2E: A0 08    JZ    0x0A37
(0062) 			
(0063) 			PWM8_2_WritePulseWidth(0);
    0A30: 10       PUSH  X
    0A31: 50 00    MOV   A,0x0
    0A33: 7C 07 DE LCALL _PWM8_2_WritePulseWidth
    0A36: 20       POP   X
(0064) 			
(0065) 		}
(0066) 		/////x軸の中央またはリミットスイッチ２反応あり////////////////
(0067) 		if (((x_result >= 100) && (x_result <= 150)) || (PRT1DR & (1 << 2))){
    0A37: 3D 00 64 CMP   [X+0],0x64
    0A3A: C0 07    JC    0x0A42
    0A3C: 50 96    MOV   A,0x96
    0A3E: 3B 00    CMP   A,[X+0]
    0A40: D0 0D    JNC   0x0A4E
    0A42: 5D 04    MOV   A,REG[0x4]
    0A44: 62 D0 00 MOV   REG[0xD0],0x0
    0A47: 53 0C    MOV   [__r0],A
    0A49: 47 0C 04 TST   [__r0],0x4
    0A4C: A0 08    JZ    0x0A55
(0068) 			
(0069) 			PWM8_1_WritePulseWidth(0);
    0A4E: 10       PUSH  X
    0A4F: 50 00    MOV   A,0x0
    0A51: 7C 08 25 LCALL _PWM8_1_WritePulseWidth
    0A54: 20       POP   X
(0070) 			
(0071) 		}
(0072) 		
(0073) 		/////y軸のプログラム/////////////////////////////////
(0074) 		
(0075) 		/////y軸の正の方向かつリミットスイッチ３反応なし///////////
(0076) 		if ((y_result > 150) && (!(PRT1DR & (1 << 3)))){
    0A55: 50 96    MOV   A,0x96
    0A57: 3B 01    CMP   A,[X+1]
    0A59: D0 19    JNC   0x0A73
    0A5B: 5D 04    MOV   A,REG[0x4]
    0A5D: 62 D0 00 MOV   REG[0xD0],0x0
    0A60: 53 0C    MOV   [__r0],A
    0A62: 47 0C 08 TST   [__r0],0x8
    0A65: B0 0D    JNZ   0x0A73
(0077) 				
(0078) 			PWM8_3_WritePulseWidth(y_result);
    0A67: 10       PUSH  X
    0A68: 52 01    MOV   A,[X+1]
    0A6A: 7C 07 97 LCALL _PWM8_3_WritePulseWidth
(0079) 			PWM8_4_WritePulseWidth(0);
    0A6D: 50 00    MOV   A,0x0
    0A6F: 7C 07 50 LCALL _PWM8_4_WritePulseWidth
    0A72: 20       POP   X
(0080) 
(0081) 		}
(0082) 		
(0083) 		/////y軸の正の方向かつリミットスイッチ４反応なし///////////
(0084) 		if ((y_result < 100) && (!(PRT1DR & (1 << 4)))){
    0A73: 3D 01 64 CMP   [X+1],0x64
    0A76: D0 20    JNC   0x0A97
    0A78: 5D 04    MOV   A,REG[0x4]
    0A7A: 62 D0 00 MOV   REG[0xD0],0x0
    0A7D: 53 0C    MOV   [__r0],A
    0A7F: 47 0C 10 TST   [__r0],0x10
    0A82: B0 14    JNZ   0x0A97
(0085) 				
(0086) 			PWM8_3_WritePulseWidth(0);
    0A84: 10       PUSH  X
    0A85: 50 00    MOV   A,0x0
    0A87: 7C 07 97 LCALL _PWM8_3_WritePulseWidth
    0A8A: 20       POP   X
(0087) 			PWM8_4_WritePulseWidth(255-y_result);
    0A8B: 62 D0 00 MOV   REG[0xD0],0x0
    0A8E: 50 FF    MOV   A,0xFF
    0A90: 13 01    SUB   A,[X+1]
    0A92: 10       PUSH  X
    0A93: 7C 07 50 LCALL _PWM8_4_WritePulseWidth
    0A96: 20       POP   X
(0088) 			
(0089) 		}
(0090) 		
(0091) 		/////y軸の中央またはリミットスイッチ３反応あり///////////////
(0092) 		if (((y_result >= 100) && (y_result <= 150)) || (PRT1DR & (1 << 3))){
    0A97: 3D 01 64 CMP   [X+1],0x64
    0A9A: C0 07    JC    0x0AA2
    0A9C: 50 96    MOV   A,0x96
    0A9E: 3B 01    CMP   A,[X+1]
    0AA0: D0 0D    JNC   0x0AAE
    0AA2: 5D 04    MOV   A,REG[0x4]
    0AA4: 62 D0 00 MOV   REG[0xD0],0x0
    0AA7: 53 0C    MOV   [__r0],A
    0AA9: 47 0C 08 TST   [__r0],0x8
    0AAC: A0 08    JZ    0x0AB5
(0093) 			
(0094) 			PWM8_3_WritePulseWidth(0);
    0AAE: 10       PUSH  X
    0AAF: 50 00    MOV   A,0x0
    0AB1: 7C 07 97 LCALL _PWM8_3_WritePulseWidth
    0AB4: 20       POP   X
(0095) 			
(0096) 		}
(0097) 		
(0098) 		/////y軸の中央またはリミットスイッチ4反応あり///////////////
(0099) 		
(0100) 		if (((y_result >= 100) && (y_result <= 150)) || (PRT1DR & (1 << 4))){
    0AB5: 3D 01 64 CMP   [X+1],0x64
    0AB8: C0 07    JC    0x0AC0
    0ABA: 50 96    MOV   A,0x96
    0ABC: 3B 01    CMP   A,[X+1]
    0ABE: D0 0D    JNC   0x0ACC
    0AC0: 5D 04    MOV   A,REG[0x4]
    0AC2: 62 D0 00 MOV   REG[0xD0],0x0
    0AC5: 53 0C    MOV   [__r0],A
    0AC7: 47 0C 10 TST   [__r0],0x10
    0ACA: A0 08    JZ    0x0AD3
(0101) 			
(0102) 			PWM8_4_WritePulseWidth(0);
    0ACC: 10       PUSH  X
    0ACD: 50 00    MOV   A,0x0
    0ACF: 7C 07 50 LCALL _PWM8_4_WritePulseWidth
    0AD2: 20       POP   X
(0103) 			
(0104) 		}
(0105) 		
(0106) 		/////z軸のプログラム////////////////////////////////
(0107) 		
(0108) 		/////z軸の正の方向かつリミットスイッチ５反応なし//////////
(0109) 		if ((z_result > 150) && (!(PRT1DR & (1 << 5)))){
    0AD3: 50 96    MOV   A,0x96
    0AD5: 3B 02    CMP   A,[X+2]
    0AD7: D0 19    JNC   0x0AF1
    0AD9: 5D 04    MOV   A,REG[0x4]
    0ADB: 62 D0 00 MOV   REG[0xD0],0x0
    0ADE: 53 0C    MOV   [__r0],A
    0AE0: 47 0C 20 TST   [__r0],0x20
    0AE3: B0 0D    JNZ   0x0AF1
(0110) 				
(0111) 			PWM8_5_WritePulseWidth(z_result);
    0AE5: 10       PUSH  X
    0AE6: 52 02    MOV   A,[X+2]
    0AE8: 7C 07 09 LCALL _PWM8_5_WritePulseWidth
(0112) 			PWM8_6_WritePulseWidth(0);
    0AEB: 50 00    MOV   A,0x0
    0AED: 7C 06 C2 LCALL _PWM8_6_WritePulseWidth
    0AF0: 20       POP   X
(0113) 
(0114) 		}
(0115) 		
(0116) 		/////z軸の負の方向かつリミットスイッチ６反応なし////////
(0117) 		if ((z_result < 100) && (!(PRT1DR & (1 << 4)))){
    0AF1: 3D 02 64 CMP   [X+2],0x64
    0AF4: D0 20    JNC   0x0B15
    0AF6: 5D 04    MOV   A,REG[0x4]
    0AF8: 62 D0 00 MOV   REG[0xD0],0x0
    0AFB: 53 0C    MOV   [__r0],A
    0AFD: 47 0C 10 TST   [__r0],0x10
    0B00: B0 14    JNZ   0x0B15
(0118) 				
(0119) 			PWM8_5_WritePulseWidth(0);
    0B02: 10       PUSH  X
    0B03: 50 00    MOV   A,0x0
    0B05: 7C 07 09 LCALL _PWM8_5_WritePulseWidth
    0B08: 20       POP   X
(0120) 			PWM8_6_WritePulseWidth(255-z_result);
    0B09: 62 D0 00 MOV   REG[0xD0],0x0
    0B0C: 50 FF    MOV   A,0xFF
    0B0E: 13 02    SUB   A,[X+2]
    0B10: 10       PUSH  X
    0B11: 7C 06 C2 LCALL _PWM8_6_WritePulseWidth
    0B14: 20       POP   X
(0121) 			
(0122) 		}
(0123) 		
(0124) 		/////z軸の中央またはリミットスイッチ５反応あり///////////
(0125) 		if (((z_result >= 100) && (z_result <= 150)) || (PRT1DR & (1 << 5))){
    0B15: 3D 02 64 CMP   [X+2],0x64
    0B18: C0 07    JC    0x0B20
    0B1A: 50 96    MOV   A,0x96
    0B1C: 3B 02    CMP   A,[X+2]
    0B1E: D0 0D    JNC   0x0B2C
    0B20: 5D 04    MOV   A,REG[0x4]
    0B22: 62 D0 00 MOV   REG[0xD0],0x0
    0B25: 53 0C    MOV   [__r0],A
    0B27: 47 0C 20 TST   [__r0],0x20
    0B2A: A0 08    JZ    0x0B33
(0126) 			
(0127) 			PWM8_5_WritePulseWidth(0);
    0B2C: 10       PUSH  X
    0B2D: 50 00    MOV   A,0x0
    0B2F: 7C 07 09 LCALL _PWM8_5_WritePulseWidth
    0B32: 20       POP   X
(0128) 			
(0129) 		}
(0130) 		
(0131) 		/////z軸の中央またはリミットスイッチ６反応あり///////////
(0132) 		if (((z_result >= 100) && (z_result <= 150)) || (PRT1DR & (1 << 6))){
    0B33: 3D 02 64 CMP   [X+2],0x64
    0B36: C0 07    JC    0x0B3E
    0B38: 50 96    MOV   A,0x96
    0B3A: 3B 02    CMP   A,[X+2]
    0B3C: D0 0D    JNC   0x0B4A
    0B3E: 5D 04    MOV   A,REG[0x4]
    0B40: 62 D0 00 MOV   REG[0xD0],0x0
    0B43: 53 0C    MOV   [__r0],A
    0B45: 47 0C 40 TST   [__r0],0x40
    0B48: A0 08    JZ    0x0B51
(0133) 			
(0134) 			PWM8_6_WritePulseWidth(0);
    0B4A: 10       PUSH  X
    0B4B: 50 00    MOV   A,0x0
    0B4D: 7C 06 C2 LCALL _PWM8_6_WritePulseWidth
    0B50: 20       POP   X
(0135) 			
(0136) 		}
(0137) 		
(0138) 		if (PRT1DR & (1 << 7)){
    0B51: 5D 04    MOV   A,REG[0x4]
    0B53: 62 D0 00 MOV   REG[0xD0],0x0
    0B56: 53 0C    MOV   [__r0],A
    0B58: 47 0C 80 TST   [__r0],0x80
    0B5B: A0 0C    JZ    0x0B68
(0139) 			
(0140) 			PWM16_1_WritePulseWidth(1200);
    0B5D: 10       PUSH  X
    0B5E: 57 04    MOV   X,0x4
    0B60: 50 B0    MOV   A,0xB0
    0B62: 7C 08 6F LCALL _PWM16_1_WritePulseWidth
    0B65: 20       POP   X
(0141) 			
(0142) 		}
    0B66: 80 16    JMP   0x0B7D
(0143) 		
(0144) 		else  if (!(PRT1DR & (1 << 7))){
    0B68: 5D 04    MOV   A,REG[0x4]
    0B6A: 62 D0 00 MOV   REG[0xD0],0x0
    0B6D: 53 0C    MOV   [__r0],A
    0B6F: 47 0C 80 TST   [__r0],0x80
    0B72: B0 0A    JNZ   0x0B7D
(0145) 			
(0146) 			PWM16_1_WritePulseWidth(1800);
    0B74: 10       PUSH  X
    0B75: 57 07    MOV   X,0x7
    0B77: 50 08    MOV   A,0x8
    0B79: 7C 08 6F LCALL _PWM16_1_WritePulseWidth
    0B7C: 20       POP   X
(0147) 			
(0148) 		}
(0149) 	}
    0B7D: 8E 2F    JMP   0x09AD
(0150) }
    0B7F: 38 FD    ADD   SP,0xFD
    0B81: 20       POP   X
    0B82: 8F FF    JMP   0x0B82
