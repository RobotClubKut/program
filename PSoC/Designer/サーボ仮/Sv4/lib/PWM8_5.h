//*****************************************************************************
//*****************************************************************************
//  FILENAME: PWM8_5.h
//   Version: 2.60, Updated on 2013/5/19 at 10:44:7
//  Generated by PSoC Designer 5.4.2946
//
//  DESCRIPTION: PWM8 User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef PWM8_5_INCLUDE
#define PWM8_5_INCLUDE

#include <m8c.h>

#pragma fastcall16 PWM8_5_EnableInt
#pragma fastcall16 PWM8_5_DisableInt
#pragma fastcall16 PWM8_5_Start
#pragma fastcall16 PWM8_5_Stop
#pragma fastcall16 PWM8_5_bReadCounter              // Read  DR0
#pragma fastcall16 PWM8_5_WritePeriod               // Write DR1
#pragma fastcall16 PWM8_5_bReadPulseWidth           // Read  DR2
#pragma fastcall16 PWM8_5_WritePulseWidth           // Write DR2

// The following symbols are deprecated.
// They may be omitted in future releases
//
#pragma fastcall16 bPWM8_5_ReadCounter              // Read  DR0 (Deprecated)
#pragma fastcall16 bPWM8_5_ReadPulseWidth           // Read  DR2 (Deprecated)


//-------------------------------------------------
// Prototypes of the PWM8_5 API.
//-------------------------------------------------

extern void PWM8_5_EnableInt(void);                        // Proxy Class 1
extern void PWM8_5_DisableInt(void);                       // Proxy Class 1
extern void PWM8_5_Start(void);                            // Proxy Class 1
extern void PWM8_5_Stop(void);                             // Proxy Class 1
extern BYTE PWM8_5_bReadCounter(void);                     // Proxy Class 2
extern void PWM8_5_WritePeriod(BYTE bPeriod);              // Proxy Class 1
extern BYTE PWM8_5_bReadPulseWidth(void);                  // Proxy Class 1
extern void PWM8_5_WritePulseWidth(BYTE bPulseWidth);      // Proxy Class 1

// The following functions are deprecated.
// They may be omitted in future releases
//
extern BYTE bPWM8_5_ReadCounter(void);            // Deprecated
extern BYTE bPWM8_5_ReadPulseWidth(void);         // Deprecated


//--------------------------------------------------
// Constants for PWM8_5 API's.
//--------------------------------------------------

#define PWM8_5_CONTROL_REG_START_BIT           ( 0x01 )
#define PWM8_5_INT_REG_ADDR                    ( 0x0e1 )
#define PWM8_5_INT_MASK                        ( 0x10 )


//--------------------------------------------------
// Constants for PWM8_5 user defined values
//--------------------------------------------------

#define PWM8_5_PERIOD                          ( 0xff )
#define PWM8_5_PULSE_WIDTH                     ( 0x00 )


//-------------------------------------------------
// Register Addresses for PWM8_5
//-------------------------------------------------

#pragma ioport  PWM8_5_COUNTER_REG: 0x030                  //DR0 Count register
BYTE            PWM8_5_COUNTER_REG;
#pragma ioport  PWM8_5_PERIOD_REG:  0x031                  //DR1 Period register
BYTE            PWM8_5_PERIOD_REG;
#pragma ioport  PWM8_5_COMPARE_REG: 0x032                  //DR2 Compare register
BYTE            PWM8_5_COMPARE_REG;
#pragma ioport  PWM8_5_CONTROL_REG: 0x033                  //Control register
BYTE            PWM8_5_CONTROL_REG;
#pragma ioport  PWM8_5_FUNC_REG:    0x130                  //Function register
BYTE            PWM8_5_FUNC_REG;
#pragma ioport  PWM8_5_INPUT_REG:   0x131                  //Input register
BYTE            PWM8_5_INPUT_REG;
#pragma ioport  PWM8_5_OUTPUT_REG:  0x132                  //Output register
BYTE            PWM8_5_OUTPUT_REG;
#pragma ioport  PWM8_5_INT_REG:       0x0e1                //Interrupt Mask Register
BYTE            PWM8_5_INT_REG;


//-------------------------------------------------
// PWM8_5 Macro 'Functions'
//-------------------------------------------------

#define PWM8_5_Start_M \
   PWM8_5_CONTROL_REG |=  PWM8_5_CONTROL_REG_START_BIT

#define PWM8_5_Stop_M  \
   PWM8_5_CONTROL_REG &= ~PWM8_5_CONTROL_REG_START_BIT

#define PWM8_5_EnableInt_M   \
   M8C_EnableIntMask(PWM8_5_INT_REG, PWM8_5_INT_MASK)

#define PWM8_5_DisableInt_M  \
   M8C_DisableIntMask(PWM8_5_INT_REG, PWM8_5_INT_MASK)

#endif
// end of file PWM8_5.h
